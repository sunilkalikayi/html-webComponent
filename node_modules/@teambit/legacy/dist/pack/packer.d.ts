import { IBitLogger } from '../logger/logger';
export declare type PackResultMetadata = {
    pkgJson: Record<any, string>;
    tarPath: string;
    tarName: string;
    checksum?: string;
};
export declare type PackWriteOptions = {
    outDir?: string;
    override?: boolean;
};
export declare type PackOptions = {
    writeOptions: PackWriteOptions;
    prefix?: boolean;
    keep?: boolean;
    loadScopeFromCache?: boolean;
    dryRun?: boolean;
};
export declare type PackResult = {
    /**
     * metadata generated during component build.
     */
    metadata?: PackResultMetadata;
    /**
     * returning errors from build tasks will cause a pipeline failure and logs all returned errors.
     */
    errors?: Array<Error | string>;
    /**
     * warnings generated throughout the build task.
     */
    warnings?: string[];
    /**
     * timestamp in milliseconds when the task started
     */
    startTime?: number;
    /**
     * timestamp in milliseconds when the task ended
     */
    endTime?: number;
};
export declare class Packer {
    private logger;
    constructor(logger?: IBitLogger);
    npmPack(cwd: string, outputPath: string, override?: boolean, dryRun?: boolean, logger?: IBitLogger): Promise<PackResult>;
}
