"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.regexp.constructor.js");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.string.replace.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.replacePlaceHolderForPackageValue = replacePlaceHolderForPackageValue;
function _path() {
  const data = _interopRequireDefault(require("path"));
  _path = function () {
    return data;
  };
  return data;
}
function _stringFormat() {
  const data = _interopRequireDefault(require("string-format"));
  _stringFormat = function () {
    return data;
  };
  return data;
}
/**
 * search for placeholders, such as {main}, {name} in a template and replace them with the values
 * from the component with some manipulations
 */
function replacePlaceHolderForPackageValue({
  mainFile,
  name,
  scope,
  scopeId,
  owner
}, template) {
  if (typeof template !== 'string') return template;
  const values = {
    main: () => mainFile ? getMainFileWithoutExtension(mainFile) : mainFile,
    name: () => replaceSlashesWithDots(name),
    scope: () => scope,
    scopeId: () => scopeId,
    owner: () => owner
  };
  const res = (0, _stringFormat().default)(template, values);
  return res;
}
function getMainFileWithoutExtension(mainFile) {
  return mainFile.replace(new RegExp(`${_path().default.extname(mainFile)}$`), ''); // makes sure it's the last occurrence
}

function replaceSlashesWithDots(name) {
  const allSlashes = new RegExp('/', 'g');
  return name.replace(allSlashes, '.');
}