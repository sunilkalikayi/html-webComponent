"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.string.replace.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.composeComponentPath = composeComponentPath;
exports.composeDependencyPath = composeDependencyPath;
function path() {
  const data = _interopRequireWildcard(require("path"));
  path = function () {
    return data;
  };
  return data;
}
function _stringFormat() {
  const data = _interopRequireDefault(require("string-format"));
  _stringFormat = function () {
    return data;
  };
  return data;
}
function _constants() {
  const data = require("../../constants");
  _constants = function () {
    return data;
  };
  return data;
}
function _parseScope() {
  const data = require("./parse-scope");
  _parseScope = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * the following place-holders are permitted:
 * name - component name includes namespace, e.g. 'ui/button'.
 * scopeId - full scope-id includes the owner, e.g. 'teambit.compilation'.
 * scope - scope name only, e.g. 'compilation'.
 * owner - owner name in bit.dev, e.g. 'teambit'.
 */
function composeComponentPath(bitId, componentsDefaultDirectory = _constants().DEFAULT_COMPONENTS_DIR_PATH) {
  let defaultDir = componentsDefaultDirectory;
  const {
    scope,
    owner
  } = (0, _parseScope().parseScope)(bitId.scope);
  // Prevent case where for example {scope}/{name} becomes /my-comp (in case the scope is empty)
  if (componentsDefaultDirectory.includes('{scope}/') && !bitId.scope) {
    defaultDir = componentsDefaultDirectory.replace('{scope}/', '');
  }
  if (componentsDefaultDirectory.includes('{scopeId}/') && !bitId.scope) {
    defaultDir = componentsDefaultDirectory.replace('{scopeId}/', '');
  }
  if (componentsDefaultDirectory.includes('{owner}.') && !owner) {
    defaultDir = componentsDefaultDirectory.replace('{owner}.', '');
  }
  const result = (0, _stringFormat().default)(defaultDir, {
    name: bitId.name,
    scope,
    owner,
    scopeId: bitId.scope
  });
  return result;
}
function composeDependencyPath(bitId, dependenciesDir = _constants().DEFAULT_DEPENDENCIES_DIR_PATH) {
  return path().join(dependenciesDir, bitId.toFullPath());
}