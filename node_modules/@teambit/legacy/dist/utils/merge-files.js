"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = mergeFiles;
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
function _execa() {
  const data = _interopRequireDefault(require("execa"));
  _execa = function () {
    return data;
  };
  return data;
}
function _logger() {
  const data = _interopRequireDefault(require("../logger/logger"));
  _logger = function () {
    return data;
  };
  return data;
}
function _gitNotFound() {
  const data = _interopRequireDefault(require("./git/exceptions/git-not-found"));
  _gitNotFound = function () {
    return data;
  };
  return data;
}
function _gitExecutable() {
  const data = _interopRequireDefault(require("./git/git-executable"));
  _gitExecutable = function () {
    return data;
  };
  return data;
}
/**
 * use git `merge-file` command. From the command help:
 * `git merge-file <current-file> <base-file> <other-file>
 * git merge-file incorporates all changes that lead from the <base-file> to <other-file> into
 * <current-file>. The result ordinarily goes into <current-file>.`
 *
 * Here, we are not going to write the result into current-file. Instead, we'll use the "-p" flag,
 * to just return the results.
 */
async function mergeFiles({
  filePath,
  currentFile,
  baseFile,
  otherFile
}) {
  const mergeResult = {
    filePath,
    output: null,
    conflict: null
  };
  const gitExecutablePath = (0, _gitExecutable().default)();
  try {
    const result = await (0, _execa().default)('git', ['merge-file', '-L', currentFile.label, '-L', 'Base File', '-L', otherFile.label, currentFile.path, baseFile.path, otherFile.path, '-p'], {
      stripFinalNewline: false
    });
    mergeResult.output = result.stdout;
    return mergeResult;
  } catch (err) {
    if (err.exitCode && Number.isInteger(err.exitCode) && err.stdout) {
      // merge has been succeeded, return the diff results.
      mergeResult.conflict = err.stdout;
      return mergeResult;
    }
    if (err.exitCode && err.exitCode === 255 && err.stderr && err.stderr.includes('Cannot merge binary files')) {
      mergeResult.isBinaryConflict = true;
      return mergeResult;
    }
    if (err.exitCodeName === 'ENOENT') {
      _logger().default.error(`failed running Git at ${gitExecutablePath}. full command: ${err.command}`);
      throw new (_gitNotFound().default)(gitExecutablePath, err);
    }
    throw new Error(`failed merging "${filePath}" by Git.

${_chalk().default.bold('command:')} ${err.command}
${_chalk().default.bold('message:')} ${err.message}
${_chalk().default.bold('original error:')} ${err.stderr}`);
    throw err;
  }
}