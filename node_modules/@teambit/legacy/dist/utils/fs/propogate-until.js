"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pathHas = pathHas;
exports.pathHasAll = pathHasAll;
exports.propogateUntil = propogateUntil;
function _findUp() {
  const data = _interopRequireDefault(require("find-up"));
  _findUp = function () {
    return data;
  };
  return data;
}
function fs() {
  const data = _interopRequireWildcard(require("fs-extra"));
  fs = function () {
    return data;
  };
  return data;
}
function path() {
  const data = _interopRequireWildcard(require("path"));
  path = function () {
    return data;
  };
  return data;
}
function _constants() {
  const data = require("../../constants");
  _constants = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function composePath(patternPath, patterns) {
  return patterns.map(pattern => {
    return path().join(patternPath, pattern);
  });
}

/**
 * determine whether given path matches patterns
 */
function pathHas(patterns) {
  return absPath => {
    let state = false;
    const paths = composePath(absPath, patterns);
    for (const potentialPath of paths) {
      if (state) return state;
      state = fs().existsSync(potentialPath);
    }
    return state;
  };
}

/**
 * determine whether given path have all files/dirs
 */
function pathHasAll(patterns) {
  return absPath => {
    let state = true;
    const paths = composePath(absPath, patterns);
    for (const potentialPath of paths) {
      if (!state) return false;
      state = fs().existsSync(potentialPath);
    }
    return state;
  };
}

/**
 * propogates the FS from given path and until passing pattern function test.
 * @name propogateUntil
 * @param {string} fromPath
 * @param {(path: string) => boolean} pattern
 * @returns {string|null} first path to pass the test.
 * @example
 * ```js
 *  propogateUntil('/usr/local/var', (path) => path.includes('/usr'));
 *  // => '/usr/local/var'
 * ```
 */
function propogateUntil(fromPath) {
  if (!fromPath) return undefined;
  if (!fs().existsSync(fromPath)) return undefined;
  const filePath = _findUp().default.sync([_constants().OBJECTS_DIR, path().join(_constants().BIT_HIDDEN_DIR, _constants().OBJECTS_DIR), path().join(_constants().DOT_GIT_DIR, _constants().BIT_GIT_DIR, _constants().OBJECTS_DIR)], {
    cwd: fromPath,
    type: 'directory'
  });
  if (!filePath) return undefined;
  if (filePath.endsWith(path().join('.git', 'objects'))) {
    return undefined; // happens when "objects" dir is deleted from the scope
  }

  return path().dirname(filePath);
}