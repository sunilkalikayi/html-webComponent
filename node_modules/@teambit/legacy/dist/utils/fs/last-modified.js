"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLastModifiedComponentTimestampMs = getLastModifiedComponentTimestampMs;
exports.getLastModifiedDirTimestampMs = getLastModifiedDirTimestampMs;
exports.getLastModifiedPathsTimestampMs = getLastModifiedPathsTimestampMs;
function _globby() {
  const data = _interopRequireDefault(require("globby"));
  _globby = function () {
    return data;
  };
  return data;
}
function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));
  _fsExtra = function () {
    return data;
  };
  return data;
}
function _lodash() {
  const data = require("lodash");
  _lodash = function () {
    return data;
  };
  return data;
}
/**
 * check recursively all the sub-directories as well
 */
async function getLastModifiedDirTimestampMs(rootDir) {
  const allDirs = await (0, _globby().default)(rootDir, {
    onlyDirectories: true
    // ignore: ['**/node_modules/**'], // need to think about it more. sometimes we do want to invalidate cache upon node_modules changes inside component dir
    // stats: true // todo: consider retrieving the stats from here.
  });

  allDirs.push(rootDir);
  return getLastModifiedPathsTimestampMs(allDirs);
}
async function getLastModifiedPathsTimestampMs(paths) {
  const pathsStats = await Promise.all(paths.map(dir => getPathStatIfExist(dir)));
  const statsWithoutNull = (0, _lodash().compact)(pathsStats);
  const timestamps = statsWithoutNull.map(stat => stat.mtimeMs);
  return Math.max(...timestamps);
}
async function getLastModifiedComponentTimestampMs(rootDir, files) {
  const lastModifiedDirs = await getLastModifiedDirTimestampMs(rootDir);
  const lastModifiedFiles = await getLastModifiedPathsTimestampMs(files);
  return Math.max(lastModifiedDirs, lastModifiedFiles);
}
async function getPathStatIfExist(path) {
  try {
    return await _fsExtra().default.stat(path);
  } catch (err) {
    if (err.code === 'ENOENT') return null;
    throw err;
  }
}