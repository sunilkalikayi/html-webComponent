"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPathRelativeRegardlessCWD = getPathRelativeRegardlessCWD;
exports.pathJoinLinux = pathJoinLinux;
exports.pathNormalizeToLinux = pathNormalizeToLinux;
exports.pathRelativeLinux = pathRelativeLinux;
exports.pathResolveToLinux = pathResolveToLinux;
function _normalizePath() {
  const data = _interopRequireDefault(require("normalize-path"));
  _normalizePath = function () {
    return data;
  };
  return data;
}
function path() {
  const data = _interopRequireWildcard(require("path"));
  path = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function pathJoinLinux(...paths) {
  return (0, _normalizePath().default)(path().join(...paths));
}
function pathNormalizeToLinux(pathToNormalize) {
  return pathToNormalize ? (0, _normalizePath().default)(pathToNormalize) : pathToNormalize;
}
function pathRelativeLinux(from, to) {
  return (0, _normalizePath().default)(path().relative(from, to));
}
function pathResolveToLinux(arr) {
  return (0, _normalizePath().default)(path().resolve(arr.join(',')));
}

/**
 * path.resolve uses current working dir.
 * sometimes the cwd is not important. a user may running bit command from an inner dir.
 */
function getPathRelativeRegardlessCWD(from, to) {
  const fromLinux = pathNormalizeToLinux(from);
  const toLinux = pathNormalizeToLinux(to);
  // change them to absolute so path.relative won't consider the cwd
  return pathRelativeLinux(`/${fromLinux}`, `/${toLinux}`);
}