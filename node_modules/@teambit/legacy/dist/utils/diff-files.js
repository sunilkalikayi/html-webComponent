"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = diffFiles;
function _execa() {
  const data = _interopRequireDefault(require("execa"));
  _execa = function () {
    return data;
  };
  return data;
}
function _logger() {
  const data = _interopRequireDefault(require("../logger/logger"));
  _logger = function () {
    return data;
  };
  return data;
}
function _gitNotFound() {
  const data = _interopRequireDefault(require("./git/exceptions/git-not-found"));
  _gitNotFound = function () {
    return data;
  };
  return data;
}
function _gitExecutable() {
  const data = _interopRequireDefault(require("./git/git-executable"));
  _gitExecutable = function () {
    return data;
  };
  return data;
}
/**
 * get diff between files using git diff command
 */
async function diffFiles(fileA, fileB, colors = true) {
  const params = ['diff'];
  params.push('--no-index'); // ignores the working tree (in case the project is managed by git)
  if (colors) params.push('--color');
  params.push(fileA);
  params.push(fileB);
  const gitExecutablePath = (0, _gitExecutable().default)();
  try {
    const result = await (0, _execa().default)(gitExecutablePath, params);
    return result.stdout;
  } catch (err) {
    if (err.exitCode && Number.isInteger(err.exitCode) && err.stdout) {
      // diff has been found, return the diff results.
      return err.stdout;
    }
    if (err.exitCodeName === 'ENOENT') {
      _logger().default.error(`failed running Git at ${gitExecutablePath}. full command: ${err.cmd}`);
      throw new (_gitNotFound().default)(gitExecutablePath, err);
    }
    throw err;
  }
}