"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
function _chai() {
  const data = require("chai");
  _chai = function () {
    return data;
  };
  return data;
}
function _abortablePromise() {
  const data = _interopRequireDefault(require("./abortable-promise"));
  _abortablePromise = function () {
    return data;
  };
  return data;
}
function _exceptions() {
  const data = require("./exceptions");
  _exceptions = function () {
    return data;
  };
  return data;
}
describe('AbortablePromise', () => {
  describe('abort()', () => {
    it('abort a native promise by executing given abort fn', done => {
      function abortFn() {
        (0, _chai().expect)(true).to.eq(true);
        done();
      }
      const promise = new (_abortablePromise().default)(() => {}, abortFn);
      promise.abort();
    });
    it('should throw a MissingAbortFn exception if abort was called when abort fn was not provided', () => {
      const promise = new (_abortablePromise().default)(() => {});
      (0, _chai().expect)(() => promise.abort()).to.throw(_exceptions().MissingAbortFn);
    });
  });
});