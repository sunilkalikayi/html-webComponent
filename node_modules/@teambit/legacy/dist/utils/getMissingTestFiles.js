"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getMissingTestFiles;
function _isEmpty2() {
  const data = _interopRequireDefault(require("ramda/src/isEmpty"));
  _isEmpty2 = function () {
    return data;
  };
  return data;
}
function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));
  _fsExtra = function () {
    return data;
  };
  return data;
}
function _isGlob() {
  const data = _interopRequireDefault(require("is-glob"));
  _isGlob = function () {
    return data;
  };
  return data;
}
function _path() {
  const data = require("./path");
  _path = function () {
    return data;
  };
  return data;
}
const DSL = ['{PARENT}', '{FILE_NAME}'];
function getMissingTestFiles(tests) {
  let missingTestFiles = [];
  const realTestFiles = tests.filter(testFile => {
    const files = DSL.filter(pattern => testFile.indexOf(pattern) > -1);
    const glob = (0, _isGlob().default)((0, _path().pathNormalizeToLinux)(testFile));
    return !glob && (0, _isEmpty2().default)(files) ? testFile : undefined;
  });
  if (!(0, _isEmpty2().default)(realTestFiles)) {
    missingTestFiles = realTestFiles.filter(testFile => !_fsExtra().default.existsSync(testFile));
  }
  return missingTestFiles;
}