"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _commentJson() {
  const data = require("comment-json");
  _commentJson = function () {
    return data;
  };
  return data;
}
function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));
  _fsExtra = function () {
    return data;
  };
  return data;
}
function path() {
  const data = _interopRequireWildcard(require("path"));
  path = function () {
    return data;
  };
  return data;
}
function _constants() {
  const data = require("../constants");
  _constants = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
// TODO: improve this by combine into a base class shared between this and e2e-bit-json-helper
class ComponentJsonHelper {
  constructor(scopes) {
    (0, _defineProperty2().default)(this, "scopes", void 0);
    this.scopes = scopes;
  }
  read(componentRelativeDir) {
    const componentJsonPath = this.composePath(componentRelativeDir);
    if (_fsExtra().default.existsSync(componentJsonPath)) {
      const content = _fsExtra().default.readJSONSync(componentJsonPath);
      return content;
    }
    return {};
  }
  deleteIfExist(componentRelativeDir = 'bar') {
    const componentJsonPath = this.composePath(componentRelativeDir);
    if (_fsExtra().default.existsSync(componentJsonPath)) {
      _fsExtra().default.unlinkSync(componentJsonPath);
    }
  }
  write(componentJson, componentRelativeDir = 'bar') {
    const componentJsonPath = this.composePath(componentRelativeDir);
    const content = (0, _commentJson().stringify)(componentJson, null, 2);
    return _fsExtra().default.writeFileSync(componentJsonPath, content);
  }
  addKeyVal(key, val, componentRelativeDir = 'bar') {
    const componentJson = this.read(componentRelativeDir);
    // Using this to keep the comments
    const obj = {
      [key]: val
    };
    const updated = (0, _commentJson().assign)(componentJson, obj);
    this.write(updated, componentRelativeDir);
  }
  setExtension(extensionId, extensionConfig, componentRelativeDir = 'bar') {
    const componentJson = this.read(componentRelativeDir);
    const extensions = componentJson.extensions || {};
    extensions[extensionId] = extensionConfig;
    this.addKeyVal('extensions', extensions, componentRelativeDir);
  }
  removeExtension(extensionId, componentRelativeDir = 'bar') {
    const componentJson = this.read(componentRelativeDir);
    const extensions = componentJson.extensions || {};
    delete extensions[extensionId];
    this.addKeyVal('extensions', extensions, componentRelativeDir);
  }
  setPropagate(propagateVal, componentRelativeDir = 'bar') {
    this.addKeyVal('propagate', propagateVal, componentRelativeDir);
  }
  addDefaultScope(scope = this.scopes.remote) {
    this.addKeyVal('defaultScope', scope);
  }
  composePath(componentRelativeDir = 'bar', absolutePath = true) {
    const file = path().join(componentRelativeDir, _constants().COMPONENT_CONFIG_FILE_NAME);
    return absolutePath ? path().join(this.scopes.localPath, file) : file;
  }

  // addDefaultOwner(owner: string) {
  //   this.addKeyValToWorkspace('defaultOwner', owner);
  // }
}
exports.default = ComponentJsonHelper;