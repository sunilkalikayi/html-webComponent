import CommandHelper from './e2e-command-helper';
import ExtensionsHelper from './e2e-extensions-helper';
import FixtureHelper from './e2e-fixtures-helper';
import FsHelper from './e2e-fs-helper';
import ScopeHelper from './e2e-scope-helper';
import ScopesData from './e2e-scopes';
export default class EnvHelper {
    command: CommandHelper;
    fs: FsHelper;
    fixtures: FixtureHelper;
    scopes: ScopesData;
    scopeHelper: ScopeHelper;
    compilerCreated: boolean;
    dummyCompilerCreated: boolean;
    dummyTesterCreated: boolean;
    extensions: ExtensionsHelper;
    constructor(command: CommandHelper, fsHelper: FsHelper, scopes: ScopesData, scopeHelper: ScopeHelper, fixtures: FixtureHelper, extensions: ExtensionsHelper);
    importCompiler(id?: string): string;
    importTypescriptCompiler(version?: string): string;
    getTypeScriptSettingsForES5(): {
        rawConfig: {
            tsconfig: {
                compilerOptions: {
                    target: string;
                    module: string;
                };
            };
        };
    };
    importDummyCompiler(dummyType?: string): string;
    changeDummyCompilerCode(originalCode: string, replaceTo: string): void;
    importDummyTester(dummyType?: string): string;
    importTester(id?: string): void;
    createDummyCompiler(dummyType?: string): boolean;
    createDummyTester(dummyType: string): string | true;
    createCompiler(): string | true;
    /**
     * set up a new environment with two compilers, babel for the dists and ts for the d.ts files
     * returns the env name.
     */
    setBabelWithTsHarmony(): string;
    setCustomEnv(extensionsBaseFolder?: string): string;
    getComponentEnv(id: string): string;
}
