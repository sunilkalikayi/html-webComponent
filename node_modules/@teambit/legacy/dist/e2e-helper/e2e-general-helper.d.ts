import CommandHelper from './e2e-command-helper';
import NpmHelper from './e2e-npm-helper';
import ScopesData from './e2e-scopes';
export default class GeneralHelper {
    scopes: ScopesData;
    npm: NpmHelper;
    command: CommandHelper;
    constructor(scopes: ScopesData, npmHelper: NpmHelper, commandHelper: CommandHelper);
    indexJsonPath(): string;
    getIndexJson(): any;
    getComponentsFromIndexJson(): any[];
    writeIndexJson(components?: any[], lanes?: any[]): void;
    getRemoteRefPath(lane?: string, remote?: string): string;
    getRemoteRefContent(lane?: string, remote?: string): any;
    getRemoteHead(compId: string, lane?: string, remote?: string): string;
    getHashPathOfComponent(compId: string, cwd?: string): string;
    getHashPathOfObject(hash: string, relativeToWorkspace?: boolean): string;
    installAndGetTypeScriptCompilerDir(): string;
    setProjectAsAngular(): void;
    nodeStart(mainFilePath: string, cwd?: string): string;
    untarFile(filePath: string, dir: string, sync: boolean): any;
    runWithTryCatch(cmd: string, cwd?: string, overrideFeatures?: string): string;
    static alignOutput(str?: string | undefined): string | undefined;
    expectToThrow(cmdFunc: Function, error: Error): void;
    isHarmonyProject(): boolean;
    getRequireBitPath(box: string, name: string): string;
    getBitVersion(): any;
    generateRandomTmpDirName(): string;
    getExtension(component: any, extName: string): any;
    getStagedConfig(laneName?: string): any;
    getPackageNameByCompName(compName: string): string;
}
