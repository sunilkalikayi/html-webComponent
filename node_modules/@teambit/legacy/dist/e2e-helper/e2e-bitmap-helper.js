"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _commentJson() {
  const data = _interopRequireDefault(require("comment-json"));
  _commentJson = function () {
    return data;
  };
  return data;
}
function _chai() {
  const data = require("chai");
  _chai = function () {
    return data;
  };
  return data;
}
function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));
  _fsExtra = function () {
    return data;
  };
  return data;
}
function path() {
  const data = _interopRequireWildcard(require("path"));
  path = function () {
    return data;
  };
  return data;
}
function _constants() {
  const data = require("../constants");
  _constants = function () {
    return data;
  };
  return data;
}
function _bitMap() {
  const data = require("../consumer/bit-map/bit-map");
  _bitMap = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
class BitMapHelper {
  constructor(scopes, fsHelper) {
    (0, _defineProperty2().default)(this, "scopes", void 0);
    (0, _defineProperty2().default)(this, "fs", void 0);
    this.scopes = scopes;
    this.fs = fsHelper;
  }
  read(bitMapPath = path().join(this.scopes.localPath, _constants().BIT_MAP), withoutComment = true) {
    const map = _fsExtra().default.readFileSync(bitMapPath) || {};
    return _commentJson().default.parse(map.toString('utf8'), undefined, withoutComment);
  }
  readComponentsMapOnly() {
    const bitMap = this.read();
    bitMap[_bitMap().SCHEMA_FIELD] ? delete bitMap[_bitMap().SCHEMA_FIELD] : delete bitMap.version;
    delete bitMap[_bitMap().LANE_KEY];
    return bitMap;
  }
  write(bitMap) {
    const bitMapPath = path().join(this.scopes.localPath, _constants().BIT_MAP);
    return _fsExtra().default.writeJSONSync(bitMapPath, bitMap, {
      spaces: 2
    });
  }
  delete() {
    return this.fs.deletePath(_constants().BIT_MAP);
  }
  create(cwd = this.scopes.localPath, componentObject = {
    'bar/foo': {
      files: [{
        relativePath: 'bar/foo.js',
        test: false,
        name: 'foo.js'
      }],
      mainFile: 'bar/foo.js',
      origin: 'AUTHORED'
    }
  }, oldBitMapFile = false) {
    const bitmapFile = path().join(cwd, oldBitMapFile ? '.bit.map.json' : _constants().BIT_MAP);
    const bitmap = {
      version: '0.11.1-testing'
    };
    Object.keys(componentObject).forEach(key => bitmap[key] = componentObject[key]);
    _fsExtra().default.ensureFileSync(bitmapFile);
    return _fsExtra().default.writeJsonSync(bitmapFile, bitmap, {
      spaces: 2
    });
  }
  createHarmony(cwd = this.scopes.localPath, componentObject = {
    'bar/foo': {
      scope: '',
      version: '',
      mainFile: 'bar/foo.js',
      rootDir: 'bar'
    }
  }) {
    const bitmapFile = path().join(cwd, _constants().BIT_MAP);
    const bitmap = {
      version: '0.11.1-testing'
    };
    Object.keys(componentObject).forEach(key => bitmap[key] = componentObject[key]);
    _fsExtra().default.ensureFileSync(bitmapFile);
    return _fsExtra().default.writeJsonSync(bitmapFile, bitmap, {
      spaces: 2
    });
  }
  printFilesInCaseOfError(files) {
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    const filesStr = files.map(f => f.name).join(', ');
    return `Files in bitmap file: ${filesStr}`;
  }
  expectToHaveIdHarmony(name, version, scope) {
    const bitMap = this.read();
    (0, _chai().expect)(bitMap).to.have.property(name);
    if (scope) (0, _chai().expect)(bitMap[name].scope).to.equal(scope);
    if (version) (0, _chai().expect)(bitMap[name].version).to.equal(version);
  }
}
exports.default = BitMapHelper;