"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.regexp.exec.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DEFAULT_OWNER = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));
  _fsExtra = function () {
    return data;
  };
  return data;
}
function path() {
  const data = _interopRequireWildcard(require("path"));
  path = function () {
    return data;
  };
  return data;
}
function _defenderFs() {
  const data = require("@teambit/defender.fs.global-bit-temp-dir");
  _defenderFs = function () {
    return data;
  };
  return data;
}
function _utils() {
  const data = require("../utils");
  _utils = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const DEFAULT_OWNER = 'ci';
exports.DEFAULT_OWNER = DEFAULT_OWNER;
class ScopesData {
  constructor(scopesOptions) {
    (0, _defineProperty2().default)(this, "e2eDir", void 0);
    (0, _defineProperty2().default)(this, "local", void 0);
    (0, _defineProperty2().default)(this, "localPath", void 0);
    (0, _defineProperty2().default)(this, "remote", void 0);
    (0, _defineProperty2().default)(this, "remotePath", void 0);
    (0, _defineProperty2().default)(this, "env", void 0);
    (0, _defineProperty2().default)(this, "envPath", void 0);
    (0, _defineProperty2().default)(this, "globalRemote", void 0);
    (0, _defineProperty2().default)(this, "globalRemotePath", void 0);
    this.e2eDir = path().join(_defenderFs().BIT_TEMP_ROOT, 'e2e');
    this.setLocalScope();
    this.setRemoteScope(scopesOptions === null || scopesOptions === void 0 ? void 0 : scopesOptions.remoteScopeWithDot, scopesOptions === null || scopesOptions === void 0 ? void 0 : scopesOptions.remoteScopePrefix);
    this.setEnvScope();
    this.globalRemote = 'global-remote';
    this.globalRemotePath = path().join(this.e2eDir, this.globalRemote);
  }
  setLocalScope(localScope) {
    this.local = localScope || `${(0, _utils().generateRandomStr)()}-local`;
    this.localPath = path().join(this.e2eDir, this.local);
    _fsExtra().default.ensureDirSync(this.localPath);
  }
  setRemoteScope(remoteScopeWithDot = false, prefix = DEFAULT_OWNER, remoteScope) {
    if (remoteScope) {
      this.remote = remoteScope;
    } else if (remoteScopeWithDot) {
      this.remote = `${prefix}.${(0, _utils().generateRandomStr)()}-remote`;
    } else {
      this.remote = `${(0, _utils().generateRandomStr)()}-remote`;
    }
    this.remotePath = path().join(this.e2eDir, this.remote);
  }
  setEnvScope() {
    this.env = `${(0, _utils().generateRandomStr)()}-env`;
    this.envPath = path().join(this.e2eDir, this.env);
  }
  get remoteWithoutOwner() {
    if (!this.remote.includes('.')) return this.remote;
    const [, remoteScope] = this.remote.split('.');
    return remoteScope;
  }
}
exports.default = ScopesData;