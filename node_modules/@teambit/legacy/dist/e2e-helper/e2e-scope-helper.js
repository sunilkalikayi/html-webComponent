"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.string.replace.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));
  _fsExtra = function () {
    return data;
  };
  return data;
}
function path() {
  const data = _interopRequireWildcard(require("path"));
  path = function () {
    return data;
  };
  return data;
}
function yaml() {
  const data = _interopRequireWildcard(require("yaml"));
  yaml = function () {
    return data;
  };
  return data;
}
function ini() {
  const data = _interopRequireWildcard(require("ini"));
  ini = function () {
    return data;
  };
  return data;
}
function _constants() {
  const data = require("../constants");
  _constants = function () {
    return data;
  };
  return data;
}
function _utils() {
  const data = require("../utils");
  _utils = function () {
    return data;
  };
  return data;
}
function _createSymlinkOrCopy() {
  const data = _interopRequireDefault(require("../utils/fs/create-symlink-or-copy"));
  _createSymlinkOrCopy = function () {
    return data;
  };
  return data;
}
function _e2eScopes() {
  const data = require("./e2e-scopes");
  _e2eScopes = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
class ScopeHelper {
  // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!

  // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!

  constructor(debugMode, scopes, commandHelper, fsHelper, npmHelper) {
    (0, _defineProperty2().default)(this, "debugMode", void 0);
    (0, _defineProperty2().default)(this, "scopes", void 0);
    (0, _defineProperty2().default)(this, "e2eDir", void 0);
    (0, _defineProperty2().default)(this, "command", void 0);
    (0, _defineProperty2().default)(this, "fs", void 0);
    (0, _defineProperty2().default)(this, "npm", void 0);
    (0, _defineProperty2().default)(this, "cache", void 0);
    (0, _defineProperty2().default)(this, "keepEnvs", void 0);
    (0, _defineProperty2().default)(this, "clonedScopes", []);
    (0, _defineProperty2().default)(this, "packageManager", 'npm');
    this.debugMode = debugMode;
    this.keepEnvs = !!process.env.npm_config_keep_envs; // default = false
    this.scopes = scopes;
    this.command = commandHelper;
    this.fs = fsHelper;
    this.npm = npmHelper;
  }
  clean() {
    _fsExtra().default.emptyDirSync(this.scopes.localPath);
    _fsExtra().default.emptyDirSync(this.scopes.remotePath);
  }
  destroy() {
    if (this.keepEnvs) return;
    _fsExtra().default.removeSync(this.scopes.localPath);
    _fsExtra().default.removeSync(this.scopes.remotePath);
    if (this.cache) {
      _fsExtra().default.removeSync(this.cache.localScopePath);
      _fsExtra().default.removeSync(this.cache.remoteScopePath);
      delete this.cache;
    }
    if (this.clonedScopes && this.clonedScopes.length) {
      this.clonedScopes.forEach(scopePath => _fsExtra().default.removeSync(scopePath));
    }
    this.fs.cleanExternalDirs();
  }
  cleanLocalScope() {
    _fsExtra().default.emptyDirSync(this.scopes.localPath);
  }
  usePackageManager(packageManager) {
    this.packageManager = packageManager;
  }
  reInitLocalScope(opts) {
    this.cleanLocalScope();
    if (opts !== null && opts !== void 0 && opts.initGit) this.command.runCmd('git init');
    this.initWorkspace();
    if (opts !== null && opts !== void 0 && opts.registry) {
      this._writeNpmrc(_objectSpread({
        registry: opts.registry
      }, opts.npmrcConfig));
      this._writeYarnRC(_objectSpread({
        unsafeHttpWhitelist: ['localhost']
      }, opts === null || opts === void 0 ? void 0 : opts.yarnRCConfig));
    } else {
      if (opts !== null && opts !== void 0 && opts.yarnRCConfig) {
        this._writeYarnRC(opts.yarnRCConfig);
      }
      if (opts !== null && opts !== void 0 && opts.npmrcConfig) {
        this._writeNpmrc(opts.npmrcConfig);
      }
    }
  }
  _writeYarnRC(yarnRCConfig) {
    this.fs.writeFile('.yarnrc.yml', yaml().stringify(yarnRCConfig));
  }
  _writeNpmrc(config) {
    this.fs.writeFile('.npmrc', ini().stringify(config));
  }
  newLocalScope(templateName, flags) {
    _fsExtra().default.removeSync(this.scopes.localPath);
    this.command.new(templateName, flags, this.scopes.local, this.scopes.e2eDir);
  }
  initWorkspace(workspacePath) {
    return this.command.runCmd(`bit init`, workspacePath);
  }
  async initInteractive(inputs) {
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    return this.command.runInteractiveCmd({
      args: ['init', '--interactive'],
      inputs
    });
  }
  initLocalScopeWithOptions(options) {
    const value = Object.keys(options).map(key => `-${key} ${options[key]}`).join(' ');
    return this.command.runCmd(`bit init ${value}`);
  }
  setNewLocalAndRemoteScopes(opts) {
    this.reInitLocalScope(opts);
    this.reInitRemoteScope();
    this.addRemoteScope();
  }
  initNewLocalScope(deleteCurrentScope = true) {
    if (deleteCurrentScope) {
      _fsExtra().default.removeSync(this.scopes.localPath);
    }
    this.scopes.setLocalScope();
    _fsExtra().default.ensureDirSync(this.scopes.localPath);
    return this.initWorkspace();
  }
  addRemoteScope(remoteScopePath = this.scopes.remotePath, cwd = this.scopes.localPath, isGlobal = false) {
    const globalArg = isGlobal ? '-g' : '';
    if (process.env.npm_config_with_ssh) {
      return this.command.runCmd(`bit remote add ssh://\`whoami\`@127.0.0.1:/${remoteScopePath} ${globalArg}`, cwd);
    }
    return this.command.runCmd(`bit remote add file://${remoteScopePath} ${globalArg}`, cwd);
  }
  addRemoteHttpScope(port = '3000') {
    return this.command.runCmd(`bit remote add http://localhost:${port}`);
  }
  removeRemoteScope(remoteScope = this.scopes.remote, isGlobal = false, localScopePath = this.scopes.localPath) {
    const globalArg = isGlobal ? '-g' : '';
    return this.command.runCmd(`bit remote del ${remoteScope} ${globalArg}`, localScopePath);
  }
  addRemoteEnvironment(isGlobal = false) {
    return this.addRemoteScope(this.scopes.envPath, this.scopes.localPath, isGlobal);
  }
  addGlobalRemoteScope() {
    return this.addRemoteScope(this.scopes.globalRemotePath, this.scopes.localPath);
  }
  removeRemoteEnvironment(isGlobal = false) {
    return this.removeRemoteScope(this.scopes.env, isGlobal);
  }
  reInitRemoteScope(scopePath = this.scopes.remotePath) {
    _fsExtra().default.emptyDirSync(scopePath);
    return this.command.runCmd('bit init --bare', scopePath);
  }

  /**
   * useful when publishing to a local npm registry so then multiple tests in the same file
   * won't collide in the @ci registry
   */
  setRemoteScopeAsDifferentDir() {
    _fsExtra().default.removeSync(this.scopes.remotePath);
    this.scopes.setRemoteScope();
    this.reInitRemoteScope();
    this.addRemoteScope();
  }
  reInitEnvsScope() {
    _fsExtra().default.emptyDirSync(this.scopes.envPath);
    return this.command.runCmd('bit init --bare', this.scopes.envPath);
  }
  getNewBareScope(scopeNameSuffix = '-remote2', addOwnerPrefix = false) {
    const prefix = addOwnerPrefix ? `${_e2eScopes().DEFAULT_OWNER}.` : '';
    const scopeName = prefix + (0, _utils().generateRandomStr)() + scopeNameSuffix;
    const scopePath = path().join(this.scopes.e2eDir, scopeName);
    _fsExtra().default.emptyDirSync(scopePath);
    this.command.runCmd('bit init --bare', scopePath);
    this.addRemoteScope(this.scopes.remotePath, scopePath);
    const scopeWithoutOwner = scopeName.replace(prefix, '');
    return {
      scopeName,
      scopePath,
      scopeWithoutOwner
    };
  }
  getNewBareScopeWithSpecificName(scopeName) {
    const scopePath = path().join(this.scopes.e2eDir, scopeName);
    _fsExtra().default.emptyDirSync(scopePath);
    this.command.runCmd('bit init --bare', scopePath);
    return scopePath;
  }

  /**
   * Sometimes many tests need to do the exact same steps to init the local-scope, such as importing compiler/tester.
   * To make it faster, use this method before all tests, and then use getClonedLocalScope method to restore from the
   * cloned scope.
   */
  cloneLocalScope(dereferenceSymlinks = _constants().IS_WINDOWS) {
    const clonedScope = `${(0, _utils().generateRandomStr)()}-clone`;
    const clonedScopePath = path().join(this.scopes.e2eDir, clonedScope);
    if (this.debugMode) console.log(`cloning a scope from ${this.scopes.localPath} to ${clonedScopePath}`);
    _fsExtra().default.removeSync(path().join(this.scopes.localPath, 'node_modules/@teambit/legacy'));
    _fsExtra().default.copySync(this.scopes.localPath, clonedScopePath, {
      dereference: dereferenceSymlinks
    });
    this.clonedScopes.push(clonedScopePath);
    return clonedScopePath;
  }
  getClonedLocalScope(clonedScopePath, deleteCurrentScope = true) {
    if (!_fsExtra().default.existsSync(clonedScopePath)) {
      throw new Error(`getClonedLocalScope was unable to find the clonedScopePath at ${clonedScopePath}`);
    }
    if (deleteCurrentScope) {
      _fsExtra().default.removeSync(this.scopes.localPath);
    } else {
      this.scopes.setLocalScope();
    }
    if (this.debugMode) console.log(`cloning a scope from ${clonedScopePath} to ${this.scopes.localPath}`);
    _fsExtra().default.copySync(clonedScopePath, this.scopes.localPath);
  }
  cloneRemoteScope() {
    return this.cloneScope(this.scopes.remotePath);
  }
  cloneScope(scopePath) {
    const clonedScope = (0, _utils().generateRandomStr)();
    const clonedScopePath = path().join(this.scopes.e2eDir, clonedScope);
    if (this.debugMode) console.log(`cloning a scope from ${scopePath} to ${clonedScopePath}`);
    _fsExtra().default.copySync(scopePath, clonedScopePath);
    this.clonedScopes.push(clonedScopePath);
    return clonedScopePath;
  }
  getClonedScope(clonedScopePath, scopePath) {
    _fsExtra().default.removeSync(scopePath);
    if (this.debugMode) console.log(`cloning a scope from ${clonedScopePath} to ${scopePath}`);
    _fsExtra().default.copySync(clonedScopePath, scopePath);
  }
  getClonedRemoteScope(clonedScopePath) {
    return this.getClonedScope(clonedScopePath, this.scopes.remotePath);
  }
  linkCoreAspects() {
    const aspectsRoot = path().join(this.scopes.localPath, './node_modules/@teambit');
    const localAspectsRoot = path().join(__dirname, '../../node_modules/@teambit');
    console.log('aspectsRoot', aspectsRoot);
    console.log('localAspectsRoot', localAspectsRoot);
    _fsExtra().default.removeSync(aspectsRoot);
    (0, _createSymlinkOrCopy().default)(localAspectsRoot, aspectsRoot);
  }
}
exports.default = ScopeHelper;