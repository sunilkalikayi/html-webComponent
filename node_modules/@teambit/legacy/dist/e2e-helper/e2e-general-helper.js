"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.string.replace.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _chai() {
  const data = require("chai");
  _chai = function () {
    return data;
  };
  return data;
}
function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));
  _fsExtra = function () {
    return data;
  };
  return data;
}
function path() {
  const data = _interopRequireWildcard(require("path"));
  path = function () {
    return data;
  };
  return data;
}
function _tar() {
  const data = _interopRequireDefault(require("tar"));
  _tar = function () {
    return data;
  };
  return data;
}
function _laneId() {
  const data = require("@teambit/lane-id");
  _laneId = function () {
    return data;
  };
  return data;
}
function _defaultErrorHandler() {
  const data = _interopRequireDefault(require("../cli/default-error-handler"));
  _defaultErrorHandler = function () {
    return data;
  };
  return data;
}
function _constants() {
  const data = require("../constants");
  _constants = function () {
    return data;
  };
  return data;
}
function _utils() {
  const data = require("../utils");
  _utils = function () {
    return data;
  };
  return data;
}
function _e2eHelper() {
  const data = require("./e2e-helper");
  _e2eHelper = function () {
    return data;
  };
  return data;
}
function _e2eScopes() {
  const data = require("./e2e-scopes");
  _e2eScopes = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
class GeneralHelper {
  constructor(scopes, npmHelper, commandHelper) {
    (0, _defineProperty2().default)(this, "scopes", void 0);
    (0, _defineProperty2().default)(this, "npm", void 0);
    (0, _defineProperty2().default)(this, "command", void 0);
    this.scopes = scopes;
    this.npm = npmHelper;
    this.command = commandHelper;
  }
  indexJsonPath() {
    return path().join(this.scopes.localPath, '.bit/index.json');
  }
  getIndexJson() {
    return _fsExtra().default.readJsonSync(this.indexJsonPath());
  }
  getComponentsFromIndexJson() {
    const indexJson = this.getIndexJson();
    return indexJson.components;
  }
  writeIndexJson(components = [], lanes = []) {
    return (0, _e2eHelper().ensureAndWriteJson)(this.indexJsonPath(), {
      components,
      lanes
    });
  }
  getRemoteRefPath(lane = _laneId().DEFAULT_LANE, remote = this.scopes.remote) {
    return path().join(this.scopes.localPath, _constants().BIT_HIDDEN_DIR, _constants().REMOTE_REFS_DIR, remote, lane);
  }
  getRemoteRefContent(lane = _laneId().DEFAULT_LANE, remote = this.scopes.remote) {
    const refPath = this.getRemoteRefPath(lane, remote);
    return _fsExtra().default.readJsonSync(refPath);
  }
  getRemoteHead(compId, lane = _laneId().DEFAULT_LANE, remote = this.scopes.remote) {
    const refContent = this.getRemoteRefContent(lane, remote);
    const record = refContent.find(_ => _.id.name === compId);
    if (!record) throw new Error(`unable to find ${compId} in the ref file`);
    return record.head;
  }
  getHashPathOfComponent(compId, cwd = this.scopes.localPath) {
    const scope = this.command.catScope(true, cwd);
    const comp3 = scope.find(item => item.name === compId);
    if (!comp3) throw new Error(`getHashPathOfComponent unable to find ${compId} in the scope`);
    const hash = comp3.hash;
    return this.getHashPathOfObject(hash);
  }
  getHashPathOfObject(hash, relativeToWorkspace = false) {
    const objectPath = path().join(hash.slice(0, 2), hash.slice(2));
    return relativeToWorkspace ? path().join('.bit/objects', objectPath) : objectPath;
  }
  installAndGetTypeScriptCompilerDir() {
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    this.npm.installNpmPackage('typescript');
    return path().join(this.scopes.localPath, 'node_modules', '.bin');
  }
  setProjectAsAngular() {
    this.npm.initNpm();
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    this.npm.installNpmPackage('@angular/core');
  }
  nodeStart(mainFilePath, cwd) {
    return this.command.runCmd(`node ${mainFilePath}`, cwd);
  }
  untarFile(filePath, dir, sync) {
    return _tar().default.x({
      file: filePath,
      C: dir,
      sync
    });
  }
  runWithTryCatch(cmd, cwd = this.scopes.localPath, overrideFeatures) {
    let output;
    try {
      output = this.command.runCmd(cmd, cwd, undefined, overrideFeatures);
    } catch (err) {
      output = err.toString() + err.stdout.toString();
    }
    return output;
  }
  static alignOutput(str) {
    if (!str) return str;
    // on Mac the directory '/var' is sometimes shown as '/private/var'
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    return (0, _utils().removeChalkCharacters)(str).replace(/\/private\/var/g, '/var');
  }
  expectToThrow(cmdFunc, error) {
    let output;
    try {
      cmdFunc();
    } catch (err) {
      output = err.toString();
    }
    const {
      message: errorString
    } = (0, _defaultErrorHandler().default)(error);
    (0, _chai().expect)(GeneralHelper.alignOutput(output)).to.have.string(GeneralHelper.alignOutput(errorString));
  }
  isHarmonyProject() {
    return _fsExtra().default.existsSync(path().join(this.scopes.localPath, _constants().WORKSPACE_JSONC));
  }
  getRequireBitPath(box, name) {
    return `@bit/${this.scopes.remote}.${box}.${name}`;
  }
  getBitVersion() {
    return _constants().BIT_VERSION;
  }
  generateRandomTmpDirName() {
    return path().join(this.scopes.e2eDir, (0, _utils().generateRandomStr)());
  }
  getExtension(component, extName) {
    return component.extensions.find(e => e.name === extName);
  }
  getStagedConfig(laneName = 'main') {
    return _fsExtra().default.readJSONSync(path().join(this.scopes.localPath, '.bit', 'staged-config', `${laneName}.json`));
  }
  getPackageNameByCompName(compName) {
    return `@${_e2eScopes().DEFAULT_OWNER}/${this.scopes.remoteWithoutOwner}.${compName}`;
  }
}
exports.default = GeneralHelper;