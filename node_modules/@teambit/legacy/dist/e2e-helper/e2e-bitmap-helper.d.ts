import FsHelper from './e2e-fs-helper';
import ScopesData from './e2e-scopes';
export default class BitMapHelper {
    scopes: ScopesData;
    fs: FsHelper;
    constructor(scopes: ScopesData, fsHelper: FsHelper);
    read(bitMapPath?: string, withoutComment?: boolean): any;
    readComponentsMapOnly(): any;
    write(bitMap: Record<string, any>): void;
    delete(): void;
    create(cwd?: string, componentObject?: {
        'bar/foo': {
            files: {
                relativePath: string;
                test: boolean;
                name: string;
            }[];
            mainFile: string;
            origin: string;
        };
    }, oldBitMapFile?: boolean): void;
    createHarmony(cwd?: string, componentObject?: {
        'bar/foo': {
            scope: string;
            version: string;
            mainFile: string;
            rootDir: string;
        };
    }): void;
    printFilesInCaseOfError(files: Record<string, any>[]): string;
    expectToHaveIdHarmony(name: string, version?: string, scope?: string): void;
}
