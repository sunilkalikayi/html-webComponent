"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.string.replace.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));
  _fsExtra = function () {
    return data;
  };
  return data;
}
function path() {
  const data = _interopRequireWildcard(require("path"));
  path = function () {
    return data;
  };
  return data;
}
function _utils() {
  const data = require("../utils");
  _utils = function () {
    return data;
  };
  return data;
}
function _e2eHelper() {
  const data = require("./e2e-helper");
  _e2eHelper = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
class EnvHelper {
  // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!

  // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!

  constructor(command, fsHelper, scopes, scopeHelper, fixtures, extensions) {
    (0, _defineProperty2().default)(this, "command", void 0);
    (0, _defineProperty2().default)(this, "fs", void 0);
    (0, _defineProperty2().default)(this, "fixtures", void 0);
    (0, _defineProperty2().default)(this, "scopes", void 0);
    (0, _defineProperty2().default)(this, "scopeHelper", void 0);
    (0, _defineProperty2().default)(this, "compilerCreated", false);
    (0, _defineProperty2().default)(this, "dummyCompilerCreated", void 0);
    (0, _defineProperty2().default)(this, "dummyTesterCreated", void 0);
    (0, _defineProperty2().default)(this, "extensions", void 0);
    this.command = command;
    this.fs = fsHelper;
    this.scopes = scopes;
    this.scopeHelper = scopeHelper;
    this.fixtures = fixtures;
    this.extensions = extensions;
  }
  importCompiler(id) {
    if (!id) {
      id = `${this.scopes.env}/compilers/babel`;
      this.createCompiler();
    }
    return this.command.runCmd(`bit import ${id} --compiler`);
  }
  importTypescriptCompiler(version = '3.0.0') {
    this.fixtures.ensureGlobalRemoteScope();
    this.scopeHelper.addGlobalRemoteScope();
    return this.importCompiler(`${this.scopes.globalRemote}/compilers/typescript@${version}`);
  }
  getTypeScriptSettingsForES5() {
    return {
      rawConfig: {
        tsconfig: {
          compilerOptions: {
            target: 'ES5',
            module: 'CommonJS'
          }
        }
      }
    };
  }
  importDummyCompiler(dummyType = 'dummy') {
    const id = `${this.scopes.env}/compilers/dummy`;
    this.createDummyCompiler(dummyType);
    return this.command.runCmd(`bit import ${id} --compiler`);
  }
  changeDummyCompilerCode(originalCode, replaceTo) {
    const compilerPath = path().join('.bit/components/compilers/dummy', this.scopes.env, '0.0.1/compiler.js');
    const compilerContent = this.fs.readFile(compilerPath);
    const changedCompiler = compilerContent.replace(originalCode, replaceTo);
    this.fs.outputFile(compilerPath, changedCompiler);
  }
  importDummyTester(dummyType = 'dummy') {
    const id = `${this.scopes.env}/testers/dummy`;
    this.createDummyTester(dummyType);
    return this.command.runCmd(`bit import ${id} --tester`);
  }
  importTester(id = `${this.scopes.globalRemote}/testers/mocha@0.0.12`) {
    this.fixtures.ensureGlobalRemoteScope();
    this.scopeHelper.addGlobalRemoteScope();
    this.command.runCmd(`bit import ${id} --tester`);
  }
  createDummyCompiler(dummyType = 'dummy') {
    // if (this.dummyCompilerCreated) return this.scope.addRemoteScope(this.scopes.envScopePath);

    // TODO: this is not really a scope but a workspace
    const tempScope = `${(0, _utils().generateRandomStr)()}-temp`;
    const tempScopePath = path().join(this.scopes.e2eDir, tempScope);
    _fsExtra().default.emptyDirSync(tempScopePath);
    this.scopeHelper.initWorkspace(tempScopePath);
    const sourceDir = path().join(this.fixtures.getFixturesDir(), 'compilers', dummyType);
    const compiler = _fsExtra().default.readFileSync(path().join(sourceDir, 'compiler.js'), 'utf-8');
    _fsExtra().default.writeFileSync(path().join(tempScopePath, 'compiler.js'), compiler);
    this.command.addComponent('compiler.js', {
      i: 'compilers/dummy'
    }, tempScopePath);
    this.command.runCmd('bit tag compilers/dummy -m msg', tempScopePath);
    _fsExtra().default.emptyDirSync(this.scopes.envPath);
    this.command.runCmd('bit init --bare', this.scopes.envPath);
    this.command.runCmd(`bit remote add file://${this.scopes.envPath}`, tempScopePath);
    this.command.runCmd(`bit export ${this.scopes.env} compilers/dummy`, tempScopePath);
    this.scopeHelper.addRemoteScope(this.scopes.envPath);
    this.dummyCompilerCreated = true;
    return true;
  }
  createDummyTester(dummyType) {
    if (this.dummyTesterCreated) return this.scopeHelper.addRemoteScope(this.scopes.envPath);

    // TODO: this is not really a scope but a workspace
    const tempScope = `${(0, _utils().generateRandomStr)()}-temp`;
    const tempScopePath = path().join(this.scopes.e2eDir, tempScope);
    _fsExtra().default.emptyDirSync(tempScopePath);
    this.scopeHelper.initWorkspace(tempScopePath);
    const sourceDir = path().join(this.fixtures.getFixturesDir(), 'testers', dummyType);
    const tester = _fsExtra().default.readFileSync(path().join(sourceDir, 'tester.js'), 'utf-8');
    _fsExtra().default.writeFileSync(path().join(tempScopePath, 'tester.js'), tester);
    (0, _e2eHelper().ensureAndWriteJson)(path().join(tempScopePath, 'package.json'), {
      name: 'dummy-compiler',
      version: '1.0.0',
      dependencies: {
        mocha: '6.1.4',
        chai: '4.2.0'
      }
    });
    this.command.runCmd('npm install', tempScopePath);
    this.command.addComponent('tester.js', {
      i: 'testers/dummy'
    }, tempScopePath);
    this.command.runCmd('bit tag testers/dummy -m msg', tempScopePath);
    _fsExtra().default.emptyDirSync(this.scopes.envPath);
    this.command.runCmd('bit init --bare', this.scopes.envPath);
    this.command.runCmd(`bit remote add file://${this.scopes.envPath}`, tempScopePath);
    this.command.runCmd(`bit export ${this.scopes.env} testers/dummy`, tempScopePath);
    this.scopeHelper.addRemoteScope(this.scopes.envPath);
    this.dummyTesterCreated = true;
    return true;
  }
  createCompiler() {
    if (this.compilerCreated) return this.scopeHelper.addRemoteScope(this.scopes.envPath);
    const tempScope = `${(0, _utils().generateRandomStr)()}-temp`;
    const tempScopePath = path().join(this.scopes.e2eDir, tempScope);
    _fsExtra().default.emptyDirSync(tempScopePath);
    this.scopeHelper.initWorkspace(tempScopePath);
    const sourceDir = path().join(this.fixtures.getFixturesDir(), 'compilers', 'babel');
    const compiler = _fsExtra().default.readFileSync(path().join(sourceDir, 'compiler.js'), 'utf-8');
    _fsExtra().default.writeFileSync(path().join(tempScopePath, 'compiler.js'), compiler);
    const babelCorePackageJson = {
      name: 'babel-core',
      version: '6.25.0'
    };
    const babelPluginTransformObjectRestSpreadPackageJson = {
      name: 'babel-plugin-transform-object-rest-spread',
      version: '6.23.0'
    };
    const babelPresetLatestPackageJson = {
      name: 'babel-preset-latest',
      version: '6.24.1'
    };
    const vinylPackageJson = {
      name: 'vinyl',
      version: '2.1.0'
    };
    const nodeModulesDir = path().join(tempScopePath, 'node_modules');
    (0, _e2eHelper().ensureAndWriteJson)(path().join(nodeModulesDir, 'babel-core', 'package.json'), babelCorePackageJson);
    (0, _e2eHelper().ensureAndWriteJson)(path().join(nodeModulesDir, 'babel-plugin-transform-object-rest-spread', 'package.json'), babelPluginTransformObjectRestSpreadPackageJson);
    (0, _e2eHelper().ensureAndWriteJson)(path().join(nodeModulesDir, 'babel-preset-latest', 'package.json'), babelPresetLatestPackageJson);
    (0, _e2eHelper().ensureAndWriteJson)(path().join(nodeModulesDir, 'vinyl', 'package.json'), vinylPackageJson);
    (0, _e2eHelper().ensureAndWriteJson)(path().join(nodeModulesDir, 'babel-core', 'index.js'), '');
    (0, _e2eHelper().ensureAndWriteJson)(path().join(nodeModulesDir, 'babel-plugin-transform-object-rest-spread', 'index.js'), '');
    (0, _e2eHelper().ensureAndWriteJson)(path().join(nodeModulesDir, 'babel-preset-latest', 'index.js'), '');
    (0, _e2eHelper().ensureAndWriteJson)(path().join(nodeModulesDir, 'vinyl', 'index.js'), '');
    this.command.addComponent('compiler.js', {
      i: 'compilers/babel'
    }, tempScopePath);
    this.command.runCmd('bit tag compilers/babel -m msg', tempScopePath);
    _fsExtra().default.emptyDirSync(this.scopes.envPath);
    this.command.runCmd('bit init --bare', this.scopes.envPath);
    this.command.runCmd(`bit remote add file://${this.scopes.envPath}`, tempScopePath);
    this.command.runCmd(`bit export ${this.scopes.env} compilers/babel`, tempScopePath);
    this.scopeHelper.addRemoteScope(this.scopes.envPath);
    this.compilerCreated = true;
    return true;
  }

  /**
   * set up a new environment with two compilers, babel for the dists and ts for the d.ts files
   * returns the env name.
   */
  setBabelWithTsHarmony() {
    const EXTENSIONS_BASE_FOLDER = 'multiple-compilers-env';
    this.fixtures.copyFixtureExtensions(EXTENSIONS_BASE_FOLDER);
    this.command.addComponent(EXTENSIONS_BASE_FOLDER);
    this.extensions.addExtensionToVariant(EXTENSIONS_BASE_FOLDER, 'teambit.harmony/aspect');
    this.command.link();
    this.extensions.addExtensionToVariant(EXTENSIONS_BASE_FOLDER, 'teambit.dependencies/dependency-resolver', {
      policy: {
        dependencies: {
          '@babel/runtime': '^7.8.4',
          '@babel/core': '7.11.6',
          '@babel/preset-env': '7.11.5',
          '@babel/preset-typescript': '7.10.4',
          '@babel/plugin-proposal-class-properties': '7.10.4'
        }
      }
    });
    this.command.install();
    this.command.compile();
    return EXTENSIONS_BASE_FOLDER;
  }
  setCustomEnv(extensionsBaseFolder = 'node-env') {
    this.fixtures.copyFixtureExtensions(extensionsBaseFolder);
    this.command.addComponent(extensionsBaseFolder);
    this.extensions.addExtensionToVariant(extensionsBaseFolder, 'teambit.envs/env');
    this.command.link();
    this.command.install();
    this.command.compile();
    return extensionsBaseFolder;
  }
  getComponentEnv(id) {
    const show = this.command.showComponentParsedHarmony(id);
    const env = show.find(fragment => fragment.title === 'env');
    return env.json;
  }
}
exports.default = EnvHelper;