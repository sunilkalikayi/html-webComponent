"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));
  _fsExtra = function () {
    return data;
  };
  return data;
}
function _glob() {
  const data = _interopRequireDefault(require("glob"));
  _glob = function () {
    return data;
  };
  return data;
}
function path() {
  const data = _interopRequireWildcard(require("path"));
  path = function () {
    return data;
  };
  return data;
}
function fixtures() {
  const data = _interopRequireWildcard(require("../../src/fixtures/fixtures"));
  fixtures = function () {
    return data;
  };
  return data;
}
function _utils() {
  const data = require("../utils");
  _utils = function () {
    return data;
  };
  return data;
}
function _e2eHelper() {
  const data = require("./e2e-helper");
  _e2eHelper = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
class FsHelper {
  constructor(scopes) {
    (0, _defineProperty2().default)(this, "scopes", void 0);
    (0, _defineProperty2().default)(this, "externalDirsArray", []);
    this.scopes = scopes;
  }
  getConsumerFiles(ext = '*.{js,ts}', includeDot = true, includeNodeModules = true) {
    const params = {
      cwd: this.scopes.localPath,
      dot: includeDot
    };
    if (!includeNodeModules) {
      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
      params.ignore = 'node_modules/**/*';
    }
    return _glob().default.sync(path().normalize(`**/${ext}`), params).map(x => path().normalize(x));
  }
  getObjectFiles() {
    return _glob().default.sync(path().normalize('*/*'), {
      cwd: path().join(this.scopes.localPath, '.bit/objects')
    });
  }
  /**
   * @deprecated use outputFile instead
   */
  createFile(folder, name, impl = fixtures().fooFixture) {
    const filePath = path().join(this.scopes.localPath, folder, name);
    _fsExtra().default.outputFileSync(filePath, impl);
  }
  createJsonFile(filePathRelativeToLocalScope, jsonContent) {
    const filePath = path().join(this.scopes.localPath, filePathRelativeToLocalScope);
    (0, _e2eHelper().ensureAndWriteJson)(filePath, jsonContent);
  }

  // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
  createFileOnRootLevel(name = 'foo.js', impl = fixtures().fooFixture) {
    const filePath = path().join(this.scopes.localPath, name);
    _fsExtra().default.outputFileSync(filePath, impl);
  }
  readFile(filePathRelativeToLocalScope) {
    return _fsExtra().default.readFileSync(path().join(this.scopes.localPath, filePathRelativeToLocalScope)).toString();
  }
  readJsonFile(filePathRelativeToLocalScope) {
    return _fsExtra().default.readJsonSync(path().join(this.scopes.localPath, filePathRelativeToLocalScope));
  }
  exists(filePathRelativeToLocalScope) {
    return _fsExtra().default.existsSync(path().join(this.scopes.localPath, filePathRelativeToLocalScope));
  }
  outputFile(filePathRelativeToLocalScope, data = '') {
    return _fsExtra().default.outputFileSync(path().join(this.scopes.localPath, filePathRelativeToLocalScope), data);
  }
  appendFile(filePathRelativeToLocalScope, data = '\n') {
    return _fsExtra().default.appendFileSync(path().join(this.scopes.localPath, filePathRelativeToLocalScope), data);
  }
  prependFile(filePathRelativeToLocalScope, data = '\n') {
    const filePath = path().join(this.scopes.localPath, filePathRelativeToLocalScope);
    const content = _fsExtra().default.readFileSync(filePath).toString();
    return _fsExtra().default.writeFileSync(filePath, `${data}${content}`);
  }
  writeFile(filePathRelativeToLocalScope, content) {
    const filePath = path().join(this.scopes.localPath, filePathRelativeToLocalScope);
    return _fsExtra().default.writeFileSync(filePath, content);
  }
  moveSync(srcPathRelativeToLocalScope, destPathRelativeToLocalScope) {
    const src = path().join(this.scopes.localPath, srcPathRelativeToLocalScope);
    const dest = path().join(this.scopes.localPath, destPathRelativeToLocalScope);
    return _fsExtra().default.moveSync(src, dest);
  }

  /**
   * adds "\n" at the beginning of the file to make it modified.
   */
  modifyFile(filePath, basePath = this.scopes.localPath) {
    const absPath = basePath ? path().join(basePath, filePath) : filePath;
    const content = _fsExtra().default.readFileSync(absPath);
    _fsExtra().default.outputFileSync(absPath, `\n${content}`);
  }
  deletePath(relativePathToLocalScope) {
    return _fsExtra().default.removeSync(path().join(this.scopes.localPath, relativePathToLocalScope));
  }
  deleteObject(objectPath) {
    // general-helper can be helpful with getting the path
    return _fsExtra().default.removeSync(path().join(this.scopes.localPath, '.bit/objects', objectPath));
  }
  deleteRemoteObject(objectPath) {
    // general-helper can be helpful with getting the path
    return _fsExtra().default.removeSync(path().join(this.scopes.remotePath, 'objects', objectPath));
  }
  createNewDirectory() {
    const newDir = `${(0, _utils().generateRandomStr)()}-dir`;
    const newDirPath = path().join(this.scopes.e2eDir, newDir);
    _fsExtra().default.ensureDirSync(newDirPath);
    this.externalDirsArray.push(newDirPath);
    return newDirPath;
  }
  createNewDirectoryInLocalWorkspace(dirPath) {
    const newDirPath = path().join(this.scopes.localPath, dirPath);
    _fsExtra().default.ensureDirSync(newDirPath);
    return newDirPath;
  }
  cleanDir(dirPath) {
    _fsExtra().default.removeSync(dirPath);
  }
  cleanExternalDirs() {
    this.externalDirsArray.forEach(dirPath => {
      this.cleanDir(dirPath);
    });
  }
}
exports.default = FsHelper;