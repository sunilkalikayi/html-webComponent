"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = remove;
function _bitId() {
  const data = require("../../../bit-id");
  _bitId = function () {
    return data;
  };
  return data;
}
function _constants() {
  const data = require("../../../constants");
  _constants = function () {
    return data;
  };
  return data;
}
function _hooks() {
  const data = _interopRequireDefault(require("../../../hooks"));
  _hooks = function () {
    return data;
  };
  return data;
}
function _scope() {
  const data = require("../../../scope");
  _scope = function () {
    return data;
  };
  return data;
}
function _removedComponents() {
  const data = _interopRequireDefault(require("../../../scope/removed-components"));
  _removedComponents = function () {
    return data;
  };
  return data;
}
const HooksManagerInstance = _hooks().default.getInstance();
async function remove({
  path,
  ids,
  force,
  lanes
}, headers) {
  const scope = await (0, _scope().loadScope)(path);
  if (lanes) {
    const removedLanes = await scope.lanes.removeLanes(scope, ids, force);
    const removedObjects = new (_removedComponents().default)({
      removedLanes
    });
    return removedObjects.serialize();
  }
  const bitIds = _bitId().BitIds.deserialize(ids);
  const args = {
    path,
    bitIds,
    force
  };
  // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
  HooksManagerInstance.triggerHook(_constants().PRE_REMOVE_REMOTE, args, headers);
  const res = await scope.removeMany(bitIds, force);
  const hookArgs = {
    removedComponentsIds: res.removedComponentIds.serialize(),
    missingComponentsIds: res.missingComponents.serialize(),
    dependentBitsIds: res.dependentBits,
    force,
    scopePath: path,
    componentsIds: bitIds.serialize(),
    scopeName: scope.scopeJson.name
  };
  // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
  await HooksManagerInstance.triggerHook(_constants().POST_REMOVE_REMOTE, hookArgs, headers);
  return res.serialize();
}