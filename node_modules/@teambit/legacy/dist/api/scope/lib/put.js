"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = put;
function _uniq2() {
  const data = _interopRequireDefault(require("ramda/src/uniq"));
  _uniq2 = function () {
    return data;
  };
  return data;
}
function _constants() {
  const data = require("../../../constants");
  _constants = function () {
    return data;
  };
  return data;
}
function _hooks() {
  const data = _interopRequireDefault(require("../../../hooks"));
  _hooks = function () {
    return data;
  };
  return data;
}
function _scope() {
  const data = require("../../../scope");
  _scope = function () {
    return data;
  };
  return data;
}
function _exportScopeComponents() {
  const data = require("../../../scope/component-ops/export-scope-components");
  _exportScopeComponents = function () {
    return data;
  };
  return data;
}
function _objectList() {
  const data = require("../../../scope/objects/object-list");
  _objectList = function () {
    return data;
  };
  return data;
}
const HooksManagerInstance = _hooks().default.getInstance();
async function put({
  path,
  objectList
}, pushOptions, headers) {
  if (typeof objectList === 'string') {
    objectList = _objectList().ObjectList.fromJsonString(objectList);
  }

  // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
  await HooksManagerInstance.triggerHook(_constants().PRE_RECEIVE_OBJECTS, {
    path,
    objectList
  }, headers);
  const scope = await (0, _scope().loadScope)(path);
  if (pushOptions && pushOptions.clientId) {
    // harmony
    await scope.writeObjectsToPendingDir(objectList, pushOptions.clientId);
    return [];
  }
  // legacy client (non-harmony) or bit-sign.
  const componentsBitIds = await (0, _exportScopeComponents().exportManyBareScope)(scope, objectList);
  const componentsIds = componentsBitIds.map(id => id.toString());
  let uniqComponentsIds = componentsIds;
  if (componentsIds && componentsIds.length) {
    uniqComponentsIds = (0, _uniq2().default)(componentsIds);
  }
  await HooksManagerInstance.triggerHook(_constants().POST_RECEIVE_OBJECTS, {
    objectList,
    componentsIds: uniqComponentsIds,
    scopePath: path,
    scopeName: scope.scopeJson.name
  },
  // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
  headers);
  return componentsIds;
}