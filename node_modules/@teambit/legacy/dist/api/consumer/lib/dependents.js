"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dependents = dependents;
function _bitId() {
  const data = require("../../../bit-id");
  _bitId = function () {
    return data;
  };
  return data;
}
function _consumer() {
  const data = require("../../../consumer");
  _consumer = function () {
    return data;
  };
  return data;
}
function _consumerNotFound() {
  const data = _interopRequireDefault(require("../../../consumer/exceptions/consumer-not-found"));
  _consumerNotFound = function () {
    return data;
  };
  return data;
}
function _generalError() {
  const data = _interopRequireDefault(require("../../../error/general-error"));
  _generalError = function () {
    return data;
  };
  return data;
}
function _scopeGraph() {
  const data = _interopRequireDefault(require("../../../scope/graph/scope-graph"));
  _scopeGraph = function () {
    return data;
  };
  return data;
}
async function dependents(id) {
  const consumer = await (0, _consumer().loadConsumerIfExist)();
  if (!consumer) throw new (_consumerNotFound().default)(); // @todo: supports this on bare-scope.
  throwForNewComponent(id, consumer);
  const bitId = consumer.getParsedIdIfExist(id) || _bitId().BitId.parse(id, true);
  const scopeGraph = await _scopeGraph().default.buildGraphFromScope(consumer.scope);
  const scopeDependencyGraph = new (_scopeGraph().default)(scopeGraph);
  const scopeDependents = scopeDependencyGraph.getDependentsInfo(bitId);
  const workspaceGraph = await _scopeGraph().default.buildGraphFromWorkspace(consumer, true);
  const workspaceDependencyGraph = new (_scopeGraph().default)(workspaceGraph);
  const workspaceDependents = workspaceDependencyGraph.getDependentsInfo(bitId);
  return {
    scopeDependents,
    workspaceDependents,
    id: bitId
  };
}
function throwForNewComponent(id, consumer) {
  const bitId = consumer.bitMap.getExistingBitId(id, false);
  if (!bitId) return;
  if (!bitId.hasScope()) {
    throw new (_generalError().default)(`${id} is a new component, there is no data about it in the scope`);
  }
}