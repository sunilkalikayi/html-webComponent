"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getScopeComponent;
function _bitId() {
  const data = require("../../../bit-id");
  _bitId = function () {
    return data;
  };
  return data;
}
function _loader() {
  const data = _interopRequireDefault(require("../../../cli/loader"));
  _loader = function () {
    return data;
  };
  return data;
}
function _loaderMessages() {
  const data = require("../../../cli/loader/loader-messages");
  _loaderMessages = function () {
    return data;
  };
  return data;
}
function _consumer() {
  const data = require("../../../consumer");
  _consumer = function () {
    return data;
  };
  return data;
}
function _getRemoteByName() {
  const data = _interopRequireDefault(require("../../../remotes/get-remote-by-name"));
  _getRemoteByName = function () {
    return data;
  };
  return data;
}
function _scope() {
  const data = require("../../../scope");
  _scope = function () {
    return data;
  };
  return data;
}
function _scopeComponentsImporter() {
  const data = _interopRequireDefault(require("../../../scope/component-ops/scope-components-importer"));
  _scopeComponentsImporter = function () {
    return data;
  };
  return data;
}
async function getScopeComponent({
  id,
  allVersions,
  scopePath,
  showDependents,
  showDependencies,
  loadScopeFromCache
}) {
  const bitId = _bitId().BitId.parse(id, true); // user used --remote so we know it has a scope

  if (scopePath) {
    // coming from the api
    const scope = await (0, _scope().loadScope)(scopePath, loadScopeFromCache);
    const component = await showComponentUsingScope(scope);
    return {
      component
    };
  }
  const consumer = await (0, _consumer().loadConsumerIfExist)();
  const remote = await (0, _getRemoteByName().default)(bitId.scope, consumer);
  _loader().default.start(_loaderMessages().BEFORE_REMOTE_SHOW);
  const component = await remote.show(bitId);
  let dependenciesInfo = [];
  let dependentsInfo = [];
  if (showDependents || showDependencies) {
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    const componentDepGraph = await remote.graph(component.id);
    if (showDependents) {
      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
      dependentsInfo = componentDepGraph.getDependentsInfo(component.id);
    }
    if (showDependencies) {
      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
      dependenciesInfo = componentDepGraph.getDependenciesInfo(component.id);
    }
  }
  // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
  return {
    component,
    dependentsInfo,
    dependenciesInfo
  };
  async function showComponentUsingScope(scope) {
    if (allVersions) {
      return scope.loadAllVersions(bitId);
    }
    const scopeComponentsImporter = _scopeComponentsImporter().default.getInstance(scope);
    return scopeComponentsImporter.loadRemoteComponent(bitId);
  }
}