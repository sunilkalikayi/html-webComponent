"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dependencies = dependencies;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _consumer() {
  const data = require("../../../consumer");
  _consumer = function () {
    return data;
  };
  return data;
}
function _dependencyResolver() {
  const data = require("../../../consumer/component/dependencies/dependency-resolver");
  _dependencyResolver = function () {
    return data;
  };
  return data;
}
function _consumerNotFound() {
  const data = _interopRequireDefault(require("../../../consumer/exceptions/consumer-not-found"));
  _consumerNotFound = function () {
    return data;
  };
  return data;
}
function _scopeGraph() {
  const data = _interopRequireDefault(require("../../../scope/graph/scope-graph"));
  _scopeGraph = function () {
    return data;
  };
  return data;
}
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
async function dependencies(id, debug) {
  const consumer = await (0, _consumer().loadConsumerIfExist)();
  if (!consumer) throw new (_consumerNotFound().default)(); // @todo: supports this on bare-scope.
  const bitId = consumer.getParsedId(id);
  if (debug) {
    const component = await consumer.loadComponent(bitId);
    const dependencyResolver = new (_dependencyResolver().DependencyResolver)(component, consumer);
    const dependenciesData = await dependencyResolver.getDependenciesData({}, undefined);
    const debugData = dependencyResolver.debugDependenciesData;
    (0, _dependencyResolver().updateDependenciesVersions)(consumer, component, debugData.components);
    return _objectSpread(_objectSpread(_objectSpread({}, debugData), dependenciesData.overridesDependencies), {}, {
      coreAspects: dependenciesData.coreAspects
    });
  }
  const scopeGraph = await _scopeGraph().default.buildGraphFromScope(consumer.scope);
  const scopeDependencyGraph = new (_scopeGraph().default)(scopeGraph);
  const workspaceGraph = await _scopeGraph().default.buildGraphFromWorkspace(consumer, true);
  const workspaceDependencyGraph = new (_scopeGraph().default)(workspaceGraph);
  return {
    scopeGraph: scopeDependencyGraph,
    workspaceGraph: workspaceDependencyGraph,
    id: bitId
  };
}