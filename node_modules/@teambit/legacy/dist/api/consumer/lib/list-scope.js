"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
require("core-js/modules/es.regexp.exec.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getRemoteBitIdsByWildcards = getRemoteBitIdsByWildcards;
exports.listScope = listScope;
function _tail2() {
  const data = _interopRequireDefault(require("ramda/src/tail"));
  _tail2 = function () {
    return data;
  };
  return data;
}
function _loader() {
  const data = _interopRequireDefault(require("../../../cli/loader"));
  _loader = function () {
    return data;
  };
  return data;
}
function _loaderMessages() {
  const data = require("../../../cli/loader/loader-messages");
  _loaderMessages = function () {
    return data;
  };
  return data;
}
function _consumer() {
  const data = require("../../../consumer");
  _consumer = function () {
    return data;
  };
  return data;
}
function _componentsList() {
  const data = _interopRequireDefault(require("../../../consumer/component/components-list"));
  _componentsList = function () {
    return data;
  };
  return data;
}
function _exceptions() {
  const data = require("../../../consumer/exceptions");
  _exceptions = function () {
    return data;
  };
  return data;
}
function _generalError() {
  const data = _interopRequireDefault(require("../../../error/general-error"));
  _generalError = function () {
    return data;
  };
  return data;
}
function _getRemoteByName() {
  const data = _interopRequireDefault(require("../../../remotes/get-remote-by-name"));
  _getRemoteByName = function () {
    return data;
  };
  return data;
}
function _noIdMatchWildcard() {
  const data = _interopRequireDefault(require("./exceptions/no-id-match-wildcard"));
  _noIdMatchWildcard = function () {
    return data;
  };
  return data;
}
async function listScope({
  scopeName,
  showAll = false,
  // include nested
  showRemoteVersion = false,
  namespacesUsingWildcards,
  strategiesNames
}) {
  const consumer = await (0, _consumer().loadConsumerIfExist)();
  if (scopeName) {
    return remoteList();
  }
  return localList();
  async function remoteList() {
    const remote = await (0, _getRemoteByName().default)(scopeName, consumer);
    _loader().default.start(_loaderMessages().BEFORE_REMOTE_LIST);
    return remote.list(namespacesUsingWildcards, strategiesNames);
  }
  async function localList() {
    if (!consumer) {
      throw new (_exceptions().ConsumerNotFound)();
    }
    _loader().default.start(_loaderMessages().BEFORE_LOCAL_LIST);
    const componentsList = new (_componentsList().default)(consumer);
    return componentsList.listAll(showRemoteVersion, showAll, namespacesUsingWildcards);
  }
}
async function getRemoteBitIdsByWildcards(idStr) {
  if (!idStr.includes('/')) {
    throw new (_generalError().default)(`import with wildcards expects full scope-name before the wildcards, instead, got "${idStr}"`);
  }
  const idSplit = idStr.split('/');
  const scopeName = idSplit[0];
  const namespacesUsingWildcards = (0, _tail2().default)(idSplit).join('/');
  const listResult = await listScope({
    scopeName,
    namespacesUsingWildcards
  });
  if (!listResult.length) {
    throw new (_noIdMatchWildcard().default)([idStr]);
  }
  return listResult.map(result => result.id);
}