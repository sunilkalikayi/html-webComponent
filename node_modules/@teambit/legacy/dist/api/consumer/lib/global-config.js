"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.string.replace.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.del = del;
exports.delSync = delSync;
exports.get = get;
exports.getNumberFromConfig = getNumberFromConfig;
exports.getSync = getSync;
exports.list = list;
exports.listSync = listSync;
exports.set = set;
exports.setSync = setSync;
function _isNil2() {
  const data = _interopRequireDefault(require("ramda/src/isNil"));
  _isNil2 = function () {
    return data;
  };
  return data;
}
function _gitconfig() {
  const data = _interopRequireDefault(require("gitconfig"));
  _gitconfig = function () {
    return data;
  };
  return data;
}
function _constants() {
  const data = require("../../../constants");
  _constants = function () {
    return data;
  };
  return data;
}
function _generalError() {
  const data = _interopRequireDefault(require("../../../error/general-error"));
  _generalError = function () {
    return data;
  };
  return data;
}
function _config() {
  const data = _interopRequireDefault(require("../../../global-config/config"));
  _config = function () {
    return data;
  };
  return data;
}
function set(key, val) {
  if (!key || !val) {
    throw new (_generalError().default)(`missing a configuration key and value. https://${_constants().BASE_DOCS_DOMAIN}/config/bit-config`);
  }
  return _config().default.load().then(config => {
    config.set(key, val);
    invalidateCache();
    return config.write().then(() => config);
  });
}
function setSync(key, val) {
  const config = _config().default.loadSync();
  config.set(key, val);
  invalidateCache();
  config.writeSync();
  return config;
}
function del(key) {
  return _config().default.load().then(config => {
    config.delete(key);
    invalidateCache();
    return config.write().then(() => config);
  });
}
function delSync(key) {
  const config = _config().default.loadSync();
  config.delete(key);
  config.writeSync();
  invalidateCache();
  return config;
}
async function get(key) {
  const getConfigObject = async () => {
    const configFromCache = cache().get();
    if (configFromCache) return configFromCache;
    const config = await _config().default.load();
    cache().set(config);
    return config;
  };
  const envVarName = toEnvVariableName(key);
  if (process.env[envVarName]) {
    return process.env[envVarName];
  }
  const config = await getConfigObject();
  const val = config ? config.get(key) : undefined;
  if (!(0, _isNil2().default)(val)) return val;
  try {
    const gitVal = await _gitconfig().default.get(key);
    return gitVal;
    // Ignore error from git config get
  } catch (err) {
    return undefined;
  }
}
function getSync(key) {
  const getConfigObject = () => {
    const configFromCache = cache().get();
    if (configFromCache) return configFromCache;
    const config = _config().default.loadSync();
    cache().set(config);
    return config;
  };
  const envVarName = toEnvVariableName(key);
  if (process.env[envVarName]) {
    return process.env[envVarName];
  }
  const config = getConfigObject();
  const val = config ? config.get(key) : undefined;
  if (!(0, _isNil2().default)(val)) return val;
  const gitConfigCache = gitCache().get() || {};
  if (key in gitConfigCache) {
    return gitConfigCache[val];
  }
  try {
    const gitVal = _gitconfig().default.get.sync(key);
    gitConfigCache[key] = gitVal;
  } catch (err) {
    // Ignore error from git config get
    gitConfigCache[key] = undefined;
  }
  gitCache().set(gitConfigCache);
  return gitConfigCache[key];
}
function list() {
  return _config().default.load().then(config => config.toPlainObject());
}
function listSync() {
  const config = _config().default.loadSync();
  return config.toPlainObject();
}
function getNumberFromConfig(name) {
  const fromConfig = getSync(name);
  if (!fromConfig) return null;
  const num = Number(fromConfig);
  if (Number.isNaN(num)) {
    throw new Error(`config of "${name}" is invalid. Expected number, got "${fromConfig}"`);
  }
  return num;
}
function cache() {
  return {
    get: () => {
      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
      return cache.config;
    },
    set: config => {
      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
      cache.config = config;
    }
  };
}
function gitCache() {
  return {
    get: () => {
      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
      return gitCache.config;
    },
    set: config => {
      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
      gitCache.config = config;
    }
  };
}
function invalidateCache() {
  cache().set(null);
}
function toEnvVariableName(configName) {
  return `${_constants().ENV_VARIABLE_CONFIG_PREFIX}${configName.replace(/\./g, '_').toUpperCase()}`;
}