"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addMany = addMany;
exports.addOne = addOne;
function path() {
  const data = _interopRequireWildcard(require("path"));
  path = function () {
    return data;
  };
  return data;
}
function _constants() {
  const data = require("../../../constants");
  _constants = function () {
    return data;
  };
  return data;
}
function _consumer() {
  const data = require("../../../consumer");
  _consumer = function () {
    return data;
  };
  return data;
}
function _addComponents() {
  const data = _interopRequireDefault(require("../../../consumer/component-ops/add-components"));
  _addComponents = function () {
    return data;
  };
  return data;
}
function _hooks() {
  const data = _interopRequireDefault(require("../../../hooks"));
  _hooks = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const HooksManagerInstance = _hooks().default.getInstance();
async function addOne(addProps) {
  const consumer = await (0, _consumer().loadConsumer)();
  const addContext = {
    consumer
  };
  addProps.shouldHandleOutOfSync = true;
  const addComponents = new (_addComponents().default)(addContext, addProps);
  const addResults = await addComponents.add();
  await consumer.onDestroy();
  const hookContext = {
    workspacePath: consumer.getPath(),
    bitmapFileName: _constants().BIT_MAP
  };
  // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
  await HooksManagerInstance.triggerHook(_constants().POST_ADD_HOOK, addResults, null, hookContext);
  return addResults;
}
async function addMany(components, alternateCwd) {
  // we are checking whether the consumer is the default consumer which is process.cwd() or it is overriden , and we are working on another directory which is not the process.cwd()
  const consumerPath = alternateCwd || process.cwd();
  const consumer = await (0, _consumer().loadConsumer)(consumerPath);
  const addContext = {
    consumer,
    alternateCwd: consumerPath
  };
  const addComponentsArr = [];
  components.forEach(component => {
    const normalizedPaths = component.componentPaths.map(p => {
      return path().normalize(p);
    });
    component.componentPaths = normalizedPaths;
    const addComponents = new (_addComponents().default)(addContext, component);
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    addComponentsArr.push(addComponents);
  });
  const addResults = [];
  await Promise.all(addComponentsArr.map(async function (addComponents) {
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    const addResultsSingle = await addComponents.add();
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    addResults.push(addResultsSingle);
  }));
  await consumer.onDestroy();
  const hookContext = {
    workspacePath: consumer.getPath(),
    bitmapFileName: _constants().BIT_MAP
  };
  // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
  await HooksManagerInstance.triggerHook(_constants().POST_ADD_HOOK, addResults, null, hookContext);
  return addResults;
}