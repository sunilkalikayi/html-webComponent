"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = show;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _() {
  const data = require("..");
  _ = function () {
    return data;
  };
  return data;
}
function _loader() {
  const data = _interopRequireDefault(require("../../../cli/loader/loader"));
  _loader = function () {
    return data;
  };
  return data;
}
function _loaderMessages() {
  const data = require("../../../cli/loader/loader-messages");
  _loaderMessages = function () {
    return data;
  };
  return data;
}
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
async function show({
  id,
  json,
  versions,
  remote,
  outdated,
  compare,
  detailed,
  dependents,
  dependencies
}) {
  if (versions) {
    const components = await getComponent(versions);
    return {
      components,
      versions
    };
  }
  // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
  return getComponent().then(({
    component,
    componentModel,
    dependentsInfo,
    dependenciesInfo
  }) => ({
    component,
    componentModel,
    dependentsInfo,
    dependenciesInfo,
    json,
    outdated,
    detailed
  }));
  function getComponent(allVersions) {
    const params = {
      id,
      allVersions,
      showRemoteVersions: outdated,
      showDependents: dependents,
      showDependencies: dependencies
    };
    if (remote) {
      _loader().default.start(_loaderMessages().BEFORE_SHOW_REMOTE);
      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
      return (0, _().getScopeComponent)(params);
    }
    return (0, _().getConsumerComponent)(_objectSpread(_objectSpread({}, params), {}, {
      compare
    }));
  }
}