"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _consumer() {
  const data = require("../../../consumer");
  _consumer = function () {
    return data;
  };
  return data;
}
function _scopeGraph() {
  const data = _interopRequireDefault(require("../../../scope/graph/scope-graph"));
  _scopeGraph = function () {
    return data;
  };
  return data;
}
function _nothingToCompareTo() {
  const data = _interopRequireDefault(require("./exceptions/nothing-to-compare-to"));
  _nothingToCompareTo = function () {
    return data;
  };
  return data;
}
var getConsumerBit = async function getConsumerBit({
  id,
  compare,
  allVersions,
  showRemoteVersions,
  showDependents,
  showDependencies
}) {
  const consumer = await (0, _consumer().loadConsumer)();
  const bitId = consumer.getParsedId(id);
  if (allVersions) {
    return consumer.loadAllVersionsOfComponentFromModel(bitId);
  }
  const component = await consumer.loadComponent(bitId); // loads recent component
  let dependenciesInfo = [];
  let dependentsInfo = [];
  if (showDependents || showDependencies) {
    const graph = await _scopeGraph().default.buildGraphFromWorkspace(consumer);
    const dependencyGraph = new (_scopeGraph().default)(graph);
    const componentGraph = dependencyGraph.getSubGraphOfConnectedComponents(component.id);
    const componentDepGraph = new (_scopeGraph().default)(componentGraph);
    if (showDependents) {
      dependentsInfo = componentDepGraph.getDependentsInfo(component.id);
    }
    if (showDependencies) {
      dependenciesInfo = componentDepGraph.getDependenciesInfo(component.id);
    }
  }
  if (showRemoteVersions) {
    await consumer.addRemoteAndLocalVersionsToDependencies(component, true);
  }
  if (compare) {
    if (!component.componentFromModel) throw new (_nothingToCompareTo().default)(id);
    return {
      component,
      componentModel: component.componentFromModel
    };
  }
  await consumer.onDestroy();
  return {
    component,
    dependentsInfo,
    dependenciesInfo
  };
};
exports.default = getConsumerBit;