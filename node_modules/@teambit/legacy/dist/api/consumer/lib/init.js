"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = init;
function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));
  _fsExtra = function () {
    return data;
  };
  return data;
}
function _consumer() {
  const data = require("../../../consumer");
  _consumer = function () {
    return data;
  };
  return data;
}
function _scope() {
  const data = require("../../../scope");
  _scope = function () {
    return data;
  };
  return data;
}
function _objects() {
  const data = require("../../../scope/objects");
  _objects = function () {
    return data;
  };
  return data;
}
function _utils() {
  const data = require("../../../utils");
  _utils = function () {
    return data;
  };
  return data;
}
function _objectsWithoutConsumer() {
  const data = _interopRequireDefault(require("./exceptions/objects-without-consumer"));
  _objectsWithoutConsumer = function () {
    return data;
  };
  return data;
}
async function init(absPath = process.cwd(), noGit = false, reset = false, resetNew = false, resetHard = false, resetScope = false, force = false, workspaceConfigProps) {
  if (reset || resetHard) {
    await _consumer().Consumer.reset(absPath, resetHard, noGit);
  }
  const consumer = await _consumer().Consumer.create(absPath, noGit, workspaceConfigProps);
  if (!force && !resetScope) {
    await throwForOutOfSyncScope(consumer);
  }
  if (resetNew) {
    await consumer.resetNew();
  }
  if (resetScope) {
    await _scope().Scope.reset(consumer.scope.path, true);
  }
  return consumer.write();
}

/**
 * throw an error when .bitmap is empty but a scope has objects.
 * a user may got into this state for reasons such as:
 * 1. deleting manually .bitmap hoping to re-start Bit from scratch. (probably unaware of `--reset-hard` flag).
 * 2. switching to a branch where Bit wasn't initialized
 * in which case, it's better to stop and show an error describing what needs to be done.
 * it can always be ignored by entering `--force` flag.
 */
async function throwForOutOfSyncScope(consumer) {
  if (!consumer.bitMap.isEmpty()) return;
  const scopePath = consumer.scope.getPath();
  const objectsPath = _objects().Repository.getPathByScopePath(scopePath);
  const dirExist = await _fsExtra().default.pathExists(objectsPath);
  if (!dirExist) return;
  const hasObjects = !(await (0, _utils().isDirEmpty)(objectsPath));
  if (hasObjects) {
    throw new (_objectsWithoutConsumer().default)(scopePath);
  }
}