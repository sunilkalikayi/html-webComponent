"use strict";

require("core-js/modules/es.promise.js");
function _chai() {
  const data = require("chai");
  _chai = function () {
    return data;
  };
  return data;
}
function _sleep() {
  const data = require("../sleep");
  _sleep = function () {
    return data;
  };
  return data;
}
function _exceptions() {
  const data = require("./exceptions");
  _exceptions = function () {
    return data;
  };
  return data;
}
function _timer() {
  const data = require("./timer");
  _timer = function () {
    return data;
  };
  return data;
}
describe('Timer', () => {
  it('should stop after 300ms', async () => {
    const timer = _timer().Timer.create();
    timer.start();
    await (0, _sleep().sleep)(50);
    const {
      elapsed
    } = timer.stop();
    (0, _chai().expect)(elapsed < 300).to.equal(true);
  });
  it('should return elapsed in seconds', async () => {
    const timer = _timer().Timer.create();
    timer.start();
    await (0, _sleep().sleep)(50);
    const {
      seconds
    } = timer.stop();
    (0, _chai().expect)(seconds < 1).to.equal(true);
  });
  it('should throw an error if invoking stop without starting', () => {
    (0, _chai().expect)(() => {
      const timer = _timer().Timer.create();
      timer.stop();
    }).to.throw(_exceptions().TimerNotStarted);
  });
  it('should throw an error if invoking start twice', () => {
    (0, _chai().expect)(() => {
      const timer = _timer().Timer.create();
      timer.start();
      timer.start();
    }).to.throw(_exceptions().TimerAlreadyRunning);
  });
});