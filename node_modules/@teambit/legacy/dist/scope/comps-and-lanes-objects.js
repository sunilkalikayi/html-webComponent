"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _flatten2() {
  const data = _interopRequireDefault(require("ramda/src/flatten"));
  _flatten2 = function () {
    return data;
  };
  return data;
}
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _componentObjects() {
  const data = _interopRequireDefault(require("./component-objects"));
  _componentObjects = function () {
    return data;
  };
  return data;
}
function _laneObjects() {
  const data = _interopRequireDefault(require("./lane-objects"));
  _laneObjects = function () {
    return data;
  };
  return data;
}
function _objects() {
  const data = require("./objects");
  _objects = function () {
    return data;
  };
  return data;
}
function _objectList() {
  const data = require("./objects/object-list");
  _objectList = function () {
    return data;
  };
  return data;
}
class CompsAndLanesObjects {
  constructor(componentsObjects, laneObjects) {
    (0, _defineProperty2().default)(this, "componentsObjects", void 0);
    (0, _defineProperty2().default)(this, "laneObjects", void 0);
    this.componentsObjects = componentsObjects;
    this.laneObjects = laneObjects;
  }
  toString() {
    const components = this.componentsObjects.map(componentAndObject => componentAndObject.toString());
    if (!this.laneObjects.length) {
      // @todo: delete this `if` block before releasing v15
      // backward compatibility, before v15, it used to be an array of component-objects
      // this makes sure that old clients could run "bit import"
      return JSON.stringify(components);
    }
    return JSON.stringify({
      components,
      lanes: this.laneObjects.map(laneObj => laneObj.toString())
    });
  }
  toObjectList() {
    const objectList = new (_objectList().ObjectList)();
    this.componentsObjects.forEach(compObj => {
      const buffers = [compObj.component, ...compObj.objects];
      const objItems = buffers.map(buffer => {
        const obj = _objects().BitObject.parseSync(buffer);
        return {
          ref: obj.hash(),
          buffer
        };
      });
      objectList.addIfNotExist(objItems);
    });
    return objectList;
  }
  static fromString(str) {
    const parsed = JSON.parse(str);
    let components;
    let lanes = [];
    if (Array.isArray(parsed)) {
      // @todo: delete this `if` block before releasing v15
      // backward compatibility, before v15, it used to be an array of component-objects
      // this makes sure that old clients could run "bit export"
      components = parsed;
    } else {
      components = parsed.components;
      lanes = parsed.lanes;
    }
    const componentsObjects = components.map(componentObject => _componentObjects().default.fromString(componentObject));
    const laneObjects = lanes.map(laneObj => _laneObjects().default.fromString(laneObj));
    return new CompsAndLanesObjects(componentsObjects, laneObjects);
  }
  static flatten(manyCompsAndLanesObjects) {
    return new CompsAndLanesObjects((0, _flatten2().default)(manyCompsAndLanesObjects.map(m => m.componentsObjects)), (0, _flatten2().default)(manyCompsAndLanesObjects.map(m => m.laneObjects)));
  }
}
exports.default = CompsAndLanesObjects;