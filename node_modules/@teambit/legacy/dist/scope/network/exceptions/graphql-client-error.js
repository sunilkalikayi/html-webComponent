"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GraphQLClientError = void 0;
function _bitError() {
  const data = require("@teambit/bit-error");
  _bitError = function () {
    return data;
  };
  return data;
}
function _() {
  const data = require(".");
  _ = function () {
    return data;
  };
  return data;
}
/**
 * @see https://www.npmjs.com/package/graphql-request#error-handling
 */
class GraphQLClientError extends _bitError().BitError {
  constructor(err, url, scopeName) {
    super(JSON.stringify(err, undefined, 2));
    this.err = err;
    this.url = url;
    this.scopeName = scopeName;
    this.stack = err.stack;
  }
  report() {
    if (!this.err.response.errors) {
      var _this$err, _this$err$response;
      if (this.err.response.status && ((_this$err = this.err) === null || _this$err === void 0 ? void 0 : (_this$err$response = _this$err.response) === null || _this$err$response === void 0 ? void 0 : _this$err$response.status) === 403) {
        return new (_().PermissionDenied)(this.getRemoteInfo()).report();
      }
      return this.message;
    }
    const errors = this.err.response.errors.map(error => error.message).join('\n');
    return `fatal: graphql found the following error(s), use --log to see the request, response and the full stack\n\n${errors}`;
  }
  getRemoteInfo() {
    return `"${this.scopeName}" (${this.url})`;
  }
}
exports.GraphQLClientError = GraphQLClientError;