"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.remoteErrorHandler = remoteErrorHandler;
function _customError() {
  const data = _interopRequireDefault(require("../../error/custom-error"));
  _customError = function () {
    return data;
  };
  return data;
}
function _exceptions() {
  const data = require("../exceptions");
  _exceptions = function () {
    return data;
  };
  return data;
}
function _actionNotFound() {
  const data = _interopRequireDefault(require("../exceptions/action-not-found"));
  _actionNotFound = function () {
    return data;
  };
  return data;
}
function _clientIdInUse() {
  const data = _interopRequireDefault(require("../exceptions/client-id-in-use"));
  _clientIdInUse = function () {
    return data;
  };
  return data;
}
function _serverIsBusy() {
  const data = _interopRequireDefault(require("../exceptions/server-is-busy"));
  _serverIsBusy = function () {
    return data;
  };
  return data;
}
function _exceptions2() {
  const data = require("./exceptions");
  _exceptions2 = function () {
    return data;
  };
  return data;
}
function _exportAnotherOwnerPrivate() {
  const data = _interopRequireDefault(require("./exceptions/export-another-owner-private"));
  _exportAnotherOwnerPrivate = function () {
    return data;
  };
  return data;
}
function _laneNotFound() {
  const data = require("../../api/scope/lib/exceptions/lane-not-found");
  _laneNotFound = function () {
    return data;
  };
  return data;
}
// eslint-disable-next-line complexity
function remoteErrorHandler(code, parsedError, remotePath, err) {
  switch (code) {
    default:
      return new (_exceptions2().UnexpectedNetworkError)(parsedError ? parsedError.message : err);
    case 127:
      return new (_exceptions().ComponentNotFound)(parsedError && parsedError.id || err);
    case 128:
      return new (_exceptions2().PermissionDenied)(remotePath);
    case 129:
      return new (_exceptions2().RemoteScopeNotFound)(parsedError && parsedError.name || err);
    case 130:
      return new (_exceptions2().PermissionDenied)(remotePath);
    case 131:
      {
        const idsWithConflicts = parsedError && parsedError.idsAndVersions ? parsedError.idsAndVersions : [];
        const idsNeedUpdate = parsedError && parsedError.idsNeedUpdate ? parsedError.idsNeedUpdate : [];
        return new (_exceptions().MergeConflictOnRemote)(idsWithConflicts, idsNeedUpdate);
      }
    case 132:
      return new (_customError().default)(parsedError && parsedError.message ? parsedError.message : err);
    case 133:
      return new (_exceptions2().OldClientVersion)(parsedError && parsedError.message ? parsedError.message : err);
    case 134:
      {
        const msg = parsedError && parsedError.message ? parsedError.message : err;
        const sourceScope = parsedError && parsedError.sourceScope ? parsedError.sourceScope : 'unknown';
        const destinationScope = parsedError && parsedError.destinationScope ? parsedError.destinationScope : 'unknown';
        return new (_exportAnotherOwnerPrivate().default)(msg, sourceScope, destinationScope);
      }
    case 135:
      {
        return new (_actionNotFound().default)(parsedError && parsedError.name || err);
      }
    case 136:
      {
        return new (_clientIdInUse().default)(parsedError && parsedError.clientId || err);
      }
    case 137:
      {
        return new (_serverIsBusy().default)(parsedError.queueSize, parsedError.currentExportId);
      }
    case 138:
      {
        return new (_laneNotFound().LaneNotFound)(parsedError.scopeName, parsedError.laneName);
      }
  }
}