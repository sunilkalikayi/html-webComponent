import { Client as Ssh2Client } from 'ssh2';
import { BitId } from '../../../bit-id';
import ConsumerComponent from '../../../consumer/component';
import { ListScopeResult } from '../../../consumer/component/components-list';
import GeneralError from '../../../error/general-error';
import ComponentObjects from '../../component-objects';
import DependencyGraph from '../../graph/scope-graph';
import { LaneData } from '../../lanes/lanes';
import { ComponentLog } from '../../models/model-component';
import RemovedObjects from '../../removed-components';
import { ScopeDescriptor } from '../../scope';
import { RemoteScopeNotFound } from '../exceptions';
import { Network } from '../network';
import { ObjectItemsStream, ObjectList } from '../../objects/object-list';
import { FETCH_OPTIONS } from '../../../api/scope/lib/fetch';
import { PushOptions } from '../../../api/scope/lib/put';
export declare type SSHProps = {
    path: string;
    username: string;
    port: number;
    host: string;
};
export declare type SSHConnectionStrategyName = 'token' | 'ssh-agent' | 'ssh-key' | 'user-password' | 'anonymous';
export declare const DEFAULT_STRATEGIES: SSHConnectionStrategyName[];
export declare const DEFAULT_READ_STRATEGIES: SSHConnectionStrategyName[];
export default class SSH implements Network {
    connection: Ssh2Client | null | undefined;
    path: string;
    username: string;
    port: number;
    host: string;
    _sshUsername?: string;
    constructor({ path, username, port, host }: SSHProps);
    /**
     * Network strategies:
     * 1) token (generated by bit-login command)
     * 2) ssh-agent (public-key should be saved on bit.dev, user needs to enable ssh-agent in its os. the agent saves the passphrase, so no need to enter)
     * 3) ssh-key. (user can specify location by `bit config`, if not, the default one is used. doesn't support passphrase)
     * 4) anonymous. (for read operations only) - trying to do the action as anonymous user
     * 5) prompt of user/password
     */
    connect(strategiesNames?: SSHConnectionStrategyName[]): Promise<SSH>;
    _tokenAuthentication(): Promise<SSH>;
    _anonymousAuthentication(): Promise<SSH>;
    _sshAgentAuthentication(): Promise<SSH>;
    _sshKeyAuthentication(): Promise<SSH>;
    _userPassAuthentication(): Promise<SSH>;
    close(): this;
    _composeBaseObject(passphrase?: string): {
        username: string;
        host: string;
        port: number;
        passphrase: string | undefined;
        readyTimeout: number;
    };
    _composeTokenAuthObject(): Record<string, any> | null | undefined;
    _composeAnonymousAuthObject(): Record<string, any> | null | undefined;
    _composeUserPassObject(): Promise<any>;
    _hasAgentSocket(): boolean;
    _connectWithConfig(sshConfig: Record<string, any>, authenticationType: string, authFailedMsg: string): Promise<SSH>;
    buildCmd(commandName: string, path: string, payload: any, context: any): string;
    exec(commandName: string, payload?: any, context?: Record<string, any>, dataToStream?: string): Promise<any>;
    errorHandler(code: number, err: string): GeneralError | import("../../exceptions").ComponentNotFound | import("../../exceptions").MergeConflictOnRemote | import("../exceptions").OldClientVersion | import("../exceptions").PermissionDenied | RemoteScopeNotFound | import("../exceptions").UnexpectedNetworkError | import("../exceptions/export-another-owner-private").default | import("../../../api/scope/lib/exceptions/lane-not-found").LaneNotFound | import("../../exceptions/client-id-in-use").default | import("../../../error/custom-error").default | import("../../exceptions/action-not-found").default | import("../../exceptions/server-is-busy").default;
    _unpack(data: any, base64?: boolean): import("../../../utils/pack-command").PackData;
    pushMany(objectList: ObjectList, pushOptions: PushOptions, context?: Record<string, any>): Promise<string[]>;
    action<Options, Result>(name: string, options: Options): Promise<Result>;
    deleteMany(ids: string[], force: boolean, context?: Record<string, any>, idsAreLanes?: boolean): Promise<ComponentObjects[] | RemovedObjects>;
    describeScope(): Promise<ScopeDescriptor>;
    list(namespacesUsingWildcards?: string): Promise<ListScopeResult[]>;
    listLanes(name?: string, mergeData?: boolean): Promise<LaneData[]>;
    latestVersions(componentIds: BitId[]): Promise<string[]>;
    search(query: string, reindex: boolean): Promise<any>;
    show(id: BitId): Promise<ConsumerComponent | null | undefined>;
    log(id: BitId): Promise<ComponentLog[]>;
    graph(bitId?: BitId): Promise<DependencyGraph>;
    fetch(idsStr: string[], fetchOptions: FETCH_OPTIONS, context?: Record<string, any>): Promise<ObjectItemsStream>;
}
