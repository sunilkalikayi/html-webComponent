import { FETCH_OPTIONS } from '../../../api/scope/lib/fetch';
import { PushOptions } from '../../../api/scope/lib/put';
import { BitId } from '../../../bit-id';
import { ListScopeResult } from '../../../consumer/component/components-list';
import Component from '../../../consumer/component/consumer-component';
import ComponentObjects from '../../component-objects';
import DependencyGraph from '../../graph/scope-graph';
import { LaneData } from '../../lanes/lanes';
import { ComponentLog } from '../../models/model-component';
import { ObjectItemsStream, ObjectList } from '../../objects/object-list';
import Scope, { ScopeDescriptor } from '../../scope';
import { Network } from '../network';
export default class Fs implements Network {
    scopePath: string;
    scope: Scope | null | undefined;
    constructor(scopePath: string);
    close(): this;
    getScope(): Scope;
    describeScope(): Promise<ScopeDescriptor>;
    pushMany(objectList: ObjectList, pushOptions: PushOptions): Promise<string[]>;
    action<Options, Result>(name: string, options: Options): Promise<Result>;
    deleteMany(ids: string[], force: boolean, context: Record<string, any>, idsAreLanes?: boolean): Promise<ComponentObjects[]>;
    fetch(ids: string[], fetchOptions: FETCH_OPTIONS): Promise<ObjectItemsStream>;
    latestVersions(componentIds: BitId[]): Promise<string[]>;
    list(namespacesUsingWildcards?: string): Promise<ListScopeResult[]>;
    show(bitId: BitId): Promise<Component>;
    log(bitId: BitId): Promise<ComponentLog[]>;
    listLanes(name?: string, mergeData?: boolean): Promise<LaneData[]>;
    graph(bitId?: BitId): Promise<DependencyGraph>;
    connect(): Promise<Fs>;
}
