"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));
  _fsExtra = function () {
    return data;
  };
  return data;
}
function path() {
  const data = _interopRequireWildcard(require("path"));
  path = function () {
    return data;
  };
  return data;
}
function _uuid() {
  const data = require("uuid");
  _uuid = function () {
    return data;
  };
  return data;
}
function _constants() {
  const data = require("../../constants");
  _constants = function () {
    return data;
  };
  return data;
}
function _logger() {
  const data = _interopRequireDefault(require("../../logger/logger"));
  _logger = function () {
    return data;
  };
  return data;
}
function _repository() {
  const data = _interopRequireDefault(require("../repository"));
  _repository = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
class Tmp extends _repository().default {
  getPath() {
    return path().join(super.getPath(), _constants().BIT_TMP_DIRNAME);
  }
  composePath(p) {
    return path().join(this.getPath(), p);
  }
  async save(data, ext = '.js') {
    const fileName = (0, _uuid().v4)();
    const filePath = this.composePath(`${fileName}${ext}`);
    await _fsExtra().default.outputFile(filePath, data);
    return filePath;
  }
  saveSync(data, ext = '.js') {
    const fileName = (0, _uuid().v4)();
    const filePath = this.composePath(`${fileName}${ext}`);
    _fsExtra().default.outputFileSync(filePath, data);
    return filePath;
  }
  remove(fileNameOrPath, ext = '.js') {
    const fileName = path().parse(fileNameOrPath).name;
    const filePath = this.composePath(`${fileName}${ext}`);
    _logger().default.info(`tmp.remove, deleting ${filePath}`);
    return _fsExtra().default.remove(filePath);
  }
  removeSync(fileNameOrPath, ext = '.js') {
    const fileName = path().parse(fileNameOrPath).name;
    const filePath = this.composePath(`${fileName}${ext}`);
    _logger().default.info(`tmp.removeSync, deleting ${filePath}`);
    return _fsExtra().default.removeSync(filePath);
  }
  clear() {
    const dirToDelete = this.getPath();
    _logger().default.info(`tmp.clear, deleting ${dirToDelete}`);
    return _fsExtra().default.emptyDir(dirToDelete);
  }
  clearSync() {
    const dirToDelete = this.getPath();
    _logger().default.info(`tmp.clearSync, deleting ${dirToDelete}`);
    return _fsExtra().default.emptyDirSync(dirToDelete);
  }
}
exports.default = Tmp;