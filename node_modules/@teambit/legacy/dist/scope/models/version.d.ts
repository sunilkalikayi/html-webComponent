/// <reference types="node" />
import { LaneId } from '@teambit/lane-id';
import { BitId, BitIds } from '../../bit-id';
import { BuildStatus } from '../../constants';
import ConsumerComponent from '../../consumer/component';
import { Dependencies, Dependency } from '../../consumer/component/dependencies';
import { SourceFile } from '../../consumer/component/sources';
import { ComponentOverridesData } from '../../consumer/config/component-overrides';
import { ExtensionDataList } from '../../consumer/config/extension-data';
import { Doclet } from '../../jsdoc/types';
import { PathLinux } from '../../utils/path';
import { BitObject, Ref } from '../objects';
import { ObjectItem } from '../objects/object-list';
import Repository from '../objects/repository';
import Source from './source';
export declare type SourceFileModel = {
    name: string;
    relativePath: PathLinux;
    test: boolean;
    file: Ref;
};
export declare type DistFileModel = SourceFileModel;
export declare type ArtifactFileModel = {
    relativePath: PathLinux;
    file: Ref;
};
export declare type Log = {
    message: string;
    date: string;
    username: string | undefined;
    email: string | undefined;
};
declare type ExternalHead = {
    head: Ref;
    laneId: LaneId;
};
declare type SquashData = {
    previousParents: Ref[];
    laneId: LaneId;
};
export declare type VersionProps = {
    mainFile: PathLinux;
    files: Array<SourceFileModel>;
    log: Log;
    docs?: Doclet[];
    dependencies?: Dependency[];
    devDependencies?: Dependency[];
    flattenedDependencies?: BitIds;
    packageDependencies?: {
        [key: string]: string;
    };
    devPackageDependencies?: {
        [key: string]: string;
    };
    peerPackageDependencies?: {
        [key: string]: string;
    };
    bindingPrefix?: string;
    schema?: string;
    overrides: ComponentOverridesData;
    packageJsonChangedProps?: Record<string, any>;
    hash?: string;
    parents?: Ref[];
    squashed?: SquashData;
    unrelated?: ExternalHead;
    extensions?: ExtensionDataList;
    buildStatus?: BuildStatus;
    componentId?: BitId;
    bitVersion?: string;
};
/**
 * Represent a version model in the scope
 */
export default class Version extends BitObject {
    mainFile: PathLinux;
    files: Array<SourceFileModel>;
    log: Log;
    docs: Doclet[] | undefined;
    dependencies: Dependencies;
    devDependencies: Dependencies;
    flattenedDependencies: BitIds;
    packageDependencies: {
        [key: string]: string;
    };
    devPackageDependencies: {
        [key: string]: string;
    };
    peerPackageDependencies: {
        [key: string]: string;
    };
    bindingPrefix: string | undefined;
    schema: string | undefined;
    overrides: ComponentOverridesData;
    packageJsonChangedProps: Record<string, any>;
    _hash: string;
    parents: Ref[];
    squashed?: SquashData;
    unrelated?: ExternalHead;
    extensions: ExtensionDataList;
    buildStatus?: BuildStatus;
    componentId?: BitId;
    bitVersion?: string;
    constructor(props: VersionProps);
    validateVersion(): void;
    id(): string;
    calculateHash(): Ref;
    hash(): Ref;
    get extensionDependencies(): Dependencies;
    getAllFlattenedDependencies(): BitIds;
    getAllDependencies(): Dependency[];
    get depsIdsGroupedByType(): {
        dependencies: BitIds;
        devDependencies: BitIds;
        extensionDependencies: BitIds;
    };
    getAllDependenciesCloned(): Dependencies;
    getAllDependenciesIds(): BitIds;
    getDependenciesIdsExcludeExtensions(): BitIds;
    updateFlattenedDependency(currentId: BitId, newId: BitId): void;
    refs(): Ref[];
    refsWithOptions(includeParents?: boolean, includeArtifacts?: boolean): Ref[];
    refsWithoutParents(): Ref[];
    collectManyObjects(repo: Repository, refs: Ref[]): Promise<ObjectItem[]>;
    toObject(): any;
    validateBeforePersisting(versionStr: string): void;
    toBuffer(pretty: boolean): Buffer;
    /**
     * used by the super class BitObject
     */
    static parse(contents: string, hash: string): Version;
    /**
     * used by raw-object.toRealObject()
     */
    static from(versionProps: VersionProps, hash: string): Version;
    /**
     * Create version model object from consumer component
     * @param {*} param0
     */
    static fromComponent({ component, files }: {
        component: ConsumerComponent;
        files: Array<SourceFileModel>;
    }): Version;
    setNewHash(): void;
    get ignoreSharedDir(): boolean;
    get isLegacy(): boolean;
    setDist(dist: Source | undefined): void;
    hasParent(ref: Ref): Ref | undefined;
    addParent(ref: Ref): void;
    setSquashed(squashData: SquashData): void;
    addAsOnlyParent(ref: Ref): void;
    removeParent(ref: Ref): void;
    modelFilesToSourceFiles(repository: Repository): Promise<SourceFile[]>;
    isRemoved(): boolean;
    /**
     * Validate the version model properties, to make sure we are not inserting something
     * in the wrong format
     */
    validate(): void;
}
export {};
