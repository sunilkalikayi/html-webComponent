"use strict";

require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.string.replace.js");
function _chai() {
  const data = require("chai");
  _chai = function () {
    return data;
  };
  return data;
}
function _bitId() {
  const data = require("../../bit-id");
  _bitId = function () {
    return data;
  };
  return data;
}
function _messagePerComponent() {
  const data = require("./message-per-component");
  _messagePerComponent = function () {
    return data;
  };
  return data;
}
function getInstance() {
  return new (_messagePerComponent().MessagePerComponentFetcher)(new (_bitId().BitIds)(new (_bitId().BitId)({
    name: 'bar'
  })), new (_bitId().BitIds)());
}
describe('MessagePerComponent', () => {
  describe('parseFileWithMessages', () => {
    it('should throw an error when the file has no changes', () => {
      const messagePerComponent = getInstance();
      const template = messagePerComponent.getTemplate();
      (0, _chai().expect)(() => messagePerComponent.parseFileWithMessages(template)).to.throw();
    });
    it('should assign the default message to the component if empty', () => {
      const messagePerComponent = getInstance();
      const template = messagePerComponent.getTemplate();
      const templateChanged = template.replace('DEFAULT:', `DEFAULT: my default msg`);
      const parsed = messagePerComponent.parseFileWithMessages(templateChanged);
      (0, _chai().expect)(parsed[0].msg).to.equal('my default msg');
    });
    it('should support multiple lines per id', () => {
      const messagePerComponent = getInstance();
      const template = messagePerComponent.getTemplate();
      const msgWithNewLine = 'msg for bar\nAnother line';
      const templateChanged = template.replace('bar:', `bar: ${msgWithNewLine}`);
      const parsed = messagePerComponent.parseFileWithMessages(templateChanged);
      (0, _chai().expect)(parsed[0].msg).to.equal(msgWithNewLine);
    });
    it('should support multiple lines for the default message', () => {
      const messagePerComponent = getInstance();
      const template = messagePerComponent.getTemplate();
      const msgWithNewLine = 'default msg\nAnother line';
      const templateChanged = template.replace('DEFAULT:', `DEFAULT: ${msgWithNewLine}`);
      const parsed = messagePerComponent.parseFileWithMessages(templateChanged);
      (0, _chai().expect)(parsed[0].msg).to.equal(msgWithNewLine);
    });
  });
});