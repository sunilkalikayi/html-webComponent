"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _chai() {
  const data = require("chai");
  _chai = function () {
    return data;
  };
  return data;
}
function _exceptions() {
  const data = require("../exceptions");
  _exceptions = function () {
    return data;
  };
  return data;
}
function _componentNeedsUpdate() {
  const data = _interopRequireDefault(require("../exceptions/component-needs-update"));
  _componentNeedsUpdate = function () {
    return data;
  };
  return data;
}
function _modelComponent() {
  const data = _interopRequireDefault(require("../models/model-component"));
  _modelComponent = function () {
    return data;
  };
  return data;
}
function _modelComponentsMerger() {
  const data = require("./model-components-merger");
  _modelComponentsMerger = function () {
    return data;
  };
  return data;
}
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
describe('ModelComponentMerger', () => {
  describe('merge', () => {
    it('should not remove a version that exist locally but not in the incoming component if it came not from its origin', async () => {
      const existingComponent = _modelComponent().default.parse(JSON.stringify({
        name: 'foo',
        versions: {
          '0.0.1': '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e',
          '0.0.2': 'c471678f719783b044ac6d933ccb1da7132dc93d'
        }
      }));
      const incomingComponent = _modelComponent().default.parse(JSON.stringify({
        name: 'foo',
        versions: {
          '0.0.1': '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e'
        }
      }));
      const {
        mergedComponent,
        mergedVersions
      } = await new (_modelComponentsMerger().ModelComponentMerger)(existingComponent, incomingComponent, false, true, false).merge();
      (0, _chai().expect)(mergedComponent.versions).to.have.property('0.0.2');
      (0, _chai().expect)(mergedComponent.versions['0.0.2'].toString()).to.equal('c471678f719783b044ac6d933ccb1da7132dc93d');
      (0, _chai().expect)(mergedVersions).to.deep.equal([]);
      (0, _chai().expect)(() => mergedComponent.validate()).to.not.throw();
    });
    it('should move a version to orphanedVersions if the incoming came from its origin and it does not have the version', async () => {
      const existingComponent = _modelComponent().default.parse(JSON.stringify({
        name: 'foo',
        versions: {
          '0.0.1': '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e',
          '0.0.2': 'c471678f719783b044ac6d933ccb1da7132dc93d'
        }
      }));
      const incomingComponent = _modelComponent().default.parse(JSON.stringify({
        name: 'foo',
        versions: {
          '0.0.1': '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e'
        }
      }));
      const {
        mergedComponent,
        mergedVersions
      } = await new (_modelComponentsMerger().ModelComponentMerger)(existingComponent, incomingComponent, true, true, false).merge();
      (0, _chai().expect)(mergedComponent.versions).to.not.have.property('0.0.2');
      (0, _chai().expect)(mergedComponent.orphanedVersions).to.have.property('0.0.2');
      (0, _chai().expect)(mergedComponent.orphanedVersions['0.0.2'].toString()).to.equal('c471678f719783b044ac6d933ccb1da7132dc93d');
      (0, _chai().expect)(mergedVersions).to.deep.equal([]);
      (0, _chai().expect)(() => mergedComponent.validate()).to.not.throw();
    });
    it('should move a version from orphanedVersions to versions if the incoming came from its origin and it has this version', async () => {
      const existingComponent = _modelComponent().default.parse(JSON.stringify({
        name: 'foo',
        versions: {
          '0.0.2': 'c471678f719783b044ac6d933ccb1da7132dc93d'
        },
        orphanedVersions: {
          '0.0.1': '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e'
        }
      }));
      const incomingComponent = _modelComponent().default.parse(JSON.stringify({
        name: 'foo',
        versions: {
          '0.0.1': '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e',
          '0.0.2': 'c471678f719783b044ac6d933ccb1da7132dc93d'
        }
      }));
      const {
        mergedComponent,
        mergedVersions
      } = await new (_modelComponentsMerger().ModelComponentMerger)(existingComponent, incomingComponent, true, true, false).merge();
      (0, _chai().expect)(mergedComponent.versions).to.have.property('0.0.1');
      (0, _chai().expect)(mergedComponent.orphanedVersions).to.not.have.property('0.0.1');
      (0, _chai().expect)(mergedVersions).to.deep.equal(['0.0.1']);
      (0, _chai().expect)(() => mergedComponent.validate()).to.not.throw();
    });
    it('should override a version from the incoming component in case of hash discrepancies', async () => {
      const existingComponent = _modelComponent().default.parse(JSON.stringify({
        name: 'foo',
        versions: {
          '0.0.1': '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e'
        }
      }));
      const incomingComponent = _modelComponent().default.parse(JSON.stringify({
        name: 'foo',
        versions: {
          '0.0.1': 'c471678f719783b044ac6d933ccb1da7132dc93d'
        }
      }));
      const {
        mergedComponent,
        mergedVersions
      } = await new (_modelComponentsMerger().ModelComponentMerger)(existingComponent, incomingComponent, true, true, false).merge();
      (0, _chai().expect)(mergedComponent.versions['0.0.1'].toString()).to.equal('c471678f719783b044ac6d933ccb1da7132dc93d');
      (0, _chai().expect)(mergedVersions).to.deep.equal(['0.0.1']);
      (0, _chai().expect)(() => mergedComponent.validate()).to.not.throw();
    });
    it('should add versions that exist in the incoming component but not locally', async () => {
      const existingComponent = _modelComponent().default.parse(JSON.stringify({
        name: 'foo',
        versions: {
          '0.0.1': '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e'
        }
      }));
      const incomingComponent = _modelComponent().default.parse(JSON.stringify({
        name: 'foo',
        versions: {
          '0.0.1': '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e',
          '0.0.2': 'c471678f719783b044ac6d933ccb1da7132dc93d',
          '0.0.3': '56f2b008f43c20f6538ef27023759c3d9a44992c'
        }
      }));
      const {
        mergedComponent,
        mergedVersions
      } = await new (_modelComponentsMerger().ModelComponentMerger)(existingComponent, incomingComponent, true, true, false).merge();
      (0, _chai().expect)(mergedComponent.versions).to.have.property('0.0.1');
      (0, _chai().expect)(mergedComponent.versions).to.have.property('0.0.2');
      (0, _chai().expect)(mergedComponent.versions).to.have.property('0.0.3');
      (0, _chai().expect)(mergedComponent.versions['0.0.1'].toString()).to.equal('3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e');
      (0, _chai().expect)(mergedComponent.versions['0.0.2'].toString()).to.equal('c471678f719783b044ac6d933ccb1da7132dc93d');
      (0, _chai().expect)(mergedComponent.versions['0.0.3'].toString()).to.equal('56f2b008f43c20f6538ef27023759c3d9a44992c');
      (0, _chai().expect)(mergedVersions).to.deep.equal(['0.0.2', '0.0.3']);
      (0, _chai().expect)(() => mergedComponent.validate()).to.not.throw();
    });
    describe('importing from origin', () => {
      it('should update the head and move tags to orphanedVersions if needed', async () => {
        var _mergedComponent$head;
        const existing = getComponentObject({
          versions: {
            '0.0.1': '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e',
            '0.0.2': 'c471678f719783b044ac6d933ccb1da7132dc93d'
          },
          head: 'c471678f719783b044ac6d933ccb1da7132dc93d'
        });
        const incoming = getComponentObject({
          versions: {
            '0.0.1': '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e'
          },
          head: '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e'
        });
        const {
          mergedComponent
        } = await merge(existing, incoming, true, true);
        (0, _chai().expect)((_mergedComponent$head = mergedComponent.head) === null || _mergedComponent$head === void 0 ? void 0 : _mergedComponent$head.toString()).to.equal('3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e');
        (0, _chai().expect)(mergedComponent.versions).to.have.property('0.0.1');
        (0, _chai().expect)(mergedComponent.versions).to.not.have.property('0.0.2');
        (0, _chai().expect)(mergedComponent.orphanedVersions).to.have.property('0.0.2');
      });
      it('should not update the head if changed locally', async () => {
        var _mergedComponent$head2;
        const existing = getComponentObject({
          versions: {
            '0.0.1': '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e',
            '0.0.2': 'c471678f719783b044ac6d933ccb1da7132dc93d'
          },
          state: {
            versions: {
              '0.0.2': {
                local: true
              }
            }
          },
          head: 'c471678f719783b044ac6d933ccb1da7132dc93d'
        });
        const incoming = getComponentObject({
          versions: {
            '0.0.1': '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e'
          },
          head: '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e'
        });
        const {
          mergedComponent
        } = await merge(existing, incoming, true, true);
        (0, _chai().expect)((_mergedComponent$head2 = mergedComponent.head) === null || _mergedComponent$head2 === void 0 ? void 0 : _mergedComponent$head2.toString()).to.equal('c471678f719783b044ac6d933ccb1da7132dc93d');
        (0, _chai().expect)(mergedComponent.versions).to.have.property('0.0.1');
        (0, _chai().expect)(mergedComponent.versions).to.have.property('0.0.2');
        (0, _chai().expect)(mergedComponent.orphanedVersions).to.not.have.property('0.0.2');
      });
      it('should throw MergeConflict if same versions have different hash and changed locally', async () => {
        const existing = getComponentObject({
          versions: {
            '0.0.1': '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e',
            '0.0.2': 'c471678f719783b044ac6d933ccb1da7132dc93d'
          },
          state: {
            versions: {
              '0.0.2': {
                local: true
              }
            }
          },
          head: 'c471678f719783b044ac6d933ccb1da7132dc93d'
        });
        const incoming = getComponentObject({
          versions: {
            '0.0.1': '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e',
            '0.0.2': 'fa2ec220dbf817c07b2119c561ce8d3fe163f03d'
          },
          head: 'fa2ec220dbf817c07b2119c561ce8d3fe163f03d'
        });
        try {
          await merge(existing, incoming, true, true);
          _chai().expect.fail();
        } catch (err) {
          (0, _chai().expect)(err).to.be.instanceOf(_exceptions().MergeConflict);
        }
      });
      it('should not throw MergeConflict if same versions have different hash and not changed locally', async () => {
        var _mergedComponent$head3;
        const existing = getComponentObject({
          versions: {
            '0.0.1': '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e',
            '0.0.2': 'c471678f719783b044ac6d933ccb1da7132dc93d'
          },
          head: 'c471678f719783b044ac6d933ccb1da7132dc93d'
        });
        const incoming = getComponentObject({
          versions: {
            '0.0.1': '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e',
            '0.0.2': 'fa2ec220dbf817c07b2119c561ce8d3fe163f03d'
          },
          head: 'fa2ec220dbf817c07b2119c561ce8d3fe163f03d'
        });
        const {
          mergedComponent
        } = await merge(existing, incoming, true, true);
        (0, _chai().expect)((_mergedComponent$head3 = mergedComponent.head) === null || _mergedComponent$head3 === void 0 ? void 0 : _mergedComponent$head3.toString()).to.equal('fa2ec220dbf817c07b2119c561ce8d3fe163f03d');
        (0, _chai().expect)(mergedComponent.versions).to.have.property('0.0.1');
        (0, _chai().expect)(mergedComponent.versions).to.have.property('0.0.2');
        (0, _chai().expect)(mergedComponent.versions['0.0.2'].toString()).to.equal('fa2ec220dbf817c07b2119c561ce8d3fe163f03d');
      });
    });
    describe('importing from non-origin', () => {
      it('should not update the head and not move tags to orphanedVersions', async () => {
        var _mergedComponent$head4;
        const existing = getComponentObject({
          versions: {
            '0.0.1': '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e',
            '0.0.2': 'c471678f719783b044ac6d933ccb1da7132dc93d'
          },
          head: 'c471678f719783b044ac6d933ccb1da7132dc93d'
        });
        const incoming = getComponentObject({
          versions: {
            '0.0.1': '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e'
          },
          head: '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e'
        });
        const {
          mergedComponent
        } = await merge(existing, incoming, true, false);
        (0, _chai().expect)((_mergedComponent$head4 = mergedComponent.head) === null || _mergedComponent$head4 === void 0 ? void 0 : _mergedComponent$head4.toString()).to.equal('c471678f719783b044ac6d933ccb1da7132dc93d');
        (0, _chai().expect)(mergedComponent.versions).to.have.property('0.0.1');
        (0, _chai().expect)(mergedComponent.versions).to.have.property('0.0.2');
        (0, _chai().expect)(mergedComponent.orphanedVersions).to.not.have.property('0.0.2');
      });
      it('should not throw MergeConflict if same versions have different hash and not put it in orphaned', async () => {
        var _mergedComponent$head5;
        const existing = getComponentObject({
          versions: {
            '0.0.1': '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e',
            '0.0.2': 'c471678f719783b044ac6d933ccb1da7132dc93d'
          },
          head: 'c471678f719783b044ac6d933ccb1da7132dc93d'
        });
        const incoming = getComponentObject({
          versions: {
            '0.0.1': '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e',
            '0.0.2': 'fa2ec220dbf817c07b2119c561ce8d3fe163f03d'
          },
          head: 'fa2ec220dbf817c07b2119c561ce8d3fe163f03d'
        });
        const {
          mergedComponent
        } = await merge(existing, incoming, true, false);
        (0, _chai().expect)((_mergedComponent$head5 = mergedComponent.head) === null || _mergedComponent$head5 === void 0 ? void 0 : _mergedComponent$head5.toString()).to.equal('c471678f719783b044ac6d933ccb1da7132dc93d');
        (0, _chai().expect)(mergedComponent.versions).to.have.property('0.0.1');
        (0, _chai().expect)(mergedComponent.versions).to.have.property('0.0.2');
        (0, _chai().expect)(mergedComponent.versions['0.0.2'].toString()).to.equal('c471678f719783b044ac6d933ccb1da7132dc93d');
        // no need to put in orphaned because this version exists already in "versions" prop.
        (0, _chai().expect)(mergedComponent.orphanedVersions).to.not.have.property('0.0.2');
      });
      it('should copy orphanedVersions', async () => {
        var _mergedComponent$head6;
        const existing = getComponentObject({
          versions: {
            '0.0.1': '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e'
          },
          head: '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e'
        });
        const incoming = getComponentObject({
          versions: {
            '0.0.1': '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e'
          },
          orphanedVersions: {
            '0.0.2': 'c471678f719783b044ac6d933ccb1da7132dc93d'
          },
          head: '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e'
        });
        const {
          mergedComponent
        } = await merge(existing, incoming, true, false);
        (0, _chai().expect)(mergedComponent.orphanedVersions).to.have.property('0.0.2');
        (0, _chai().expect)(mergedComponent.orphanedVersions['0.0.2'].toString()).to.equal('c471678f719783b044ac6d933ccb1da7132dc93d');
        (0, _chai().expect)(mergedComponent.versions).to.have.property('0.0.1');
        (0, _chai().expect)(mergedComponent.versions).to.not.have.property('0.0.2');
        (0, _chai().expect)((_mergedComponent$head6 = mergedComponent.head) === null || _mergedComponent$head6 === void 0 ? void 0 : _mergedComponent$head6.toString()).to.equal('3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e');
      });
      it('should not copy orphanedVersion if exists in versions', async () => {
        var _mergedComponent$head7;
        const existing = getComponentObject({
          versions: {
            '0.0.1': '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e',
            '0.0.2': 'c471678f719783b044ac6d933ccb1da7132dc93d'
          },
          head: 'c471678f719783b044ac6d933ccb1da7132dc93d'
        });
        const incoming = getComponentObject({
          versions: {
            '0.0.1': '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e'
          },
          orphanedVersions: {
            '0.0.2': 'c471678f719783b044ac6d933ccb1da7132dc93d'
          },
          head: '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e'
        });
        const {
          mergedComponent
        } = await merge(existing, incoming, true, false);
        (0, _chai().expect)((_mergedComponent$head7 = mergedComponent.head) === null || _mergedComponent$head7 === void 0 ? void 0 : _mergedComponent$head7.toString()).to.equal('c471678f719783b044ac6d933ccb1da7132dc93d');
        (0, _chai().expect)(mergedComponent.versions).to.have.property('0.0.1');
        (0, _chai().expect)(mergedComponent.versions).to.have.property('0.0.2');
        (0, _chai().expect)(mergedComponent.orphanedVersions).to.not.have.property('0.0.2');
        (0, _chai().expect)(() => mergedComponent.validate()).not.to.throw();
      });
    });
    describe('exporting to origin', () => {
      it('should update the head', async () => {
        var _mergedComponent$head8;
        const existing = getComponentObject({
          versions: {
            '0.0.1': '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e'
          },
          head: '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e'
        });
        const incoming = getComponentObject({
          versions: {
            '0.0.1': '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e',
            '0.0.2': 'c471678f719783b044ac6d933ccb1da7132dc93d'
          },
          head: 'c471678f719783b044ac6d933ccb1da7132dc93d'
        });
        const {
          mergedComponent,
          mergedVersions
        } = await merge(existing, incoming, false, true);
        (0, _chai().expect)((_mergedComponent$head8 = mergedComponent.head) === null || _mergedComponent$head8 === void 0 ? void 0 : _mergedComponent$head8.toString()).to.equal('c471678f719783b044ac6d933ccb1da7132dc93d');
        (0, _chai().expect)(mergedComponent.versions).to.have.property('0.0.1');
        (0, _chai().expect)(mergedComponent.versions).to.have.property('0.0.2');
        (0, _chai().expect)(mergedVersions).to.deep.equal(['0.0.2']);
      });
      it('should throw MergeConflict if same versions have different hash', async () => {
        const existing = getComponentObject({
          versions: {
            '0.0.1': '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e',
            '0.0.2': 'c471678f719783b044ac6d933ccb1da7132dc93d'
          },
          head: 'c471678f719783b044ac6d933ccb1da7132dc93d'
        });
        const incoming = getComponentObject({
          versions: {
            '0.0.1': '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e',
            '0.0.2': 'fa2ec220dbf817c07b2119c561ce8d3fe163f03d'
          },
          head: 'fa2ec220dbf817c07b2119c561ce8d3fe163f03d'
        });
        try {
          await merge(existing, incoming, false, true);
          _chai().expect.fail();
        } catch (err) {
          (0, _chai().expect)(err).to.be.instanceOf(_exceptions().MergeConflict);
        }
      });
      it('when incoming is behind should throw ComponentNeedsUpdate', async () => {
        const existing = getComponentObject({
          versions: {
            '0.0.1': '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e',
            '0.0.5': 'c471678f719783b044ac6d933ccb1da7132dc93d'
          },
          head: 'c471678f719783b044ac6d933ccb1da7132dc93d'
        });
        const incoming = getComponentObject({
          versions: {
            '0.0.1': '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e',
            '0.0.2': 'fa2ec220dbf817c07b2119c561ce8d3fe163f03d'
          },
          head: 'fa2ec220dbf817c07b2119c561ce8d3fe163f03d'
        });
        try {
          await merge(existing, incoming, false, true, true);
          _chai().expect.fail();
        } catch (err) {
          (0, _chai().expect)(err).to.be.instanceOf(_componentNeedsUpdate().default);
        }
      });
      it('when incoming is behind and the versions are conflicted, should throw MergeConflict', async () => {
        const existing = getComponentObject({
          versions: {
            '0.0.1': '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e',
            '0.0.2': 'c471678f719783b044ac6d933ccb1da7132dc93d'
          },
          head: 'c471678f719783b044ac6d933ccb1da7132dc93d'
        });
        const incoming = getComponentObject({
          versions: {
            '0.0.1': '3d4f647fb943437b675e7163ed1e4d1f7c8a8c0e',
            '0.0.2': 'fa2ec220dbf817c07b2119c561ce8d3fe163f03d'
          },
          head: 'fa2ec220dbf817c07b2119c561ce8d3fe163f03d'
        });
        try {
          await merge(existing, incoming, false, true, true);
          _chai().expect.fail();
        } catch (err) {
          (0, _chai().expect)(err).to.be.instanceOf(_exceptions().MergeConflict);
        }
      });
    });
  });
});
function getComponentObject(componentObj) {
  return _modelComponent().default.parse(JSON.stringify(_objectSpread({
    name: 'foo'
  }, componentObj)));
}
async function merge(existingComponent, incomingComponent, isImport, isIncomingFromOrigin, existingHeadIsMissingInIncomingComponent = false) {
  const modelComponentMerger = new (_modelComponentsMerger().ModelComponentMerger)(existingComponent, incomingComponent, isImport, isIncomingFromOrigin, existingHeadIsMissingInIncomingComponent);
  return modelComponentMerger.merge();
}