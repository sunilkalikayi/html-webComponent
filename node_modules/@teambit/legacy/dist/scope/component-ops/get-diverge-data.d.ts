import { ModelComponent, Version } from '../models';
import { Ref, Repository } from '../objects';
import { DivergeData } from './diverge-data';
/**
 * traversing the snaps history is not cheap, so we first try to avoid it and if not possible,
 * traverse by the local head, if it finds the remote head, no need to traverse by the remote
 * head. (it also means that we can do fast-forward and no need for snap-merge).
 *
 * one exception is when at some point, there are two parents. because then, if traversing from one parent doesn't find
 * the remote head, all the snaps from this parent will be considered local incorrectly. we need to traverse also the
 * remote to be able to do the diff between the local snaps and the remote snaps.
 */
export declare function getDivergeData({ repo, modelComponent, remoteHead, otherRemoteHeads, // when remoteHead empty, instead of returning all local snaps, stop if found one of these snaps
checkedOutLocalHead, // in case locally on the workspace it has a different version
throws, // otherwise, save the error instance in the `DivergeData` object,
versionObjects, }: {
    repo: Repository;
    modelComponent: ModelComponent;
    remoteHead: Ref | null;
    otherRemoteHeads?: Ref[];
    checkedOutLocalHead?: Ref | null;
    throws?: boolean;
    versionObjects?: Version[];
}): Promise<DivergeData>;
