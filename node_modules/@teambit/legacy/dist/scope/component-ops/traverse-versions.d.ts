/**
 * the snaps are saved as DAG (Direct Acyclic Graph).
 * each snap has `parents` prop.
 * when this is the first snap, the `parents` is empty.
 * the followed snap has the first snap as a parent.
 * in case of a merge between lanes, the `parents` have two snaps from the two lanes.
 *
 * traverse all versions is not cheap. it must load the Version object to extract the `parents`
 * data. so, we plan to cache it. once this is cached, we'll change the implementation of a few
 * methods here.
 */
import memoize from 'memoizee';
import { ModelComponent, Version } from '../models';
import { Ref, Repository } from '../objects';
export declare type VersionInfo = {
    ref: Ref;
    tag?: string;
    version?: Version;
    error?: Error;
    /**
     * can be 'false' when retrieved from the tags data on the component-object and the Version is
     * not legacy. It can happen when running "bit import" on a diverge component and before the
     * merge. the component itself is merged, but the head wasn't changed.
     */
    isPartOfHistory?: boolean;
    parents: Ref[];
    onLane: boolean;
};
/**
 * by default it starts the traverse from the head or lane-head, unless "startFrom" is passed.
 * if versionObjects passed, use it instead of loading from the repo.
 */
export declare function getAllVersionsInfo({ modelComponent, repo, throws, versionObjects, startFrom, stopAt, }: {
    modelComponent: ModelComponent;
    repo?: Repository;
    throws?: boolean;
    versionObjects?: Version[];
    startFrom?: Ref | null;
    stopAt?: Ref[] | null;
}): Promise<VersionInfo[]>;
export declare function getAllVersionsObjects(modelComponent: ModelComponent, repo: Repository, throws?: boolean): Promise<Version[]>;
export declare function getAllVersionHashesByVersionsObjects(modelComponent: ModelComponent, versionObjects: Version[], throws?: boolean): Promise<Ref[]>;
export declare type GetAllVersionHashesParams = {
    modelComponent: ModelComponent;
    repo: Repository;
    throws?: boolean;
    versionObjects?: Version[];
    startFrom?: Ref | null;
    stopAt?: Ref[] | null;
};
export declare function getAllVersionHashes(options: GetAllVersionHashesParams): Promise<Ref[]>;
export declare const getAllVersionHashesMemoized: typeof getAllVersionHashes & memoize.Memoized<typeof getAllVersionHashes>;
export declare function hasVersionByRef(modelComponent: ModelComponent, ref: Ref, repo: Repository, startFrom?: Ref | null): Promise<boolean>;
