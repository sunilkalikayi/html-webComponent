import { LaneId } from '@teambit/lane-id';
import { Scope } from '..';
import { BitId } from '../../bit-id';
import { Lane } from '../models';
import { Repository } from '../objects';
import { ScopeJson, TrackLane } from '../scope-json';
import { Log } from '../models/lane';
export default class Lanes {
    objects: Repository;
    scopeJson: ScopeJson;
    constructor(objects: Repository, scopeJson: ScopeJson);
    listLanes(): Promise<Lane[]>;
    /** don't use it outside of Lanes. Use scope.loadLane instead */
    loadLane(id: LaneId): Promise<Lane | null>;
    saveLane(laneObject: Lane): Promise<void>;
    getAliasByLaneId(laneId: LaneId): string | null;
    getDefaultLaneId(): LaneId;
    getLocalTrackedLaneByRemoteName(remoteLane: string, remoteScope: string): string | null;
    getRemoteScopeByLocalLane(localLane: string): string | null;
    getRemoteTrackedDataByLocalLane(localLane: string): TrackLane | undefined;
    trackLane(trackLaneData: TrackLane): void;
    removeTrackLane(localLane: string): void;
    removeLanes(scope: Scope, lanes: string[], force: boolean, currentLaneName?: string): Promise<string[]>;
    /**
     * the name can be a full lane-id or only the lane-name, which can be the alias (local-lane) or the remote-name.
     */
    parseLaneIdFromString(name: string): Promise<LaneId>;
    getLanesData(scope: Scope, name?: string, mergeData?: boolean): Promise<LaneData[]>;
    private listLanesBackwardCompatible;
    private fixOldLanesToIncludeScope;
}
export declare type LaneData = {
    /**
     * @deprecated use id.name instead
     */
    name: string;
    /**
     * @deprecated use id.toString() instead
     */
    remote: string | null;
    id: LaneId;
    alias?: string | null;
    components: Array<{
        id: BitId;
        head: string;
    }>;
    isMerged: boolean | null;
    readmeComponent?: {
        id: BitId;
        head?: string;
    };
    log?: Log;
    hash: string;
};
