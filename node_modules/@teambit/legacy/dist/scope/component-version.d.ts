import { BitId, BitIds } from '../bit-id';
import ConsumerComponent from '../consumer/component';
import ModelComponent from './models/model-component';
import Version from './models/version';
import { Ref } from './objects';
import Repository from './objects/repository';
export default class ComponentVersion {
    readonly component: ModelComponent;
    readonly version: string;
    constructor(component: ModelComponent, version: string);
    getVersion(repository: Repository, throws?: boolean): Promise<Version>;
    flattenedDependencies(repository: Repository): Promise<BitIds>;
    toId(): BitId;
    get id(): BitId;
    toConsumer(repo: Repository): Promise<ConsumerComponent>;
}
export declare type CollectObjectsOpts = {
    collectParents: boolean;
    collectParentsUntil?: Ref | null;
    collectArtifacts: boolean;
};
