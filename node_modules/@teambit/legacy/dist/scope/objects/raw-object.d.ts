/// <reference types="node" />
import { BitObject } from '.';
export default class BitRawObject {
    headers: string[];
    type: string;
    content: Buffer;
    parsedContent: any;
    _ref: string;
    constructor(buffer: Buffer, ref: string | null | undefined, type: string | null | undefined, content: Buffer | null | undefined, parsedContent: any | null | undefined);
    getParsedContent(): any;
    getString(pretty: boolean): string | Buffer;
    set ref(ref: string);
    get ref(): string;
    get id(): string;
    refs(): string[];
    static fromDeflatedBuffer(fileContents: Buffer, ref: string | null | undefined): Promise<BitObject>;
    /**
     * Build a real object (model) from a parsed content (can be the original parsed conents or a provided one)
     * We use the provided version during the migration process when we change the parsed content outside
     * @param {Any} parsedContent
     */
    toRealObject(): any;
    clone(): BitRawObject;
}
