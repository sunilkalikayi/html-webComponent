"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
function _chai() {
  const data = require("chai");
  _chai = function () {
    return data;
  };
  return data;
}
function _models() {
  const data = require("../models");
  _models = function () {
    return data;
  };
  return data;
}
function _componentsIndex() {
  const data = _interopRequireDefault(require("./components-index"));
  _componentsIndex = function () {
    return data;
  };
  return data;
}
function _object() {
  const data = _interopRequireDefault(require("./object"));
  _object = function () {
    return data;
  };
  return data;
}
describe('ComponentsIndex', () => {
  describe('addOne', () => {
    let scopeIndex;
    beforeEach(() => {
      scopeIndex = new (_componentsIndex().default)('scope-path');
    });
    it('should add to the index array', () => {
      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
      const modelComponent = new (_models().ModelComponent)({
        scope: 'my-scope',
        name: 'is-string'
      });
      scopeIndex.addOne(modelComponent);
      const allItems = scopeIndex.getAll();
      // @ts-ignore
      (0, _chai().expect)(allItems[0].id).to.deep.equal({
        scope: 'my-scope',
        name: 'is-string'
      });
    });
    it('should not add the same component multiple times', () => {
      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
      const modelComponent = new (_models().ModelComponent)({
        scope: 'my-scope',
        name: 'is-string'
      });
      scopeIndex.addOne(modelComponent);
      scopeIndex.addOne(modelComponent);
      scopeIndex.addOne(modelComponent);
      (0, _chai().expect)(scopeIndex.getAll()).to.have.lengthOf(1);
    });
    it('should not add BitObjects that are not Symlink nor ModelComponent', () => {
      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
      const bitObject = new (_object().default)({
        scope: 'my-scope',
        name: 'is-string'
      });
      const result = scopeIndex.addOne(bitObject);
      (0, _chai().expect)(scopeIndex.getAll()).to.have.lengthOf(0);
      (0, _chai().expect)(result).to.be.false;
    });
  });
  describe('remove', () => {
    let scopeIndex;
    beforeEach(() => {
      scopeIndex = new (_componentsIndex().default)('scope-path');
    });
    it('should remove from the index array', () => {
      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
      const modelComponent = new (_models().ModelComponent)({
        scope: 'my-scope',
        name: 'is-string'
      });
      scopeIndex.addOne(modelComponent);
      (0, _chai().expect)(scopeIndex.getAll()).to.have.lengthOf(1);
      scopeIndex.removeOne(modelComponent.hash().toString());
      (0, _chai().expect)(scopeIndex.getAll()).to.have.lengthOf(0);
    });
    it('should remove the correct one when there are multiple', () => {
      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
      const isStringComponent = new (_models().ModelComponent)({
        scope: 'my-scope',
        name: 'is-string'
      });
      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
      const isTypeComponent = new (_models().ModelComponent)({
        scope: 'my-scope',
        name: 'is-type'
      });
      scopeIndex.addOne(isStringComponent);
      scopeIndex.addOne(isTypeComponent);
      (0, _chai().expect)(scopeIndex.getAll()).to.have.lengthOf(2);
      scopeIndex.removeOne(isStringComponent.hash().toString());
      const allIds = scopeIndex.getAll();
      (0, _chai().expect)(allIds).to.have.lengthOf(1);
      // @ts-ignore
      (0, _chai().expect)(allIds[0].id).to.deep.equal({
        scope: 'my-scope',
        name: 'is-type'
      });
    });
  });
  describe('removeMany', () => {
    let scopeIndex;
    let isStringComponent;
    let isTypeComponent;
    beforeEach(() => {
      scopeIndex = new (_componentsIndex().default)('scope-path');
      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
      isStringComponent = new (_models().ModelComponent)({
        name: 'is-string'
      });
      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
      isTypeComponent = new (_models().ModelComponent)({
        name: 'is-type'
      });
      scopeIndex.addMany([isStringComponent, isTypeComponent]);
      (0, _chai().expect)(scopeIndex.getAll()).to.have.lengthOf(2);
    });
    it('should remove multiple when removing them at the same removeMany call', () => {
      (0, _chai().expect)(scopeIndex.getAll()).to.have.lengthOf(2);
      scopeIndex.removeMany([isStringComponent.hash().toString(), isTypeComponent.hash().toString()]);
      (0, _chai().expect)(scopeIndex.getAll()).to.have.lengthOf(0);
    });
    it('should remove multiple when removing them with separate removeMany calls', () => {
      (0, _chai().expect)(scopeIndex.getAll()).to.have.lengthOf(2);
      scopeIndex.removeMany([isStringComponent.hash().toString()]);
      scopeIndex.removeMany([isTypeComponent.hash().toString()]);
      (0, _chai().expect)(scopeIndex.getAll()).to.have.lengthOf(0);
    });
    it('should remove multiple when calling them with separate removeMany calls using array.map', () => {
      (0, _chai().expect)(scopeIndex.getAll()).to.have.lengthOf(2);
      [isStringComponent.hash().toString(), isTypeComponent.hash().toString()].map(h => scopeIndex.removeMany([h]));
      (0, _chai().expect)(scopeIndex.getAll()).to.have.lengthOf(0);
    });
  });
});