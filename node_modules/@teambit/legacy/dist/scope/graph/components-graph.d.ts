import { Graph as GraphLib } from 'graphlib';
import { Scope } from '..';
import { BitId, BitIds } from '../../bit-id';
import Component from '../../consumer/component/consumer-component';
import ComponentWithDependencies from '../component-dependencies';
import { ComponentsAndVersions } from '../scope';
import Graph from './graph';
export declare type AllDependenciesGraphs = {
    graphDeps: GraphLib;
    graphDevDeps: GraphLib;
    graphExtensionDeps: GraphLib;
};
export declare function buildComponentsGraph(components: Component[]): AllDependenciesGraphs;
/**
 * one graph of the given components. it doesn't fetch/load anything. it builds the graph with the
 * given data. the node is a BitId and the edge has the label of the dependency type. it can be
 * either "dependencies" or "devDependencies".
 */
export declare function buildComponentsGraphCombined(components: Component[]): Graph;
export declare function buildComponentsGraphForComponentsAndVersion(components: ComponentsAndVersions[]): AllDependenciesGraphs;
export declare function buildOneGraphForComponentsAndMultipleVersions(components: ComponentsAndVersions[]): Graph;
/**
 * returns one graph that includes all dependencies types. each edge has a label of the dependency
 * type. the nodes content is the Component object.
 */
export declare function buildOneGraphForComponentsUsingScope(ids: BitId[], scope: Scope, direction?: 'normal' | 'reverse'): Promise<Graph>;
export declare function buildGraphFromComponentsObjects(components: Component[], direction?: 'normal' | 'reverse', ignoreIds?: BitIds): Graph;
/**
 * throw for cyclic dependencies
 * it sorts only "dependencies", not "devDependencies" (nor compiler/tester dependencies).
 */
export declare function topologicalSortComponentDependencies(componentWithDependencies: ComponentWithDependencies): void;
