import { BitIds } from '../bit-id';
import { BitIdStr } from '../bit-id/bit-id';
export declare type RemovedObjectSerialized = {
    removedComponentIds: BitIdStr[];
    missingComponents: BitIdStr[];
    dependentBits: Record<string, any>;
    removedFromLane: BitIdStr[];
    removedLanes: string[];
    /**
     * @deprecated
     * 0.0.646 is the latest version this property is used. since then, no dependencies are removed.
     * it's still here for "forward compatibility". (clients that use older version that bit.dev).
     */
    removedDependencies: BitIdStr[];
};
export default class RemovedObjects {
    removedComponentIds: BitIds;
    missingComponents: BitIds;
    dependentBits: Record<string, any>;
    removedFromLane: BitIds;
    removedLanes: string[];
    constructor({ removedComponentIds, missingComponents, dependentBits, removedFromLane, removedLanes, }: {
        removedComponentIds?: BitIds;
        missingComponents?: BitIds;
        dependentBits?: Record<string, any>;
        removedFromLane?: BitIds;
        removedLanes?: string[];
    });
    serialize(): RemovedObjectSerialized;
    static fromObjects(payload: {
        removedComponentIds: string[];
        missingComponents: string[];
        dependentBits: {
            [key: string]: Record<string, any>[];
        };
        removedFromLane: string[];
        removedLanes: string[];
    }): RemovedObjects;
}
