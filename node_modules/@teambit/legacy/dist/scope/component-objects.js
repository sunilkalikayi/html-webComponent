"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _utils() {
  const data = require("../utils");
  _utils = function () {
    return data;
  };
  return data;
}
function _object() {
  const data = _interopRequireDefault(require("./objects/object"));
  _object = function () {
    return data;
  };
  return data;
}
class ComponentObjects {
  constructor(component, objects) {
    (0, _defineProperty2().default)(this, "component", void 0);
    (0, _defineProperty2().default)(this, "objects", void 0);
    this.component = component;
    this.objects = objects;
  }
  toString() {
    return JSON.stringify({
      component: (0, _utils().toBase64ArrayBuffer)(this.component),
      objects: this.objects.map(_utils().toBase64ArrayBuffer)
    });
  }

  // Used mainly by server side hooks
  getParsedComponent() {
    const component = _object().default.parseSync(this.component);
    return component;
  }

  // @TODO optimize ASAP.
  static fromString(str) {
    return ComponentObjects.fromObject(JSON.parse(str));
  }
  static manyToString(componentsAndObjects) {
    const result = JSON.stringify(componentsAndObjects.map(componentAndObject => componentAndObject.toString()));
    return result;
  }
  static manyFromString(str) {
    return JSON.parse(str).map(componentObject => ComponentObjects.fromString(componentObject));
  }
  static fromObject(object) {
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    const {
      component,
      objects
    } = object;
    return new ComponentObjects(_from64Buffer(component), objects.map(_from64Buffer));
  }

  /**
   * prefer using `this.toObjectsAsync()` if not must to be sync.
   */
  toObjects() {
    return {
      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
      component: _object().default.parseSync(this.component),
      objects: this.objects.map(obj => _object().default.parseSync(obj))
    };
  }
  /**
   * see `this.toObject()` for the sync version
   */
  async toObjectsAsync() {
    return {
      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
      component: await _object().default.parseObject(this.component),
      objects: await Promise.all(this.objects.map(obj => _object().default.parseObject(obj)))
    };
  }
}
exports.default = ComponentObjects;
function _from64Buffer(val) {
  return Buffer.from(val, 'base64');
}