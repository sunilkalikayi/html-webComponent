"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
function _bitError() {
  const data = require("@teambit/bit-error");
  _bitError = function () {
    return data;
  };
  return data;
}
class MergeConflictOnRemote extends _bitError().BitError {
  constructor(idsAndVersionsWithConflicts, idsNeedUpdate) {
    let output = '';
    if (idsAndVersionsWithConflicts.length) {
      output += `error: merge conflict occurred when exporting the component(s) ${idsAndVersionsWithConflicts.map(i => `${_chalk().default.bold(i.id)} (version(s): ${i.versions.join(', ')})`).join(', ')} to the remote scope.
to resolve this conflict and merge your remote and local changes, please do the following:
1) bit reset [component-pattern] [--all]
2) bit checkout head [component-pattern]
once your changes are merged with the new remote version, please tag and export a new version of the component to the remote scope.`;
    }
    if (idsNeedUpdate.length) {
      output += `error: merge error occurred when exporting the component(s) ${idsNeedUpdate.map(i => `${_chalk().default.bold(i.id)}${i.lane ? ` (lane: ${i.lane})` : ''}`).join(', ')} to the remote scope.
to resolve this error, please re-import the above components.
if the component is up to date, run "bit status" to make sure it's not merge-pending`;
    }
    super(output);
    (0, _defineProperty2().default)(this, "code", void 0);
    this.code = 131;
  }
}
exports.default = MergeConflictOnRemote;