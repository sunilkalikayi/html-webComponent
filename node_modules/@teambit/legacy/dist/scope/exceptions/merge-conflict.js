"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _bitError() {
  const data = require("@teambit/bit-error");
  _bitError = function () {
    return data;
  };
  return data;
}
class MergeConflict extends _bitError().BitError {
  constructor(id, versions) {
    super(`error: merge conflict occurred while importing the component ${id}. conflict version(s): ${versions.join(', ')}
to resolve it and merge your local and remote changes, please do the following:
1) bit reset ${id} ${versions.join(' ')}
2) bit import
3) bit checkout ${versions.join(' ')} ${id}
once your changes are merged with the new remote version, you can tag and export a new version of the component to the remote scope.`);
    (0, _defineProperty2().default)(this, "id", void 0);
    (0, _defineProperty2().default)(this, "versions", void 0);
    this.id = id;
    this.versions = versions;
  }
}
exports.default = MergeConflict;