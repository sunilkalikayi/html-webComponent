"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExportPersist = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _logger() {
  const data = _interopRequireDefault(require("../../logger/logger"));
  _logger = function () {
    return data;
  };
  return data;
}
function _exportScopeComponents() {
  const data = require("../component-ops/export-scope-components");
  _exportScopeComponents = function () {
    return data;
  };
  return data;
}
/**
 * load objects from pending-dir by a client-id and persist them to the object directory.
 * once done, remove the pending-dir to free the resource.
 */
class ExportPersist {
  async execute(scope, options, authData) {
    const objectList = await scope.readObjectsFromPendingDir(options.clientId);
    _logger().default.debugAndAddBreadCrumb('ExportPersist', `going to merge ${objectList.objects.length} objects`);
    const bitIds = await (0, _exportScopeComponents().saveObjects)(scope, objectList);
    const componentsIds = bitIds.map(id => id.toString());
    await scope.removePendingDir(options.clientId);
    if (ExportPersist.onPutHook) {
      const lanes = (await objectList.toBitObjects()).getLanes();
      ExportPersist.onPutHook(componentsIds, lanes, authData).catch(err => {
        _logger().default.error('fatal: onPutHook encountered an error (this error does not stop the process)', err);
        // let the process continue. we don't want to stop it when onPutHook failed.
      });
    }

    return componentsIds;
  }
}
exports.ExportPersist = ExportPersist;
(0, _defineProperty2().default)(ExportPersist, "onPutHook", void 0);