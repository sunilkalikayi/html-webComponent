"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FetchMissingDeps = void 0;
function _bitId() {
  const data = require("../../bit-id");
  _bitId = function () {
    return data;
  };
  return data;
}
function _logger() {
  const data = _interopRequireDefault(require("../../logger/logger"));
  _logger = function () {
    return data;
  };
  return data;
}
function _scopeComponentsImporter() {
  const data = _interopRequireDefault(require("../component-ops/scope-components-importer"));
  _scopeComponentsImporter = function () {
    return data;
  };
  return data;
}
/**
 * to avoid left-pad kind of situation, make sure that all external dependencies are cached. if
 * they don't exist, import them.
 */
class FetchMissingDeps {
  async execute(scope, options) {
    _logger().default.debugAndAddBreadCrumb('FetchMissingDeps', 'trying to importMany in case there are missing dependencies');
    const scopeComponentsImporter = _scopeComponentsImporter().default.getInstance(scope);
    const bitIds = _bitId().BitIds.deserialize(options.ids);
    options.fetchFromOriginalScopes ? await scopeComponentsImporter.importManyFromOriginalScopes(bitIds) : await scopeComponentsImporter.importMany({
      ids: bitIds,
      cache: true
    });
    _logger().default.debugAndAddBreadCrumb('FetchMissingDeps', 'successfully ran importMany');
  }
}
exports.FetchMissingDeps = FetchMissingDeps;