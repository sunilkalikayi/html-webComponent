"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScopeJson = void 0;
exports.getHarmonyPath = getHarmonyPath;
exports.getPath = getPath;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));
  _fsExtra = function () {
    return data;
  };
  return data;
}
function _path() {
  const data = _interopRequireDefault(require("path"));
  _path = function () {
    return data;
  };
  return data;
}
function _laneId() {
  const data = require("@teambit/lane-id");
  _laneId = function () {
    return data;
  };
  return data;
}
function _bitId() {
  const data = _interopRequireDefault(require("../bit-id/bit-id"));
  _bitId = function () {
    return data;
  };
  return data;
}
function _constants() {
  const data = require("../constants");
  _constants = function () {
    return data;
  };
  return data;
}
function _generalError() {
  const data = _interopRequireDefault(require("../error/general-error"));
  _generalError = function () {
    return data;
  };
  return data;
}
function _utils() {
  const data = require("../utils");
  _utils = function () {
    return data;
  };
  return data;
}
function _exceptions() {
  const data = require("./exceptions");
  _exceptions = function () {
    return data;
  };
  return data;
}
// @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!

function getPath(scopePath) {
  return _path().default.join(scopePath, _constants().SCOPE_JSON);
}
function getHarmonyPath(scopePath) {
  return _path().default.join(scopePath, _constants().SCOPE_JSONC);
}
class ScopeJson {
  // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!

  constructor({
    name,
    remotes,
    resolverPath,
    hooksPath,
    license,
    groupName,
    version,
    lanes
  }) {
    (0, _defineProperty2().default)(this, "_name", void 0);
    (0, _defineProperty2().default)(this, "version", void 0);
    (0, _defineProperty2().default)(this, "resolverPath", void 0);
    (0, _defineProperty2().default)(this, "hooksPath", void 0);
    (0, _defineProperty2().default)(this, "license", void 0);
    (0, _defineProperty2().default)(this, "remotes", void 0);
    (0, _defineProperty2().default)(this, "groupName", void 0);
    (0, _defineProperty2().default)(this, "lanes", void 0);
    (0, _defineProperty2().default)(this, "hasChanged", false);
    this.name = name;
    this.version = version;
    this.resolverPath = resolverPath;
    this.hooksPath = hooksPath;
    this.license = license;
    this.remotes = remotes || {};
    this.groupName = groupName || '';
    this.lanes = lanes || {
      current: _laneId().DEFAULT_LANE,
      tracking: [],
      new: []
    };
  }

  // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
  set name(suggestedName) {
    this._name = _bitId().default.getValidScopeName(suggestedName);
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    return this;
  }

  // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
  get name() {
    return this._name;
  }
  toPlainObject() {
    return (0, _utils().cleanObject)({
      name: this.name,
      remotes: this.remotes,
      resolverPath: this.resolverPath,
      license: this.license,
      groupName: this.groupName,
      version: this.version,
      lanes: this.lanes
    });
  }
  toJson(readable = true) {
    if (!readable) return JSON.stringify(this.toPlainObject());
    return JSON.stringify(this.toPlainObject(), null, 4);
  }
  set(key, val) {
    // eslint-disable-next-line no-prototype-builtins
    if (!this.hasOwnProperty(key)) throw new (_generalError().default)(`unknown key ${key}`);
    this[key] = val;
    return this;
  }
  get(key) {
    // eslint-disable-next-line no-prototype-builtins
    if (!this.hasOwnProperty(key)) throw new (_generalError().default)(`unknown key ${key}`);
    return this[key];
  }
  del(key) {
    // eslint-disable-next-line no-prototype-builtins
    if (!this.hasOwnProperty(key)) throw new (_generalError().default)(`unknown key ${key}`);
    return this[key];
  }
  addRemote(remote) {
    this.remotes[remote.name] = remote.host;
    return this;
  }
  rmRemote(name) {
    if (!this.remotes[name]) return false;
    delete this.remotes[name];
    return true;
  }
  async write(path) {
    return (0, _utils().writeFile)(_path().default.join(path, _constants().SCOPE_JSON), this.toJson());
  }
  trackLane(trackLaneData) {
    const existing = this.getTrackLane(trackLaneData.localLane);
    if (existing) {
      existing.remoteLane = trackLaneData.remoteLane;
      existing.remoteScope = trackLaneData.remoteScope;
    } else {
      this.lanes.tracking.push(trackLaneData);
    }
    this.hasChanged = true;
  }
  removeTrackLane(localLane) {
    const index = this.lanes.tracking.findIndex(t => t.localLane === localLane);
    if (index === -1) return;
    this.lanes.tracking.splice(index, 1);
    this.hasChanged = true;
  }
  getTrackLane(localLane) {
    return this.lanes.tracking.find(t => t.localLane === localLane);
  }
  setLaneAsNew(laneName) {
    if (!this.lanes.new) this.lanes.new = [];
    this.lanes.new.push(laneName);
    this.hasChanged = true;
  }
  removeLaneFromNew(laneName) {
    if (!this.lanes.new || !this.lanes.new.length) return;
    this.lanes.new = this.lanes.new.filter(l => l !== laneName);
    this.hasChanged = true;
  }
  async writeIfChanged(path) {
    if (this.hasChanged) {
      await this.write(path);
    }
  }
  static loadFromJson(json, scopeJsonPath) {
    let jsonParsed;
    try {
      jsonParsed = JSON.parse(json);
    } catch (err) {
      throw new (_generalError().default)(`unable to parse the scope.json file located at "${scopeJsonPath}".
edit the file to fix the error, or delete it and run "bit init" to recreate it`);
    }
    return new ScopeJson(jsonParsed);
  }
  static async loadFromFile(scopeJsonPath) {
    let rawScopeJson;
    try {
      rawScopeJson = await _fsExtra().default.readFile(scopeJsonPath);
    } catch (err) {
      if (err.code === 'ENOENT') throw new (_exceptions().ScopeJsonNotFound)(scopeJsonPath);
      throw err;
    }
    return ScopeJson.loadFromJson(rawScopeJson.toString(), scopeJsonPath);
  }
  getPopulatedLicense() {
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    if (!this.get('license') || !_fsExtra().default.existsSync(this.get('license'))) return Promise.resolve();
    return _fsExtra().default.readFile(this.get('license')).then(license => license.toString());
  }
}
exports.ScopeJson = ScopeJson;