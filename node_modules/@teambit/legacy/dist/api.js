"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addMany = addMany;
exports.list = list;
exports.packer = void 0;
exports.show = show;
function _index() {
  const data = require("./api/consumer/index");
  _index = function () {
    return data;
  };
  return data;
}
function _index2() {
  const data = require("./api/scope/index");
  _index2 = function () {
    return data;
  };
  return data;
}
function _pack() {
  const data = require("./pack");
  _pack = function () {
    return data;
  };
  return data;
}
function _hooks() {
  const data = _interopRequireDefault(require("./hooks"));
  _hooks = function () {
    return data;
  };
  return data;
}
// import { registerCoreExtensions } from './extensions/bit';
// import { manifestsMap as coreExtensions } from './extensions/bit';

// export { coreExtensions };

_hooks().default.init();
function show(scopePath, id, opts) {
  // When using the API programmatically do not use the scope cache by default
  const loadScopeFromCache = opts && opts.loadScopeFromCache !== undefined ? !!opts.loadScopeFromCache : false;
  // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
  return (0, _index().getScopeComponent)({
    scopePath,
    id,
    allVersions: opts && opts.versions,
    loadScopeFromCache
  }).then(({
    component
  }) => {
    if (Array.isArray(component)) {
      return component.map(v => v.toObject());
    }
    return component.toObject();
  });
}
function list(scopePath, namespacesUsingWildcards, opts = {}) {
  // When using the API programmatically do not use the scope cache by default
  const loadScopeFromCache = opts && opts.loadScopeFromCache !== undefined ? !!opts.loadScopeFromCache : false;
  return (0, _index2().scopeList)(scopePath, namespacesUsingWildcards, loadScopeFromCache).then(listScopeResult => listScopeResult.map(result => result.id.toString()));
}
async function addMany(components, alternateCwd) {
  return (0, _index().addMany)(components, alternateCwd);
}
const packer = new (_pack().Packer)();
exports.packer = packer;