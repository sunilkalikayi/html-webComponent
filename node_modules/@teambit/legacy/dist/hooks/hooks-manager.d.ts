export declare type HookAction = {
    name: string | null | undefined;
    run: Function[];
};
export declare type Hooks = {};
declare type HookFailures = {};
/**
 * A class which manage all the hooks
 * This is a singelton class which expose getInstance method
 * This class used for register new hooks, actions for existing hooks and trigger hooks
 */
export default class HooksManager {
    hooks: Map<any, any>;
    constructor();
    /**
     * Initialize the default hooks
     */
    static init(): void;
    /**
     * Get the instance of the HooksManager
     * @return {HooksManager} instance of the HooksManager
     *
     */
    static getInstance(): HooksManager;
    /**
     * register new hook name
     * @param {string} hookName
     * @param {boolean} throwIfExist - whether to throw an error if the hook name already exists
     * @return {boolean} whether the hook has been registerd
     */
    registerNewHook(hookName: string, context?: Object, throwIfExist?: boolean): boolean;
    /**
     * Register action to an existing hook
     * @param {string} hookName - hook to register action to
     * @param {HookAction} hookAction - The action to register to the hook
     * @param {boolean} throwIfNotExist - whether to throw an exception in case the hook doesn't exists
     * @return {boolean} whether the action has been registerd successfully
     */
    registerActionToHook(hookName: string, hookAction: HookAction, context?: Object, throwIfNotExist?: boolean): boolean;
    /**
     * Trigger a hook - run all the actions registerd to this hook
     * The actions will be run in parallel and the errors will be aggregated
     * @param {string} hookName - The hook name to trigger
     * @return {HookFailures} Aggregated errors of the actions failures
     */
    triggerHook(hookName: string, args?: Object, headers?: Object, context?: Object): HookFailures[] | null | undefined;
}
export {};
