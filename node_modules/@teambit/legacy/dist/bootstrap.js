"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
require("core-js/modules/es.regexp.exec.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bootstrap = bootstrap;
exports.getHarmonyVersion = getHarmonyVersion;
function _bluebird() {
  const data = _interopRequireDefault(require("bluebird"));
  _bluebird = function () {
    return data;
  };
  return data;
}
function _path() {
  const data = _interopRequireDefault(require("path"));
  _path = function () {
    return data;
  };
  return data;
}
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));
  _fsExtra = function () {
    return data;
  };
  return data;
}
function _semver() {
  const data = _interopRequireDefault(require("semver"));
  _semver = function () {
    return data;
  };
  return data;
}
function _analytics() {
  const data = require("./analytics/analytics");
  _analytics = function () {
    return data;
  };
  return data;
}
function _handleErrors() {
  const data = require("./cli/handle-errors");
  _handleErrors = function () {
    return data;
  };
  return data;
}
function _constants() {
  const data = require("./constants");
  _constants = function () {
    return data;
  };
  return data;
}
function _hooks() {
  const data = _interopRequireDefault(require("./hooks"));
  _hooks = function () {
    return data;
  };
  return data;
}
function _logger() {
  const data = require("./logger/logger");
  _logger = function () {
    return data;
  };
  return data;
}
function _loader() {
  const data = _interopRequireDefault(require("./cli/loader"));
  _loader = function () {
    return data;
  };
  return data;
}
const SUPPORTED_NODE_VERSIONS = '>=14.19.3 <17.0.0';
process.env.MEMFS_DONT_WARN = 'true'; // suppress fs experimental warnings from memfs

require('events').EventEmitter.defaultMaxListeners = 100; // set max listeners to a more appropriate numbers

require('regenerator-runtime/runtime');

// eslint-disable-next-line @typescript-eslint/no-misused-promises
process.on('unhandledRejection', async err => (0, _handleErrors().handleUnhandledRejection)(err));

// by default Bluebird enables the longStackTraces when env is `development`, or when
// BLUEBIRD_DEBUG is set.
// the drawback of enabling it all the time is a performance hit. (see http://bluebirdjs.com/docs/api/promise.longstacktraces.html)
// some commands are slower by 20% with this enabled.
_bluebird().default.config({
  longStackTraces: Boolean(process.env.BLUEBIRD_DEBUG || process.env.BIT_LOG)
});
async function bootstrap() {
  enableLoaderIfPossible();
  printBitVersionIfAsked();
  warnIfRunningAsRoot();
  verifyNodeVersionCompatibility();
  await ensureDirectories();
  await _analytics().Analytics.promptAnalyticsIfNeeded();
  _hooks().default.init();
}
async function ensureDirectories() {
  await _fsExtra().default.ensureDir(_constants().GLOBAL_CONFIG);
  await _fsExtra().default.ensureDir(_constants().GLOBAL_LOGS);
}
function verifyNodeVersionCompatibility() {
  const nodeVersion = process.versions.node.split('-')[0];
  const isCompatible = _semver().default.satisfies(nodeVersion, SUPPORTED_NODE_VERSIONS);
  if (!isCompatible) {
    // eslint-disable-next-line no-console
    console.log(_chalk().default.red(`Node version ${nodeVersion} is not supported, please use Node.js ${SUPPORTED_NODE_VERSIONS}.
If you must use legacy versions of Node.js, please use our binary installation methods. https://docs.bit.dev/docs/installation`));
    process.exit(1);
  }
}
function warnIfRunningAsRoot() {
  const isRoot = process.getuid && process.getuid() === 0;
  if (isRoot) {
    (0, _logger().printWarning)('running bit as root might cause permission issues later');
  }
}
function printBitVersionIfAsked() {
  if (process.argv[2]) {
    if (['-V', '-v', '--version'].includes(process.argv[2])) {
      const harmonyVersion = getHarmonyVersion();
      if (harmonyVersion) {
        console.log(harmonyVersion); // eslint-disable-line no-console
      } else {
        console.log(_constants().BIT_VERSION); // eslint-disable-line no-console
      }

      process.exit();
    }
  }
}

/**
 * once Yargs and Harmony are fully loaded we have all commands instances and we are able to
 * determine whether or not the loader should be loaded.
 * in this phase, all we have are the args from the cli, so we can only guess when it's ok to start
 * the loader. the reason we start it here is to have the loader report the progress of bit
 * bootstrap process, which can slow at times.
 */
function enableLoaderIfPossible() {
  const safeCommandsForLoader = ['status', 's',
  // status alias
  'compile', 'start', 'add', 'show', 'tag', 'build', 'create', 'test', 'install', 'update', 'link', 'import', 'log', 'checkout', 'merge', 'diff', 'env', 'envs'];
  if (safeCommandsForLoader.includes(process.argv[2]) && !process.argv.includes('--json') && !process.argv.includes('-j')) {
    _loader().default.on();
    // loader.start('loading bit...');
  }
}

function getHarmonyVersion(showValidSemver = false) {
  try {
    const teambitBit = require.resolve('@teambit/bit');
    // eslint-disable-next-line
    const packageJson = require(_path().default.join(teambitBit, '../..', 'package.json'));
    if (packageJson.version) return packageJson.version;
    // this is running locally
    if (packageJson.componentId && packageJson.componentId.version) {
      return showValidSemver ? packageJson.componentId.version : `last-tag ${packageJson.componentId.version}`;
    }
    if (showValidSemver) throw new Error(`unable to find Bit version`);
    return null;
  } catch (err) {
    if (showValidSemver) throw err;
    return null;
  }
}