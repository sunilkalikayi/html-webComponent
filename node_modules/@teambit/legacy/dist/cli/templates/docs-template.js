"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.symbol.description.js");
require("core-js/modules/es.array.iterator.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.paintDoc = exports.default = void 0;
function _isNil2() {
  const data = _interopRequireDefault(require("ramda/src/isNil"));
  _isNil2 = function () {
    return data;
  };
  return data;
}
function _isEmpty2() {
  const data = _interopRequireDefault(require("ramda/src/isEmpty"));
  _isEmpty2 = function () {
    return data;
  };
  return data;
}
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
function _cliTable() {
  const data = _interopRequireDefault(require("cli-table"));
  _cliTable = function () {
    return data;
  };
  return data;
}
function _chalkBox() {
  const data = require("../chalk-box");
  _chalkBox = function () {
    return data;
  };
  return data;
}
const paintExample = example => {
  return example.raw;
};
const paintExamples = examples => {
  if ((0, _isEmpty2().default)(examples) || (0, _isNil2().default)(examples)) {
    return '';
  }
  return `\n${(0, _chalkBox().paintHeader)('Examples')}\n${examples.map(paintExample).join('\n')}`;
};
const paintDoc = doc => {
  const {
    name,
    description,
    args,
    returns,
    properties
  } = doc;
  const table = new (_cliTable().default)({
    head: ['name', `${name}`],
    style: {
      head: ['cyan']
    }
  });
  const paintArg = arg => {
    if (!arg && !arg.type && !arg.name) {
      return '';
    }
    if (!arg.type) {
      return `${arg.name}`;
    }
    return `${arg.name}: ${arg.type}`;
  };
  const paintArgs = () => {
    if (!args || !args.length) return '';
    return `(${args.map(paintArg).join(', ')})`;
  };
  const paintDescription = arg => {
    if (!arg) return '';
    if (!arg.type) {
      return '';
    }
    if (arg && arg.type && !arg.description) {
      return arg.type;
    }
    return `${arg.type} -> ${arg.description}`;
  };
  const paintProperties = () => {
    if (!properties || !properties.length) return '';
    return `(${properties.map(paintArg).join(', ')})`;
  };
  const rows = [[_chalk().default.cyan('Description'), description], [_chalk().default.cyan('Args'), paintArgs()], [_chalk().default.cyan('Returns'), paintDescription(returns)], [_chalk().default.cyan('Properties'), paintProperties()]].filter(([, x]) => x);
  table.push(...rows);
  return table.toString() + paintExamples(doc.examples);
};
exports.paintDoc = paintDoc;
var _default = docs => {
  if ((0, _isEmpty2().default)(docs) || (0, _isNil2().default)(docs)) {
    return '\nNo documentation found';
  }
  // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
  return `\n${(0, _chalkBox().paintHeader)('Documentation')}${docs.map(paintDoc).join('')}`;
};
exports.default = _default;