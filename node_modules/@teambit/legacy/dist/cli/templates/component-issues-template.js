"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MISSING_PACKAGES_FROM_OVERRIDES_LABEL = void 0;
exports.componentIssueToString = componentIssueToString;
exports.formatIssues = formatIssues;
exports.getInvalidComponentLabel = getInvalidComponentLabel;
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
const MISSING_PACKAGES_FROM_OVERRIDES_LABEL = 'from overrides configuration';
exports.MISSING_PACKAGES_FROM_OVERRIDES_LABEL = MISSING_PACKAGES_FROM_OVERRIDES_LABEL;
function getInvalidComponentLabel(error) {
  switch (error.name) {
    case 'MainFileRemoved':
      return 'main-file was removed (use "bit add" with "--main" and "--id" flags to add a main file)';
    case 'MissingFilesFromComponent':
    case 'ComponentNotFoundInPath':
      return 'component files were deleted (use "bit remove [component_id]") or moved (use "bit move <old-dir> <new-dir>")';
    case 'ExtensionFileNotFound':
      // @ts-ignore error.path is set for ExtensionFileNotFound
      return `extension file is missing at ${_chalk().default.bold(error.path)}`;
    case 'ComponentsPendingImport':
      return 'component objects are missing from the scope (use "bit import [component_id] --objects" to get them back)';
    case 'NoComponentDir':
      return `component files were added individually without root directory (invalid on Harmony. re-add as a directory or use "bit move --component" to help with the move)`;
    case 'IgnoredDirectory':
      return `component files or directory were ignored (probably by .gitignore)`;
    default:
      return error.name;
  }
}
function componentIssueToString(value) {
  return Array.isArray(value) ? value.join(', ') : value;
}
function formatIssues(compWithIssues) {
  var _compWithIssues$issue;
  return `       ${(_compWithIssues$issue = compWithIssues.issues) === null || _compWithIssues$issue === void 0 ? void 0 : _compWithIssues$issue.outputForCLI()}\n`;
}