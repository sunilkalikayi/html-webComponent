"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
function _dependents() {
  const data = require("../../../api/consumer/lib/dependents");
  _dependents = function () {
    return data;
  };
  return data;
}
function _componentTemplate() {
  const data = require("../../templates/component-template");
  _componentTemplate = function () {
    return data;
  };
  return data;
}
class Dependents {
  constructor() {
    (0, _defineProperty2().default)(this, "name", 'dependents <component-name>');
    (0, _defineProperty2().default)(this, "arguments", [{
      names: 'component-name',
      description: 'component name or component id'
    }]);
    (0, _defineProperty2().default)(this, "description", 'EXPERIMENTAL. show dependents of the given component');
    (0, _defineProperty2().default)(this, "group", 'info');
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "opts", []);
  }
  action([id]) {
    return (0, _dependents().dependents)(id);
  }
  report(results) {
    if (!results.scopeDependents.length && !results.workspaceDependents.length) {
      return `no dependents found for ${results.id.toString()}.
try running "bit cat-component ${results.id.toStringWithoutVersion()}" to see whether the component/version exists locally`;
    }
    const scopeTable = (0, _componentTemplate().generateDependentsInfoTable)(results.scopeDependents, results.id);
    const workspaceTable = (0, _componentTemplate().generateDependentsInfoTable)(results.workspaceDependents, results.id);
    return `${_chalk().default.bold('Dependents originated from workspace')}
${workspaceTable || '<none>'}

${_chalk().default.bold('Dependents originated from scope')}
${scopeTable || '<none>'}`;
  }
}
exports.default = Dependents;