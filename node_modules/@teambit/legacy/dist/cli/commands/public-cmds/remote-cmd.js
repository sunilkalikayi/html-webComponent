"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
function _cliTable() {
  const data = _interopRequireDefault(require("cli-table"));
  _cliTable = function () {
    return data;
  };
  return data;
}
function _consumer() {
  const data = require("../../../api/consumer");
  _consumer = function () {
    return data;
  };
  return data;
}
function _constants() {
  const data = require("../../../constants");
  _constants = function () {
    return data;
  };
  return data;
}
function _utils() {
  const data = require("../../../utils");
  _utils = function () {
    return data;
  };
  return data;
}
function _remoteUndefined() {
  const data = _interopRequireDefault(require("../exceptions/remote-undefined"));
  _remoteUndefined = function () {
    return data;
  };
  return data;
}
/* eslint max-classes-per-file: 0 */

class RemoteAdd {
  constructor() {
    (0, _defineProperty2().default)(this, "name", 'add <url>');
    (0, _defineProperty2().default)(this, "description", 'add a bare-scope as a remote');
    (0, _defineProperty2().default)(this, "extendedDescription", `supported protocols are [file, http].
for example: "http://localhost:3000", "file:///tmp/local-scope"`);
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "opts", [['g', 'global', 'configure a remote bit scope']]);
  }
  action([url], {
    global
  }) {
    try {
      if (!url) return Promise.reject(new (_remoteUndefined().default)());
      return (0, _consumer().remoteAdd)(url, global);
    } catch (err) {
      return Promise.reject(err);
    }
  }
  report({
    name,
    host
  }) {
    return _chalk().default.green(`added remote scope '${_chalk().default.bold(name)}' with host '${_chalk().default.bold(host)}'`);
  }
}
class RemoteRm {
  constructor() {
    (0, _defineProperty2().default)(this, "name", 'del <name>');
    (0, _defineProperty2().default)(this, "description", 'remove a tracked bit remote');
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "opts", [['g', 'global', 'remove a global configured remote scope']]);
  }
  action([name], {
    global
  }) {
    return (0, _consumer().remoteRm)(name, global);
  }
  report(name) {
    return _chalk().default.green(`successfully removed remote ${_chalk().default.bold(name)}`);
  }
}
class Remote {
  constructor() {
    (0, _defineProperty2().default)(this, "name", 'remote');
    (0, _defineProperty2().default)(this, "description", 'manage set of tracked bit scope(s)');
    (0, _defineProperty2().default)(this, "group", 'collaborate');
    (0, _defineProperty2().default)(this, "extendedDescription", `https://${_constants().BASE_DOCS_DOMAIN}/scope/remote-scopes`);
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "opts", [['g', 'global', 'see globally configured remotes']]);
    (0, _defineProperty2().default)(this, "migration", true);
    (0, _defineProperty2().default)(this, "commands", [new RemoteAdd(), new RemoteRm()]);
  }
  action(args, {
    global
  }) {
    return (0, _consumer().remoteList)(global);
  }
  report(remotes) {
    if ((0, _utils().empty)(remotes)) return _chalk().default.red('no configured remotes found in scope');
    const table = new (_cliTable().default)({
      head: ['scope name', 'host'],
      style: {
        head: ['cyan']
      }
    });
    (0, _utils().forEach)(remotes, (host, name) => {
      table.push([name, host]);
    });
    return table.toString();
  }
}
exports.default = Remote;