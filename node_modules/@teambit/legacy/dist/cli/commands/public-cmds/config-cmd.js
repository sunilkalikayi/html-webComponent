"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
function _padRight() {
  const data = _interopRequireDefault(require("pad-right"));
  _padRight = function () {
    return data;
  };
  return data;
}
function config() {
  const data = _interopRequireWildcard(require("../../../api/consumer/lib/global-config"));
  config = function () {
    return data;
  };
  return data;
}
function _constants() {
  const data = require("../../../constants");
  _constants = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/* eslint max-classes-per-file: 0 */

// import { config } from '../../../api/consumer';
// const config = require('../../../api/consumer/lib/global-config');

class ConfigSet {
  constructor() {
    (0, _defineProperty2().default)(this, "name", 'set <key> <val>');
    (0, _defineProperty2().default)(this, "description", 'set a global configuration');
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "skipWorkspace", true);
    (0, _defineProperty2().default)(this, "opts", []);
  }
  action([key, value]) {
    return config().set(key, value);
  }
  report() {
    return _chalk().default.green('added configuration successfully');
  }
}
class ConfigGet {
  constructor() {
    (0, _defineProperty2().default)(this, "name", 'get <key>');
    (0, _defineProperty2().default)(this, "description", 'get a global configuration');
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "opts", []);
  }
  action([key]) {
    return config().get(key);
  }
  report(value) {
    return value;
  }
}
class ConfigList {
  constructor() {
    (0, _defineProperty2().default)(this, "name", 'list');
    (0, _defineProperty2().default)(this, "description", 'list all configuration(s)');
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "opts", []);
  }
  action() {
    return config().list();
  }
  report(conf) {
    return Object.entries(conf).map(tuple => {
      return tuple.join('     ');
    }).join('\n');
  }
}
class ConfigDel {
  constructor() {
    (0, _defineProperty2().default)(this, "name", 'del <key>');
    (0, _defineProperty2().default)(this, "description", 'delete given key from global configuration');
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "opts", []);
  }
  action([key]) {
    return config().del(key);
  }
  report() {
    return _chalk().default.green('deleted successfully');
  }
}
class Config {
  constructor() {
    (0, _defineProperty2().default)(this, "name", 'config');
    (0, _defineProperty2().default)(this, "description", 'global config management');
    (0, _defineProperty2().default)(this, "extendedDescription", `https://${_constants().BASE_DOCS_DOMAIN}/config/bit-config`);
    (0, _defineProperty2().default)(this, "group", 'general');
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "commands", [new ConfigSet(), new ConfigDel(), new ConfigGet(), new ConfigList()]);
    (0, _defineProperty2().default)(this, "opts", []);
    (0, _defineProperty2().default)(this, "migration", false);
  }
  action() {
    return config().list();
  }
  report(conf) {
    return Object.entries(conf).map(tuple => {
      tuple[0] = (0, _padRight().default)(tuple[0], 30, ' ');
      return tuple.join('');
    }).join('\n');
  }
}
exports.default = Config;