"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
function _consumer() {
  const data = require("../../../api/consumer");
  _consumer = function () {
    return data;
  };
  return data;
}
function _constants() {
  const data = require("../../../constants");
  _constants = function () {
    return data;
  };
  return data;
}
class Move {
  constructor() {
    (0, _defineProperty2().default)(this, "name", 'move <current-component-dir> <new-component-dir>');
    (0, _defineProperty2().default)(this, "description", 'move a component to a different filesystem path');
    (0, _defineProperty2().default)(this, "arguments", [{
      name: 'current-component-dir',
      description: 'the current relative path (in the workspace) to the component directory'
    }, {
      name: 'new-component-dir',
      description: 'the new relative path (in the workspace) to the component directory'
    }]);
    (0, _defineProperty2().default)(this, "group", 'development');
    (0, _defineProperty2().default)(this, "extendedDescription", `move files or directories of component(s)\n  https://${_constants().BASE_DOCS_DOMAIN}/workspace/moving-components`);
    (0, _defineProperty2().default)(this, "alias", 'mv');
    (0, _defineProperty2().default)(this, "loader", true);
  }
  action([from, to]) {
    return (0, _consumer().move)({
      from,
      to
    });
  }
  report(componentsChanged) {
    const output = componentsChanged.map(component => {
      const title = _chalk().default.green(`moved component ${component.id.toString()}:\n`);
      const files = component.changes.map(file => `from ${_chalk().default.bold(file.from)} to ${_chalk().default.bold(file.to)}`).join('\n');
      return title + files;
    });
    return output.join('\n');
  }
}
exports.default = Move;