import { Group } from '../../command-groups';
import { LegacyCommand } from '../../legacy-command';
declare class ScopeConfigGet implements LegacyCommand {
    name: string;
    description: string;
    alias: string;
    private: boolean;
    opts: never[];
    action([key]: [string]): Promise<any>;
    report(value: string): string;
}
declare class ScopeConfigList implements LegacyCommand {
    name: string;
    description: string;
    alias: string;
    opts: never[];
    action(): Promise<any>;
    report(conf: {
        [key: string]: any;
    }): string;
}
declare class ScopeConfigDel implements LegacyCommand {
    name: string;
    description: string;
    alias: string;
    opts: never[];
    action([key]: [string]): Promise<any>;
    report(): string;
}
declare class ScopeConfigSet implements LegacyCommand {
    name: string;
    description: string;
    alias: string;
    private: boolean;
    opts: never[];
    action([key, value]: [string, string]): Promise<any>;
    report({ key, value }: {
        key: string;
        value: number;
    }): string;
}
export default class ScopeConfig implements LegacyCommand {
    name: string;
    description: string;
    group: Group;
    alias: string;
    commands: (ScopeConfigGet | ScopeConfigList | ScopeConfigDel | ScopeConfigSet)[];
    opts: never[];
    migration: boolean;
    action(): Promise<any>;
    report(conf: {
        [key: string]: string;
    }): string;
}
export {};
