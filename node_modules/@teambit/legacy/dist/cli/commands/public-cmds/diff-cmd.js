"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _consumer() {
  const data = require("../../../api/consumer");
  _consumer = function () {
    return data;
  };
  return data;
}
function _constants() {
  const data = require("../../../constants");
  _constants = function () {
    return data;
  };
  return data;
}
function _componentsDiff() {
  const data = require("../../../consumer/component-ops/components-diff");
  _componentsDiff = function () {
    return data;
  };
  return data;
}
class Diff {
  constructor() {
    (0, _defineProperty2().default)(this, "name", 'diff [values...]');
    (0, _defineProperty2().default)(this, "group", 'development');
    (0, _defineProperty2().default)(this, "description", "show the diff between the components' source files and config");
    (0, _defineProperty2().default)(this, "extendedDescription", `bit diff => compare all modified components to their model version
  bit diff [ids...] => compare the specified components against their modified states
  bit diff [id] [version] => compare the specified version to used or modified files
  bit diff [id] [version] [to_version] => compare the specified version files to to_version files
  ${(0, _constants().WILDCARD_HELP)('diff')}`);
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "opts", [['v', 'verbose', 'show a more verbose output when possible'], ['t', 'table', 'show tables instead of plain text for dependencies diff']]);
    (0, _defineProperty2().default)(this, "loader", true);
  }
  action([values = []], {
    verbose = false,
    table = false
  }) {
    return (0, _consumer().diff)(values, verbose, table);
  }
  report(diffResults) {
    return (0, _componentsDiff().outputDiffResults)(diffResults);
  }
}
exports.default = Diff;