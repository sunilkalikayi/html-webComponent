"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _action() {
  const data = require("../../../api/scope/lib/action");
  _action = function () {
    return data;
  };
  return data;
}
function _checkVersionCompatibility() {
  const data = require("../../../scope/network/check-version-compatibility");
  _checkVersionCompatibility = function () {
    return data;
  };
  return data;
}
function _utils() {
  const data = require("../../../utils");
  _utils = function () {
    return data;
  };
  return data;
}
function _clientSupportCompressedCommand() {
  const data = _interopRequireDefault(require("../../../utils/ssh/client-support-compressed-command"));
  _clientSupportCompressedCommand = function () {
    return data;
  };
  return data;
}
let compressResponse;
class Action {
  constructor() {
    (0, _defineProperty2().default)(this, "name", '_action <path> <args>');
    (0, _defineProperty2().default)(this, "private", true);
    (0, _defineProperty2().default)(this, "internal", true);
    (0, _defineProperty2().default)(this, "description", 'execute a generic action');
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "opts", []);
  }
  action([path, args]) {
    const {
      payload,
      headers
    } = (0, _utils().unpackCommand)(args);
    compressResponse = (0, _clientSupportCompressedCommand().default)(headers.version);
    (0, _checkVersionCompatibility().checkVersionCompatibilityOnTheServer)(headers.version);
    const scopePath = (0, _utils().fromBase64)(path);
    return (0, _action().action)(scopePath, payload.name, payload.options);
  }
  report(results) {
    return (0, _utils().packCommand)((0, _utils().buildCommandMessage)(results, undefined, compressResponse), true, compressResponse);
  }
}
exports.default = Action;