"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _consumer() {
  const data = require("../../../api/consumer");
  _consumer = function () {
    return data;
  };
  return data;
}
function _scope() {
  const data = require("../../../api/scope");
  _scope = function () {
    return data;
  };
  return data;
}
function _logger() {
  const data = _interopRequireDefault(require("../../../logger/logger"));
  _logger = function () {
    return data;
  };
  return data;
}
function _checkVersionCompatibility() {
  const data = require("../../../scope/network/check-version-compatibility");
  _checkVersionCompatibility = function () {
    return data;
  };
  return data;
}
function _objectList() {
  const data = require("../../../scope/objects/object-list");
  _objectList = function () {
    return data;
  };
  return data;
}
function _utils() {
  const data = require("../../../utils");
  _utils = function () {
    return data;
  };
  return data;
}
function _clientSupportCompressedCommand() {
  const data = _interopRequireDefault(require("../../../utils/ssh/client-support-compressed-command"));
  _clientSupportCompressedCommand = function () {
    return data;
  };
  return data;
}
let compressResponse;
class Fetch {
  constructor() {
    (0, _defineProperty2().default)(this, "name", '_fetch <path> <args>');
    (0, _defineProperty2().default)(this, "private", true);
    (0, _defineProperty2().default)(this, "internal", true);
    (0, _defineProperty2().default)(this, "description", 'fetch components(s) from a scope');
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "opts", [['', 'type <string>', 'ids type, options are: ["component", "lane", "object"]'], ['n', 'no-dependencies', 'do not include component dependencies'], ['', 'include-artifacts', 'include components artifacts objects']]);
  }
  action([path, args], {
    type,
    noDependencies = false,
    includeArtifacts = false
  }) {
    const {
      payload,
      headers
    } = (0, _utils().unpackCommand)(args);
    compressResponse = (0, _clientSupportCompressedCommand().default)(headers.version);
    (0, _checkVersionCompatibility().checkVersionCompatibilityOnTheServer)(headers.version);
    _logger().default.info('Checking if a migration is needed');
    const scopePath = (0, _utils().fromBase64)(path);
    const fetchOptions = {
      type,
      withoutDependencies: noDependencies,
      includeArtifacts,
      allowExternal: false // not relevant for SSH. only used in http for lanes.
    };

    return (0, _consumer().migrate)(scopePath, false).then(() => (0, _scope().fetch)(scopePath, payload, fetchOptions, headers)).then(readable => _objectList().ObjectList.fromReadableStream(readable));
  }
  report(objectList) {
    const objectListStr = objectList.toJsonString();
    // No need to use packCommand because we handle all the base64 stuff in a better way inside the ComponentObjects.manyToString
    return JSON.stringify((0, _utils().buildCommandMessage)(objectListStr, undefined, compressResponse, {
      format: _objectList().FETCH_FORMAT_OBJECT_LIST
    }));
  }
}
exports.default = Fetch;