"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _consumer() {
  const data = require("../../../api/consumer");
  _consumer = function () {
    return data;
  };
  return data;
}
function _scope() {
  const data = require("../../../api/scope");
  _scope = function () {
    return data;
  };
  return data;
}
function _logger() {
  const data = _interopRequireDefault(require("../../../logger/logger"));
  _logger = function () {
    return data;
  };
  return data;
}
function _checkVersionCompatibility() {
  const data = require("../../../scope/network/check-version-compatibility");
  _checkVersionCompatibility = function () {
    return data;
  };
  return data;
}
function _objectList() {
  const data = require("../../../scope/objects/object-list");
  _objectList = function () {
    return data;
  };
  return data;
}
function _utils() {
  const data = require("../../../utils");
  _utils = function () {
    return data;
  };
  return data;
}
function _clientSupportCompressedCommand() {
  const data = _interopRequireDefault(require("../../../utils/ssh/client-support-compressed-command"));
  _clientSupportCompressedCommand = function () {
    return data;
  };
  return data;
}
let compressResponse;
class Put {
  constructor() {
    (0, _defineProperty2().default)(this, "name", '_put <path> <args>');
    (0, _defineProperty2().default)(this, "private", true);
    (0, _defineProperty2().default)(this, "internal", true);
    (0, _defineProperty2().default)(this, "description", 'upload a component to a scope');
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "opts", []);
  }
  action([path, args]) {
    let data = '';
    const {
      payload,
      headers
    } = (0, _utils().unpackCommand)(args);
    compressResponse = (0, _clientSupportCompressedCommand().default)(headers.version);
    (0, _checkVersionCompatibility().checkVersionCompatibilityOnTheServer)(headers.version);
    return new Promise((resolve, reject) => {
      process.stdin.on('data', chunk => {
        data += chunk.toString();
      })
      // eslint-disable-next-line @typescript-eslint/no-misused-promises
      .on('end', () => {
        _logger().default.info('Checking if a migration is needed');
        const scopePath = (0, _utils().fromBase64)(path);
        const objectList = _objectList().ObjectList.fromJsonString(data);
        return (0, _consumer().migrate)(scopePath, false).then(() => {
          return (0, _scope().put)({
            objectList,
            path: (0, _utils().fromBase64)(path)
          }, payload, headers);
        }).then(resolve).catch(reject);
      });
    });
  }
  report(ids) {
    return (0, _utils().packCommand)((0, _utils().buildCommandMessage)({
      ids
    }, undefined, compressResponse), true, compressResponse);
  }
}
exports.default = Put;