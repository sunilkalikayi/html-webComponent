"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Loader = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _ora() {
  const data = _interopRequireDefault(require("ora"));
  _ora = function () {
    return data;
  };
  return data;
}
function _constants() {
  const data = require("../../constants");
  _constants = function () {
    return data;
  };
  return data;
}
class Loader {
  constructor() {
    (0, _defineProperty2().default)(this, "spinner", void 0);
  }
  get isStarted() {
    return !!this.spinner;
  }
  on() {
    if (!this.spinner) {
      this.spinner = this.createNewSpinner();
    }
    return this;
  }
  off() {
    this.stop();
    this.spinner = null;
    return this;
  }
  start(text) {
    if (this.spinner) {
      this.spinner.start(text);
    }
    return this;
  }
  setText(text) {
    if (this.spinner) this.spinner.text = text;
    return this;
  }
  setTextAndRestart(text) {
    if (this.spinner) {
      this.spinner.stop();
      this.spinner.text = text;
      this.spinner.start();
    }
    return this;
  }
  get() {
    return this.spinner;
  }
  stop() {
    if (this.spinner) this.spinner.stop();
    return this;
  }
  succeed(text) {
    if (this.spinner) this.spinner.succeed(text);
    return this;
  }
  fail(text) {
    if (this.spinner) this.spinner.fail(text);
    return this;
  }
  warn(text) {
    if (this.spinner) this.spinner.warn(text);
    return this;
  }
  info(text) {
    if (this.spinner) this.spinner.info(text);
    return this;
  }
  stopAndPersist(options) {
    if (this.spinner) this.spinner.stopAndPersist(options);
    return this;
  }
  createNewSpinner() {
    // for some reason the stream defaults to stderr.
    return (0, _ora().default)({
      spinner: _constants().SPINNER_TYPE,
      text: '',
      stream: process.stdout,
      discardStdin: false,
      hideCursor: false
    });
  }
}
exports.Loader = Loader;
const loader = new Loader();
var _default = loader;
exports.default = _default;