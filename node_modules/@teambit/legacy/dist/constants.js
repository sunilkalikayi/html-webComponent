"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_BIT_RELEASE_TYPE = exports.DEFAULT_BIT_ENV = exports.DEFAULT_BINDINGS_PREFIX = exports.DEFAULT_ANALYTICS_DOMAIN = exports.DEBUG_LOG = exports.CURRENT_UPSTREAM = exports.COMPONENT_PATTERN_HELP = exports.COMPONENT_DIST_PATH_TEMPLATE = exports.COMPONENT_DIR = exports.COMPONENT_CONFIG_FILE_NAME = exports.CFG_USER_TOKEN_KEY = exports.CFG_USER_NAME_KEY = exports.CFG_USER_EMAIL_KEY = exports.CFG_SYMPHONY_URL_KEY = exports.CFG_SSH_NO_COMPRESS = exports.CFG_SSH_KEY_FILE_KEY = exports.CFG_REPOSITORY_REPORTING_KEY = exports.CFG_REGISTRY_URL_KEY = exports.CFG_REGISTRY_DOMAIN_PREFIX = exports.CFG_PROXY_STRICT_SSL = exports.CFG_PROXY_NO_PROXY = exports.CFG_PROXY_KEY = exports.CFG_PROXY_CERT = exports.CFG_PROXY_CA_FILE = exports.CFG_PROXY_CA = exports.CFG_PROXY = exports.CFG_POST_IMPORT_HOOK_KEY = exports.CFG_POST_EXPORT_HOOK_KEY = exports.CFG_PACKAGE_MANAGER_CACHE = exports.CFG_NO_WARNINGS = exports.CFG_NETWORK_STRICT_SSL = exports.CFG_NETWORK_KEY = exports.CFG_NETWORK_CONCURRENCY = exports.CFG_NETWORK_CERT = exports.CFG_NETWORK_CA_FILE = exports.CFG_NETWORK_CA = exports.CFG_MAX_SOCKETS = exports.CFG_LOG_LEVEL = exports.CFG_LOG_JSON_FORMAT = exports.CFG_LOCAL_ADDRESS = exports.CFG_INTERACTIVE = exports.CFG_INIT_INTERACTIVE = exports.CFG_INIT_DEFAULT_SCOPE = exports.CFG_INIT_DEFAULT_DIRECTORY = exports.CFG_HUB_LOGIN_KEY = exports.CFG_HUB_DOMAIN_KEY = exports.CFG_HTTPS_PROXY = exports.CFG_GIT_EXECUTABLE_PATH = exports.CFG_FETCH_TIMEOUT = exports.CFG_FETCH_RETRY_MINTIMEOUT = exports.CFG_FETCH_RETRY_MAXTIMEOUT = exports.CFG_FETCH_RETRY_FACTOR = exports.CFG_FETCH_RETRIES = exports.CFG_FEATURE_TOGGLE = exports.CFG_CONCURRENCY_IO = exports.CFG_CONCURRENCY_FETCH = exports.CFG_CONCURRENCY_COMPONENTS = exports.CFG_COMMAND_INTERACTIVE_TEMPLATE = exports.CFG_CI_FUNCTION_PATH_KEY = exports.CFG_CI_ENABLE_KEY = exports.CFG_CAPSULES_ROOT_BASE_DIR = exports.CFG_CACHE_MAX_ITEMS_OBJECTS = exports.CFG_CACHE_MAX_ITEMS_COMPONENTS = exports.CFG_ANALYTICS_USERID_KEY = exports.CFG_ANALYTICS_REPORTING_KEY = exports.CFG_ANALYTICS_ERROR_REPORTS_KEY = exports.CFG_ANALYTICS_ENVIRONMENT_KEY = exports.CFG_ANALYTICS_DOMAIN_KEY = exports.CFG_ANALYTICS_ANONYMOUS_KEY = exports.CENTRAL_BIT_HUB_URL = exports.CENTRAL_BIT_HUB_NAME = exports.CACHE_ROOT = exports.CACHE_GLOBALS_ENV = exports.BuildStatus = exports.BIT_WORKSPACE_TMP_DIRNAME = exports.BIT_VERSION = exports.BIT_USAGE = exports.BIT_TMP_DIRNAME = exports.BIT_SOURCES_DIRNAME = exports.BIT_REGISTRY = exports.BIT_MAP = exports.BIT_JSON = exports.BIT_INSTALL_METHOD = exports.BIT_HIDDEN_DIR = exports.BIT_GIT_DIR = exports.BIT_DESCRIPTION = exports.BIT_CACHE_DIRNAME = exports.BITS_DIRNAME = exports.BITMAP_PREFIX_MESSAGE = exports.BASE_WEB_DOMAIN = exports.BASE_LEGACY_DOCS_DOMAIN = exports.BASE_DOCS_DOMAIN = exports.BASE_COMMUNITY_DOMAIN = exports.BASE_CLOUD_DOMAIN = exports.AUTO_SNAPPED_MSG = exports.AUTO_GENERATED_STAMP = exports.AUTO_GENERATED_MSG = exports.ANGULAR_PACKAGE_IDENTIFIER = exports.ANGULAR_BIT_ENTRY_POINT_FILE = exports.ACCEPTABLE_NPM_VERSIONS = void 0;
exports.SYMPHONY_GRAPHQL = exports.SUPPORTED_EXTENSIONS = exports.SUB_DIRECTORIES_GLOB_PATTERN = exports.STARTED_WATCHING_MSG = exports.SPINNER_TYPE = exports.SPACE_DELIMITER = exports.SOURCE_DIR_SYMLINK_TO_NM = exports.SEARCH_DOMAIN = exports.SCOPE_JSONC = exports.SCOPE_JSON = exports.REPO_NAME = exports.REMOTE_REFS_DIR = exports.RELEASE_SERVER = exports.PRE_UNDEPRECATE_REMOTE = exports.PRE_TAG_HOOK = exports.PRE_TAG_ALL_HOOK = exports.PRE_SEND_OBJECTS = exports.PRE_REMOVE_REMOTE = exports.PRE_RECEIVE_OBJECTS = exports.PRE_IMPORT_HOOK = exports.PRE_EXPORT_HOOK = exports.PRE_DEPRECATE_REMOTE = exports.PREVIOUS_DEFAULT_LANE = exports.PREVIOUSLY_DEFAULT_REGISTRY_URL = exports.PREVIOUSLY_BASE_WEB_DOMAIN = exports.POST_UNDEPRECATE_REMOTE = exports.POST_TAG_HOOK = exports.POST_TAG_ALL_HOOK = exports.POST_SEND_OBJECTS = exports.POST_REMOVE_REMOTE = exports.POST_RECEIVE_OBJECTS = exports.POST_MERGE = exports.POST_IMPORT_HOOK = exports.POST_EXPORT_HOOK = exports.POST_DEPRECATE_REMOTE = exports.POST_CHECKOUT = exports.POST_ADD_HOOK = exports.PENDING_OBJECTS_DIR = exports.PATTERN_HELP = exports.PACKAGE_JSON = exports.OVERRIDE_FILE_PREFIX = exports.OVERRIDE_COMPONENT_PREFIX = exports.OLD_BIT_MAP = exports.OBJECTS_DIR = exports.NULL_BYTE = exports.NO_PLUGIN_TYPE = exports.NOTHING_TO_SNAP_MSG = exports.NODE_PATH_SEPARATOR = exports.NODE_PATH_COMPONENT_SEPARATOR = exports.MANUALLY_REMOVE_ENVIRONMENT = exports.MANUALLY_REMOVE_DEPENDENCY = exports.MANUALLY_ADD_DEPENDENCY = exports.LICENSE_FILENAME = exports.LATEST_BIT_VERSION = exports.LATEST = exports.IS_WINDOWS = exports.ISOLATED_ENV_ROOT = exports.INIT_COMMAND = exports.IMPORT_PENDING_MSG = exports.IGNORE_LIST = exports.HOOKS_NAMES = exports.HEAD = exports.HASH_SIZE = exports.GLOBAL_SCOPE = exports.GLOBAL_REMOTES = exports.GLOBAL_LOGS = exports.GLOBAL_CONFIG_FILE = exports.GLOBAL_CONFIG = exports.GLOBALS_DEFAULT_CAPSULES = exports.GIT_IGNORE = exports.GIT_HOOKS_NAMES = exports.Extensions = exports.ENV_VARIABLE_CONFIG_PREFIX = exports.DOT_GIT_DIR = exports.DEPENDENCY_DELIMITER = exports.DEPENDENCIES_FIELDS = exports.DEPENDENCIES_DIR = exports.DEFAULT_SSH_READY_TIMEOUT = exports.DEFAULT_SSH_KEY_FILE = exports.DEFAULT_SEPARATOR = exports.DEFAULT_SAVE_DEPENDENCIES_AS_COMPONENTS = exports.DEFAULT_RESOLVER = exports.DEFAULT_REMOTES = exports.DEFAULT_REGISTRY_URL = exports.DEFAULT_REGISTRY_DOMAIN_PREFIX = exports.DEFAULT_PACKAGE_MANAGER = exports.DEFAULT_LANGUAGE = exports.DEFAULT_INDEX_NAME = exports.DEFAULT_INDEX_EXTS = exports.DEFAULT_HUB_LOGIN = exports.DEFAULT_HUB_DOMAIN = exports.DEFAULT_HARMONY_PACKAGE_MANAGER = exports.DEFAULT_EXTENSIONS = exports.DEFAULT_DIST_DIRNAME = exports.DEFAULT_DIR_DEPENDENCIES = exports.DEFAULT_DEPENDENCIES_DIR_PATH = exports.DEFAULT_DEPENDENCIES = exports.DEFAULT_COMPONENTS_DIR_PATH = exports.DEFAULT_BUNDLE_FILENAME = exports.DEFAULT_BIT_VERSION = void 0;
exports.statusWorkspaceIsCleanMsg = exports.statusInvalidComponentsMsg = exports.statusFailureMsg = exports.WRAPPER_DIR = exports.WORKSPACE_LANES_DIR = exports.WORKSPACE_JSONC = exports.WILDCARD_HELP = exports.WATCHER_COMPLETED_MSG = exports.VERSION_DELIMITER = exports.TOKEN_FLAG_NAME = exports.TOKEN_FLAG = exports.TESTS_FORK_LEVEL = exports.SYMPHONY_URL = void 0;
function _cliSpinners() {
  const data = _interopRequireDefault(require("cli-spinners"));
  _cliSpinners = function () {
    return data;
  };
  return data;
}
function _os() {
  const data = _interopRequireDefault(require("os"));
  _os = function () {
    return data;
  };
  return data;
}
function path() {
  const data = _interopRequireWildcard(require("path"));
  path = function () {
    return data;
  };
  return data;
}
function _stringFormat() {
  const data = _interopRequireDefault(require("string-format"));
  _stringFormat = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const userHome = require('user-home');
const packageFile = require('../package.json');
const IS_WINDOWS = _os().default.platform() === 'win32';
exports.IS_WINDOWS = IS_WINDOWS;
function getDirectory() {
  if (process.platform === 'win32' && process.env.LOCALAPPDATA) {
    return path().join(process.env.LOCALAPPDATA, 'Bit');
  }
  return path().join(userHome, '.bit');
}
const CACHE_GLOBALS_ENV = 'BIT_GLOBALS_DIR';
exports.CACHE_GLOBALS_ENV = CACHE_GLOBALS_ENV;
function getCacheDirectory() {
  const fromEnvVar = process.env[CACHE_GLOBALS_ENV];
  if (fromEnvVar && typeof fromEnvVar === 'string') {
    return fromEnvVar;
  }
  if (process.platform === 'darwin' || process.platform === 'linux') {
    return path().join(userHome, 'Library', 'Caches', 'Bit');
  }
  return getDirectory();
}
const BIT_USAGE = '[--version] [--help] <command> [<args>]';
exports.BIT_USAGE = BIT_USAGE;
const BITS_DIRNAME = 'components';
exports.BITS_DIRNAME = BITS_DIRNAME;
const BIT_JSON = 'bit.json';
exports.BIT_JSON = BIT_JSON;
const WORKSPACE_JSONC = 'workspace.jsonc';
exports.WORKSPACE_JSONC = WORKSPACE_JSONC;
const GIT_IGNORE = '.gitignore';
exports.GIT_IGNORE = GIT_IGNORE;
const BIT_MAP = '.bitmap';
exports.BIT_MAP = BIT_MAP;
const OLD_BIT_MAP = '.bit.map.json';
exports.OLD_BIT_MAP = OLD_BIT_MAP;
const TESTS_FORK_LEVEL = {
  NONE: 'NONE',
  ONE: 'ONE',
  COMPONENT: 'COMPONENT'
};
exports.TESTS_FORK_LEVEL = TESTS_FORK_LEVEL;
const REPO_NAME = 'teambit/bit';
exports.REPO_NAME = REPO_NAME;
const DEFAULT_INDEX_NAME = 'index';
exports.DEFAULT_INDEX_NAME = DEFAULT_INDEX_NAME;
const DEFAULT_INDEX_EXTS = ['js', 'ts', 'jsx', 'tsx', 'css', 'scss', 'less', 'sass'];
exports.DEFAULT_INDEX_EXTS = DEFAULT_INDEX_EXTS;
const SUPPORTED_EXTENSIONS = ['.js', '.ts', '.jsx', '.tsx', '.css', '.scss', '.less', '.sass', '.vue', '.styl'];
exports.SUPPORTED_EXTENSIONS = SUPPORTED_EXTENSIONS;
const NO_PLUGIN_TYPE = 'none';
exports.NO_PLUGIN_TYPE = NO_PLUGIN_TYPE;
const DEFAULT_PACKAGE_MANAGER = 'npm';
exports.DEFAULT_PACKAGE_MANAGER = DEFAULT_PACKAGE_MANAGER;
const DEFAULT_HARMONY_PACKAGE_MANAGER = 'teambit.dependencies/pnpm';
exports.DEFAULT_HARMONY_PACKAGE_MANAGER = DEFAULT_HARMONY_PACKAGE_MANAGER;
const DEFAULT_EXTENSIONS = {};
exports.DEFAULT_EXTENSIONS = DEFAULT_EXTENSIONS;
const DEFAULT_DIST_DIRNAME = 'dist';
exports.DEFAULT_DIST_DIRNAME = DEFAULT_DIST_DIRNAME;
const DEFAULT_BUNDLE_FILENAME = 'dist.js';
exports.DEFAULT_BUNDLE_FILENAME = DEFAULT_BUNDLE_FILENAME;
const DEFAULT_BIT_VERSION = '0.0.1';
exports.DEFAULT_BIT_VERSION = DEFAULT_BIT_VERSION;
const DEFAULT_BIT_RELEASE_TYPE = 'patch'; // release type of semver (patch, minor, major)
exports.DEFAULT_BIT_RELEASE_TYPE = DEFAULT_BIT_RELEASE_TYPE;
const DEFAULT_LANGUAGE = 'javascript';
exports.DEFAULT_LANGUAGE = DEFAULT_LANGUAGE;
const DEFAULT_BINDINGS_PREFIX = '@bit';
exports.DEFAULT_BINDINGS_PREFIX = DEFAULT_BINDINGS_PREFIX;
const NODE_PATH_COMPONENT_SEPARATOR = '.';
exports.NODE_PATH_COMPONENT_SEPARATOR = NODE_PATH_COMPONENT_SEPARATOR;
const DEFAULT_COMPONENTS_DIR_PATH = `${BITS_DIRNAME}/{name}`;
exports.DEFAULT_COMPONENTS_DIR_PATH = DEFAULT_COMPONENTS_DIR_PATH;
const DEFAULT_DIR_DEPENDENCIES = '.dependencies';
exports.DEFAULT_DIR_DEPENDENCIES = DEFAULT_DIR_DEPENDENCIES;
const DEFAULT_DEPENDENCIES_DIR_PATH = `${BITS_DIRNAME}/${DEFAULT_DIR_DEPENDENCIES}`;
exports.DEFAULT_DEPENDENCIES_DIR_PATH = DEFAULT_DEPENDENCIES_DIR_PATH;
const COMPONENT_DIR = 'COMPONENT_DIR';
exports.COMPONENT_DIR = COMPONENT_DIR;
const DEFAULT_SAVE_DEPENDENCIES_AS_COMPONENTS = false;
exports.DEFAULT_SAVE_DEPENDENCIES_AS_COMPONENTS = DEFAULT_SAVE_DEPENDENCIES_AS_COMPONENTS;
const DEFAULT_SEPARATOR = '/';
exports.DEFAULT_SEPARATOR = DEFAULT_SEPARATOR;
const LATEST_BIT_VERSION = 'latest';
exports.LATEST_BIT_VERSION = LATEST_BIT_VERSION;
const OBJECTS_DIR = 'objects';
exports.OBJECTS_DIR = OBJECTS_DIR;
const PENDING_OBJECTS_DIR = 'pending-objects';
exports.PENDING_OBJECTS_DIR = PENDING_OBJECTS_DIR;
const REMOTE_REFS_DIR = path().join('refs', 'remotes');
exports.REMOTE_REFS_DIR = REMOTE_REFS_DIR;
const WORKSPACE_LANES_DIR = path().join('workspace', 'lanes');
exports.WORKSPACE_LANES_DIR = WORKSPACE_LANES_DIR;
const NULL_BYTE = '\u0000';
exports.NULL_BYTE = NULL_BYTE;
const SPACE_DELIMITER = ' ';
exports.SPACE_DELIMITER = SPACE_DELIMITER;
const VERSION_DELIMITER = '@';
exports.VERSION_DELIMITER = VERSION_DELIMITER;
const DEPENDENCIES_DIR = 'dependencies';
exports.DEPENDENCIES_DIR = DEPENDENCIES_DIR;
const DEFAULT_REMOTES = {};
exports.DEFAULT_REMOTES = DEFAULT_REMOTES;
const DEFAULT_DEPENDENCIES = {};
exports.DEFAULT_DEPENDENCIES = DEFAULT_DEPENDENCIES;
const SPINNER_TYPE = IS_WINDOWS ? _cliSpinners().default.dots : _cliSpinners().default.dots12;

/**
 * URLS
 */

/**
 * @deprecated use 'BASE_CLOUD_DOMAIN' or 'BASE_COMMUNITY_DOMAIN'
 */
exports.SPINNER_TYPE = SPINNER_TYPE;
const BASE_WEB_DOMAIN = 'bit.dev';
exports.BASE_WEB_DOMAIN = BASE_WEB_DOMAIN;
const BASE_CLOUD_DOMAIN = 'bit.cloud';
exports.BASE_CLOUD_DOMAIN = BASE_CLOUD_DOMAIN;
const BASE_COMMUNITY_DOMAIN = 'bit.dev';
exports.BASE_COMMUNITY_DOMAIN = BASE_COMMUNITY_DOMAIN;
const PREVIOUSLY_BASE_WEB_DOMAIN = 'bitsrc.io';
exports.PREVIOUSLY_BASE_WEB_DOMAIN = PREVIOUSLY_BASE_WEB_DOMAIN;
const DEFAULT_HUB_DOMAIN = `hub.${BASE_CLOUD_DOMAIN}`;
exports.DEFAULT_HUB_DOMAIN = DEFAULT_HUB_DOMAIN;
const SYMPHONY_URL = `symphony.${BASE_CLOUD_DOMAIN}`;
exports.SYMPHONY_URL = SYMPHONY_URL;
const SYMPHONY_GRAPHQL = `http://${SYMPHONY_URL}/graphql`;
exports.SYMPHONY_GRAPHQL = SYMPHONY_GRAPHQL;
const BASE_DOCS_DOMAIN = `${BASE_COMMUNITY_DOMAIN}/docs`;
exports.BASE_DOCS_DOMAIN = BASE_DOCS_DOMAIN;
const BASE_LEGACY_DOCS_DOMAIN = `legacy-docs.${BASE_COMMUNITY_DOMAIN}/docs`;
exports.BASE_LEGACY_DOCS_DOMAIN = BASE_LEGACY_DOCS_DOMAIN;
const DEFAULT_HUB_LOGIN = `https://${BASE_CLOUD_DOMAIN}/bit-login`;
exports.DEFAULT_HUB_LOGIN = DEFAULT_HUB_LOGIN;
const DEFAULT_ANALYTICS_DOMAIN = `https://analytics.${BASE_CLOUD_DOMAIN}/`;
exports.DEFAULT_ANALYTICS_DOMAIN = DEFAULT_ANALYTICS_DOMAIN;
const SEARCH_DOMAIN = `api.${BASE_CLOUD_DOMAIN}`;
exports.SEARCH_DOMAIN = SEARCH_DOMAIN;
const RELEASE_SERVER = `https://api.${BASE_CLOUD_DOMAIN}/release`;
exports.RELEASE_SERVER = RELEASE_SERVER;
const DEFAULT_REGISTRY_URL = `https://node.bit.cloud`;
exports.DEFAULT_REGISTRY_URL = DEFAULT_REGISTRY_URL;
const PREVIOUSLY_DEFAULT_REGISTRY_URL = `https://node.${PREVIOUSLY_BASE_WEB_DOMAIN}`;
exports.PREVIOUSLY_DEFAULT_REGISTRY_URL = PREVIOUSLY_DEFAULT_REGISTRY_URL;
const CENTRAL_BIT_HUB_URL = `https://${SYMPHONY_URL}/exporter`;
exports.CENTRAL_BIT_HUB_URL = CENTRAL_BIT_HUB_URL;
const CENTRAL_BIT_HUB_NAME = 'bit.cloud';

// END URLS
exports.CENTRAL_BIT_HUB_NAME = CENTRAL_BIT_HUB_NAME;
const DEFAULT_REGISTRY_DOMAIN_PREFIX = '@bit';
exports.DEFAULT_REGISTRY_DOMAIN_PREFIX = DEFAULT_REGISTRY_DOMAIN_PREFIX;
const DEFAULT_SSH_KEY_FILE = `${userHome}/.ssh/id_rsa`;
exports.DEFAULT_SSH_KEY_FILE = DEFAULT_SSH_KEY_FILE;
const DEFAULT_BIT_ENV = 'production';

// Setting this to 99999 to prevent this issue:
// https://github.com/mscdex/ssh2/issues/142
exports.DEFAULT_BIT_ENV = DEFAULT_BIT_ENV;
const DEFAULT_SSH_READY_TIMEOUT = 99999;
exports.DEFAULT_SSH_READY_TIMEOUT = DEFAULT_SSH_READY_TIMEOUT;
const IGNORE_LIST = ['**/.bit.map.json', '**/.bitmap', '**/.gitignore', '**/bit.json', '**/component.json', '**/bitBindings.js', '**/node_modules/**', '**/package-lock.json', '**/yarn.lock', '**/LICENSE', '*/tsconfig.json'];
exports.IGNORE_LIST = IGNORE_LIST;
const AUTO_GENERATED_STAMP = 'BIT-AUTO-GENERATED';
exports.AUTO_GENERATED_STAMP = AUTO_GENERATED_STAMP;
const AUTO_GENERATED_MSG = `/* THIS IS A ${AUTO_GENERATED_STAMP} FILE. DO NOT EDIT THIS FILE DIRECTLY. */\n\n`;
exports.AUTO_GENERATED_MSG = AUTO_GENERATED_MSG;
const BITMAP_PREFIX_MESSAGE = `/**
 * The Bitmap file is an auto generated file used by Bit to track all your Bit components. It maps the component to a folder in your file system.
 * This file should be committed to VCS(version control).
 * Components are listed using their component ID (https://${BASE_DOCS_DOMAIN}/components/component-id).
 * If you want to delete components you can use the "bit remove <component-id>" command.
 * See the docs (https://${BASE_DOCS_DOMAIN}/components/removing-components) for more information, or use "bit remove --help".
 */\n\n`;
exports.BITMAP_PREFIX_MESSAGE = BITMAP_PREFIX_MESSAGE;
const BIT_DESCRIPTION = 'bit is a free and open source tool designed for easy use, maintenance and discovery of code components.';

/**
 * bit commands
 */
exports.BIT_DESCRIPTION = BIT_DESCRIPTION;
const INIT_COMMAND = 'init';
exports.INIT_COMMAND = INIT_COMMAND;
const ENV_VARIABLE_CONFIG_PREFIX = 'BIT_CONFIG_';
/**
 * bit global config keys
 */
exports.ENV_VARIABLE_CONFIG_PREFIX = ENV_VARIABLE_CONFIG_PREFIX;
const CFG_USER_EMAIL_KEY = 'user.email';
exports.CFG_USER_EMAIL_KEY = CFG_USER_EMAIL_KEY;
const CFG_USER_TOKEN_KEY = 'user.token';
exports.CFG_USER_TOKEN_KEY = CFG_USER_TOKEN_KEY;
const CFG_USER_NAME_KEY = 'user.name';
exports.CFG_USER_NAME_KEY = CFG_USER_NAME_KEY;
const CFG_REGISTRY_URL_KEY = 'registry';
exports.CFG_REGISTRY_URL_KEY = CFG_REGISTRY_URL_KEY;
const CFG_SSH_KEY_FILE_KEY = 'ssh_key_file';
exports.CFG_SSH_KEY_FILE_KEY = CFG_SSH_KEY_FILE_KEY;
const CFG_HUB_DOMAIN_KEY = 'hub_domain';
exports.CFG_HUB_DOMAIN_KEY = CFG_HUB_DOMAIN_KEY;
const CFG_SYMPHONY_URL_KEY = 'symphony_url';
exports.CFG_SYMPHONY_URL_KEY = CFG_SYMPHONY_URL_KEY;
const CFG_HUB_LOGIN_KEY = 'hub_domain_login';
exports.CFG_HUB_LOGIN_KEY = CFG_HUB_LOGIN_KEY;
const CFG_ANALYTICS_DOMAIN_KEY = 'analytics_domain';
exports.CFG_ANALYTICS_DOMAIN_KEY = CFG_ANALYTICS_DOMAIN_KEY;
const CFG_ANALYTICS_ANONYMOUS_KEY = 'anonymous_reporting';
exports.CFG_ANALYTICS_ANONYMOUS_KEY = CFG_ANALYTICS_ANONYMOUS_KEY;
const CFG_REPOSITORY_REPORTING_KEY = 'repository_reporting';
exports.CFG_REPOSITORY_REPORTING_KEY = CFG_REPOSITORY_REPORTING_KEY;
const CFG_ANALYTICS_REPORTING_KEY = 'analytics_reporting';
exports.CFG_ANALYTICS_REPORTING_KEY = CFG_ANALYTICS_REPORTING_KEY;
const CFG_ANALYTICS_ERROR_REPORTS_KEY = 'error_reporting';
exports.CFG_ANALYTICS_ERROR_REPORTS_KEY = CFG_ANALYTICS_ERROR_REPORTS_KEY;
const CFG_ANALYTICS_ENVIRONMENT_KEY = 'bit_environment';
exports.CFG_ANALYTICS_ENVIRONMENT_KEY = CFG_ANALYTICS_ENVIRONMENT_KEY;
const CFG_ANALYTICS_USERID_KEY = 'analytics_id';
exports.CFG_ANALYTICS_USERID_KEY = CFG_ANALYTICS_USERID_KEY;
const CFG_REGISTRY_DOMAIN_PREFIX = 'registry_domain_prefix';
exports.CFG_REGISTRY_DOMAIN_PREFIX = CFG_REGISTRY_DOMAIN_PREFIX;
const CFG_POST_EXPORT_HOOK_KEY = 'post_export_hook';
exports.CFG_POST_EXPORT_HOOK_KEY = CFG_POST_EXPORT_HOOK_KEY;
const CFG_POST_IMPORT_HOOK_KEY = 'post_import_hook';
exports.CFG_POST_IMPORT_HOOK_KEY = CFG_POST_IMPORT_HOOK_KEY;
const CFG_CI_FUNCTION_PATH_KEY = 'ci_function_path';
exports.CFG_CI_FUNCTION_PATH_KEY = CFG_CI_FUNCTION_PATH_KEY;
const CFG_CI_ENABLE_KEY = 'ci_enable';
exports.CFG_CI_ENABLE_KEY = CFG_CI_ENABLE_KEY;
const CFG_GIT_EXECUTABLE_PATH = 'git_path';
exports.CFG_GIT_EXECUTABLE_PATH = CFG_GIT_EXECUTABLE_PATH;
const CFG_LOG_JSON_FORMAT = 'log_json_format';
exports.CFG_LOG_JSON_FORMAT = CFG_LOG_JSON_FORMAT;
const CFG_LOG_LEVEL = 'log_level';
exports.CFG_LOG_LEVEL = CFG_LOG_LEVEL;
const CFG_NO_WARNINGS = 'no_warnings';
exports.CFG_NO_WARNINGS = CFG_NO_WARNINGS;
const CFG_INTERACTIVE = 'interactive';

// Template for interactive config for specific command like interactive.init
exports.CFG_INTERACTIVE = CFG_INTERACTIVE;
const CFG_COMMAND_INTERACTIVE_TEMPLATE = 'interactive.{commandName}';
exports.CFG_COMMAND_INTERACTIVE_TEMPLATE = CFG_COMMAND_INTERACTIVE_TEMPLATE;
const CFG_INIT_INTERACTIVE = (0, _stringFormat().default)(CFG_COMMAND_INTERACTIVE_TEMPLATE, {
  commandName: INIT_COMMAND
});
exports.CFG_INIT_INTERACTIVE = CFG_INIT_INTERACTIVE;
const CFG_INIT_DEFAULT_SCOPE = 'default_scope';
exports.CFG_INIT_DEFAULT_SCOPE = CFG_INIT_DEFAULT_SCOPE;
const CFG_INIT_DEFAULT_DIRECTORY = 'default_directory';
exports.CFG_INIT_DEFAULT_DIRECTORY = CFG_INIT_DEFAULT_DIRECTORY;
const CFG_SSH_NO_COMPRESS = 'ssh_no_compress';
exports.CFG_SSH_NO_COMPRESS = CFG_SSH_NO_COMPRESS;
const CFG_FEATURE_TOGGLE = 'features';
exports.CFG_FEATURE_TOGGLE = CFG_FEATURE_TOGGLE;
const CFG_PACKAGE_MANAGER_CACHE = 'package-manager.cache';
exports.CFG_PACKAGE_MANAGER_CACHE = CFG_PACKAGE_MANAGER_CACHE;
const CFG_CAPSULES_ROOT_BASE_DIR = 'capsules_root_base_dir';
exports.CFG_CAPSULES_ROOT_BASE_DIR = CFG_CAPSULES_ROOT_BASE_DIR;
const CFG_PROXY = 'proxy';
exports.CFG_PROXY = CFG_PROXY;
const CFG_HTTPS_PROXY = 'https_proxy';
exports.CFG_HTTPS_PROXY = CFG_HTTPS_PROXY;
const CFG_PROXY_NO_PROXY = 'proxy.no_proxy';
// These are for backward compatibility
exports.CFG_PROXY_NO_PROXY = CFG_PROXY_NO_PROXY;
const CFG_PROXY_CA = 'proxy.ca';
exports.CFG_PROXY_CA = CFG_PROXY_CA;
const CFG_PROXY_CA_FILE = 'proxy.cafile';
exports.CFG_PROXY_CA_FILE = CFG_PROXY_CA_FILE;
const CFG_PROXY_STRICT_SSL = 'proxy.strict_ssl';
exports.CFG_PROXY_STRICT_SSL = CFG_PROXY_STRICT_SSL;
const CFG_PROXY_CERT = 'proxy.cert';
exports.CFG_PROXY_CERT = CFG_PROXY_CERT;
const CFG_PROXY_KEY = 'proxy.key';
exports.CFG_PROXY_KEY = CFG_PROXY_KEY;
const CFG_FETCH_RETRIES = 'network.fetch_retries';
exports.CFG_FETCH_RETRIES = CFG_FETCH_RETRIES;
const CFG_FETCH_RETRY_FACTOR = 'network.fetch_retry_factor';
exports.CFG_FETCH_RETRY_FACTOR = CFG_FETCH_RETRY_FACTOR;
const CFG_FETCH_RETRY_MINTIMEOUT = 'network.fetch_retry_mintimeout';
exports.CFG_FETCH_RETRY_MINTIMEOUT = CFG_FETCH_RETRY_MINTIMEOUT;
const CFG_FETCH_RETRY_MAXTIMEOUT = 'network.fetch_retry_maxtimeout';
exports.CFG_FETCH_RETRY_MAXTIMEOUT = CFG_FETCH_RETRY_MAXTIMEOUT;
const CFG_FETCH_TIMEOUT = 'network.fetch_timeout';
exports.CFG_FETCH_TIMEOUT = CFG_FETCH_TIMEOUT;
const CFG_LOCAL_ADDRESS = 'network.local_address';
exports.CFG_LOCAL_ADDRESS = CFG_LOCAL_ADDRESS;
const CFG_MAX_SOCKETS = 'network.max_sockets';
exports.CFG_MAX_SOCKETS = CFG_MAX_SOCKETS;
const CFG_NETWORK_CONCURRENCY = 'network.concurrency';
exports.CFG_NETWORK_CONCURRENCY = CFG_NETWORK_CONCURRENCY;
const CFG_NETWORK_CA = 'network.ca';
exports.CFG_NETWORK_CA = CFG_NETWORK_CA;
const CFG_NETWORK_CA_FILE = 'network.cafile';
exports.CFG_NETWORK_CA_FILE = CFG_NETWORK_CA_FILE;
const CFG_NETWORK_STRICT_SSL = 'network.strict-ssl';
exports.CFG_NETWORK_STRICT_SSL = CFG_NETWORK_STRICT_SSL;
const CFG_NETWORK_CERT = 'network.cert';
exports.CFG_NETWORK_CERT = CFG_NETWORK_CERT;
const CFG_NETWORK_KEY = 'network.key';
exports.CFG_NETWORK_KEY = CFG_NETWORK_KEY;
const CFG_CONCURRENCY_IO = 'concurrency.io';
exports.CFG_CONCURRENCY_IO = CFG_CONCURRENCY_IO;
const CFG_CONCURRENCY_COMPONENTS = 'concurrency.components';
exports.CFG_CONCURRENCY_COMPONENTS = CFG_CONCURRENCY_COMPONENTS;
const CFG_CONCURRENCY_FETCH = 'concurrency.fetch';
exports.CFG_CONCURRENCY_FETCH = CFG_CONCURRENCY_FETCH;
const CFG_CACHE_MAX_ITEMS_COMPONENTS = 'cache.max.components';
exports.CFG_CACHE_MAX_ITEMS_COMPONENTS = CFG_CACHE_MAX_ITEMS_COMPONENTS;
const CFG_CACHE_MAX_ITEMS_OBJECTS = 'cache.max.objects';

/**
 * git hooks
 */
exports.CFG_CACHE_MAX_ITEMS_OBJECTS = CFG_CACHE_MAX_ITEMS_OBJECTS;
const POST_CHECKOUT = 'post-checkout';
exports.POST_CHECKOUT = POST_CHECKOUT;
const POST_MERGE = 'post-merge';
exports.POST_MERGE = POST_MERGE;
const GIT_HOOKS_NAMES = [POST_CHECKOUT, POST_MERGE];

/**
 * bit hooks
 */
exports.GIT_HOOKS_NAMES = GIT_HOOKS_NAMES;
const PRE_TAG_HOOK = 'pre-tag';
exports.PRE_TAG_HOOK = PRE_TAG_HOOK;
const POST_TAG_HOOK = 'post-tag';
exports.POST_TAG_HOOK = POST_TAG_HOOK;
const POST_ADD_HOOK = 'post-add';
exports.POST_ADD_HOOK = POST_ADD_HOOK;
const PRE_TAG_ALL_HOOK = 'pre-tag-all';
exports.PRE_TAG_ALL_HOOK = PRE_TAG_ALL_HOOK;
const POST_TAG_ALL_HOOK = 'post-tag-all';
exports.POST_TAG_ALL_HOOK = POST_TAG_ALL_HOOK;
const PRE_IMPORT_HOOK = 'pre-import';
exports.PRE_IMPORT_HOOK = PRE_IMPORT_HOOK;
const POST_IMPORT_HOOK = 'post-import';
exports.POST_IMPORT_HOOK = POST_IMPORT_HOOK;
const PRE_EXPORT_HOOK = 'pre-export';
exports.PRE_EXPORT_HOOK = PRE_EXPORT_HOOK;
const POST_EXPORT_HOOK = 'post-export';
exports.POST_EXPORT_HOOK = POST_EXPORT_HOOK;
const PRE_SEND_OBJECTS = 'pre-send-objects'; // pre-fetch
exports.PRE_SEND_OBJECTS = PRE_SEND_OBJECTS;
const POST_SEND_OBJECTS = 'post-send-objects'; // post-fetch
exports.POST_SEND_OBJECTS = POST_SEND_OBJECTS;
const PRE_RECEIVE_OBJECTS = 'pre-receive-objects'; // pre-put
exports.PRE_RECEIVE_OBJECTS = PRE_RECEIVE_OBJECTS;
const POST_RECEIVE_OBJECTS = 'post-receive-objects'; // post-put
exports.POST_RECEIVE_OBJECTS = POST_RECEIVE_OBJECTS;
const PRE_DEPRECATE_REMOTE = 'pre-deprecate-remote';
exports.PRE_DEPRECATE_REMOTE = PRE_DEPRECATE_REMOTE;
const PRE_UNDEPRECATE_REMOTE = 'pre-undeprecate-remote';
exports.PRE_UNDEPRECATE_REMOTE = PRE_UNDEPRECATE_REMOTE;
const POST_DEPRECATE_REMOTE = 'post-deprecate-remote';
exports.POST_DEPRECATE_REMOTE = POST_DEPRECATE_REMOTE;
const POST_UNDEPRECATE_REMOTE = 'post-undeprecate-remote';
exports.POST_UNDEPRECATE_REMOTE = POST_UNDEPRECATE_REMOTE;
const PRE_REMOVE_REMOTE = 'pre-remove-remote';
exports.PRE_REMOVE_REMOTE = PRE_REMOVE_REMOTE;
const POST_REMOVE_REMOTE = 'post-remove-remote';
exports.POST_REMOVE_REMOTE = POST_REMOVE_REMOTE;
const HOOKS_NAMES = [PRE_TAG_HOOK, POST_TAG_HOOK, POST_ADD_HOOK, PRE_TAG_ALL_HOOK, POST_TAG_ALL_HOOK, PRE_IMPORT_HOOK, POST_IMPORT_HOOK, PRE_EXPORT_HOOK, POST_EXPORT_HOOK, PRE_SEND_OBJECTS, POST_SEND_OBJECTS, PRE_RECEIVE_OBJECTS, POST_RECEIVE_OBJECTS, PRE_DEPRECATE_REMOTE, PRE_UNDEPRECATE_REMOTE, POST_DEPRECATE_REMOTE, POST_UNDEPRECATE_REMOTE, PRE_REMOVE_REMOTE, POST_REMOVE_REMOTE];

/**
 * cache root directory
 */
exports.HOOKS_NAMES = HOOKS_NAMES;
const CACHE_ROOT = getCacheDirectory();

/**
 * global config directories
 */
exports.CACHE_ROOT = CACHE_ROOT;
const GLOBAL_CONFIG = path().join(CACHE_ROOT, 'config');
exports.GLOBAL_CONFIG = GLOBAL_CONFIG;
const GLOBAL_LOGS = path().join(CACHE_ROOT, 'logs');
exports.GLOBAL_LOGS = GLOBAL_LOGS;
const GLOBAL_SCOPE = path().join(CACHE_ROOT, 'scope');
exports.GLOBAL_SCOPE = GLOBAL_SCOPE;
const GLOBALS_DEFAULT_CAPSULES = path().join(CACHE_ROOT, 'capsules');
exports.GLOBALS_DEFAULT_CAPSULES = GLOBALS_DEFAULT_CAPSULES;
const GLOBAL_CONFIG_FILE = 'config.json';
exports.GLOBAL_CONFIG_FILE = GLOBAL_CONFIG_FILE;
const GLOBAL_REMOTES = 'global-remotes.json';
exports.GLOBAL_REMOTES = GLOBAL_REMOTES;
const BIT_HIDDEN_DIR = '.bit';
exports.BIT_HIDDEN_DIR = BIT_HIDDEN_DIR;
const BIT_GIT_DIR = 'bit';
exports.BIT_GIT_DIR = BIT_GIT_DIR;
const DOT_GIT_DIR = '.git';

/**
 * bit registry default URL.
 */
exports.DOT_GIT_DIR = DOT_GIT_DIR;
const BIT_REGISTRY = '';
exports.BIT_REGISTRY = BIT_REGISTRY;
const LATEST = 'latest';
exports.LATEST = LATEST;
const HEAD = 'head';
exports.HEAD = HEAD;
const DEPENDENCY_DELIMITER = '/';
exports.DEPENDENCY_DELIMITER = DEPENDENCY_DELIMITER;
const BIT_SOURCES_DIRNAME = 'source';
exports.BIT_SOURCES_DIRNAME = BIT_SOURCES_DIRNAME;
const BIT_TMP_DIRNAME = 'tmp';
exports.BIT_TMP_DIRNAME = BIT_TMP_DIRNAME;
const BIT_WORKSPACE_TMP_DIRNAME = '.bitTmp';
exports.BIT_WORKSPACE_TMP_DIRNAME = BIT_WORKSPACE_TMP_DIRNAME;
const BIT_CACHE_DIRNAME = 'cache';
exports.BIT_CACHE_DIRNAME = BIT_CACHE_DIRNAME;
const SUB_DIRECTORIES_GLOB_PATTERN = '/**/*';
exports.SUB_DIRECTORIES_GLOB_PATTERN = SUB_DIRECTORIES_GLOB_PATTERN;
const SCOPE_JSON = 'scope.json';
exports.SCOPE_JSON = SCOPE_JSON;
const SCOPE_JSONC = 'scope.jsonc';
exports.SCOPE_JSONC = SCOPE_JSONC;
const DEFAULT_RESOLVER = () => '';

/**
 * current bit application version
 */
exports.DEFAULT_RESOLVER = DEFAULT_RESOLVER;
const BIT_VERSION = packageFile.version;
exports.BIT_VERSION = BIT_VERSION;
const BIT_INSTALL_METHOD = packageFile.installationMethod;
exports.BIT_INSTALL_METHOD = BIT_INSTALL_METHOD;
const TOKEN_FLAG_NAME = 'token';
exports.TOKEN_FLAG_NAME = TOKEN_FLAG_NAME;
const TOKEN_FLAG = `${TOKEN_FLAG_NAME} <${TOKEN_FLAG_NAME}>`;
exports.TOKEN_FLAG = TOKEN_FLAG;
const LICENSE_FILENAME = 'LICENSE';
exports.LICENSE_FILENAME = LICENSE_FILENAME;
const ISOLATED_ENV_ROOT = 'environment';
exports.ISOLATED_ENV_ROOT = ISOLATED_ENV_ROOT;
const NODE_PATH_SEPARATOR = process.platform === 'win32' ? ';' : ':'; // see here https://nodejs.org/api/modules.html#modules_loading_from_the_global_folders
exports.NODE_PATH_SEPARATOR = NODE_PATH_SEPARATOR;
const WRAPPER_DIR = 'bit_wrapper_dir';
exports.WRAPPER_DIR = WRAPPER_DIR;
const PACKAGE_JSON = 'package.json';
exports.PACKAGE_JSON = PACKAGE_JSON;
const COMPONENT_CONFIG_FILE_NAME = 'component.json';
exports.COMPONENT_CONFIG_FILE_NAME = COMPONENT_CONFIG_FILE_NAME;
const DEBUG_LOG = path().join(GLOBAL_LOGS, 'debug.log');
exports.DEBUG_LOG = DEBUG_LOG;
const MANUALLY_REMOVE_DEPENDENCY = '-';
exports.MANUALLY_REMOVE_DEPENDENCY = MANUALLY_REMOVE_DEPENDENCY;
const MANUALLY_REMOVE_ENVIRONMENT = '-';
exports.MANUALLY_REMOVE_ENVIRONMENT = MANUALLY_REMOVE_ENVIRONMENT;
const MANUALLY_ADD_DEPENDENCY = '+';
exports.MANUALLY_ADD_DEPENDENCY = MANUALLY_ADD_DEPENDENCY;
const OVERRIDE_FILE_PREFIX = 'file://';
exports.OVERRIDE_FILE_PREFIX = OVERRIDE_FILE_PREFIX;
const OVERRIDE_COMPONENT_PREFIX = '@bit/';
exports.OVERRIDE_COMPONENT_PREFIX = OVERRIDE_COMPONENT_PREFIX;
const ACCEPTABLE_NPM_VERSIONS = '>=5.0.0';
exports.ACCEPTABLE_NPM_VERSIONS = ACCEPTABLE_NPM_VERSIONS;
const ANGULAR_PACKAGE_IDENTIFIER = '@angular/core';
exports.ANGULAR_PACKAGE_IDENTIFIER = ANGULAR_PACKAGE_IDENTIFIER;
const ANGULAR_BIT_ENTRY_POINT_FILE = ['public-api.ts', 'public_api.ts'];
exports.ANGULAR_BIT_ENTRY_POINT_FILE = ANGULAR_BIT_ENTRY_POINT_FILE;
const COMPONENT_DIST_PATH_TEMPLATE = '{COMPONENT_DIST_PATH}';
exports.COMPONENT_DIST_PATH_TEMPLATE = COMPONENT_DIST_PATH_TEMPLATE;
const WILDCARD_HELP = command => `you can use a pattern for multiple ids, such as bit ${command} "utils/*". (wrap the pattern with quotes to avoid collision with shell commands)`;
exports.WILDCARD_HELP = WILDCARD_HELP;
const PATTERN_HELP = command => `you can use a \`<pattern>\` for multiple component ids, such as \`bit ${command} "org.scope/utils/**"\`.
use comma to separate patterns and "!" to exclude. e.g. "ui/**, !ui/button"
always wrap the pattern with quotes to avoid collision with shell commands.
use \`bit pattern --help\` to understand patterns better and \`bit pattern <pattern>\` to validate the pattern.
`;
exports.PATTERN_HELP = PATTERN_HELP;
const COMPONENT_PATTERN_HELP = `component name, component id, or component pattern. use component pattern to select multiple components.
use comma to separate patterns and "!" to exclude. e.g. "ui/**, !ui/button"
wrap the pattern with quotes`;
exports.COMPONENT_PATTERN_HELP = COMPONENT_PATTERN_HELP;
const CURRENT_UPSTREAM = 'current';
exports.CURRENT_UPSTREAM = CURRENT_UPSTREAM;
const DEPENDENCIES_FIELDS = ['dependencies', 'devDependencies', 'peerDependencies'];
exports.DEPENDENCIES_FIELDS = DEPENDENCIES_FIELDS;
const HASH_SIZE = 40;
exports.HASH_SIZE = HASH_SIZE;
const PREVIOUS_DEFAULT_LANE = 'master';
exports.PREVIOUS_DEFAULT_LANE = PREVIOUS_DEFAULT_LANE;
const statusInvalidComponentsMsg = 'invalid components';
exports.statusInvalidComponentsMsg = statusInvalidComponentsMsg;
const statusFailureMsg = 'issues found';
exports.statusFailureMsg = statusFailureMsg;
const statusWorkspaceIsCleanMsg = 'nothing to tag or export (use "bit add <file...>" to track files or directories as components)';

// todo: move the following two lines to the watch extension once its e2e moved to the extension dir
exports.statusWorkspaceIsCleanMsg = statusWorkspaceIsCleanMsg;
const STARTED_WATCHING_MSG = 'started watching for component changes to rebuild';
exports.STARTED_WATCHING_MSG = STARTED_WATCHING_MSG;
const WATCHER_COMPLETED_MSG = 'watching for changes';
exports.WATCHER_COMPLETED_MSG = WATCHER_COMPLETED_MSG;
const NOTHING_TO_SNAP_MSG = 'nothing to snap';
exports.NOTHING_TO_SNAP_MSG = NOTHING_TO_SNAP_MSG;
const AUTO_SNAPPED_MSG = 'auto-snapped dependents';
exports.AUTO_SNAPPED_MSG = AUTO_SNAPPED_MSG;
const IMPORT_PENDING_MSG = 'your workspace has outdated objects. please use "bit import" to pull the latest objects from the remote scope';
exports.IMPORT_PENDING_MSG = IMPORT_PENDING_MSG;
let Extensions;
exports.Extensions = Extensions;
(function (Extensions) {
  Extensions["dependencyResolver"] = "teambit.dependencies/dependency-resolver";
  Extensions["pkg"] = "teambit.pkg/pkg";
  Extensions["compiler"] = "teambit.compilation/compiler";
  Extensions["envs"] = "teambit.envs/envs";
  Extensions["builder"] = "teambit.pipelines/builder";
  Extensions["deprecation"] = "teambit.component/deprecation";
  Extensions["forking"] = "teambit.component/forking";
  Extensions["renaming"] = "teambit.component/renaming";
  Extensions["lanes"] = "teambit.lanes/lanes";
  Extensions["remove"] = "teambit.component/remove";
})(Extensions || (exports.Extensions = Extensions = {}));
let BuildStatus;
exports.BuildStatus = BuildStatus;
(function (BuildStatus) {
  BuildStatus["Pending"] = "pending";
  BuildStatus["Failed"] = "failed";
  BuildStatus["Succeed"] = "succeed";
})(BuildStatus || (exports.BuildStatus = BuildStatus = {}));
const SOURCE_DIR_SYMLINK_TO_NM = '_src'; // symlink from node_modules to the workspace sources files
exports.SOURCE_DIR_SYMLINK_TO_NM = SOURCE_DIR_SYMLINK_TO_NM;