"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = shouldShowInteractive;
function globalConfig() {
  const data = _interopRequireWildcard(require("../../api/consumer/lib/global-config"));
  globalConfig = function () {
    return data;
  };
  return data;
}
function _constants() {
  const data = require("../../constants");
  _constants = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function shouldShowInteractive(commandConfigName) {
  const specificCommandConfig = globalConfig().getSync(commandConfigName);
  // the value in the config is string so we need to compare it to string
  // we use specificCommandConfig === 'true' to make it false in case of wrong value
  if (specificCommandConfig !== undefined) return specificCommandConfig === 'true';
  const generalInteractiveConfig = globalConfig().getSync(_constants().CFG_INTERACTIVE);
  if (generalInteractiveConfig !== undefined) return generalInteractiveConfig === 'true';
  // Default is to not show interactive
  return false;
}