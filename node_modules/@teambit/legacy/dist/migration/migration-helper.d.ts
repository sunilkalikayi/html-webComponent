export declare type MigrationResult = {
    run: boolean;
    success?: boolean | null | undefined;
};
export declare type MigrationDeclaration = {
    name: string;
    migrate: Function;
};
declare type AbstractVersionMigrations = {
    [version: string]: MigrationDeclaration[];
};
/**
 * A function which get a migration manifest and versions, and return a sorted array of the migrations to run
 * We are taking also the current version to prevent cases which a developer specify a migration to run for a
 * future release, and we don't want it to run now
 *
 * @export
 * @param {string} currentVersion - The current version of bit
 * @param {string} storeVersion  - The version of the store to check (for example scope version or .bit.map.json version)
 * @param {Object} migratonManifest  - A manifest which contain all the existing migrations
 * @param {boolean} [verbose=false] - Print logs
 * @returns {Object[]} - Sorted array of migrations to run
 */
export default function getMigrationVersions(currentVersion: string, storeVersion: string, migratonManifest: Record<string, any>, verbose?: boolean): AbstractVersionMigrations[];
export {};
