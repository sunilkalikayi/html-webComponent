"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));
  _fsExtra = function () {
    return data;
  };
  return data;
}
function path() {
  const data = _interopRequireWildcard(require("path"));
  path = function () {
    return data;
  };
  return data;
}
function _constants() {
  const data = require("../constants");
  _constants = function () {
    return data;
  };
  return data;
}
function _sources() {
  const data = require("../consumer/component/sources");
  _sources = function () {
    return data;
  };
  return data;
}
function _validationError() {
  const data = _interopRequireDefault(require("../error/validation-error"));
  _validationError = function () {
    return data;
  };
  return data;
}
function _logger() {
  const data = _interopRequireDefault(require("../logger/logger"));
  _logger = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
class LinkFile extends _sources().AbstractVinyl {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2().default)(this, "override", false);
    (0, _defineProperty2().default)(this, "ignorePreviousSymlink", false);
    (0, _defineProperty2().default)(this, "writeAutoGeneratedMessage", true);
    (0, _defineProperty2().default)(this, "srcPath", void 0);
    (0, _defineProperty2().default)(this, "componentId", void 0);
  }
  // needed for logging purposes

  async write() {
    const stat = await this._getStatIfFileExists();
    if (stat) {
      if (!this.ignorePreviousSymlink && stat.isSymbolicLink()) {
        // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
        throw new (_validationError().default)(`fatal: trying to write a link file into a symlink file at "${this.path}"`);
      }
      if (!this.override) {
        // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
        const fileContent = _fsExtra().default.readFileSync(this.path).toString();
        // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
        if (!fileContent.includes(_constants().AUTO_GENERATED_STAMP)) return this.path;
      }
    }

    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    const data = this.writeAutoGeneratedMessage ? _constants().AUTO_GENERATED_MSG + this.contents : this.contents;
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    _logger().default.debug(`link-file.write, path ${this.path}`);
    try {
      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
      await _fsExtra().default.outputFile(this.path, data);
    } catch (err) {
      if (err.code === 'EISDIR') {
        // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
        _logger().default.debug(`deleting a directory ${this.path} in order to write a link file with the same name`);
        // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
        await _fsExtra().default.remove(this.path);
        // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
        await _fsExtra().default.outputFile(this.path, data);
      } else {
        throw err;
      }
    }

    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    return this.path;
  }
  static load({
    filePath,
    base,
    content,
    override = false,
    ignorePreviousSymlink = false,
    writeAutoGeneratedMessage = true,
    srcPath,
    componentId
  }) {
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    const linkFile = new LinkFile({
      base: base || path().dirname(filePath),
      path: filePath,
      contents: Buffer.from(content)
    });
    linkFile.override = override;
    linkFile.writeAutoGeneratedMessage = writeAutoGeneratedMessage;
    linkFile.srcPath = srcPath;
    linkFile.componentId = componentId;
    linkFile.ignorePreviousSymlink = ignorePreviousSymlink;
    return linkFile;
  }
}
exports.default = LinkFile;