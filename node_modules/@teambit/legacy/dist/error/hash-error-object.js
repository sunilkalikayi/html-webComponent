"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = hashErrorIfNeeded;
function _objectHash() {
  const data = _interopRequireDefault(require("object-hash"));
  _objectHash = function () {
    return data;
  };
  return data;
}
function _yn() {
  const data = _interopRequireDefault(require("yn"));
  _yn = function () {
    return data;
  };
  return data;
}
function _globalConfig() {
  const data = require("../api/consumer/lib/global-config");
  _globalConfig = function () {
    return data;
  };
  return data;
}
function _constants() {
  const data = require("../constants");
  _constants = function () {
    return data;
  };
  return data;
}
function _logger() {
  const data = _interopRequireDefault(require("../logger/logger"));
  _logger = function () {
    return data;
  };
  return data;
}
function _cloneErrorObject() {
  const data = _interopRequireWildcard(require("./clone-error-object"));
  _cloneErrorObject = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function hashErrorIfNeeded(error) {
  let clonedError = error;
  try {
    clonedError = (0, _cloneErrorObject().default)(error);
  } catch (e) {
    _logger().default.warn('could not clone error', error);
  }
  const shouldHash = (0, _yn().default)((0, _globalConfig().getSync)(_constants().CFG_ANALYTICS_ANONYMOUS_KEY), {
    default: true
  });
  if (!shouldHash) return clonedError;
  const fields = Object.getOwnPropertyNames(clonedError);
  const fieldToHash = fields.filter(field => !_cloneErrorObject().systemFields.includes(field) && field !== 'message');
  if (!fieldToHash.length) return clonedError;
  fieldToHash.forEach(field => {
    try {
      clonedError[field] = hashValue(clonedError[field]);
    } catch (e) {
      _logger().default.debug(`could not hash field ${field}`);
    }
  });
  return clonedError;
}
function hashValue(value) {
  if (!value) return value;
  const type = typeof value;
  switch (type) {
    case 'undefined':
    case 'number':
    case 'boolean':
      return value;
    case 'object':
      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
      if (Array.isArray(value)) return value.map(v => (0, _objectHash().default)(v));
      // ignoreUnknown helps to not throw error for some errors with custom props.
      return (0, _objectHash().default)(value, {
        ignoreUnknown: true
      });
    default:
      return (0, _objectHash().default)(value);
  }
}