"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _graphqlRequest() {
  const data = require("graphql-request");
  _graphqlRequest = function () {
    return data;
  };
  return data;
}
function _legacyBitId() {
  const data = require("@teambit/legacy-bit-id");
  _legacyBitId = function () {
    return data;
  };
  return data;
}
function _globalConfig() {
  const data = require("../../api/consumer/lib/global-config");
  _globalConfig = function () {
    return data;
  };
  return data;
}
function _constants() {
  const data = require("../../constants");
  _constants = function () {
    return data;
  };
  return data;
}
function _http() {
  const data = require("../../scope/network/http/http");
  _http = function () {
    return data;
  };
  return data;
}
function _logger() {
  const data = _interopRequireDefault(require("../../logger/logger"));
  _logger = function () {
    return data;
  };
  return data;
}
function _scopeNotFoundOrDenied() {
  const data = require("../exceptions/scope-not-found-or-denied");
  _scopeNotFoundOrDenied = function () {
    return data;
  };
  return data;
}
const hubDomain = (0, _globalConfig().getSync)(_constants().CFG_HUB_DOMAIN_KEY) || _constants().DEFAULT_HUB_DOMAIN;
const symphonyUrl = (0, _globalConfig().getSync)(_constants().CFG_SYMPHONY_URL_KEY) || _constants().SYMPHONY_URL;
const scopeCache = {};
const SCOPE_GET = (0, _graphqlRequest().gql)`
  query GET_SCOPE($id: String!) {
    getScope(id: $id) {
      isLegacy
      apis {
        url
      }
    }
  }
`;

// comment this out once on production
async function getScope(name) {
  if (scopeCache[name]) return scopeCache[name];
  const token = (0, _globalConfig().getSync)(_constants().CFG_USER_TOKEN_KEY);
  const headers = token ? (0, _http().getAuthHeader)(token) : {};
  const graphQlUrl = `https://${symphonyUrl}/graphql`;
  const graphQlFetcher = await (0, _http().getFetcherWithAgent)(graphQlUrl);
  const client = new (_graphqlRequest().GraphQLClient)(graphQlUrl, {
    headers,
    fetch: graphQlFetcher
  });
  try {
    const res = await client.request(SCOPE_GET, {
      id: name
    });
    scopeCache[name] = res;
    return res;
  } catch (err) {
    var _err$response, _err$response$errors, _err$response2, _err$response2$errors;
    _logger().default.error('getScope has failed', err);
    const msg = (err === null || err === void 0 ? void 0 : (_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$errors = _err$response.errors) === null || _err$response$errors === void 0 ? void 0 : _err$response$errors[0].message) || "unknown error. please use the '--log' flag for the full error.";
    const errorCode = err === null || err === void 0 ? void 0 : (_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$errors = _err$response2.errors) === null || _err$response2$errors === void 0 ? void 0 : _err$response2$errors[0].ERR_CODE;
    if (msg === 'access denied') {
      throw new (_scopeNotFoundOrDenied().ScopeNotFoundOrDenied)(name);
    }
    if (errorCode === 'InvalidScopeID') {
      if ((0, _legacyBitId().isValidScopeName)(name)) {
        throw new (_legacyBitId().InvalidScopeNameFromRemote)(name);
      }
      throw new (_legacyBitId().InvalidScopeName)(name);
    }
    throw new Error(`${name}: ${msg}`);
  }
}
const hubResolver = async scopeName => {
  // check if has harmony
  const scope = await getScope(scopeName);
  const harmonyScope = scope && scope.getScope && scope.getScope.isLegacy === false;
  if (harmonyScope) {
    return scope.getScope.apis.url;
  }
  const hubPrefix = `ssh://bit@${hubDomain}:`;
  return hubPrefix + scopeName;
};
const remoteResolver = (scopeName, thisScope) => {
  const token = (0, _globalConfig().getSync)(_constants().CFG_USER_TOKEN_KEY);
  const resolverPath = thisScope === null || thisScope === void 0 ? void 0 : thisScope.scopeJson.resolverPath;
  let resolverFunction;
  if (!resolverPath) {
    // use the default resolver
    resolverFunction = hubResolver;
  } else {
    // use the resolver described in the scopeJson
    // eslint-disable-next-line import/no-dynamic-require, global-require
    resolverFunction = require(resolverPath);
  }
  return resolverFunction(scopeName, thisScope ? thisScope.name : undefined, token); // should return promise<string>
};
var _default = remoteResolver;
exports.default = _default;