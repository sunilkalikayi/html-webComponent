import { FETCH_OPTIONS } from '../api/scope/lib/fetch';
import { PushOptions } from '../api/scope/lib/put';
import { BitId } from '../bit-id';
import { ListScopeResult } from '../consumer/component/components-list';
import Component from '../consumer/component/consumer-component';
import type { Scope } from '../scope';
import ComponentObjects from '../scope/component-objects';
import DependencyGraph from '../scope/graph/scope-graph';
import { LaneData } from '../scope/lanes/lanes';
import { ComponentLog } from '../scope/models/model-component';
import { Network } from '../scope/network/network';
import { SSHConnectionStrategyName } from '../scope/network/ssh/ssh';
import { ObjectItemsStream, ObjectList } from '../scope/objects/object-list';
export default class Remote {
    private localScopeName?;
    primary: boolean;
    host: string;
    name: string;
    constructor(host: string, name?: string, primary?: boolean, localScopeName?: string | undefined);
    connect(strategiesNames?: SSHConnectionStrategyName[]): Promise<Network>;
    toPlainObject(): {
        host: string;
        name: string;
    };
    scope(): Promise<{
        name: string;
    }>;
    list(namespacesUsingWildcards?: string, strategiesNames?: SSHConnectionStrategyName[]): Promise<ListScopeResult[]>;
    show(bitId: BitId, strategiesNames?: SSHConnectionStrategyName[]): Promise<Component | null | undefined>;
    graph(bitId?: BitId, strategiesNames?: SSHConnectionStrategyName[]): Promise<DependencyGraph>;
    fetch(ids: string[], fetchOptions: FETCH_OPTIONS, context?: Record<string, any>, strategiesNames?: SSHConnectionStrategyName[]): Promise<ObjectItemsStream>;
    latestVersions(bitIds: BitId[], strategiesNames?: SSHConnectionStrategyName[]): Promise<string[]>;
    validate(): void;
    push(componentObjects: ComponentObjects): Promise<ComponentObjects>;
    pushMany(objectList: ObjectList, pushOptions: PushOptions, context?: Record<string, any>): Promise<string[]>;
    deleteMany(ids: string[], force: boolean, context: Record<string, any> | null | undefined, idsAreLanes?: boolean): Promise<Record<string, any>>;
    log(id: BitId): Promise<ComponentLog[]>;
    listLanes(name?: string, mergeData?: boolean): Promise<LaneData[]>;
    action<Options, Result>(name: string, options?: Options): Promise<Result>;
    static load(name: string, host: string, thisScope?: Scope): Remote;
}
