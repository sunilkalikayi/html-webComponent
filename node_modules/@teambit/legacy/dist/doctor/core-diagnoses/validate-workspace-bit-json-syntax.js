"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _path2() {
  const data = _interopRequireDefault(require("ramda/src/path"));
  _path2 = function () {
    return data;
  };
  return data;
}
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _consumer() {
  const data = require("../../consumer");
  _consumer = function () {
    return data;
  };
  return data;
}
function _workspaceConfig() {
  const data = _interopRequireDefault(require("../../consumer/config/workspace-config"));
  _workspaceConfig = function () {
    return data;
  };
  return data;
}
function _diagnosis() {
  const data = _interopRequireDefault(require("../diagnosis"));
  _diagnosis = function () {
    return data;
  };
  return data;
}
class ValidateWorkspaceBitJsonSyntax extends _diagnosis().default {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2().default)(this, "name", "validate workspace's bit config");
    (0, _defineProperty2().default)(this, "description", 'validate workspace configuration object');
    (0, _defineProperty2().default)(this, "category", 'configuration');
  }
  _formatSymptoms(bareResult) {
    const bitJsonPath = (0, _path2().default)(['data', 'bitJsonPath'], bareResult);
    return `invalid bit.json: ${bitJsonPath} is not a valid JSON file.`;
  }
  _formatManualTreat() {
    return 'manually fix the bit.json or consider running bit init --reset to recreate the file';
  }

  // TODO: support configuration from package.json
  async _runExamine() {
    const consumer = await (0, _consumer().loadConsumer)();
    const consumerPath = consumer.getPath();
    try {
      await _workspaceConfig().default.loadIfExist(consumerPath);
      return {
        valid: true
      };
    } catch (e) {
      return {
        valid: false,
        data: {}
      };
    }
  }
}
exports.default = ValidateWorkspaceBitJsonSyntax;