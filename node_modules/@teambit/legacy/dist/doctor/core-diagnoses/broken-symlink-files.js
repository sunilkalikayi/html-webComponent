"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
require("core-js/modules/es.regexp.exec.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DIAGNOSIS_NAME = void 0;
function _uniq2() {
  const data = _interopRequireDefault(require("ramda/src/uniq"));
  _uniq2 = function () {
    return data;
  };
  return data;
}
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));
  _fsExtra = function () {
    return data;
  };
  return data;
}
function _glob() {
  const data = _interopRequireDefault(require("glob"));
  _glob = function () {
    return data;
  };
  return data;
}
function path() {
  const data = _interopRequireWildcard(require("path"));
  path = function () {
    return data;
  };
  return data;
}
function _consumer() {
  const data = require("../../consumer");
  _consumer = function () {
    return data;
  };
  return data;
}
function _scope() {
  const data = require("../../scope");
  _scope = function () {
    return data;
  };
  return data;
}
function _diagnosis() {
  const data = _interopRequireDefault(require("../diagnosis"));
  _diagnosis = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const DIAGNOSIS_NAME = 'check environment symlinks';
exports.DIAGNOSIS_NAME = DIAGNOSIS_NAME;
class BrokenSymlinkFiles extends _diagnosis().default {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2().default)(this, "name", DIAGNOSIS_NAME);
    (0, _defineProperty2().default)(this, "description", 'validate generated symlinks for workspace environments');
    (0, _defineProperty2().default)(this, "category", 'local environments');
  }
  _formatSymptoms(bareResult) {
    if (!bareResult.data) throw new Error('BrokenSymlinkFiles, bareResult.data is missing');
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    const toString = bareResult.data.brokenSymlinks.map(brokenSymlink => `symlink path: "${brokenSymlink.symlinkPath}", broken link: "${brokenSymlink.brokenPath}"`).join('\n');
    return `the following symlinks points to non-existing paths\n${toString}`;
  }
  _formatManualTreat(bareResult) {
    if (!bareResult.data) throw new Error('BrokenSymlinkFiles, bareResult.data is missing');
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    const toString = (0, _uniq2().default)(bareResult.data.brokenSymlinks.map(b => b.pathToDelete)).join('\n');
    return `please delete the following paths:\n${toString}`;
  }
  async _runExamine() {
    const consumer = await (0, _consumer().loadConsumer)();
    const envComponentsDir = path().join(consumer.scope.getPath(), _scope().Scope.getComponentsRelativePath());
    const potentialSymlinks = _glob().default.sync('**/node_modules/@bit/**', {
      cwd: envComponentsDir
    });
    const potentialSymlinksAbs = potentialSymlinks.map(p => path().join(envComponentsDir, p));
    const brokenSymlinks = [];
    const results = potentialSymlinksAbs.map(async potentialSymlink => {
      const link = await this._getLinkIfExist(potentialSymlink);
      if (!link) return;
      const exists = await _fsExtra().default.pathExists(link);
      if (exists) return;
      const brokenSymlink = {
        symlinkPath: potentialSymlink,
        brokenPath: link,
        pathToDelete: this._getPathToDelete(potentialSymlink)
      };
      brokenSymlinks.push(brokenSymlink);
    });
    await Promise.all(results);
    return {
      valid: brokenSymlinks.length === 0,
      data: {
        brokenSymlinks
      }
    };
  }
  async _getLinkIfExist(symlinkPath) {
    try {
      const link = await _fsExtra().default.readlink(symlinkPath);
      return link;
    } catch (err) {
      // probably not a symlink
      return null;
    }
  }

  /**
   * deleting the environment directory causes Bit to reinstall it next time
   */
  _getPathToDelete(symlinkPath) {
    const envDirectory = symlinkPath.split(path().join('node_modules', '@bit'))[0];
    return envDirectory.slice(0, -1); // remove the last slash
  }
}
exports.default = BrokenSymlinkFiles;