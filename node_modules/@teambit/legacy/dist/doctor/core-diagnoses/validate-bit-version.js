"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _semver() {
  const data = _interopRequireDefault(require("semver"));
  _semver = function () {
    return data;
  };
  return data;
}
function _bvm() {
  const data = require("@teambit/bvm.list");
  _bvm = function () {
    return data;
  };
  return data;
}
function _bootstrap() {
  const data = require("../../bootstrap");
  _bootstrap = function () {
    return data;
  };
  return data;
}
function _diagnosis() {
  const data = _interopRequireDefault(require("../diagnosis"));
  _diagnosis = function () {
    return data;
  };
  return data;
}
class ValidateBitVersion extends _diagnosis().default {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2().default)(this, "name", 'validate bit version');
    (0, _defineProperty2().default)(this, "description", 'validate that bit version is up to date');
    (0, _defineProperty2().default)(this, "category", 'core');
  }
  _formatSymptoms(bareResult) {
    if (!bareResult.data) throw new Error('ValidateBitVersion, bareResult.data is missing');
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    if (!bareResult.data.latestVersion) {
      return 'could not fetch bit latest version';
    }
    return `bit is not up to date.
  your version: ${bareResult.data.currentVersion}
  latest version: ${bareResult.data.latestVersion}`;
  }
  _formatManualTreat(bareResult) {
    if (!bareResult.data) throw new Error('ValidateBitVersion, bareResult.data is missing');
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    if (!bareResult.data.latestVersion) {
      return 'please make sure you have an internet connection';
    }
    return 'please upgrade your bit version (bvm upgrade)';
  }
  async _runExamine() {
    const bitRemoteVersionOnBvm = await (0, _bvm().listRemote)({
      limit: 1
    });
    const bitLatestVersion = bitRemoteVersionOnBvm.entries[0].version;
    const bitCurrentVersion = (0, _bootstrap().getHarmonyVersion)(true);
    if (bitLatestVersion) {
      if (_semver().default.lt(bitCurrentVersion, bitLatestVersion)) {
        return {
          valid: false,
          data: {
            latestVersion: bitLatestVersion,
            currentVersion: bitCurrentVersion
          }
        };
      }
      return {
        valid: true
      };
    }
    return {
      valid: false,
      data: {
        latestVersion: null
      }
    };
  }
}
exports.default = ValidateBitVersion;