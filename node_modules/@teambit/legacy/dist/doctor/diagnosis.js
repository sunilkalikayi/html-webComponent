"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.symbol.description.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
class Diagnosis {
  constructor() {
    (0, _defineProperty2().default)(this, "name", void 0);
    (0, _defineProperty2().default)(this, "description", void 0);
    (0, _defineProperty2().default)(this, "category", void 0);
    (0, _defineProperty2().default)(this, "result", void 0);
  }
  /**
   * A function that actually runs the examination
   */
  async _runExamine() {
    throw new Error('You must implement this method');
  }

  /**
   * Returns a descriptive symptoms message which might include specific data from the examination
   * @param bareResult ExamineBareResult
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  _formatSymptoms(bareResult) {
    throw new Error('You must implement this method');
  }

  /**
   * Returns a descriptive instruction to handle the issue (might include specific data from the examination)
   * @param bareResult ExamineBareResult
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  _formatManualTreat(bareResult) {
    throw new Error('You must implement this method');
  }
  getMeta() {
    return {
      category: this.category,
      name: this.name,
      description: this.description
    };
  }
  async examine() {
    const bareResult = await this._runExamine();
    if (bareResult.valid) {
      return {
        diagnosisMetaData: this.getMeta(),
        bareResult,
        formattedSymptoms: '',
        formattedManualTreat: ''
      };
    }
    const formattedSymptoms = this._formatSymptoms(bareResult);
    const formattedManualTreat = this._formatManualTreat(bareResult);
    return {
      diagnosisMetaData: this.getMeta(),
      bareResult,
      formattedSymptoms,
      formattedManualTreat
    };
  }
}
exports.default = Diagnosis;