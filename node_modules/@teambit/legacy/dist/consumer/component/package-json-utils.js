"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addComponentsWithVersionToRoot = addComponentsWithVersionToRoot;
exports.removeComponentsFromNodeModules = removeComponentsFromNodeModules;
exports.removeComponentsFromWorkspacesAndDependencies = removeComponentsFromWorkspacesAndDependencies;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _fromPairs2() {
  const data = _interopRequireDefault(require("ramda/src/fromPairs"));
  _fromPairs2 = function () {
    return data;
  };
  return data;
}
function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));
  _fsExtra = function () {
    return data;
  };
  return data;
}
function _lodash() {
  const data = require("lodash");
  _lodash = function () {
    return data;
  };
  return data;
}
function _logger() {
  const data = _interopRequireDefault(require("../../logger/logger"));
  _logger = function () {
    return data;
  };
  return data;
}
function _componentIdToPackageName() {
  const data = _interopRequireDefault(require("../../utils/bit/component-id-to-package-name"));
  _componentIdToPackageName = function () {
    return data;
  };
  return data;
}
function _componentNodeModulesPath() {
  const data = _interopRequireDefault(require("../../utils/bit/component-node-modules-path"));
  _componentNodeModulesPath = function () {
    return data;
  };
  return data;
}
function _packageJson() {
  const data = _interopRequireDefault(require("./package-json"));
  _packageJson = function () {
    return data;
  };
  return data;
}
function _packageJsonFile() {
  const data = _interopRequireDefault(require("./package-json-file"));
  _packageJsonFile = function () {
    return data;
  };
  return data;
}
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
async function addComponentsWithVersionToRoot(consumer, components) {
  const componentsToAdd = (0, _fromPairs2().default)(components.map(component => {
    const packageName = (0, _componentIdToPackageName().default)(component);
    return [packageName, component.version];
  }));
  await _addDependenciesPackagesIntoPackageJson(consumer.getPath(), componentsToAdd);
}
async function removeComponentsFromWorkspacesAndDependencies(consumer, components, invalidComponents = []) {
  const bitIds = [...components.map(c => c.id), ...invalidComponents];
  const rootDir = consumer.getPath();
  if (consumer.config._manageWorkspaces && consumer.config.packageManager === 'yarn' && consumer.config._useWorkspaces) {
    const dirsToRemove = bitIds.map(id => consumer.bitMap.getComponent(id, {
      ignoreVersion: true
    }).rootDir);
    if (dirsToRemove && dirsToRemove.length) {
      const dirsToRemoveWithoutEmpty = (0, _lodash().compact)(dirsToRemove);
      await _packageJson().default.removeComponentsFromWorkspaces(rootDir, dirsToRemoveWithoutEmpty);
    }
  }
  await _packageJson().default.removeComponentsFromDependencies(rootDir, components);
  await removeComponentsFromNodeModules(consumer, components);
}
async function _addDependenciesPackagesIntoPackageJson(dir, dependencies) {
  const packageJsonFile = await _packageJsonFile().default.load(dir);
  packageJsonFile.addDependencies(dependencies);
  await packageJsonFile.write();
}
async function removeComponentsFromNodeModules(consumer, components) {
  _logger().default.debug(`removeComponentsFromNodeModules: ${components.map(c => c.id.toString()).join(', ')}`);
  const pathsToRemoveWithNulls = components.map(c => {
    return (0, _componentNodeModulesPath().default)(_objectSpread(_objectSpread({}, c), {}, {
      id: c.id,
      allowNonScope: true
    }));
  });
  const pathsToRemove = (0, _lodash().compact)(pathsToRemoveWithNulls);
  _logger().default.debug(`deleting the following paths: ${pathsToRemove.join('\n')}`);
  return Promise.all(pathsToRemove.map(componentPath => _fsExtra().default.remove(consumer.toAbsolutePath(componentPath))));
}