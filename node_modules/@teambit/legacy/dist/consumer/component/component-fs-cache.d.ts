import cacache from 'cacache';
import { PathOsBasedAbsolute } from '../../utils/path';
import type { ComponentMapFile } from '../bit-map/component-map';
export declare class ComponentFsCache {
    private scopePath;
    readonly basePath: PathOsBasedAbsolute;
    private isNoFsCacheFeatureEnabled;
    constructor(scopePath: string);
    getLastTrackTimestamp(idStr: string): Promise<number>;
    setLastTrackTimestamp(idStr: string, timestamp: number): Promise<void>;
    /**
     * @deprecated
     * not in use anymore. it takes time to save and get them from the cache, and it's faster to get them from the filesystem directly.
     */
    getFilePathsFromCache(idStr: string): Promise<{
        timestamp: number;
        data: string;
    } | null>;
    /**
     * @deprecated
     * not in use anymore. it takes time to save and get them from the cache, and it's faster to get them from the filesystem directly.
     */
    saveFilePathsInCache(idStr: string, filePaths: ComponentMapFile[]): Promise<void>;
    getDocsFromCache(filePath: string): Promise<{
        timestamp: number;
        data: string;
    } | null>;
    saveDocsInCache(filePath: string, docs: Record<string, any>): Promise<void>;
    getDependenciesDataFromCache(idStr: string): Promise<{
        timestamp: number;
        data: string;
    } | null>;
    saveDependenciesDataInCache(idStr: string, dependenciesData: string): Promise<void>;
    deleteAllDependenciesDataCache(): Promise<void>;
    listDependenciesDataCache(): Promise<cacache.ls.Cache>;
    private saveStringDataInCache;
    private saveDataInCache;
    private getStringDataFromCache;
    private getFromCacheIfExist;
    private getCachePath;
}
