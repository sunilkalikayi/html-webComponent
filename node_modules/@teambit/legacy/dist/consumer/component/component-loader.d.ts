import { ComponentIssue } from '@teambit/component-issues';
import { BitId, BitIds } from '../../bit-id';
import Component, { InvalidComponent } from '../component/consumer-component';
import Consumer from '../consumer';
import { ComponentFsCache } from './component-fs-cache';
export declare type ComponentLoadOptions = {
    loadDocs?: boolean;
    loadCompositions?: boolean;
};
export declare type LoadManyResult = {
    components: Component[];
    invalidComponents: InvalidComponent[];
    removedComponents: Component[];
};
declare type OnComponentLoadSubscriber = (component: Component, loadOpts?: ComponentLoadOptions) => Promise<Component>;
declare type OnComponentIssuesCalcSubscriber = (component: Component) => Promise<ComponentIssue[]>;
export default class ComponentLoader {
    private componentsCache;
    _shouldCheckForClearingDependenciesCache: boolean;
    consumer: Consumer;
    cacheResolvedDependencies: Record<string, any>;
    cacheProjectAst: Record<string, any> | undefined;
    componentFsCache: ComponentFsCache;
    constructor(consumer: Consumer);
    static onComponentLoadSubscribers: OnComponentLoadSubscriber[];
    static registerOnComponentLoadSubscriber(func: OnComponentLoadSubscriber): void;
    static onComponentIssuesCalcSubscribers: OnComponentIssuesCalcSubscriber[];
    static registerOnComponentIssuesCalcSubscriber(func: OnComponentIssuesCalcSubscriber): void;
    clearComponentsCache(): void;
    clearOneComponentCache(id: BitId): void;
    invalidateDependenciesCacheIfNeeded(): Promise<void>;
    loadMany(ids: BitIds, throwOnFailure?: boolean, loadOpts?: ComponentLoadOptions): Promise<LoadManyResult>;
    private loadOne;
    private runOnComponentIssuesCalcEvent;
    private _handleOutOfSyncScenarios;
    private _handleOutOfSyncWithDefaultScope;
    private _throwPendingImportIfNeeded;
    private _getRemoteComponent;
    static getInstance(consumer: Consumer): ComponentLoader;
}
export {};
