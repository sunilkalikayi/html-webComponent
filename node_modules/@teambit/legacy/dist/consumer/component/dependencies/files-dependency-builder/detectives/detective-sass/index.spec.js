"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
function _assert() {
  const data = _interopRequireDefault(require("assert"));
  _assert = function () {
    return data;
  };
  return data;
}
function _() {
  const data = _interopRequireDefault(require("./"));
  _ = function () {
    return data;
  };
  return data;
}
describe('detective-sass', function () {
  function test(src, deps, opts) {
    // @ts-ignore
    _assert().default.deepEqual((0, _().default)(src, opts), deps);
  }
  describe('throws', function () {
    it('does not throw for empty files', function () {
      _assert().default.doesNotThrow(function () {
        (0, _().default)('');
      });
    });
    it('throws if the given content is not a string', function () {
      _assert().default.throws(function () {
        (0, _().default)(function () {});
      });
    });
    it('throws if called with no arguments', function () {
      _assert().default.throws(function () {
        // @ts-ignore
        (0, _().default)();
      });
    });
    it.skip('throws on broken syntax', function () {
      _assert().default.throws(function () {
        (0, _().default)('@');
      });
    });
  });
  it('dangles the parsed AST', function () {
    (0, _().default)('@import _foo');
    // @ts-ignore
    _assert().default.ok(_().default.ast);
  });
  describe('sass', function () {
    it('returns the dependencies of the given .sass file content', function () {
      test('@import _foo', ['_foo']);
      test('@import        _foo', ['_foo']);
      test('@import reset', ['reset']);
    });
  });
  describe('use keyword', function () {
    it('returns the dependencies of the given .sass file content', function () {
      test('@use _foo', ['_foo']);
      test('@use        _foo', ['_foo']);
      test('@use reset', ['reset']);
    });
  });
  describe('use as syntax', function () {
    it('returns the dependencies of the given .sass file content', function () {
      test('@use "foo" as f', ['foo']);
      test('@use "_foo" as *', ['_foo']);
    });
  });
  describe('forward keyword', function () {
    it('returns the dependencies of the given .sass file content', function () {
      test('@forward _foo', ['_foo']);
      test('@forward        _foo', ['_foo']);
      test('@forward reset', ['reset']);
    });
  });
  describe('use syntax with colon', function () {
    it('should return only the package name (the part before the colon)', function () {
      test('@use "pkg:math"', ['pkg']);
    });
    it('should return an empty array when it is a built-in module', function () {
      test('@use "sass:math"', []);
    });
  });
});