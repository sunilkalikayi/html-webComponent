"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DependenciesData = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _objectWithoutProperties2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
  _objectWithoutProperties2 = function () {
    return data;
  };
  return data;
}
function _componentIssues() {
  const data = require("@teambit/component-issues");
  _componentIssues = function () {
    return data;
  };
  return data;
}
function _bitId() {
  const data = require("../../../../bit-id");
  _bitId = function () {
    return data;
  };
  return data;
}
function _dependency() {
  const data = _interopRequireDefault(require("../dependency"));
  _dependency = function () {
    return data;
  };
  return data;
}
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
class DependenciesData {
  constructor(allDependencies, allPackagesDependencies, issues, coreAspects, overridesDependencies) {
    this.allDependencies = allDependencies;
    this.allPackagesDependencies = allPackagesDependencies;
    this.issues = issues;
    this.coreAspects = coreAspects;
    this.overridesDependencies = overridesDependencies;
  }
  serialize() {
    const _this = this,
      {
        issues
      } = _this,
      nonIssues = (0, _objectWithoutProperties2().default)(_this, ["issues"]);
    return JSON.stringify(_objectSpread(_objectSpread({}, nonIssues), {}, {
      issues: issues.serialize()
    }));
  }
  static deserialize(data) {
    const dataParsed = JSON.parse(data);
    const dependencies = dataParsed.allDependencies.dependencies.map(dep => new (_dependency().default)(new (_bitId().BitId)(dep.id), dep.relativePaths, dep.packageName));
    const devDependencies = dataParsed.allDependencies.devDependencies.map(dep => new (_dependency().default)(new (_bitId().BitId)(dep.id), dep.relativePaths, dep.packageName));
    const issuesList = _componentIssues().IssuesList.deserialize(dataParsed.issues);
    const allDependencies = {
      dependencies,
      devDependencies
    };
    return new DependenciesData(allDependencies, dataParsed.allPackagesDependencies, issuesList, dataParsed.coreAspects, dataParsed.overridesDependencies);
  }
}
exports.DependenciesData = DependenciesData;