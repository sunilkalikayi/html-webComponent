import Symlink from '../../../links/symlink';
import AbstractVinyl from './abstract-vinyl';
import RemovePath from './remove-path';
export default class DataToPersist {
    files: AbstractVinyl[];
    symlinks: Symlink[];
    remove: RemovePath[];
    constructor();
    addFile(file: AbstractVinyl): void;
    addManyFiles(files?: AbstractVinyl[]): void;
    removePath(pathToRemove: RemovePath): void;
    removeManyPaths(pathsToRemove?: RemovePath[]): void;
    addSymlink(symlink: Symlink): void;
    addManySymlinks(symlinks?: Symlink[]): void;
    merge(dataToPersist: DataToPersist | null | undefined): void;
    persistAllToFS(): Promise<void>;
    persistAllToCapsule(capsule: any, opts?: {
        keepExistingCapsule: boolean;
    }): Promise<void>;
    _writeFileToCapsule(capsule: any, file: AbstractVinyl, opts?: {
        overwriteExistingFile: boolean;
    }): Promise<any>;
    atomicSymlink(capsule: any, symlink: Symlink): Promise<void>;
    addBasePath(basePath: string): void;
    /**
     * helps for debugging
     */
    toConsole(): void;
    filterByPath(filterFunc: Function): DataToPersist;
    _persistFilesToFS(): Promise<(string | null | undefined)[]>;
    _persistSymlinksToFS(): Promise<void[]>;
    _deletePathsFromFS(): Promise<(boolean | void)[]>;
    _validateAbsolute(): void;
    _validateRelative(): void;
    _log(): void;
    _assertRelative(pathToCheck: string): void;
    /**
     * prevent adding a file which later on will cause an error "EEXIST: file already exists, mkdir {dirname}".
     * this happens one a file is a directory name of the other file.
     * e.g. adding these two files, will cause the error above: "bar/foo" and "bar"
     *
     * to check for this possibility, we need to consider two scenarios:
     * 1) "bar/foo" is there and now adding "bar" => check whether one of the files starts with "bar/"
     * 2) "bar" is there and now adding "bar/foo" => check whether this file "bar/foo" starts with one of the files with '/'
     * practically, it runs `("bar/foo".startsWith("bar/"))` for both cases above.
     */
    _throwForDirectoryCollision(file: AbstractVinyl): void;
}
