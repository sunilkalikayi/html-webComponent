/// <reference types="node" />
import fs from 'fs-extra';
import Vinyl from 'vinyl';
import Source from '../../../scope/models/source';
import { PathOsBased } from '../../../utils/path';
import { FileConstructor } from './vinyl-types';
declare type AbstractVinylProps = {
    cwd: PathOsBased;
    path: PathOsBased;
    base: PathOsBased;
    contents: Buffer;
};
declare const AbstractVinyl_base: FileConstructor;
export default class AbstractVinyl extends AbstractVinyl_base {
    override: boolean;
    verbose: boolean;
    static fromVinyl(vinyl: Vinyl): AbstractVinyl;
    get relativeDir(): string;
    updatePaths({ newBase, newRelative, newCwd }: {
        newBase?: string;
        newRelative?: string;
        newCwd?: string;
    }): void;
    write(writePath?: string, override?: boolean, verbose?: boolean): Promise<string | null | undefined>;
    toReadableString(): {
        relativePath: string;
        content: string;
    };
    static loadFromParsedStringBase(parsedString: any): AbstractVinylProps;
    /**
     * before saving component files in the model, their EOL should be converted to Linux format so
     * then when working on the same components in Windows and Linux they won't appear as modified
     */
    toSourceAsLinuxEOL(): Source;
    _getStatIfFileExists(): Promise<fs.Stats | null | undefined>;
}
/**
 * Generate message for the logs and for output in case of verbose
 * this function is exported for testing purposes
 */
export declare function _verboseMsg(filePath: string, force: boolean): string;
export {};
