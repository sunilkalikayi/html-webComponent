"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
function _chai() {
  const data = require("chai");
  _chai = function () {
    return data;
  };
  return data;
}
function path() {
  const data = _interopRequireWildcard(require("path"));
  path = function () {
    return data;
  };
  return data;
}
function _dataToPersist() {
  const data = _interopRequireDefault(require("./data-to-persist"));
  _dataToPersist = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
describe('DataToPersist', function () {
  // @ts-ignore
  this.timeout(0);
  describe('addFile', () => {
    describe('dir/file collision', () => {
      it('should not throw when the existing file starts with the added file in the same dir', () => {
        const dataToPersist = new (_dataToPersist().default)();
        // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
        dataToPersist.addFile({
          path: 'foo/bar.js'
        });
        // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
        const addFile = () => dataToPersist.addFile({
          path: path().normalize('foo/bar.json')
        });
        (0, _chai().expect)(addFile).to.not.throw();
      });
      it('should not throw when the added file starts with the existing file in the same dir', () => {
        const dataToPersist = new (_dataToPersist().default)();
        // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
        dataToPersist.addFile({
          path: path().normalize('foo/bar.json')
        });
        // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
        const addFile = () => dataToPersist.addFile({
          path: path().normalize('foo/bar.js')
        });
        (0, _chai().expect)(addFile).to.not.throw();
      });
      it('should throw when the added file is a directory of the existing file', () => {
        const dataToPersist = new (_dataToPersist().default)();
        // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
        dataToPersist.addFile({
          path: path().normalize('foo/bar.js')
        });
        // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
        const addFile = () => dataToPersist.addFile({
          path: 'foo'
        });
        (0, _chai().expect)(addFile).to.throw();
      });
      it('should throw when the existing file is a directory of the added file', () => {
        const dataToPersist = new (_dataToPersist().default)();
        // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
        dataToPersist.addFile({
          path: 'foo'
        });
        // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
        const addFile = () => dataToPersist.addFile({
          path: path().normalize('foo/bar.js')
        });
        (0, _chai().expect)(addFile).to.throw();
      });
      it('should throw when one is a directory of other with a few levels', () => {
        let dataToPersist = new (_dataToPersist().default)();
        // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
        dataToPersist.addFile({
          path: path().normalize('foo1/foo2')
        });
        // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
        const addFile1 = () => dataToPersist.addFile({
          path: path().normalize('foo1/foo2/foo3/foo4')
        });
        (0, _chai().expect)(addFile1).to.throw();
        dataToPersist = new (_dataToPersist().default)();
        // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
        dataToPersist.addFile({
          path: path().normalize('foo1/foo2/foo3/foo4')
        });
        // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
        const addFile2 = () => dataToPersist.addFile({
          path: path().normalize('foo1/foo2')
        });
        (0, _chai().expect)(addFile2).to.throw();
      });
      it('should not throw when file are different', () => {
        let dataToPersist = new (_dataToPersist().default)();
        // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
        dataToPersist.addFile({
          path: 'bar'
        });
        // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
        const addFile1 = () => dataToPersist.addFile({
          path: 'foo'
        });
        (0, _chai().expect)(addFile1).to.not.throw();
        dataToPersist = new (_dataToPersist().default)();
        // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
        dataToPersist.addFile({
          path: 'foo'
        });
        // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
        const addFile2 = () => dataToPersist.addFile({
          path: 'bar'
        });
        (0, _chai().expect)(addFile2).to.not.throw();
      });
      it('should not throw when file are different with the same dir', () => {
        let dataToPersist = new (_dataToPersist().default)();
        // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
        dataToPersist.addFile({
          path: path().normalize('bar/foo.js')
        });
        // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
        const addFile1 = () => dataToPersist.addFile({
          path: path().normalize('bar/baz.js')
        });
        (0, _chai().expect)(addFile1).to.not.throw();
        dataToPersist = new (_dataToPersist().default)();
        // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
        dataToPersist.addFile({
          path: path().normalize('bar/baz.js')
        });
        // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
        const addFile2 = () => dataToPersist.addFile({
          path: path().normalize('bar/foo.js')
        });
        (0, _chai().expect)(addFile2).to.not.throw();
      });
    });
  });
});