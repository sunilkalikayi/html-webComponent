"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PackageJsonTransformer = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _pMapSeries() {
  const data = _interopRequireDefault(require("p-map-series"));
  _pMapSeries = function () {
    return data;
  };
  return data;
}
function _componentPlaceholders() {
  const data = require("../../utils/bit/component-placeholders");
  _componentPlaceholders = function () {
    return data;
  };
  return data;
}
function _parseScope() {
  const data = require("../../utils/bit/parse-scope");
  _parseScope = function () {
    return data;
  };
  return data;
}
class PackageJsonTransformer {
  static registerPackageJsonTransformer(func) {
    this.packageJsonTransformersRegistry.push(func);
  }

  /**
   * these are changes made by aspects
   */
  static async applyTransformers(component, packageJson) {
    let newPackageJsonObject = packageJson.packageJsonObject;
    await (0, _pMapSeries().default)(PackageJsonTransformer.packageJsonTransformersRegistry, async transformer => {
      newPackageJsonObject = await transformer(component, newPackageJsonObject);
    });
    const scopeId = component.scope || component.defaultScope;
    const {
      scope,
      owner
    } = (0, _parseScope().parseScope)(scopeId);
    const name = component.id.name;
    const contextForReplace = {
      mainFile: component.mainFile,
      name,
      scope,
      scopeId,
      owner
    };
    Object.keys(newPackageJsonObject).forEach(key => {
      let value = newPackageJsonObject[key];
      if (typeof value === 'string') {
        value = (0, _componentPlaceholders().replacePlaceHolderForPackageValue)(contextForReplace, newPackageJsonObject[key]);
      }
      newPackageJsonObject[key] = value;
    }, {});
    packageJson.mergePackageJsonObject(newPackageJsonObject);
  }
}
exports.PackageJsonTransformer = PackageJsonTransformer;
(0, _defineProperty2().default)(PackageJsonTransformer, "packageJsonTransformersRegistry", []);