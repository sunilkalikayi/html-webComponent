"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SchemaName = exports.SchemaFeature = exports.CURRENT_SCHEMA = void 0;
exports.isSchemaSupport = isSchemaSupport;
exports.throwForNonLegacy = throwForNonLegacy;
let SchemaFeature;
exports.SchemaFeature = SchemaFeature;
(function (SchemaFeature) {
  SchemaFeature["sharedDir"] = "sharedDir";
  SchemaFeature["individualFiles"] = "individualFiles";
  SchemaFeature["relativePaths"] = "relativePaths";
  SchemaFeature["customModuleResolutions"] = "customModuleResolutions";
})(SchemaFeature || (exports.SchemaFeature = SchemaFeature = {}));
let SchemaName;
exports.SchemaName = SchemaName;
(function (SchemaName) {
  SchemaName["Legacy"] = "0.0.0";
  SchemaName["Harmony"] = "1.0.0";
})(SchemaName || (exports.SchemaName = SchemaName = {}));
const CURRENT_SCHEMA = SchemaName.Harmony;
exports.CURRENT_SCHEMA = CURRENT_SCHEMA;
const schemas = {
  [SchemaName.Legacy]: [SchemaFeature.sharedDir, SchemaFeature.individualFiles, SchemaFeature.relativePaths, SchemaFeature.customModuleResolutions],
  [SchemaName.Harmony]: []
};
function isSchemaSupport(feature, schema = SchemaName.Legacy) {
  if (!schemas[schema]) throw new Error(`schemas doesn't include "${schema}"`);
  return schemas[schema].includes(feature);
}
function throwForNonLegacy(isLegacy, functionName) {
  if (!isLegacy) {
    throw new Error(`${functionName} should not be running on a non-legacy component`);
  }
}