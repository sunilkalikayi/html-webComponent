"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = deleteComponentsFiles;
function _logger() {
  const data = _interopRequireDefault(require("../../logger/logger"));
  _logger = function () {
    return data;
  };
  return data;
}
function _dataToPersist() {
  const data = _interopRequireDefault(require("../component/sources/data-to-persist"));
  _dataToPersist = function () {
    return data;
  };
  return data;
}
function _removePath() {
  const data = _interopRequireDefault(require("../component/sources/remove-path"));
  _removePath = function () {
    return data;
  };
  return data;
}
async function deleteComponentsFiles(consumer, bitIds) {
  _logger().default.debug(`deleteComponentsFiles, ids: ${bitIds.toString()}`);
  const filesToDelete = getFilesToDelete();
  filesToDelete.addBasePath(consumer.getPath());
  return filesToDelete.persistAllToFS();
  function getFilesToDelete() {
    const dataToPersist = new (_dataToPersist().default)();
    bitIds.forEach(id => {
      const ignoreVersion = id.isLocal() || !id.hasVersion();
      const componentMap = consumer.bitMap.getComponentIfExist(id, {
        ignoreVersion
      });
      if (!componentMap) {
        _logger().default.warn(`deleteComponentsFiles was unable to delete ${id.toString()} because the id is missing from bitmap`);
        return;
      }
      const rootDir = componentMap.rootDir;
      if (!rootDir) throw new Error(`rootDir is missing from ${id.toString()}`);
      dataToPersist.removePath(new (_removePath().default)(rootDir, true));
    });
    return dataToPersist;
  }
}