import { Consumer } from '..';
import { BitId } from '../../bit-id';
export declare type ComponentStatus = {
    modified: boolean;
    newlyCreated: boolean;
    deleted: boolean;
    staged: boolean;
    notExist: boolean;
    missingFromScope: boolean;
    nested: boolean;
};
export declare type ComponentStatusResult = {
    id: BitId;
    status: ComponentStatus;
};
export declare class ComponentStatusLoader {
    private consumer;
    private _componentsStatusCache;
    constructor(consumer: Consumer);
    getManyComponentsStatuses(ids: BitId[]): Promise<ComponentStatusResult[]>;
    /**
     * Get a component status by ID. Return a ComponentStatus object.
     * Keep in mind that a result can be a partial object of ComponentStatus, e.g. { notExist: true }.
     * Each one of the ComponentStatus properties can be undefined, true or false.
     * As a result, in order to check whether a component is not modified use (status.modified === false).
     * Don't use (!status.modified) because a component may not exist and the status.modified will be undefined.
     *
     * The status may have 'true' for several properties. For example, a component can be staged and modified at the
     * same time.
     *
     * The result is cached per ID and can be called several times with no penalties.
     */
    getComponentStatusById(id: BitId): Promise<ComponentStatus>;
    private getStatus;
}
