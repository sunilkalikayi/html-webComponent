"use strict";

require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _constants() {
  const data = require("../../constants");
  _constants = function () {
    return data;
  };
  return data;
}
function _filesDependencyBuilder() {
  const data = require("../component/dependencies/files-dependency-builder");
  _filesDependencyBuilder = function () {
    return data;
  };
  return data;
}
async function getTopLevelDependencies(consumer, dependencyStatusProps) {
  const paths = dependencyStatusProps.mainFile;
  const consumerPath = consumer.getPath();
  const tree = await (0, _filesDependencyBuilder().getDependencyTree)({
    componentDir: consumerPath,
    workspacePath: consumerPath,
    filePaths: paths,
    bindingPrefix: _constants().DEFAULT_BINDINGS_PREFIX,
    resolveModulesConfig: consumer.config._resolveModules
  });
  const topLevelDependencies = Object.keys(tree.tree).map(topLevelFile => topLevelFile);
  return topLevelDependencies;
}
function getComponentFiles(consumer) {
  const bitmap = consumer.bitMap;
  const componentsMaps = bitmap.getAllComponents();
  let componentFile = [];
  componentsMaps.forEach(function (componentMap) {
    if (componentMap.files && Array.isArray(componentMap.files)) {
      const currentFiles = [];
      componentMap.files.forEach(function (file) {
        // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
        if (file && file.relativePath) currentFiles.push(file.relativePath);
      });
      componentFile = componentFile.concat(currentFiles);
    }
  });
  return componentFile;
}
var getDependencyStatus = async function getDependencyStatus(consumer, dependencyStatusProps) {
  const topLevelDependencies = await getTopLevelDependencies(consumer, dependencyStatusProps);
  const componentFiles = getComponentFiles(consumer);
  const missingDependencyFiles = [];
  topLevelDependencies.forEach(function (dependency) {
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    if (!componentFiles.includes(dependency)) {
      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
      missingDependencyFiles.push(dependency);
    }
  });
  const results = {
    missingFiles: missingDependencyFiles
  };
  return results;
};
exports.default = getDependencyStatus;