"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.array.sort.js");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.string.replace.js");
require("core-js/modules/es.string.trim.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.componentToPrintableForDiff = componentToPrintableForDiff;
exports.diffBetweenComponentsObjects = diffBetweenComponentsObjects;
exports.getDiffBetweenObjects = getDiffBetweenObjects;
exports.prettifyFieldName = prettifyFieldName;
function _union2() {
  const data = _interopRequireDefault(require("ramda/src/union"));
  _union2 = function () {
    return data;
  };
  return data;
}
function _propEq2() {
  const data = _interopRequireDefault(require("ramda/src/propEq"));
  _propEq2 = function () {
    return data;
  };
  return data;
}
function _find2() {
  const data = _interopRequireDefault(require("ramda/src/find"));
  _find2 = function () {
    return data;
  };
  return data;
}
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _isNil2() {
  const data = _interopRequireDefault(require("ramda/src/isNil"));
  _isNil2 = function () {
    return data;
  };
  return data;
}
function _isEmpty2() {
  const data = _interopRequireDefault(require("ramda/src/isEmpty"));
  _isEmpty2 = function () {
    return data;
  };
  return data;
}
function _arrayDifference() {
  const data = _interopRequireDefault(require("array-difference"));
  _arrayDifference = function () {
    return data;
  };
  return data;
}
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
function _cliTable() {
  const data = _interopRequireDefault(require("cli-table"));
  _cliTable = function () {
    return data;
  };
  return data;
}
function _normalizePath() {
  const data = _interopRequireDefault(require("normalize-path"));
  _normalizePath = function () {
    return data;
  };
  return data;
}
function _objectDiff() {
  const data = _interopRequireDefault(require("object-diff"));
  _objectDiff = function () {
    return data;
  };
  return data;
}
function _lodash() {
  const data = require("lodash");
  _lodash = function () {
    return data;
  };
  return data;
}
function _semver() {
  const data = require("semver");
  _semver = function () {
    return data;
  };
  return data;
}
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function componentToPrintableForDiff(component) {
  const obj = {};
  const parsePackages = packages => {
    return !(0, _isEmpty2().default)(packages) && !(0, _isNil2().default)(packages) ? Object.keys(packages).map(key => `${key}@${packages[key]}`) : null;
  };
  const parseExtensions = extensions => {
    if (!extensions || (0, _isEmpty2().default)(extensions)) return null;
    return extensions.toConfigArray().map(extension => extension.id);
  };
  const {
    lang,
    bindingPrefix,
    dependencies,
    devDependencies,
    packageDependencies,
    devPackageDependencies,
    files,
    extensions,
    mainFile,
    deprecated
  } = component;
  const allDevPackages = _objectSpread({}, devPackageDependencies);
  const allPackages = _objectSpread({}, packageDependencies);
  const allPeerPackages = _objectSpread({}, component.peerPackageDependencies);
  const parsedDevPackageDependencies = parsePackages(allDevPackages) || [];
  // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
  const peerPackageDependencies = [].concat(parsePackages(allPeerPackages)).filter(x => x);
  const overrides = component.overrides.componentOverridesData;
  obj.id = component.id.toStringWithoutScope();
  obj.language = lang || null;
  obj.bindingPrefix = bindingPrefix || null;
  obj.mainFile = mainFile ? (0, _normalizePath().default)(mainFile) : null;
  obj.dependencies = dependencies.toStringOfIds().sort()
  // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
  .concat(parsePackages(allPackages)).filter(x => x);
  obj.devDependencies = devDependencies.toStringOfIds().sort().concat(parsedDevPackageDependencies).filter(x => x);
  obj.peerDependencies = peerPackageDependencies.length ? peerPackageDependencies : undefined;
  obj.files = files && !(0, _isEmpty2().default)(files) && !(0, _isNil2().default)(files) ? files.filter(file => !file.test).map(file => (0, _normalizePath().default)(file.relative)) : null;
  obj.specs = files && !(0, _isEmpty2().default)(files) && !(0, _isNil2().default)(files) && (0, _find2().default)((0, _propEq2().default)('test', true))(files) ? files.filter(file => file.test).map(file => (0, _normalizePath().default)(file.relative)) : null;
  obj.extensions = parseExtensions(extensions);
  obj.deprecated = deprecated ? 'True' : null;
  obj.overridesDependencies = parsePackages(overrides.dependencies);
  obj.overridesDevDependencies = parsePackages(overrides.devDependencies);
  obj.overridesPeerDependencies = parsePackages(overrides.peerDependencies);
  obj.overridesPackageJsonProps = JSON.stringify(component.overrides.componentOverridesPackageJsonData);
  return obj;
}
function prettifyFieldName(field) {
  return `${field[0].toUpperCase()}${field.slice(1)}`.replace(/([A-Z])/g, ' $1').trim();
}
function comparator(a, b) {
  if (a instanceof Array && b instanceof Array) {
    return (0, _isEmpty2().default)((0, _arrayDifference().default)(a, b));
  }
  return a === b;
}
function getDiffBetweenObjects(objectLeft, objectRight) {
  return _objectDiff().default.custom({
    equal: comparator
  }, objectLeft, objectRight);
}
function componentToPrintableForDiffCommand(component, verbose = false) {
  const comp = componentToPrintableForDiff(component);
  delete comp.dependencies;
  delete comp.devDependencies;
  delete comp.peerDependencies;
  delete comp.id;
  if (!verbose) {
    delete comp.overridesDependencies;
    delete comp.overridesDevDependencies;
    delete comp.overridesPeerDependencies;
    delete comp.overridesPackageJsonProps;
  }
  return comp;
}
function diffBetweenComponentsObjects(componentLeft, componentRight, {
  verbose,
  formatDepsAsTable
}) {
  const printableLeft = componentToPrintableForDiffCommand(componentLeft, verbose);
  const printableRight = componentToPrintableForDiffCommand(componentRight, verbose);
  const leftVersion = componentLeft.version;
  const rightVersion = componentRight.version;
  const fieldsDiff = getDiffBetweenObjects(printableLeft, printableRight);
  if (!componentLeft.version || !componentRight.version) {
    throw new Error('diffBetweenComponentsObjects component does not have a version');
  }
  const printFieldValue = fieldValue => {
    if (typeof fieldValue === 'string') return fieldValue;
    if (Array.isArray(fieldValue)) return `[ ${fieldValue.join(', ')} ]`;
    throw new Error(`diffBetweenComponentsObjects: not support ${typeof fieldValue}`);
  };
  const printFieldLeft = field => {
    const fieldValue = printableLeft[field];
    if (!fieldValue) return '';
    return `- ${printFieldValue(fieldValue)}\n`;
  };
  const printFieldRight = field => {
    const fieldValue = printableRight[field];
    if (!fieldValue) return '';
    return `+ ${printFieldValue(fieldValue)}\n`;
  };
  const fieldsDiffOutput = Object.keys(fieldsDiff).map(field => {
    const title = titleLeft(field, leftVersion, rightVersion) + _chalk().default.bold(titleRight(field, leftVersion, rightVersion));
    const value = _chalk().default.red(printFieldLeft(field)) + _chalk().default.green(printFieldRight(field));
    const diffOutput = title + value;
    return {
      fieldName: field,
      diffOutput
    };
  });
  const dependenciesRelativePathsOutput = () => {
    if (!verbose) return [];
    const dependenciesLeft = componentLeft.getAllDependencies();
    const dependenciesRight = componentRight.getAllDependencies();
    if ((0, _isEmpty2().default)(dependenciesLeft) || (0, _isEmpty2().default)(dependenciesRight)) return [];
    return dependenciesLeft.reduce((acc, dependencyLeft) => {
      const idStr = dependencyLeft.id.toString();
      const dependencyRight = dependenciesRight.find(dep => dep.id.isEqual(dependencyLeft.id));
      if (!dependencyRight) return acc;
      if (JSON.stringify(dependencyLeft.relativePaths) === JSON.stringify(dependencyRight.relativePaths)) return acc;
      const fieldName = `Dependency ${idStr} relative-paths`;
      const title = titleLeft(fieldName, leftVersion, rightVersion) + _chalk().default.bold(titleRight(fieldName, leftVersion, rightVersion));
      const getValue = (fieldValue, left) => {
        if ((0, _isEmpty2().default)(fieldValue)) return '';
        const sign = left ? '-' : '+';
        const jsonOutput = JSON.stringify(fieldValue, null, `${sign} `);
        return `${jsonOutput}\n`;
      };
      const value = _chalk().default.red(getValue(dependencyLeft.relativePaths, true)) + _chalk().default.green(getValue(dependencyRight.relativePaths, false));
      const diffOutput = title + value;
      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
      acc.push({
        fieldName,
        diffOutput
      });
      return acc;
    }, []);
  };
  const getDepDiffType = (left, right) => {
    if (left && !right) return 'removed';
    if (!left && right) return 'added';
    if (!left || !right) throw new Error('diff.getType expect at least one of the component to have value');
    const opts = {
      loose: true,
      includePrerelease: true
    };
    try {
      if ((0, _semver().lt)(left, right, opts)) return 'upgraded';
      if ((0, _semver().gt)(left, right, opts)) return 'downgraded';
    } catch (err) {
      // the semver is probably a range, no need to compare, just fallback to the "changed"
    }
    return 'changed';
  };
  const formatDepsDiffAsTable = (diffs, fieldName) => {
    diffs.forEach(oneDiff => {
      // oneDiff.name = `> ${oneDiff.name}`;
      oneDiff.left = oneDiff.left || '---';
      oneDiff.right = oneDiff.right || '---';
    });
    const diffTable = new (_cliTable().default)({
      head: ['name', 'diff', `${leftVersion}`, `${rightVersion}`],
      style: {
        head: ['cyan']
      }
    });
    diffs.map(dif => diffTable.push(Object.values(dif)));
    return `\n${_chalk().default.bold(fieldName)}\n${diffTable.toString()}`;
  };
  const formatDepsDiffAsPlainText = (diffs, fieldName) => {
    diffs.forEach(oneDiff => {
      oneDiff.left = oneDiff.left ? _chalk().default.red(`- ${oneDiff.name}@${oneDiff.left}\n`) : '';
      oneDiff.right = oneDiff.right ? _chalk().default.green(`+ ${oneDiff.name}@${oneDiff.right}\n`) : '';
    });
    const output = diffs.map(d => `${d.name}\n${d.left}${d.right}`).join('\n');
    const depTitleLeft = `--- ${fieldName} ${labelLeft(leftVersion, rightVersion)}`;
    const depTitleRight = `+++ ${fieldName} ${labelRight(leftVersion, rightVersion)}`;
    const title = `${depTitleLeft}\n${_chalk().default.bold(depTitleRight)}`;
    return `\n${title}\n${output}`;
  };
  const formatDepsDiff = (diffs, fieldName) => {
    return formatDepsAsTable ? formatDepsDiffAsTable(diffs, fieldName) : formatDepsDiffAsPlainText(diffs, fieldName);
  };
  const packageDependenciesOutput = fieldName => {
    const dependenciesLeft = componentLeft[fieldName];
    const dependenciesRight = componentRight[fieldName];
    if ((0, _isEmpty2().default)(dependenciesLeft) && (0, _isEmpty2().default)(dependenciesRight)) return null;
    const diffsLeft = Object.keys(dependenciesLeft).reduce((acc, dependencyName) => {
      const dependencyLeft = dependenciesLeft[dependencyName];
      const dependencyRight = dependenciesRight[dependencyName];
      if (dependencyLeft === dependencyRight) return acc;
      acc.push({
        name: dependencyName,
        type: getDepDiffType(dependencyLeft, dependencyRight),
        left: dependencyLeft,
        right: dependencyRight
      });
      return acc;
    }, []);
    const diffs = Object.keys(dependenciesRight).reduce((acc, dependencyName) => {
      if (!dependenciesLeft[dependencyName]) {
        // otherwise it was taken care already above
        acc.push({
          name: dependencyName,
          type: getDepDiffType(undefined, dependenciesRight[dependencyName]),
          left: undefined,
          right: dependenciesRight[dependencyName]
        });
      }
      return acc;
    }, diffsLeft);
    if (!diffs.length) return null;
    return formatDepsDiff(diffs, fieldName);
  };
  const componentDependenciesOutput = fieldName => {
    const dependenciesLeft = componentLeft.depsIdsGroupedByType[fieldName];
    const dependenciesRight = componentRight.depsIdsGroupedByType[fieldName];
    if ((0, _isEmpty2().default)(dependenciesLeft) && (0, _isEmpty2().default)(dependenciesRight)) return null;
    const diffsLeft = dependenciesLeft.reduce((acc, dependencyLeft) => {
      const dependencyRight = dependenciesRight.searchWithoutVersion(dependencyLeft);
      if (dependencyRight && dependencyLeft.isEqual(dependencyRight)) return acc;
      acc.push({
        name: dependencyLeft.toStringWithoutVersion(),
        type: getDepDiffType(dependencyLeft.version, dependencyRight === null || dependencyRight === void 0 ? void 0 : dependencyRight.version),
        left: dependencyLeft.version,
        right: dependencyRight === null || dependencyRight === void 0 ? void 0 : dependencyRight.version
      });
      return acc;
    }, []);
    const diffs = dependenciesRight.reduce((acc, dependencyRight) => {
      if (!dependenciesLeft.hasWithoutVersion(dependencyRight)) {
        // otherwise it was taken care already above
        acc.push({
          name: dependencyRight.toStringWithoutVersion(),
          type: getDepDiffType(undefined, dependencyRight.version),
          left: undefined,
          right: dependencyRight === null || dependencyRight === void 0 ? void 0 : dependencyRight.version
        });
      }
      return acc;
    }, diffsLeft);
    if (!diffs.length) return null;
    return formatDepsDiff(diffs, fieldName);
  };
  const getAllDepsOutput = () => {
    const depsDiff = [];
    ['packageDependencies', 'devPackageDependencies', 'peerPackageDependencies'].forEach(fieldName => {
      const diffOutput = packageDependenciesOutput(fieldName);
      if (diffOutput) depsDiff.push({
        fieldName,
        diffOutput
      });
    });
    ['dependencies', 'devDependencies', 'extensionDependencies'].forEach(fieldName => {
      const diffOutput = componentDependenciesOutput(fieldName);
      if (diffOutput) depsDiff.push({
        fieldName,
        diffOutput
      });
    });
    return depsDiff;
  };
  const fieldsEnvsConfigOutput = getEnvsConfigOutput(componentLeft, componentRight);
  const extensionsConfigOutput = getExtensionsConfigOutput(componentLeft, componentRight);
  const allDiffs = [...fieldsDiffOutput, ...fieldsEnvsConfigOutput, ...extensionsConfigOutput, ...dependenciesRelativePathsOutput(), ...getAllDepsOutput()];
  return (0, _isEmpty2().default)(allDiffs) ? undefined : allDiffs;
}
function getEnvsConfigOutput(componentLeft, componentRight) {
  const envs = ['compiler', 'tester'];
  const fieldsEnvsConfigOutput = envs.map(env => {
    const leftConfig = componentLeft[env] && componentLeft[env].dynamicConfig ? componentLeft[env].dynamicConfig : {};
    const rightConfig = componentRight[env] && componentRight[env].dynamicConfig ? componentRight[env].dynamicConfig : {};
    if (JSON.stringify(leftConfig) === JSON.stringify(rightConfig)) return undefined;
    const fieldName = `${env} configuration`;
    return configsOutput(fieldName, leftConfig, rightConfig, componentLeft.version, componentRight.version);
  });
  return (0, _lodash().compact)(fieldsEnvsConfigOutput);
}
function getExtensionsConfigOutput(componentLeft, componentRight) {
  const leftExtensionsConfigs = componentLeft.extensions.sortById().toConfigObject();
  const rightExtensionsConfigs = componentRight.extensions.sortById().toConfigObject();
  const leftExtensionsIds = Object.keys(leftExtensionsConfigs);
  const rightExtensionsIds = Object.keys(rightExtensionsConfigs);

  // const mutualIds = R.intersection(rightExtensionsIds, rightExtensionsIds);
  // const onlyOnOneIds = R.symmetricDifference(leftExtensionsIds, rightExtensionsIds);
  const allIds = (0, _union2().default)(leftExtensionsIds, rightExtensionsIds);
  const allIdsOutput = allIds.map(extId => {
    const leftConfig = leftExtensionsConfigs[extId];
    const rightConfig = rightExtensionsConfigs[extId];
    const fieldName = `${extId} configuration`;
    return configsOutput(fieldName, leftConfig, rightConfig, componentLeft.version, componentRight.version);
  });
  return (0, _lodash().compact)(allIdsOutput);
}
function labelLeft(leftVersion, rightVersion) {
  const sameVersions = areVersionsTheSame(leftVersion, rightVersion);
  return sameVersions ? `${leftVersion} original` : leftVersion;
}
function labelRight(leftVersion, rightVersion) {
  const sameVersions = areVersionsTheSame(leftVersion, rightVersion);
  return sameVersions ? `${rightVersion} modified` : rightVersion;
}
function areVersionsTheSame(leftVersion, rightVersion) {
  return leftVersion === rightVersion;
}
function titleLeft(field, leftVersion, rightVersion) {
  const leftLabel = labelLeft(leftVersion, rightVersion);
  return `--- ${prettifyFieldName(field)} (${leftLabel})\n`;
}
function titleRight(field, leftVersion, rightVersion) {
  const rightLabel = labelRight(leftVersion, rightVersion);
  return `+++ ${prettifyFieldName(field)} (${rightLabel})\n`;
}
function configsOutput(fieldName, leftConfig, rightConfig, leftVersion, rightVersion) {
  if (!leftConfig && !rightConfig) return undefined;
  if (leftConfig && rightConfig && JSON.stringify(leftConfig) === JSON.stringify(rightConfig)) return undefined;
  const title = titleLeft(fieldName, leftVersion, rightVersion) + _chalk().default.bold(titleRight(fieldName, leftVersion, rightVersion));
  const getValue = (left, fieldValue) => {
    if (fieldValue === undefined || (0, _isEmpty2().default)(fieldValue)) return '';
    const sign = left ? '-' : '+';
    const jsonOutput = JSON.stringify(fieldValue, null, `${sign} `);
    return `${jsonOutput}\n`;
  };
  const value = _chalk().default.red(getValue(true, leftConfig)) + _chalk().default.green(getValue(false, rightConfig));
  const diffOutput = title + value;
  return {
    fieldName,
    diffOutput
  };
}