import { BitId } from '../../bit-id';
import { ComponentWithDependencies } from '../../scope';
import { PathLinuxRelative, PathOsBasedAbsolute, PathOsBasedRelative } from '../../utils/path';
import ComponentMap from '../bit-map/component-map';
import Component from '../component/consumer-component';
import Consumer from '../consumer';
import { ComponentWriterProps } from './component-writer';
interface ExternalPackageInstaller {
    install: () => Promise<any>;
}
interface ManyComponentsWriterParams {
    consumer: Consumer;
    componentsWithDependencies: ComponentWithDependencies[];
    writeToPath?: string;
    override?: boolean;
    writeConfig?: boolean;
    installNpmPackages?: boolean;
    verbose?: boolean;
    resetConfig?: boolean;
}
/**
 * write the components into '/components' dir (or according to the bit.map) and its dependencies in the
 * '/components/.dependencies' dir. Both directories are configurable in bit.json
 * For example: global/a has a dependency my-scope/global/b@1. The directories will be:
 * project/root/components/global/a/impl.js
 * project/root/components/.dependencies/global/b/my-scope/1/impl.js
 *
 * In case there are some same dependencies shared between the components, it makes sure to
 * write them only once.
 */
export default class ManyComponentsWriter {
    consumer: Consumer;
    componentsWithDependencies: ComponentWithDependencies[];
    writeToPath?: string;
    override: boolean;
    writeConfig: boolean;
    installNpmPackages: boolean;
    verbose: boolean;
    dependenciesIdsCache: Record<string, any>;
    writtenComponents: Component[];
    writtenDependencies: Component[];
    basePath?: string;
    resetConfig?: boolean;
    constructor(params: ManyComponentsWriterParams);
    static externalInstaller: ExternalPackageInstaller;
    static externalCompiler: (ids?: BitId[]) => Promise<any>;
    static registerExternalInstaller(installer: ExternalPackageInstaller): void;
    _setBooleanDefault(field: boolean | null | undefined, defaultValue: boolean): boolean;
    writeAll(): Promise<void>;
    _writeComponentsAndDependencies(): Promise<void>;
    _installPackages(): Promise<void>;
    _persistComponentsData(): Promise<void>;
    _populateComponentsFilesToWrite(): Promise<void>;
    /**
     * e.g. [bar, bar/foo] => [bar_1, bar/foo]
     * otherwise, the bar/foo component will be saved inside "bar" component.
     * in case bar_1 is taken, increment to bar_2 until the name is available.
     */
    private fixDirsIfNested;
    _getWriteComponentsParams(): ComponentWriterProps[];
    _getWriteParamsOfOneComponent(componentWithDeps: ComponentWithDependencies): ComponentWriterProps;
    _getDefaultWriteParams(): Record<string, any>;
    _moveComponentsIfNeeded(): void;
    _getComponentRootDir(bitId: BitId): PathLinuxRelative;
    _getDependencyRootDir(bitId: BitId): PathOsBasedRelative;
    _throwErrorWhenDirectoryNotEmpty(componentDir: PathOsBasedAbsolute, componentMap: ComponentMap | null | undefined): void;
}
export {};
