"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.string.replace.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = componentsDiff;
exports.diffBetweenVersionsObjects = diffBetweenVersionsObjects;
exports.outputDiffResults = outputDiffResults;
function _uniq2() {
  const data = _interopRequireDefault(require("ramda/src/uniq"));
  _uniq2 = function () {
    return data;
  };
  return data;
}
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
function _generalError() {
  const data = _interopRequireDefault(require("../../error/general-error"));
  _generalError = function () {
    return data;
  };
  return data;
}
function _showDoctorError() {
  const data = _interopRequireDefault(require("../../error/show-doctor-error"));
  _showDoctorError = function () {
    return data;
  };
  return data;
}
function _diffFiles() {
  const data = _interopRequireDefault(require("../../utils/diff-files"));
  _diffFiles = function () {
    return data;
  };
  return data;
}
function _saveIntoOsTmp() {
  const data = require("../../utils/fs/save-into-os-tmp");
  _saveIntoOsTmp = function () {
    return data;
  };
  return data;
}
function _componentsObjectDiff() {
  const data = require("./components-object-diff");
  _componentsObjectDiff = function () {
    return data;
  };
  return data;
}
async function componentsDiff(consumer, ids, version, toVersion, diffOpts) {
  // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
  const {
    components
  } = await consumer.loadComponents(ids);
  if (!components) throw new (_showDoctorError().default)('failed loading the components');

  // try to resolve ids scope of by components array
  const idsWithScope = ids.map(id => {
    if (!id.scope && components) {
      const foundComponent = components.find(o => o.name === id.name);
      if (foundComponent) return id.changeScope(foundComponent.scope);
    }
    return id;
  });
  const getResults = () => {
    if (version && toVersion) {
      return Promise.all(idsWithScope.map(id => getComponentDiffBetweenVersions(id)));
    }
    if (version) {
      return Promise.all(components.map(component => getComponentDiffOfVersion(component)));
    }
    return Promise.all(components.map(component => getComponentDiff(component)));
  };
  const componentsDiffResults = await getResults();
  return componentsDiffResults;
  async function getComponentDiffOfVersion(component) {
    const diffResult = {
      id: component.id,
      hasDiff: false
    };
    const modelComponent = await consumer.scope.getModelComponentIfExist(component.id);
    if (!modelComponent) {
      throw new (_generalError().default)(`component ${component.id.toString()} doesn't have any version yet`);
    }
    const repository = consumer.scope.objects;
    const fromVersionObject = await modelComponent.loadVersion(version, repository);
    const versionFiles = await fromVersionObject.modelFilesToSourceFiles(repository);
    const fsFiles = component.files;
    // $FlowFixMe version must be defined as the component.componentFromModel do exist
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    const versionB = component.id.version;
    // this function gets called only when version is set
    diffResult.filesDiff = await getFilesDiff(versionFiles, fsFiles, version, versionB);
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    const fromVersionComponent = await modelComponent.toConsumerComponent(version, consumer.scope.name, repository);
    await updateFieldsDiff(fromVersionComponent, component, diffResult, diffOpts);
    return diffResult;
  }
  async function getComponentDiffBetweenVersions(id) {
    const diffResult = {
      id,
      hasDiff: false
    };
    const modelComponent = await consumer.scope.getModelComponentIfExist(id);
    if (!modelComponent) {
      throw new (_generalError().default)(`component ${id.toString()} doesn't have any version yet`);
    }
    const repository = consumer.scope.objects;
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    const fromVersionObject = await modelComponent.loadVersion(version, repository);
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    const toVersionObject = await modelComponent.loadVersion(toVersion, repository);
    const fromVersionFiles = await fromVersionObject.modelFilesToSourceFiles(repository);
    const toVersionFiles = await toVersionObject.modelFilesToSourceFiles(repository);
    // $FlowFixMe version and toVersion are set when calling this function
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    diffResult.filesDiff = await getFilesDiff(fromVersionFiles, toVersionFiles, version, toVersion);
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    const fromVersionComponent = await modelComponent.toConsumerComponent(version, consumer.scope.name, repository);
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    const toVersionComponent = await modelComponent.toConsumerComponent(toVersion, consumer.scope.name, repository);
    await updateFieldsDiff(fromVersionComponent, toVersionComponent, diffResult, diffOpts);
    return diffResult;
  }
  async function getComponentDiff(component) {
    const diffResult = {
      id: component.id,
      hasDiff: false
    };
    if (!component.componentFromModel) {
      // it's a new component. not modified. nothing to check.
      return diffResult;
    }
    const modelFiles = component.componentFromModel.files;
    const fsFiles = component.files;
    // $FlowFixMe version must be defined as the component.componentFromModel do exist
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    diffResult.filesDiff = await getFilesDiff(modelFiles, fsFiles, component.id.version, component.id.version);
    // $FlowFixMe we made sure already that component.componentFromModel is defined
    await updateFieldsDiff(component.componentFromModel, component, diffResult, diffOpts);
    return diffResult;
  }
}
async function diffBetweenVersionsObjects(modelComponent, fromVersionObject, toVersionObject, fromVersion, toVersion, scope, diffOpts) {
  var _diffOpts$color;
  const diffResult = {
    id: modelComponent.toBitId(),
    hasDiff: false
  };
  const repository = scope.objects;
  const fromVersionFiles = await fromVersionObject.modelFilesToSourceFiles(repository);
  const toVersionFiles = await toVersionObject.modelFilesToSourceFiles(repository);
  const color = (_diffOpts$color = diffOpts.color) !== null && _diffOpts$color !== void 0 ? _diffOpts$color : true;
  diffResult.filesDiff = await getFilesDiff(fromVersionFiles, toVersionFiles, fromVersion, toVersion, undefined, color);
  const fromVersionComponent = await modelComponent.toConsumerComponent(fromVersionObject.hash().toString(), scope.name, repository);
  const toVersionComponent = await modelComponent.toConsumerComponent(toVersionObject.hash().toString(), scope.name, repository);
  await updateFieldsDiff(fromVersionComponent, toVersionComponent, diffResult, diffOpts);
  return diffResult;
}
async function updateFieldsDiff(componentA, componentB, diffResult, diffOpts) {
  diffResult.fieldsDiff = (0, _componentsObjectDiff().diffBetweenComponentsObjects)(componentA, componentB, diffOpts);
  diffResult.hasDiff = hasDiff(diffResult);
}
function hasDiff(diffResult) {
  return !!(diffResult.filesDiff && diffResult.filesDiff.find(file => file.diffOutput) || diffResult.fieldsDiff);
}
async function getOneFileDiff(filePathA, filePathB, fileALabel, fileBLabel, fileName, color = true) {
  const fileDiff = await (0, _diffFiles().default)(filePathA, filePathB, color);
  if (!fileDiff) return '';
  const diffStartsString = '--- '; // the part before this string is not needed for our purpose
  const diffStart = fileDiff.indexOf(diffStartsString);
  if (!diffStart || diffStart < 1) return ''; // invalid diff

  // e.g. Linux: --- a/private/var/folders/z ... .js
  // Windows: --- "a/C:\\Users\\David\\AppData\\Local\\Temp\\bit ... .js
  const regExpA = /--- ["]?a.*\n/; // exact "---", follow by a or "a (for Windows) then \n
  const regExpB = /\+\+\+ ["]?b.*\n/; // exact "+++", follow by b or "b (for Windows) then \n
  return fileDiff.slice(diffStart).replace(regExpA, `--- ${fileName} (${fileALabel})\n`).replace(regExpB, `+++ ${fileName} (${fileBLabel})\n`);
}
async function getFilesDiff(filesA, filesB, filesAVersion, filesBVersion, fileNameAttribute = 'relative', color = true) {
  const filesAPaths = filesA.map(f => f[fileNameAttribute]);
  const filesBPaths = filesB.map(f => f[fileNameAttribute]);
  const allPaths = (0, _uniq2().default)(filesAPaths.concat(filesBPaths));
  const fileALabel = filesAVersion === filesBVersion ? `${filesAVersion} original` : filesAVersion;
  const fileBLabel = filesAVersion === filesBVersion ? `${filesBVersion} modified` : filesBVersion;
  const filesDiffP = allPaths.map(async relativePath => {
    const getFileData = async files => {
      const file = files.find(f => f[fileNameAttribute] === relativePath);
      const content = file ? file.contents : '';
      const path = await (0, _saveIntoOsTmp().saveIntoOsTmp)(content);
      return {
        path,
        content: content.toString('utf-8')
      };
    };
    const [{
      path: fileAPath,
      content: fileAContent
    }, {
      path: fileBPath,
      content: fileBContent
    }] = await Promise.all([getFileData(filesA), getFileData(filesB)]);
    const diffOutput = await getOneFileDiff(fileAPath, fileBPath, fileALabel, fileBLabel, relativePath, color);
    let status = 'UNCHANGED';
    if (diffOutput && !fileAContent) status = 'NEW';else if (diffOutput && fileAContent) status = 'MODIFIED';
    return {
      filePath: relativePath,
      diffOutput,
      status,
      fromContent: fileAContent,
      toContent: fileBContent
    };
  });
  return Promise.all(filesDiffP);
}
function outputDiffResults(diffResults) {
  return diffResults.map(diffResult => {
    if (diffResult.hasDiff) {
      const titleStr = `showing diff for ${_chalk().default.bold(diffResult.id.toStringWithoutVersion())}`;
      const titleSeparator = new Array(titleStr.length).fill('-').join('');
      const title = _chalk().default.cyan(`${titleSeparator}\n${titleStr}\n${titleSeparator}`);
      // @ts-ignore since hasDiff is true, filesDiff must be set
      const filesWithDiff = diffResult.filesDiff.filter(file => file.diffOutput);
      const files = filesWithDiff.map(fileDiff => fileDiff.diffOutput).join('\n');
      const fields = diffResult.fieldsDiff ? diffResult.fieldsDiff.map(field => field.diffOutput).join('\n') : '';
      return `${title}\n${files}\n${fields}`;
    }
    return `no diff for ${_chalk().default.bold(diffResult.id.toString())}`;
  }).join('\n\n');
}