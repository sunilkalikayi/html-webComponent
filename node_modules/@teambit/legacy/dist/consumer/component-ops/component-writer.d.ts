import { BitIds } from '../../bit-id';
import { Scope } from '../../scope';
import { PathLinuxRelative } from '../../utils/path';
import BitMap from '../bit-map/bit-map';
import ComponentMap from '../bit-map/component-map';
import Component from '../component/consumer-component';
import Consumer from '../consumer';
export declare type ComponentWriterProps = {
    component: Component;
    writeToPath: PathLinuxRelative;
    writeConfig?: boolean;
    writePackageJson?: boolean;
    override?: boolean;
    isolated?: boolean;
    consumer: Consumer | undefined;
    scope?: Scope | undefined;
    bitMap: BitMap;
    ignoreBitDependencies?: boolean | BitIds;
    deleteBitDirContent?: boolean;
    existingComponentMap?: ComponentMap;
};
export default class ComponentWriter {
    component: Component;
    writeToPath: PathLinuxRelative;
    writeConfig?: boolean;
    writePackageJson?: boolean;
    override: boolean;
    isolated?: boolean;
    consumer: Consumer | undefined;
    scope?: Scope | undefined;
    bitMap: BitMap;
    ignoreBitDependencies: boolean | BitIds;
    deleteBitDirContent: boolean | undefined;
    existingComponentMap: ComponentMap | undefined;
    constructor({ component, writeToPath, writeConfig, writePackageJson, override, isolated, consumer, scope, bitMap, ignoreBitDependencies, deleteBitDirContent, existingComponentMap, }: ComponentWriterProps);
    /**
     * write the component to the filesystem and update .bitmap with the details.
     *
     * bitMap gets updated before writing the files to the filesystem, because as part of writing the
     * package-json file, the componentMap is needed to be stored with the updated version.
     *
     * when a component is not new, write the files according to the paths in .bitmap.
     */
    write(): Promise<Component>;
    populateComponentsFilesToWrite(): Promise<Component>;
    private throwForImportingLegacyIntoHarmony;
    populateFilesToWriteToComponentDir(): Promise<void>;
    addComponentToBitMap(rootDir: string | undefined): ComponentMap;
    _updateComponentRootPathAccordingToBitMap(): void;
    _updateFilesBasePaths(): void;
    _cleanOldNestedComponent(): Promise<void>;
    _removeNodeModulesLinksFromDependents(): Promise<void>;
}
