"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
require("core-js/modules/es.regexp.exec.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getConsumerInfo = getConsumerInfo;
exports.pathHasBitJson = pathHasBitJson;
exports.pathHasLocalScope = pathHasLocalScope;
function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));
  _fsExtra = function () {
    return data;
  };
  return data;
}
function pathlib() {
  const data = _interopRequireWildcard(require("path"));
  pathlib = function () {
    return data;
  };
  return data;
}
function _constants() {
  const data = require("../constants");
  _constants = function () {
    return data;
  };
  return data;
}
function _config() {
  const data = require("./config");
  _config = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * @flow
 * @deprecated
 * @TODO deprecated and should be removed from here and use fs-propogate-until instead...
 */

function composeBitHiddenDirPath(path) {
  return pathlib().join(path, _constants().BIT_HIDDEN_DIR);
}
function composeBitGitHiddenDirPath(path) {
  return pathlib().join(path, _constants().DOT_GIT_DIR, _constants().BIT_GIT_DIR);
}
function composeBitJsonPath(path) {
  return pathlib().join(path, _constants().BIT_JSON);
}

/**
 * determine whether given path has a bit.Json
 */
function pathHasBitJson(path) {
  return _fsExtra().default.existsSync(composeBitJsonPath(path));
}

/**
 * determine whether given path has .bit
 */
function pathHasLocalScope(path) {
  return _fsExtra().default.existsSync(composeBitHiddenDirPath(path));
}

/**
 * propagate from the given directory up to the root to find the consumer
 */
async function getConsumerInfo(absPath) {
  const searchPaths = buildPropagationPaths();
  searchPaths.unshift(absPath);
  for (let i = 0; i < searchPaths.length; i += 1) {
    const path = searchPaths[i];
    const hasScope = await pathHasScopeDir(path); // eslint-disable-line no-await-in-loop
    const hasConsumerConfig = await pathHasConsumerConfig(path); // eslint-disable-line no-await-in-loop
    const hasBitMap = await pathHasBitMap(path); // eslint-disable-line no-await-in-loop
    const consumerExists = hasConsumerConfig || hasBitMap;
    if (consumerExists) {
      return {
        path,
        hasScope,
        hasConsumerConfig,
        hasBitMap
      };
    }
  }
  return undefined;
  function buildPropagationPaths() {
    const paths = [];
    const pathParts = absPath.split(pathlib().sep);
    pathParts.forEach((val, index) => {
      const part = pathParts.slice(0, index).join('/');
      if (!part) return;
      paths.push(part);
    });
    return paths.reverse();
  }
  async function pathHasBitMap(path) {
    return (await _fsExtra().default.pathExists(pathlib().join(path, _constants().BIT_MAP))) || _fsExtra().default.pathExists(pathlib().join(path, _constants().OLD_BIT_MAP));
  }
  async function pathHasScopeDir(path) {
    return (await _fsExtra().default.pathExists(composeBitHiddenDirPath(path))) || _fsExtra().default.pathExists(composeBitGitHiddenDirPath(path));
  }
  async function pathHasConsumerConfig(path) {
    const isExist = await _config().LegacyWorkspaceConfig.isExist(path);
    return !!isExist;
  }
}