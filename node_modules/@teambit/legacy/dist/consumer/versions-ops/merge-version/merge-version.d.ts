import { BitId } from '../../../bit-id';
import { AutoTagResult } from '../../../scope/component-ops/auto-tag';
import Component from '../../component/consumer-component';
import Consumer from '../../consumer';
export declare const mergeOptionsCli: {
    o: string;
    t: string;
    m: string;
};
export declare const MergeOptions: {
    ours: string;
    theirs: string;
    manual: string;
};
export declare type MergeStrategy = keyof typeof MergeOptions;
export declare const FileStatus: {
    merged: string;
    manual: string;
    binaryConflict: string;
    updated: string;
    added: string;
    removed: string;
    overridden: string;
    unchanged: string;
    remainDeleted: string;
};
export declare type FilesStatus = {
    [fileName: string]: keyof typeof FileStatus;
};
export declare type ApplyVersionResult = {
    id: BitId;
    filesStatus: FilesStatus;
};
export declare type FailedComponents = {
    id: BitId;
    failureMessage: string;
    unchangedLegitimately?: boolean;
};
export declare type ApplyVersionResults = {
    components?: ApplyVersionResult[];
    version?: string;
    failedComponents?: FailedComponents[];
    resolvedComponents?: Component[];
    abortedComponents?: ApplyVersionResult[];
    mergeSnapResults?: {
        snappedComponents: Component[];
        autoSnappedResults: AutoTagResult[];
    } | null;
    mergeSnapError?: Error;
    leftUnresolvedConflicts?: boolean;
    verbose?: boolean;
};
export declare function mergeVersion(consumer: Consumer, version: string, ids: BitId[], mergeStrategy: MergeStrategy): Promise<ApplyVersionResults>;
export declare function getMergeStrategyInteractive(): Promise<MergeStrategy>;
export declare function getMergeStrategy(ours: boolean, theirs: boolean, manual: boolean): MergeStrategy | null | undefined;
export declare const applyVersionReport: (components: ApplyVersionResult[], addName?: boolean, showVersion?: boolean) => string;
export declare function conflictSummaryReport(components: ApplyVersionResult[]): string;
