/// <reference types="node" />
import { Consumer } from '../..';
import { Version } from '../../../scope/models';
import { SourceFileModel } from '../../../scope/models/version';
import { PathLinux } from '../../../utils/path';
import Component from '../../component';
import { SourceFile } from '../../component/sources';
export declare type MergeResultsThreeWay = {
    addFiles: Array<{
        filePath: PathLinux;
        fsFile: SourceFile;
    }>;
    removeFiles: Array<{
        filePath: PathLinux;
    }>;
    remainDeletedFiles: Array<{
        filePath: PathLinux;
    }>;
    modifiedFiles: Array<{
        filePath: PathLinux;
        fsFile: SourceFile;
        baseFile: SourceFileModel;
        otherFile: SourceFileModel;
        output: string | null | undefined;
        conflict: string | null | undefined;
        isBinaryConflict?: boolean;
    }>;
    unModifiedFiles: Array<{
        filePath: PathLinux;
        fsFile: SourceFile;
    }>;
    overrideFiles: Array<{
        filePath: PathLinux;
        fsFile: SourceFile;
    }>;
    updatedFiles: Array<{
        filePath: PathLinux;
        otherFile: SourceFileModel;
        content: Buffer;
    }>;
    hasConflicts: boolean;
};
/**
 * to do the actual merge we use git, specifically `merge-file` command, so we try to use the same
 * terminology as git. From the command help:
 * `git merge-file <current-file> <base-file> <other-file>
 * git merge-file incorporates all changes that lead from the <base-file> to <other-file> into
 * <current-file>. The result ordinarily goes into <current-file>.`
 *
 * see checkout-version.getBaseVersion() for a case when a component is modified and then the base-file is not the
 * common file before other-file and current-file.
 * otherwise, Git terminology pretty much reflects what we do here. current-file is the one that is currently written
 * to the filesystem. other-file is the one the user wants to checkout to. base-file is the original file where both:
 * base-file and other-file were originated from.
 */
export default function threeWayMergeVersions({ consumer, otherComponent, otherLabel, currentComponent, currentLabel, baseComponent, }: {
    consumer: Consumer;
    otherComponent: Version;
    otherLabel: string;
    currentComponent: Component;
    currentLabel: string;
    baseComponent: Version;
}): Promise<MergeResultsThreeWay>;
