import { BitId } from '../../bit-id';
import Component from '../component/consumer-component';
import PackageJsonFile from '../component/package-json-file';
import AbstractConfig from './abstract-config';
import { ComponentOverridesData } from './component-overrides';
import { ExtensionDataList } from './extension-data';
declare type ConfigProps = {
    lang?: string;
    bindingPrefix: string;
    extensions?: ExtensionDataList;
    defaultScope?: string;
    overrides?: ComponentOverridesData;
};
declare type ConfigLoadRegistry = {
    [extId: string]: Function;
};
declare type ConfigLegacyLoadRegistry = {
    [extId: string]: Function;
};
export default class ComponentConfig extends AbstractConfig {
    overrides: ComponentOverridesData | null | undefined;
    defaultScope: string | undefined;
    componentHasWrittenConfig: boolean;
    packageJsonFile: PackageJsonFile | null | undefined;
    static componentConfigLoadingRegistry: ConfigLoadRegistry;
    static registerOnComponentConfigLoading(extId: any, func: (id: any) => any): void;
    static componentConfigLegacyLoadingRegistry: ConfigLegacyLoadRegistry;
    static registerOnComponentConfigLegacyLoading(extId: any, func: (id: any, config: any) => any): void;
    constructor({ lang, bindingPrefix, extensions, defaultScope, overrides }: ConfigProps);
    toPlainObject(): any;
    validate(bitJsonPath: string): void;
    /**
     * Return the extensions as ExtensionDataList
     *
     * @returns {ExtensionDataList}
     * @memberof ComponentConfig
     */
    parseExtensions(): ExtensionDataList;
    mergeWithComponentData(component: Component): void;
    static load({ componentId }: {
        componentId: BitId;
    }): Promise<ComponentConfig>;
    /**
     * Run all subscribers to the component config load event
     *
     * @static
     * @param {ConfigLoadRegistry} subscribers
     * @param {BitId} id
     * @memberof ComponentConfig
     */
    static runOnLoadEvent(subscribers: ConfigLoadRegistry, id: BitId): Promise<any[]>;
}
export declare function getBindingPrefixByDefaultScope(defaultScope: string): string;
export {};
