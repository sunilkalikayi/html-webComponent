import { BitId, BitIds } from '../../bit-id';
declare type ExtensionConfig = {
    [extName: string]: any;
} | RemoveExtensionSpecialSign;
declare type ConfigOnlyEntry = {
    id: string;
    config: ExtensionConfig;
};
export declare const REMOVE_EXTENSION_SPECIAL_SIGN = "-";
declare type RemoveExtensionSpecialSign = '-';
export declare const INTERNAL_CONFIG_FIELDS: string[];
export declare class ExtensionDataEntry {
    legacyId?: string | undefined;
    extensionId?: BitId | undefined;
    name?: string | undefined;
    rawConfig: ExtensionConfig;
    data: {
        [key: string]: any;
    };
    newExtensionId: any;
    constructor(legacyId?: string | undefined, extensionId?: BitId | undefined, name?: string | undefined, rawConfig?: ExtensionConfig, data?: {
        [key: string]: any;
    }, newExtensionId?: any);
    get id(): string | BitId;
    get stringId(): string;
    get config(): {
        [key: string]: any;
    };
    set config(val: {
        [key: string]: any;
    });
    get isLegacy(): boolean;
    get isRemoved(): boolean;
    toModelObject(): {
        extensionId: {
            scope: string | null | undefined;
            name: string;
            version: string | undefined;
        } | undefined;
        config: {
            [key: string]: any;
        };
        data: {
            [key: string]: any;
        };
        legacyId: string | undefined;
        name: string | undefined;
        newExtensionId: any;
    };
    toComponentObject(): {
        extensionId: string | undefined;
        config: {
            [key: string]: any;
        };
        data: {
            [key: string]: any;
        };
        legacyId: string | undefined;
        name: string | undefined;
        newExtensionId: any;
    };
    clone(): ExtensionDataEntry;
}
export declare class ExtensionDataList extends Array<ExtensionDataEntry> {
    static coreExtensionsNames: Map<string, string>;
    static registerCoreExtensionName(name: string): void;
    static registerManyCoreExtensionNames(names: string[]): void;
    get ids(): string[];
    /**
     * returns only new 3rd party extension ids, not core, nor legacy.
     */
    get extensionsBitIds(): BitIds;
    toModelObjects(): {
        extensionId: {
            scope: string | null | undefined;
            name: string;
            version: string | undefined;
        } | undefined;
        config: {
            [key: string]: any;
        };
        data: {
            [key: string]: any;
        };
        legacyId: string | undefined;
        name: string | undefined;
        newExtensionId: any;
    }[];
    static fromModelObject(entries: ExtensionDataEntry[]): ExtensionDataList;
    findExtension(extensionId: string, ignoreVersion?: boolean, ignoreScope?: boolean): ExtensionDataEntry | undefined;
    findCoreExtension(extensionId: string): ExtensionDataEntry | undefined;
    remove(id: BitId): ExtensionDataList;
    /**
     * Filter extension marked to be removed with the special remove sign REMOVE_EXTENSION_SPECIAL_SIGN ("-")
     */
    filterRemovedExtensions(): ExtensionDataList;
    toConfigObject(): {};
    toConfigArray(): ConfigOnlyEntry[];
    clone(): ExtensionDataList;
    _filterLegacy(): ExtensionDataList;
    sortById(): ExtensionDataList;
    static fromConfigObject(obj?: {
        [extensionId: string]: any;
    }): ExtensionDataList;
    static fromArray(entries: ExtensionDataEntry[]): ExtensionDataList;
    /**
     * Merge a list of ExtensionDataList into one ExtensionDataList
     * In case of entry with the same id appear in more than one list
     * the former in the list will be taken
     * see unit tests for examples
     *
     * Make sure you extension ids are resolved before call this, otherwise you might get unexpected results
     * for example:
     * you might have 2 entries like: default-scope/my-extension and my-extension on the same time
     *
     * @static
     * @param {ExtensionDataList[]} list
     * @returns {ExtensionDataList}
     * @memberof ExtensionDataList
     */
    static mergeConfigs(list: ExtensionDataList[]): ExtensionDataList;
}
export declare function configEntryToDataEntry(extensionId: string, config: any): ExtensionDataEntry;
export declare function removeInternalConfigFields(config?: ExtensionConfig): ExtensionConfig | undefined;
export declare function removeInternalConfigFieldsWithMutation(config?: ExtensionConfig): void;
export {};
