"use strict";

function _chai() {
  const data = require("chai");
  _chai = function () {
    return data;
  };
  return data;
}
function _bitId() {
  const data = require("../../bit-id");
  _bitId = function () {
    return data;
  };
  return data;
}
function _extensionData() {
  const data = require("./extension-data");
  _extensionData = function () {
    return data;
  };
  return data;
}
describe('ExtensionDataList', () => {
  describe('merge lists', () => {
    let mergedAsObject;
    before(() => {
      const list1 = _extensionData().ExtensionDataList.fromConfigObject({
        'my-scope/ext1': {
          conf1: 'val2',
          conf4: 'val4'
        },
        'my-scope/ext4': {
          conf1: 'val1'
        },
        'my-scope/ext5': '-',
        'my-scope/ext6': {
          conf1: 'val1'
        }
      });
      const list2 = _extensionData().ExtensionDataList.fromConfigObject({
        'my-scope/ext1': {
          conf1: 'val2',
          conf2: 'val2'
        },
        'my-scope/ext3': {
          conf1: 'val1'
        },
        'my-scope/ext5': {
          conf1: 'val1'
        },
        'my-scope/ext6': '-'
      });
      const list3 = _extensionData().ExtensionDataList.fromConfigObject({
        'my-scope/ext1': {
          conf1: 'val1',
          conf3: 'val3'
        },
        'my-scope/ext2': {
          conf1: 'val1'
        }
      });
      const merged = _extensionData().ExtensionDataList.mergeConfigs([list1, list2, list3]);
      mergedAsObject = merged.toConfigObject();
    });
    it('should take the former occurrence of an extension', () => {
      (0, _chai().expect)(mergedAsObject['my-scope/ext1']).to.deep.equal({
        conf1: 'val2',
        conf4: 'val4'
      });
    });
    it('should handle merge for special remove sign', () => {
      (0, _chai().expect)(mergedAsObject['my-scope/ext5']).to.deep.equal('-');
      (0, _chai().expect)(mergedAsObject['my-scope/ext6']).to.deep.equal({
        conf1: 'val1'
      });
    });
    it('should take extensions from all lists', () => {
      (0, _chai().expect)(mergedAsObject['my-scope/ext2']).to.deep.equal({
        conf1: 'val1'
      });
      (0, _chai().expect)(mergedAsObject['my-scope/ext3']).to.deep.equal({
        conf1: 'val1'
      });
      (0, _chai().expect)(mergedAsObject['my-scope/ext4']).to.deep.equal({
        conf1: 'val1'
      });
    });
  });
  describe('sort lists', () => {
    let sorted;
    before(() => {
      const list = _extensionData().ExtensionDataList.fromConfigObject({
        'my-scope/ext3': {
          conf1: 'val1'
        },
        'my-scope/ext1': {
          conf1: 'val2',
          conf4: 'val4'
        },
        'my-scope/ext4': {
          conf1: 'val1'
        }
      });
      sorted = list.sortById();
    });
    it('should sort the list by ids', () => {
      (0, _chai().expect)(sorted[0].stringId).to.equal('my-scope/ext1');
      (0, _chai().expect)(sorted[1].stringId).to.equal('my-scope/ext3');
      (0, _chai().expect)(sorted[2].stringId).to.equal('my-scope/ext4');
    });
  });
  describe('filter removed', () => {
    let filtered;
    let filteredAsObject;
    before(() => {
      const list = _extensionData().ExtensionDataList.fromConfigObject({
        'my-scope/ext3': {
          conf1: 'val1'
        },
        'my-scope/ext1': {
          conf1: 'val2',
          conf4: 'val4'
        },
        'my-scope/ext4': '-'
      });
      filtered = list.filterRemovedExtensions();
      filteredAsObject = filtered.toConfigObject();
    });
    it('should sort the list by ids', () => {
      (0, _chai().expect)(filtered.length).to.equal(2);
      (0, _chai().expect)(filteredAsObject).to.not.have.property('my-scope/ext4');
    });
  });
  describe('to config array', () => {
    let configArr;
    before(() => {
      const configEntry = new (_extensionData().ExtensionDataEntry)(undefined, _bitId().BitId.parse('my-scope/ext1', true), undefined, {
        conf1: 'val1'
      });
      const dataEntry = new (_extensionData().ExtensionDataEntry)(undefined, _bitId().BitId.parse('my-scope/ext2', true), undefined, {}, {
        data1: 'val1'
      });
      const dataConfigEntry = new (_extensionData().ExtensionDataEntry)(undefined, _bitId().BitId.parse('my-scope/ext3', true), undefined, {
        conf3: 'val3'
      }, {
        data3: 'val3'
      });
      const list = _extensionData().ExtensionDataList.fromArray([configEntry, dataEntry, dataConfigEntry]);
      configArr = list.toConfigArray();
    });
    it('should not have entries with data only', () => {
      (0, _chai().expect)(configArr.length).to.equal(2);
    });
    it('should have entries with config only', () => {
      (0, _chai().expect)(configArr[0].id.toString()).to.equal('my-scope/ext1');
      (0, _chai().expect)(configArr[0].config).to.deep.equal({
        conf1: 'val1'
      });
    });
    it('should have entries with data and config but without the data', () => {
      (0, _chai().expect)(configArr[1].id.toString()).to.equal('my-scope/ext3');
      (0, _chai().expect)(configArr[1].config).to.deep.equal({
        conf3: 'val3'
      });
      (0, _chai().expect)(configArr[1].data).to.be.undefined;
    });
  });
});