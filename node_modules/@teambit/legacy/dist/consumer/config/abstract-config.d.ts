import { BitIds } from '../../bit-id';
import { PathLinux, PathOsBased, PathOsBasedAbsolute, PathOsBasedRelative } from '../../utils/path';
import { AbstractVinyl } from '../component/sources';
import { ExtensionDataList } from './extension-data';
export declare type EnvFile = {
    [key: string]: PathLinux;
};
export declare type AbstractConfigProps = {
    dependencies?: Record<string, any>;
    devDependencies?: Record<string, any>;
    lang?: string;
    bindingPrefix?: string;
    extensions?: ExtensionDataList;
};
/**
 * There are two Bit Config: WorkspaceConfig and ComponentConfig, both inherit this class.
 * The config data can be written in package.json inside "bit" property. And, can be written in
 * bit.json file. Also, it might be written in both, in which case, if there is any conflict, the
 * bit.json wins.
 */
export default class AbstractConfig {
    path: string;
    dependencies: {
        [key: string]: string;
    };
    devDependencies: {
        [key: string]: string;
    };
    lang: string;
    bindingPrefix: string;
    extensions: ExtensionDataList;
    writeToPackageJson: boolean;
    writeToBitJson: boolean;
    constructor(props: AbstractConfigProps);
    getDependencies(): BitIds;
    toPlainObject(): Record<string, any>;
    write({ workspaceDir, componentDir, }: {
        workspaceDir: PathOsBasedAbsolute;
        componentDir?: PathOsBasedRelative;
    }): Promise<string[]>;
    prepareToWrite({ workspaceDir, componentDir, }: {
        workspaceDir: PathOsBasedAbsolute;
        componentDir?: PathOsBasedRelative;
    }): Promise<AbstractVinyl[]>;
    toVinyl({ workspaceDir, componentDir, }: {
        workspaceDir: PathOsBasedAbsolute;
        componentDir?: PathOsBasedRelative;
    }): Promise<AbstractVinyl[]>;
    static composeBitJsonPath(bitPath: PathOsBased): PathOsBased;
    static composePackageJsonPath(bitPath: PathOsBased): PathOsBased;
    static pathHasBitJson(bitPath: string): Promise<boolean>;
    static pathHasPackageJson(bitPath: string): Promise<boolean>;
    static loadJsonFileIfExist(jsonFilePath: string): Promise<Record<string, any> | null | undefined>;
    static removeIfExist(bitPath: string): Promise<boolean>;
}
