"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadConsumer = void 0;
exports.loadConsumerIfExist = loadConsumerIfExist;
function path() {
  const data = _interopRequireWildcard(require("path"));
  path = function () {
    return data;
  };
  return data;
}
function _consumer() {
  const data = _interopRequireDefault(require("./consumer"));
  _consumer = function () {
    return data;
  };
  return data;
}
function _exceptions() {
  const data = require("./exceptions");
  _exceptions = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const loadConsumer = async function (currentPath = process.cwd(), newInstance = false) {
  if (newInstance || !loadConsumer.cache || !loadConsumer.cache[currentPath]) {
    const consumer = await _consumer().default.load(path().resolve(currentPath));
    if (!loadConsumer.cache) loadConsumer.cache = {};
    loadConsumer.cache[currentPath] = consumer;
  }
  return loadConsumer.cache[currentPath];
};
exports.loadConsumer = loadConsumer;
async function loadConsumerIfExist(currentPath = process.cwd(), newInstance = false) {
  try {
    return await loadConsumer(currentPath, newInstance);
  } catch (err) {
    if (err instanceof _exceptions().ConsumerNotFound) {
      return undefined;
    }
    throw err;
  }
}