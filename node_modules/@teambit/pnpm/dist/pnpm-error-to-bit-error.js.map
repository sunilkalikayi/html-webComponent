{"version":3,"names":["BitErrorWithRichMessage","BitError","constructor","message","richMessage","report","pnpmErrorToBitError","err","renderErrorMessage","code","startsWith","hint"],"sources":["pnpm-error-to-bit-error.ts"],"sourcesContent":["import { PnpmError } from '@pnpm/error';\nimport { BitError } from '@teambit/bit-error';\n\nexport class BitErrorWithRichMessage extends BitError {\n  private richMessage: string;\n  constructor(message: string, richMessage: string) {\n    super(message);\n    this.richMessage = richMessage;\n  }\n  public report() {\n    return this.richMessage;\n  }\n}\n\nexport function pnpmErrorToBitError(err: PnpmError): BitError {\n  return new BitErrorWithRichMessage(err.message, renderErrorMessage(err));\n}\n\nfunction renderErrorMessage(err: PnpmError): string {\n  if (err.code?.startsWith('ERR_PNPM_FETCH_')) {\n    // On fetching errors, pnpm adds information to the error object about the used auth headers.\n    // This information is safe to print as the tokens are obfuscated.\n    return `${err.message}\n\n${err.hint}`;\n  }\n  return err.message;\n}\n"],"mappings":";;;;;;;;;;;;;;;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEO,MAAMA,uBAAuB,SAASC,oBAAQ,CAAC;EAEpDC,WAAW,CAACC,OAAe,EAAEC,WAAmB,EAAE;IAChD,KAAK,CAACD,OAAO,CAAC;IAAC;IACf,IAAI,CAACC,WAAW,GAAGA,WAAW;EAChC;EACOC,MAAM,GAAG;IACd,OAAO,IAAI,CAACD,WAAW;EACzB;AACF;AAAC;AAEM,SAASE,mBAAmB,CAACC,GAAc,EAAY;EAC5D,OAAO,IAAIP,uBAAuB,CAACO,GAAG,CAACJ,OAAO,EAAEK,kBAAkB,CAACD,GAAG,CAAC,CAAC;AAC1E;AAEA,SAASC,kBAAkB,CAACD,GAAc,EAAU;EAAA;EAClD,iBAAIA,GAAG,CAACE,IAAI,sCAAR,UAAUC,UAAU,CAAC,iBAAiB,CAAC,EAAE;IAC3C;IACA;IACA,OAAQ,GAAEH,GAAG,CAACJ,OAAQ;AAC1B;AACA,EAAEI,GAAG,CAACI,IAAK,EAAC;EACV;EACA,OAAOJ,GAAG,CAACJ,OAAO;AACpB"}