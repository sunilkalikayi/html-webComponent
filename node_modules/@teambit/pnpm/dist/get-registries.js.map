{"version":3,"names":["getRegistries","config","registriesMap","Object","keys","registries","forEach","regName","uri","credentials","getCredentialsByURI","rawConfig","originalAuthConfig","getOriginalAuthConfigByUri","isEmpty","switchTrailingSlash","alwaysAuth","authHeaderValue","nerfed","toNerfDart","defnerf","registry","creds","getScopedCredentials","defaultCredentials","originalAuthType","originalAuthValue","scope","token","auth","username","password","Buffer","from","toString","endsWith","stripTrailingChar"],"sources":["get-registries.ts"],"sourcesContent":["import getCredentialsByURI from 'credentials-by-uri';\nimport { RegistriesMap } from '@teambit/dependency-resolver';\nimport { stripTrailingChar } from '@teambit/legacy/dist/utils';\nimport { Config } from '@pnpm/config';\nimport { isEmpty } from 'lodash';\nimport toNerfDart from 'nerf-dart';\n\ntype OriginalAuthConfig = {\n  originalAuthType: string;\n  originalAuthValue: string;\n};\n\nexport function getRegistries(config: Config): RegistriesMap {\n  const registriesMap: RegistriesMap = {};\n\n  Object.keys(config.registries).forEach((regName) => {\n    const uri = config.registries[regName];\n    let credentials = getCredentialsByURI(config.rawConfig, uri);\n    let originalAuthConfig = getOriginalAuthConfigByUri(config.rawConfig, uri);\n    if (isEmpty(credentials)) {\n      credentials = getCredentialsByURI(config.rawConfig, switchTrailingSlash(uri));\n      originalAuthConfig = getOriginalAuthConfigByUri(config.rawConfig, switchTrailingSlash(uri));\n    }\n    registriesMap[regName] = {\n      uri,\n      alwaysAuth: !!credentials.alwaysAuth,\n      authHeaderValue: credentials.authHeaderValue,\n      ...originalAuthConfig,\n    };\n  });\n  return registriesMap;\n}\n\n// based on https://github.com/pnpm/credentials-by-uri/blob/master/index.js\nfunction getOriginalAuthConfigByUri(config: Record<string, any>, uri: string): OriginalAuthConfig {\n  const nerfed = toNerfDart(uri);\n  const defnerf = toNerfDart(config.registry);\n\n  const creds = getScopedCredentials(nerfed, `${nerfed}:`, config);\n  if (nerfed !== defnerf) return creds;\n  const defaultCredentials = getScopedCredentials(nerfed, '', config);\n  return {\n    originalAuthType: creds.originalAuthType || defaultCredentials.originalAuthType,\n    originalAuthValue: creds.originalAuthValue || defaultCredentials.originalAuthValue,\n  };\n}\n\nfunction getScopedCredentials(nerfed: string, scope: string, config: Record<string, any>): OriginalAuthConfig {\n  const token = config[`${scope}_authToken`];\n  // Check for bearer token\n  if (token) {\n    return {\n      originalAuthType: `authToken`,\n      originalAuthValue: token,\n    };\n  }\n\n  const auth = config[`${scope}_auth`];\n\n  // Check for basic auth token\n  if (auth) {\n    return {\n      originalAuthType: `auth`,\n      originalAuthValue: auth,\n    };\n  }\n\n  // Check for username/password auth\n  let username;\n  let password;\n  if (config[`${scope}username`]) {\n    username = config[`${scope}username`];\n  }\n  if (config[`${scope}_password`]) {\n    if (scope === '') {\n      password = config[`${scope}_password`];\n    } else {\n      password = Buffer.from(config[`${scope}_password`], 'base64').toString('utf8');\n    }\n  }\n\n  if (username && password) {\n    return {\n      originalAuthType: `user-pass`,\n      originalAuthValue: `${username}:${password}`,\n    };\n  }\n\n  return {\n    originalAuthType: '',\n    originalAuthValue: '',\n  };\n}\n\nfunction switchTrailingSlash(uri: string): string {\n  if (!uri.endsWith('/')) {\n    return `${uri}/`;\n  }\n  return stripTrailingChar(uri, '/');\n}\n"],"mappings":";;;;;;;;;;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAAmC;AAAA;AAO5B,SAASA,aAAa,CAACC,MAAc,EAAiB;EAC3D,MAAMC,aAA4B,GAAG,CAAC,CAAC;EAEvCC,MAAM,CAACC,IAAI,CAACH,MAAM,CAACI,UAAU,CAAC,CAACC,OAAO,CAAEC,OAAO,IAAK;IAClD,MAAMC,GAAG,GAAGP,MAAM,CAACI,UAAU,CAACE,OAAO,CAAC;IACtC,IAAIE,WAAW,GAAG,IAAAC,2BAAmB,EAACT,MAAM,CAACU,SAAS,EAAEH,GAAG,CAAC;IAC5D,IAAII,kBAAkB,GAAGC,0BAA0B,CAACZ,MAAM,CAACU,SAAS,EAAEH,GAAG,CAAC;IAC1E,IAAI,IAAAM,iBAAO,EAACL,WAAW,CAAC,EAAE;MACxBA,WAAW,GAAG,IAAAC,2BAAmB,EAACT,MAAM,CAACU,SAAS,EAAEI,mBAAmB,CAACP,GAAG,CAAC,CAAC;MAC7EI,kBAAkB,GAAGC,0BAA0B,CAACZ,MAAM,CAACU,SAAS,EAAEI,mBAAmB,CAACP,GAAG,CAAC,CAAC;IAC7F;IACAN,aAAa,CAACK,OAAO,CAAC;MACpBC,GAAG;MACHQ,UAAU,EAAE,CAAC,CAACP,WAAW,CAACO,UAAU;MACpCC,eAAe,EAAER,WAAW,CAACQ;IAAe,GACzCL,kBAAkB,CACtB;EACH,CAAC,CAAC;EACF,OAAOV,aAAa;AACtB;;AAEA;AACA,SAASW,0BAA0B,CAACZ,MAA2B,EAAEO,GAAW,EAAsB;EAChG,MAAMU,MAAM,GAAG,IAAAC,mBAAU,EAACX,GAAG,CAAC;EAC9B,MAAMY,OAAO,GAAG,IAAAD,mBAAU,EAAClB,MAAM,CAACoB,QAAQ,CAAC;EAE3C,MAAMC,KAAK,GAAGC,oBAAoB,CAACL,MAAM,EAAG,GAAEA,MAAO,GAAE,EAAEjB,MAAM,CAAC;EAChE,IAAIiB,MAAM,KAAKE,OAAO,EAAE,OAAOE,KAAK;EACpC,MAAME,kBAAkB,GAAGD,oBAAoB,CAACL,MAAM,EAAE,EAAE,EAAEjB,MAAM,CAAC;EACnE,OAAO;IACLwB,gBAAgB,EAAEH,KAAK,CAACG,gBAAgB,IAAID,kBAAkB,CAACC,gBAAgB;IAC/EC,iBAAiB,EAAEJ,KAAK,CAACI,iBAAiB,IAAIF,kBAAkB,CAACE;EACnE,CAAC;AACH;AAEA,SAASH,oBAAoB,CAACL,MAAc,EAAES,KAAa,EAAE1B,MAA2B,EAAsB;EAC5G,MAAM2B,KAAK,GAAG3B,MAAM,CAAE,GAAE0B,KAAM,YAAW,CAAC;EAC1C;EACA,IAAIC,KAAK,EAAE;IACT,OAAO;MACLH,gBAAgB,EAAG,WAAU;MAC7BC,iBAAiB,EAAEE;IACrB,CAAC;EACH;EAEA,MAAMC,IAAI,GAAG5B,MAAM,CAAE,GAAE0B,KAAM,OAAM,CAAC;;EAEpC;EACA,IAAIE,IAAI,EAAE;IACR,OAAO;MACLJ,gBAAgB,EAAG,MAAK;MACxBC,iBAAiB,EAAEG;IACrB,CAAC;EACH;;EAEA;EACA,IAAIC,QAAQ;EACZ,IAAIC,QAAQ;EACZ,IAAI9B,MAAM,CAAE,GAAE0B,KAAM,UAAS,CAAC,EAAE;IAC9BG,QAAQ,GAAG7B,MAAM,CAAE,GAAE0B,KAAM,UAAS,CAAC;EACvC;EACA,IAAI1B,MAAM,CAAE,GAAE0B,KAAM,WAAU,CAAC,EAAE;IAC/B,IAAIA,KAAK,KAAK,EAAE,EAAE;MAChBI,QAAQ,GAAG9B,MAAM,CAAE,GAAE0B,KAAM,WAAU,CAAC;IACxC,CAAC,MAAM;MACLI,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAAChC,MAAM,CAAE,GAAE0B,KAAM,WAAU,CAAC,EAAE,QAAQ,CAAC,CAACO,QAAQ,CAAC,MAAM,CAAC;IAChF;EACF;EAEA,IAAIJ,QAAQ,IAAIC,QAAQ,EAAE;IACxB,OAAO;MACLN,gBAAgB,EAAG,WAAU;MAC7BC,iBAAiB,EAAG,GAAEI,QAAS,IAAGC,QAAS;IAC7C,CAAC;EACH;EAEA,OAAO;IACLN,gBAAgB,EAAE,EAAE;IACpBC,iBAAiB,EAAE;EACrB,CAAC;AACH;AAEA,SAASX,mBAAmB,CAACP,GAAW,EAAU;EAChD,IAAI,CAACA,GAAG,CAAC2B,QAAQ,CAAC,GAAG,CAAC,EAAE;IACtB,OAAQ,GAAE3B,GAAI,GAAE;EAClB;EACA,OAAO,IAAA4B,0BAAiB,EAAC5B,GAAG,EAAE,GAAG,CAAC;AACpC"}