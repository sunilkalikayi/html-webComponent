import { DependencyResolverMain } from '@teambit/dependency-resolver';
import { ComponentMap } from '@teambit/component';
/**
 * All components are copied to a temporary folder (`<workspace-root>/.bit_components`).
 * Each of the copies gets a `package.json` generated, where the component dependencies
 * from the workspace are declared using the `file:` protocol.
 * Every workspace component is then referenced from the `node_modules/<pkgname>` directory (using the `file:` protocol).
 * The peer dependencies of the components are added as runtime dependencies of `node_modules/<pkgname>`.
 *
 * This way Yarn will install each workspace component in isolation with its component dependencies and peer dependencies
 * inside `node_modules/<pkgName>/node_modules`.
 */
export declare function createRootComponentsDir({ depResolver, rootDir, componentDirectoryMap, }: {
    depResolver: DependencyResolverMain;
    rootDir: string;
    componentDirectoryMap: ComponentMap<string>;
}): Promise<Record<string, object>>;
