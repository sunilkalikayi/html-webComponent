/// <reference types="node" />
/// <reference types="node" />
import { Configuration, Ident, httpUtils } from '@yarnpkg/core';
export declare enum AuthType {
    NO_AUTH = 0,
    BEST_EFFORT = 1,
    CONFIGURATION = 2,
    ALWAYS_AUTH = 3
}
declare type RegistryOptions = {
    ident: Ident;
    registry?: string;
} | {
    ident?: Ident;
    registry: string;
};
export declare type Options = httpUtils.Options & RegistryOptions & {
    authType?: AuthType;
    otp?: string;
};
/**
 * Consumes all 401 Unauthorized errors and reports them as `AUTHENTICATION_INVALID`.
 *
 * It doesn't handle 403 Forbidden, as the npm registry uses it when the user attempts
 * a prohibited action, such as publishing a package with a similar name to an existing package.
 */
export declare function handleInvalidAuthenticationError(error: any, { attemptedAs, registry, headers, configuration }: {
    attemptedAs?: string;
    registry: string;
    headers: {
        [key: string]: string;
    } | undefined;
    configuration: Configuration;
}): Promise<void>;
export declare function customPackageError(error: httpUtils.RequestError): "Package not found" | null;
export declare function getIdentUrl(ident: Ident): string;
export declare function get(path: string, { configuration, headers, ident, authType, registry, ...rest }: Options): Promise<any>;
export declare function post(path: string, body: httpUtils.Body, { attemptedAs, configuration, headers, ident, authType, registry, otp, ...rest }: Options & {
    attemptedAs?: string;
}): Promise<Buffer>;
export declare function put(path: string, body: httpUtils.Body, { attemptedAs, configuration, headers, ident, authType, registry, otp, ...rest }: Options & {
    attemptedAs?: string;
}): Promise<Buffer>;
export declare function del(path: string, { attemptedAs, configuration, headers, ident, authType, registry, otp, ...rest }: Options & {
    attemptedAs?: string;
}): Promise<Buffer>;
export {};
