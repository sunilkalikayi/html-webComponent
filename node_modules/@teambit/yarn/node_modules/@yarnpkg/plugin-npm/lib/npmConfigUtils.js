"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAuthConfiguration = exports.getScopeConfiguration = exports.getRegistryConfiguration = exports.getDefaultRegistry = exports.getScopeRegistry = exports.getPublishRegistry = exports.getAuditRegistry = exports.normalizeRegistry = exports.RegistryType = void 0;
var RegistryType;
(function (RegistryType) {
    RegistryType["AUDIT_REGISTRY"] = "npmAuditRegistry";
    RegistryType["FETCH_REGISTRY"] = "npmRegistryServer";
    RegistryType["PUBLISH_REGISTRY"] = "npmPublishRegistry";
})(RegistryType = exports.RegistryType || (exports.RegistryType = {}));
function normalizeRegistry(registry) {
    return registry.replace(/\/$/, ``);
}
exports.normalizeRegistry = normalizeRegistry;
// TODO: Remove the fallback on publishConfig
function getAuditRegistry(manifest, { configuration }) {
    const defaultRegistry = configuration.get(RegistryType.AUDIT_REGISTRY);
    if (defaultRegistry !== null)
        return normalizeRegistry(defaultRegistry);
    return getPublishRegistry(manifest, { configuration });
}
exports.getAuditRegistry = getAuditRegistry;
function getPublishRegistry(manifest, { configuration }) {
    var _a;
    if ((_a = manifest.publishConfig) === null || _a === void 0 ? void 0 : _a.registry)
        return normalizeRegistry(manifest.publishConfig.registry);
    if (manifest.name)
        return getScopeRegistry(manifest.name.scope, { configuration, type: RegistryType.PUBLISH_REGISTRY });
    return getDefaultRegistry({ configuration, type: RegistryType.PUBLISH_REGISTRY });
}
exports.getPublishRegistry = getPublishRegistry;
function getScopeRegistry(scope, { configuration, type = RegistryType.FETCH_REGISTRY }) {
    const scopeConfiguration = getScopeConfiguration(scope, { configuration });
    if (scopeConfiguration === null)
        return getDefaultRegistry({ configuration, type });
    const scopeRegistry = scopeConfiguration.get(type);
    if (scopeRegistry === null)
        return getDefaultRegistry({ configuration, type });
    return normalizeRegistry(scopeRegistry);
}
exports.getScopeRegistry = getScopeRegistry;
function getDefaultRegistry({ configuration, type = RegistryType.FETCH_REGISTRY }) {
    const defaultRegistry = configuration.get(type);
    if (defaultRegistry !== null)
        return normalizeRegistry(defaultRegistry);
    return normalizeRegistry(configuration.get(RegistryType.FETCH_REGISTRY));
}
exports.getDefaultRegistry = getDefaultRegistry;
function getRegistryConfiguration(registry, { configuration }) {
    const registryConfigurations = configuration.get(`npmRegistries`);
    const normalizedRegistry = normalizeRegistry(registry);
    const exactEntry = registryConfigurations.get(normalizedRegistry);
    if (typeof exactEntry !== `undefined`)
        return exactEntry;
    const noProtocolEntry = registryConfigurations.get(normalizedRegistry.replace(/^[a-z]+:/, ``));
    if (typeof noProtocolEntry !== `undefined`)
        return noProtocolEntry;
    return null;
}
exports.getRegistryConfiguration = getRegistryConfiguration;
function getScopeConfiguration(scope, { configuration }) {
    if (scope === null)
        return null;
    const scopeConfigurations = configuration.get(`npmScopes`);
    const scopeConfiguration = scopeConfigurations.get(scope);
    if (!scopeConfiguration)
        return null;
    return scopeConfiguration;
}
exports.getScopeConfiguration = getScopeConfiguration;
function getAuthConfiguration(registry, { configuration, ident }) {
    const scopeConfiguration = ident && getScopeConfiguration(ident.scope, { configuration });
    if ((scopeConfiguration === null || scopeConfiguration === void 0 ? void 0 : scopeConfiguration.get(`npmAuthIdent`)) || (scopeConfiguration === null || scopeConfiguration === void 0 ? void 0 : scopeConfiguration.get(`npmAuthToken`)))
        return scopeConfiguration;
    const registryConfiguration = getRegistryConfiguration(registry, { configuration });
    return registryConfiguration || configuration;
}
exports.getAuthConfiguration = getAuthConfiguration;
