"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NpmHttpFetcher = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@yarnpkg/core");
const semver_1 = tslib_1.__importDefault(require("semver"));
const constants_1 = require("./constants");
const npmHttpUtils = tslib_1.__importStar(require("./npmHttpUtils"));
class NpmHttpFetcher {
    supports(locator, opts) {
        if (!locator.reference.startsWith(constants_1.PROTOCOL))
            return false;
        const { selector, params } = core_1.structUtils.parseRange(locator.reference);
        if (!semver_1.default.valid(selector))
            return false;
        if (params === null || typeof params.__archiveUrl !== `string`)
            return false;
        return true;
    }
    getLocalPath(locator, opts) {
        return null;
    }
    async fetch(locator, opts) {
        const expectedChecksum = opts.checksums.get(locator.locatorHash) || null;
        const [packageFs, releaseFs, checksum] = await opts.cache.fetchPackageFromCache(locator, expectedChecksum, {
            onHit: () => opts.report.reportCacheHit(locator),
            onMiss: () => opts.report.reportCacheMiss(locator, `${core_1.structUtils.prettyLocator(opts.project.configuration, locator)} can't be found in the cache and will be fetched from the remote server`),
            loader: () => this.fetchFromNetwork(locator, opts),
            skipIntegrityCheck: opts.skipIntegrityCheck,
            ...opts.cacheOptions,
        });
        return {
            packageFs,
            releaseFs,
            prefixPath: core_1.structUtils.getIdentVendorPath(locator),
            checksum,
        };
    }
    async fetchFromNetwork(locator, opts) {
        const { params } = core_1.structUtils.parseRange(locator.reference);
        if (params === null || typeof params.__archiveUrl !== `string`)
            throw new Error(`Assertion failed: The archiveUrl querystring parameter should have been available`);
        const sourceBuffer = await npmHttpUtils.get(params.__archiveUrl, {
            configuration: opts.project.configuration,
            ident: locator,
        });
        return await core_1.tgzUtils.convertToZip(sourceBuffer, {
            compressionLevel: opts.project.configuration.get(`compressionLevel`),
            prefixPath: core_1.structUtils.getIdentVendorPath(locator),
            stripComponents: 1,
        });
    }
}
exports.NpmHttpFetcher = NpmHttpFetcher;
