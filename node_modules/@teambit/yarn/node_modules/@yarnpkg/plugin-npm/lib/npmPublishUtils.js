"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGitHead = exports.makePublishBody = void 0;
const tslib_1 = require("tslib");
const core_1 = require("@yarnpkg/core");
const core_2 = require("@yarnpkg/core");
const plugin_pack_1 = require("@yarnpkg/plugin-pack");
const crypto_1 = require("crypto");
const ssri_1 = tslib_1.__importDefault(require("ssri"));
const url_1 = require("url");
const npmConfigUtils_1 = require("./npmConfigUtils");
async function makePublishBody(workspace, buffer, { access, tag, registry, gitHead }) {
    const configuration = workspace.project.configuration;
    const ident = workspace.manifest.name;
    const version = workspace.manifest.version;
    const name = core_2.structUtils.stringifyIdent(ident);
    const shasum = (0, crypto_1.createHash)(`sha1`).update(buffer).digest(`hex`);
    const integrity = ssri_1.default.fromData(buffer).toString();
    if (typeof access === `undefined`) {
        if (workspace.manifest.publishConfig && typeof workspace.manifest.publishConfig.access === `string`) {
            access = workspace.manifest.publishConfig.access;
        }
        else if (configuration.get(`npmPublishAccess`) !== null) {
            access = configuration.get(`npmPublishAccess`);
        }
        else if (ident.scope) {
            access = `restricted`;
        }
        else {
            access = `public`;
        }
    }
    const raw = await plugin_pack_1.packUtils.genPackageManifest(workspace);
    // This matches Lerna's logic:
    // https://github.com/evocateur/libnpmpublish/blob/latest/publish.js#L142
    // While the npm registry ignores the provided tarball URL, it's used by
    // other registries such as verdaccio.
    const tarballName = `${name}-${version}.tgz`;
    const tarballURL = new url_1.URL(`${(0, npmConfigUtils_1.normalizeRegistry)(registry)}/${name}/-/${tarballName}`);
    return {
        _id: name,
        _attachments: {
            [tarballName]: {
                [`content_type`]: `application/octet-stream`,
                data: buffer.toString(`base64`),
                length: buffer.length,
            },
        },
        name,
        access,
        [`dist-tags`]: {
            [tag]: version,
        },
        versions: {
            [version]: {
                ...raw,
                _id: `${name}@${version}`,
                name,
                version,
                gitHead,
                dist: {
                    shasum,
                    integrity,
                    // the npm registry requires a tarball path, but it seems useless ðŸ¤·
                    tarball: tarballURL.toString(),
                },
            },
        },
    };
}
exports.makePublishBody = makePublishBody;
async function getGitHead(workingDir) {
    try {
        const { stdout } = await core_1.execUtils.execvp(`git`, [`rev-parse`, `--revs-only`, `HEAD`], { cwd: workingDir });
        if (stdout.trim() === ``)
            return undefined;
        return stdout.trim();
    }
    catch {
        return undefined;
    }
}
exports.getGitHead = getGitHead;
