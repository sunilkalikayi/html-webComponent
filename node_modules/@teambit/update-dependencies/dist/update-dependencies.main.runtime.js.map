{"version":3,"names":["UpdateDependenciesMain","constructor","scope","logger","builder","dependencyResolver","onPostUpdateDependenciesSlot","snapping","lanes","exporter","updateDependenciesVersions","depsUpdateItemsRaw","updateDepsOptions","validateScopeIsNew","setLaneObject","importAllMissing","depsUpdateItems","parseDevUpdatesItems","updateFutureVersion","updateAllDeps","addLogToComponents","simulation","_addFlattenedDependenciesToComponents","legacyScope","legacyComponents","addBuildStatus","addComponentsToScope","updateComponents","mapSeries","components","component","loadComponentsAspect","builderDataMap","pipeResults","tagListener","throwOnError","seedersOnly","legacyBuildResults","builderDataMapToLegacyOnTagResults","_updateComponentsByTagResult","publishedPackages","_getPublishedPackages","pipeWithError","find","pipe","hasErrors","buildStatus","BuildStatus","Failed","Succeed","saveDataIntoLocalScope","export","triggerOnPostUpdateDependencies","error","getErrorMessageFormatted","map","d","state","_consumer","registerOnPostUpdateDependencies","fn","register","lane","laneId","LaneId","parse","laneObj","importLaneObject","setCurrentLaneId","skipNewScopeValidation","ids","listIds","length","Error","name","Promise","all","values","catch","err","componentIds","ComponentID","fromString","componentId","idsToImport","dependenciesIds","item","dependencies","dep","id","changeVersion","LATEST","push","flatten","import","useCache","_addCompFromScopeToObjects","depUpdateItem","legacyComp","getFromConsumerComponent","forEach","c","Pending","log","username","email","message","date","Date","now","toString","currentBitIds","_legacy","updateDependenciesVersionsOfComponent","updateDependencyResolver","setStatusLine","depUpdateItemRaw","load","ComponentNotFound","getDependencyWithExactVersion","versionToTag","depStr","compId","isHash","version","range","undefined","exactVersion","getExactVersionBySemverRange","modelComponent","getModelComponent","tag","releaseType","getValidVersionOrReleaseType","getVersionToAdd","getSnapToAdd","dependenciesList","extractDepsFromLegacy","serialize","extId","DependencyResolverAspect","data","existingExtension","extensions","findExtension","Object","assign","extension","ExtensionDataEntry","depsBitIds","updatedIds","BitIds","fromArray","componentIdStr","legacyComponent","deps","get","devDependencies","getDependencies","updatedBitId","searchWithoutVersion","depIdStr","packageName","findDependency","getPackageName","debug","ext","extensionId","_enrichComp","objects","persist","shouldExport","exportMany","idsWithFutureScope","laneObject","allVersions","provider","cli","loggerMain","_","createLogger","UpdateDependenciesAspect","updateDependenciesMain","UpdateDependenciesCmd","MainRuntime","CLIAspect","ScopeAspect","LoggerAspect","BuilderAspect","SnappingAspect","LanesAspect","ExportAspect","Slot","withType","addRuntime"],"sources":["update-dependencies.main.runtime.ts"],"sourcesContent":["import mapSeries from 'p-map-series';\nimport { SlotRegistry, Slot } from '@teambit/harmony';\nimport { flatten } from 'lodash';\nimport { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport { LoggerAspect, LoggerMain, Logger } from '@teambit/logger';\nimport { ScopeAspect, ScopeMain, ComponentNotFound } from '@teambit/scope';\nimport { BuilderAspect, BuilderMain } from '@teambit/builder';\nimport { Component, ComponentID } from '@teambit/component';\nimport { SnappingAspect, SnappingMain } from '@teambit/snapping';\nimport { isHash } from '@teambit/component-version';\nimport ConsumerComponent from '@teambit/legacy/dist/consumer/component';\nimport { BuildStatus, LATEST } from '@teambit/legacy/dist/constants';\nimport { BitIds } from '@teambit/legacy/dist/bit-id';\nimport { LaneId } from '@teambit/lane-id';\nimport { BitId } from '@teambit/legacy-bit-id';\nimport { getValidVersionOrReleaseType } from '@teambit/legacy/dist/utils/semver-helper';\nimport { DependencyResolverAspect, DependencyResolverMain } from '@teambit/dependency-resolver';\nimport { ExportAspect, ExportMain } from '@teambit/export';\nimport { LanesAspect, Lane, LanesMain } from '@teambit/lanes';\nimport { ExtensionDataEntry } from '@teambit/legacy/dist/consumer/config';\nimport { UpdateDependenciesCmd } from './update-dependencies.cmd';\nimport { UpdateDependenciesAspect } from './update-dependencies.aspect';\n\nexport type UpdateDepsOptions = {\n  tag?: boolean;\n  simulation?: boolean;\n  output?: string;\n  message?: string;\n  username?: string;\n  email?: string;\n  push?: boolean;\n  lane?: string;\n  skipNewScopeValidation?: boolean;\n};\n\nexport type DepUpdateItemRaw = {\n  componentId: string; // ids always have scope, so it's safe to parse them from string\n  dependencies: string[]; // e.g. [@teambit/compiler@~1.0.0, @teambit/tester@^1.0.0]\n  versionToTag?: string; // specific version or semver. e.g. '1.0.0', 'minor',\n};\n\nexport type DepUpdateItem = {\n  component: Component;\n  dependencies: ComponentID[];\n  versionToTag?: string;\n};\n\nexport type UpdateDepsResult = {\n  depsUpdateItems: DepUpdateItem[];\n  publishedPackages: string[];\n  error: string | null;\n};\n\ntype OnPostUpdateDependencies = (components: Component[]) => Promise<void>;\ntype OnPostUpdateDependenciesSlot = SlotRegistry<OnPostUpdateDependencies>;\n\nexport class UpdateDependenciesMain {\n  private depsUpdateItems: DepUpdateItem[];\n  private updateDepsOptions: UpdateDepsOptions;\n  private laneObj?: Lane;\n  constructor(\n    private scope: ScopeMain,\n    private logger: Logger,\n    private builder: BuilderMain,\n    private dependencyResolver: DependencyResolverMain,\n    private onPostUpdateDependenciesSlot: OnPostUpdateDependenciesSlot,\n    private snapping: SnappingMain,\n    private lanes: LanesMain,\n    private exporter: ExportMain\n  ) {}\n\n  /**\n   * we assume this is running from a new bare scope. so we import everything and then start working.\n   * we don't want this to be running from the original scope (like bit-sign). this command tags or\n   * snaps the results, a process that takes some time due to the build pipeline. if we start the\n   * tag on the original scope, build and then save the tag to the filesystem, we might get another\n   * tag during the process and our tag could override it.\n   */\n  async updateDependenciesVersions(\n    depsUpdateItemsRaw: DepUpdateItemRaw[],\n    updateDepsOptions: UpdateDepsOptions\n  ): Promise<UpdateDepsResult> {\n    this.updateDepsOptions = updateDepsOptions;\n    await this.validateScopeIsNew();\n    await this.setLaneObject();\n    await this.importAllMissing(depsUpdateItemsRaw);\n    this.depsUpdateItems = await this.parseDevUpdatesItems(depsUpdateItemsRaw);\n    await this.updateFutureVersion();\n    await this.updateAllDeps();\n    this.addLogToComponents();\n    if (!updateDepsOptions.simulation) {\n      await this.snapping._addFlattenedDependenciesToComponents(this.scope.legacyScope, this.legacyComponents);\n    }\n    this.addBuildStatus();\n    await this.addComponentsToScope();\n    await this.updateComponents();\n    await mapSeries(this.components, (component) => this.scope.loadComponentsAspect(component));\n    const { builderDataMap, pipeResults } = await this.builder.tagListener(\n      this.components,\n      { throwOnError: true }, // we might change it later to not throw.\n      { seedersOnly: true }\n    );\n    const legacyBuildResults = this.scope.builderDataMapToLegacyOnTagResults(builderDataMap);\n    this.snapping._updateComponentsByTagResult(this.legacyComponents, legacyBuildResults);\n    const publishedPackages = this.snapping._getPublishedPackages(this.legacyComponents);\n    const pipeWithError = pipeResults.find((pipe) => pipe.hasErrors());\n    const buildStatus = pipeWithError ? BuildStatus.Failed : BuildStatus.Succeed;\n    await this.saveDataIntoLocalScope(buildStatus);\n    await this.export();\n    await this.triggerOnPostUpdateDependencies();\n\n    return {\n      depsUpdateItems: this.depsUpdateItems,\n      publishedPackages,\n      error: pipeWithError ? pipeWithError.getErrorMessageFormatted() : null,\n    };\n  }\n\n  get legacyComponents(): ConsumerComponent[] {\n    return this.depsUpdateItems.map((d) => d.component.state._consumer);\n  }\n  get components(): Component[] {\n    return this.depsUpdateItems.map((d) => d.component);\n  }\n\n  registerOnPostUpdateDependencies(fn: OnPostUpdateDependencies) {\n    this.onPostUpdateDependenciesSlot.register(fn);\n  }\n\n  private async setLaneObject() {\n    if (this.updateDepsOptions.lane) {\n      const laneId = LaneId.parse(this.updateDepsOptions.lane);\n      this.laneObj = await this.lanes.importLaneObject(laneId);\n      // this is critical. otherwise, later on, when loading aspects and isolating capsules, we'll try to fetch dists\n      // from the original scope instead of the lane-scope.\n      this.scope.legacyScope.setCurrentLaneId(laneId);\n    }\n  }\n\n  private async validateScopeIsNew() {\n    if (this.updateDepsOptions.skipNewScopeValidation) {\n      return;\n    }\n    const ids = await this.scope.listIds();\n    if (ids.length) {\n      // it means this scope is a real remote scope with components, not just cache\n      throw new Error(`unable to run update-dependencies command on an existing scope \"${this.scope.name}\".\nplease create a new scope (bit init --bare) and run it from there.\nto bypass this error, use --skip-new-scope-validation flag (not recommended. it could corrupt the components irreversibly)`);\n    }\n  }\n\n  private async triggerOnPostUpdateDependencies() {\n    await Promise.all(this.onPostUpdateDependenciesSlot.values().map((fn) => fn(this.components))).catch((err) =>\n      this.logger.error('got an error during on-post-updates hook', err)\n    );\n  }\n\n  private async importAllMissing(depsUpdateItemsRaw: DepUpdateItemRaw[]) {\n    const componentIds = depsUpdateItemsRaw.map((d) => ComponentID.fromString(d.componentId));\n    const idsToImport = componentIds;\n    if (!this.updateDepsOptions.simulation) {\n      const dependenciesIds = depsUpdateItemsRaw.map((item) =>\n        item.dependencies.map((dep) => ComponentID.fromString(dep)).map((id) => id.changeVersion(LATEST))\n      );\n      idsToImport.push(...flatten(dependenciesIds));\n    }\n    // do not use cache. for dependencies we must fetch the latest ModelComponent from the remote\n    // in order to match the semver later.\n    await this.scope.import(idsToImport, { useCache: false, lane: this.laneObj });\n  }\n\n  private async addComponentsToScope() {\n    await mapSeries(this.legacyComponents, (component) =>\n      this.snapping._addCompFromScopeToObjects(component, this.laneObj || null)\n    );\n  }\n\n  private async updateComponents() {\n    await mapSeries(this.depsUpdateItems, async (depUpdateItem) => {\n      const legacyComp: ConsumerComponent = depUpdateItem.component.state._consumer;\n      depUpdateItem.component = await this.scope.getFromConsumerComponent(legacyComp);\n    });\n  }\n\n  private addBuildStatus() {\n    this.legacyComponents.forEach((c) => {\n      c.buildStatus = BuildStatus.Pending;\n    });\n  }\n\n  private addLogToComponents() {\n    this.legacyComponents.forEach((component) => {\n      component.log = {\n        username: this.updateDepsOptions.username || 'ci',\n        email: this.updateDepsOptions.email || 'ci@bit.dev',\n        message: this.updateDepsOptions.message || 'update-dependencies',\n        date: Date.now().toString(),\n      };\n    });\n  }\n\n  private async updateAllDeps() {\n    const components = this.depsUpdateItems.map((d) => d.component);\n    // current bit ids are needed because we might update multiple components that are depend on\n    // each other. in which case, we want the dependency version to be the same as the currently\n    // tagged/snapped component.\n    const currentBitIds = components.map((c) => c.id._legacy);\n    await mapSeries(this.depsUpdateItems, async ({ component, dependencies }) => {\n      await this.updateDependenciesVersionsOfComponent(component, dependencies, currentBitIds);\n      await this.updateDependencyResolver(component);\n    });\n  }\n\n  private async parseDevUpdatesItems(depsUpdateItemsRaw: DepUpdateItemRaw[]): Promise<DepUpdateItem[]> {\n    this.logger.setStatusLine(`loading ${depsUpdateItemsRaw.length} components and their aspects...`);\n    return mapSeries(depsUpdateItemsRaw, async (depUpdateItemRaw) => {\n      const componentId = ComponentID.fromString(depUpdateItemRaw.componentId);\n      const component = await this.scope.load(componentId);\n      if (!component) throw new ComponentNotFound(componentId);\n      const dependencies = await Promise.all(\n        depUpdateItemRaw.dependencies.map((dep) => this.getDependencyWithExactVersion(dep))\n      );\n      return { component, dependencies, versionToTag: depUpdateItemRaw.versionToTag };\n    });\n  }\n\n  private async getDependencyWithExactVersion(depStr: string): Promise<ComponentID> {\n    const compId = ComponentID.fromString(depStr);\n    if (this.updateDepsOptions.simulation) {\n      // for simulation, we don't have the objects of the dependencies, so don't try to find the\n      // exact version, expect the entered version to be okay.\n      return compId;\n    }\n    if (isHash(compId.version)) {\n      return compId;\n    }\n    const range = compId.version || '*'; // if not version specified, assume the latest\n    const id = compId.changeVersion(undefined);\n    const exactVersion = await this.scope.getExactVersionBySemverRange(id, range);\n    if (!exactVersion) {\n      throw new Error(`unable to find a version that satisfies \"${range}\" of \"${depStr}\"`);\n    }\n    return compId.changeVersion(exactVersion);\n  }\n\n  private async updateFutureVersion() {\n    this.logger.setStatusLine(`updateFutureVersion...`);\n    await mapSeries(this.depsUpdateItems, async (depUpdateItem) => {\n      const legacyComp: ConsumerComponent = depUpdateItem.component.state._consumer;\n      const modelComponent = await this.scope.legacyScope.getModelComponent(legacyComp.id);\n      if (this.updateDepsOptions.tag) {\n        const { releaseType, exactVersion } = getValidVersionOrReleaseType(depUpdateItem.versionToTag || 'patch');\n        legacyComp.version = modelComponent.getVersionToAdd(releaseType, exactVersion);\n      } else {\n        // snap is the default\n        legacyComp.version = modelComponent.getSnapToAdd();\n      }\n    });\n  }\n\n  private async updateDependencyResolver(component: Component) {\n    const dependenciesList = await this.dependencyResolver.extractDepsFromLegacy(component);\n    const dependencies = dependenciesList.serialize();\n    const extId = DependencyResolverAspect.id;\n    const data = { dependencies };\n    const existingExtension = component.state._consumer.extensions.findExtension(extId);\n    if (existingExtension) {\n      // Only merge top level of extension data\n      Object.assign(existingExtension.data, data);\n      return;\n    }\n    const extension = new ExtensionDataEntry(undefined, undefined, extId, undefined, data);\n    component.state._consumer.extensions.push(extension);\n  }\n\n  private async updateDependenciesVersionsOfComponent(\n    component: Component,\n    dependencies: ComponentID[],\n    currentBitIds: BitId[]\n  ) {\n    const depsBitIds = dependencies.map((d) => d._legacy);\n    const updatedIds = BitIds.fromArray([...currentBitIds, ...depsBitIds]);\n    const componentIdStr = component.id.toString();\n    const legacyComponent: ConsumerComponent = component.state._consumer;\n    const deps = [...legacyComponent.dependencies.get(), ...legacyComponent.devDependencies.get()];\n    const dependenciesList = await this.dependencyResolver.getDependencies(component);\n    deps.forEach((dep) => {\n      const updatedBitId = updatedIds.searchWithoutVersion(dep.id);\n      if (updatedBitId) {\n        const depIdStr = dep.id.toString();\n        const packageName = dependenciesList.findDependency(depIdStr)?.getPackageName?.();\n        if (!packageName) {\n          throw new Error(\n            `unable to find the package-name of \"${depIdStr}\" dependency inside the dependency-resolver data of \"${componentIdStr}\"`\n          );\n        }\n        this.logger.debug(`updating \"${componentIdStr}\", dependency ${depIdStr} to version ${updatedBitId.version}}`);\n        dep.id = updatedBitId;\n        dep.packageName = packageName;\n      }\n    });\n    legacyComponent.extensions.forEach((ext) => {\n      if (!ext.extensionId) return;\n      const updatedBitId = updatedIds.searchWithoutVersion(ext.extensionId);\n      if (updatedBitId) {\n        this.logger.debug(\n          `updating \"${componentIdStr}\", extension ${ext.extensionId.toString()} to version ${updatedBitId.version}}`\n        );\n        ext.extensionId = updatedBitId;\n      }\n    });\n  }\n\n  private async saveDataIntoLocalScope(buildStatus: BuildStatus) {\n    await mapSeries(this.legacyComponents, async (component) => {\n      component.buildStatus = buildStatus;\n      await this.snapping._enrichComp(component);\n    });\n    await this.scope.legacyScope.objects.persist();\n  }\n\n  private async export() {\n    const shouldExport = this.updateDepsOptions.push;\n    if (!shouldExport) return;\n    const ids = BitIds.fromArray(this.legacyComponents.map((c) => c.id));\n    await this.exporter.exportMany({\n      scope: this.scope.legacyScope,\n      ids,\n      idsWithFutureScope: ids,\n      laneObject: this.laneObj,\n      allVersions: false,\n    });\n  }\n\n  static runtime = MainRuntime;\n\n  static dependencies = [\n    CLIAspect,\n    ScopeAspect,\n    LoggerAspect,\n    BuilderAspect,\n    DependencyResolverAspect,\n    SnappingAspect,\n    LanesAspect,\n    ExportAspect,\n  ];\n\n  static slots = [Slot.withType<OnPostUpdateDependenciesSlot>()];\n\n  static async provider(\n    [cli, scope, loggerMain, builder, dependencyResolver, snapping, lanes, exporter]: [\n      CLIMain,\n      ScopeMain,\n      LoggerMain,\n      BuilderMain,\n      DependencyResolverMain,\n      SnappingMain,\n      LanesMain,\n      ExportMain\n    ],\n    _,\n    [onPostUpdateDependenciesSlot]: [OnPostUpdateDependenciesSlot]\n  ) {\n    const logger = loggerMain.createLogger(UpdateDependenciesAspect.id);\n    const updateDependenciesMain = new UpdateDependenciesMain(\n      scope,\n      logger,\n      builder,\n      dependencyResolver,\n      onPostUpdateDependenciesSlot,\n      snapping,\n      lanes,\n      exporter\n    );\n    cli.register(new UpdateDependenciesCmd(updateDependenciesMain, scope, logger));\n    return updateDependenciesMain;\n  }\n}\n\nUpdateDependenciesAspect.addRuntime(UpdateDependenciesMain);\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAmCO,MAAMA,sBAAsB,CAAC;EAIlCC,WAAW,CACDC,KAAgB,EAChBC,MAAc,EACdC,OAAoB,EACpBC,kBAA0C,EAC1CC,4BAA0D,EAC1DC,QAAsB,EACtBC,KAAgB,EAChBC,QAAoB,EAC5B;IAAA,KARQP,KAAgB,GAAhBA,KAAgB;IAAA,KAChBC,MAAc,GAAdA,MAAc;IAAA,KACdC,OAAoB,GAApBA,OAAoB;IAAA,KACpBC,kBAA0C,GAA1CA,kBAA0C;IAAA,KAC1CC,4BAA0D,GAA1DA,4BAA0D;IAAA,KAC1DC,QAAsB,GAAtBA,QAAsB;IAAA,KACtBC,KAAgB,GAAhBA,KAAgB;IAAA,KAChBC,QAAoB,GAApBA,QAAoB;IAAA;IAAA;IAAA;EAC3B;;EAEH;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAMC,0BAA0B,CAC9BC,kBAAsC,EACtCC,iBAAoC,EACT;IAC3B,IAAI,CAACA,iBAAiB,GAAGA,iBAAiB;IAC1C,MAAM,IAAI,CAACC,kBAAkB,EAAE;IAC/B,MAAM,IAAI,CAACC,aAAa,EAAE;IAC1B,MAAM,IAAI,CAACC,gBAAgB,CAACJ,kBAAkB,CAAC;IAC/C,IAAI,CAACK,eAAe,GAAG,MAAM,IAAI,CAACC,oBAAoB,CAACN,kBAAkB,CAAC;IAC1E,MAAM,IAAI,CAACO,mBAAmB,EAAE;IAChC,MAAM,IAAI,CAACC,aAAa,EAAE;IAC1B,IAAI,CAACC,kBAAkB,EAAE;IACzB,IAAI,CAACR,iBAAiB,CAACS,UAAU,EAAE;MACjC,MAAM,IAAI,CAACd,QAAQ,CAACe,qCAAqC,CAAC,IAAI,CAACpB,KAAK,CAACqB,WAAW,EAAE,IAAI,CAACC,gBAAgB,CAAC;IAC1G;IACA,IAAI,CAACC,cAAc,EAAE;IACrB,MAAM,IAAI,CAACC,oBAAoB,EAAE;IACjC,MAAM,IAAI,CAACC,gBAAgB,EAAE;IAC7B,MAAM,IAAAC,qBAAS,EAAC,IAAI,CAACC,UAAU,EAAGC,SAAS,IAAK,IAAI,CAAC5B,KAAK,CAAC6B,oBAAoB,CAACD,SAAS,CAAC,CAAC;IAC3F,MAAM;MAAEE,cAAc;MAAEC;IAAY,CAAC,GAAG,MAAM,IAAI,CAAC7B,OAAO,CAAC8B,WAAW,CACpE,IAAI,CAACL,UAAU,EACf;MAAEM,YAAY,EAAE;IAAK,CAAC;IAAE;IACxB;MAAEC,WAAW,EAAE;IAAK,CAAC,CACtB;IACD,MAAMC,kBAAkB,GAAG,IAAI,CAACnC,KAAK,CAACoC,kCAAkC,CAACN,cAAc,CAAC;IACxF,IAAI,CAACzB,QAAQ,CAACgC,4BAA4B,CAAC,IAAI,CAACf,gBAAgB,EAAEa,kBAAkB,CAAC;IACrF,MAAMG,iBAAiB,GAAG,IAAI,CAACjC,QAAQ,CAACkC,qBAAqB,CAAC,IAAI,CAACjB,gBAAgB,CAAC;IACpF,MAAMkB,aAAa,GAAGT,WAAW,CAACU,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,SAAS,EAAE,CAAC;IAClE,MAAMC,WAAW,GAAGJ,aAAa,GAAGK,wBAAW,CAACC,MAAM,GAAGD,wBAAW,CAACE,OAAO;IAC5E,MAAM,IAAI,CAACC,sBAAsB,CAACJ,WAAW,CAAC;IAC9C,MAAM,IAAI,CAACK,MAAM,EAAE;IACnB,MAAM,IAAI,CAACC,+BAA+B,EAAE;IAE5C,OAAO;MACLpC,eAAe,EAAE,IAAI,CAACA,eAAe;MACrCwB,iBAAiB;MACjBa,KAAK,EAAEX,aAAa,GAAGA,aAAa,CAACY,wBAAwB,EAAE,GAAG;IACpE,CAAC;EACH;EAEA,IAAI9B,gBAAgB,GAAwB;IAC1C,OAAO,IAAI,CAACR,eAAe,CAACuC,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAAC1B,SAAS,CAAC2B,KAAK,CAACC,SAAS,CAAC;EACrE;EACA,IAAI7B,UAAU,GAAgB;IAC5B,OAAO,IAAI,CAACb,eAAe,CAACuC,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAAC1B,SAAS,CAAC;EACrD;EAEA6B,gCAAgC,CAACC,EAA4B,EAAE;IAC7D,IAAI,CAACtD,4BAA4B,CAACuD,QAAQ,CAACD,EAAE,CAAC;EAChD;EAEA,MAAc9C,aAAa,GAAG;IAC5B,IAAI,IAAI,CAACF,iBAAiB,CAACkD,IAAI,EAAE;MAC/B,MAAMC,MAAM,GAAGC,gBAAM,CAACC,KAAK,CAAC,IAAI,CAACrD,iBAAiB,CAACkD,IAAI,CAAC;MACxD,IAAI,CAACI,OAAO,GAAG,MAAM,IAAI,CAAC1D,KAAK,CAAC2D,gBAAgB,CAACJ,MAAM,CAAC;MACxD;MACA;MACA,IAAI,CAAC7D,KAAK,CAACqB,WAAW,CAAC6C,gBAAgB,CAACL,MAAM,CAAC;IACjD;EACF;EAEA,MAAclD,kBAAkB,GAAG;IACjC,IAAI,IAAI,CAACD,iBAAiB,CAACyD,sBAAsB,EAAE;MACjD;IACF;IACA,MAAMC,GAAG,GAAG,MAAM,IAAI,CAACpE,KAAK,CAACqE,OAAO,EAAE;IACtC,IAAID,GAAG,CAACE,MAAM,EAAE;MACd;MACA,MAAM,IAAIC,KAAK,CAAE,mEAAkE,IAAI,CAACvE,KAAK,CAACwE,IAAK;AACzG;AACA,2HAA2H,CAAC;IACxH;EACF;EAEA,MAActB,+BAA+B,GAAG;IAC9C,MAAMuB,OAAO,CAACC,GAAG,CAAC,IAAI,CAACtE,4BAA4B,CAACuE,MAAM,EAAE,CAACtB,GAAG,CAAEK,EAAE,IAAKA,EAAE,CAAC,IAAI,CAAC/B,UAAU,CAAC,CAAC,CAAC,CAACiD,KAAK,CAAEC,GAAG,IACvG,IAAI,CAAC5E,MAAM,CAACkD,KAAK,CAAC,0CAA0C,EAAE0B,GAAG,CAAC,CACnE;EACH;EAEA,MAAchE,gBAAgB,CAACJ,kBAAsC,EAAE;IACrE,MAAMqE,YAAY,GAAGrE,kBAAkB,CAAC4C,GAAG,CAAEC,CAAC,IAAKyB,wBAAW,CAACC,UAAU,CAAC1B,CAAC,CAAC2B,WAAW,CAAC,CAAC;IACzF,MAAMC,WAAW,GAAGJ,YAAY;IAChC,IAAI,CAAC,IAAI,CAACpE,iBAAiB,CAACS,UAAU,EAAE;MACtC,MAAMgE,eAAe,GAAG1E,kBAAkB,CAAC4C,GAAG,CAAE+B,IAAI,IAClDA,IAAI,CAACC,YAAY,CAAChC,GAAG,CAAEiC,GAAG,IAAKP,wBAAW,CAACC,UAAU,CAACM,GAAG,CAAC,CAAC,CAACjC,GAAG,CAAEkC,EAAE,IAAKA,EAAE,CAACC,aAAa,CAACC,mBAAM,CAAC,CAAC,CAClG;MACDP,WAAW,CAACQ,IAAI,CAAC,GAAG,IAAAC,iBAAO,EAACR,eAAe,CAAC,CAAC;IAC/C;IACA;IACA;IACA,MAAM,IAAI,CAACnF,KAAK,CAAC4F,MAAM,CAACV,WAAW,EAAE;MAAEW,QAAQ,EAAE,KAAK;MAAEjC,IAAI,EAAE,IAAI,CAACI;IAAQ,CAAC,CAAC;EAC/E;EAEA,MAAcxC,oBAAoB,GAAG;IACnC,MAAM,IAAAE,qBAAS,EAAC,IAAI,CAACJ,gBAAgB,EAAGM,SAAS,IAC/C,IAAI,CAACvB,QAAQ,CAACyF,0BAA0B,CAAClE,SAAS,EAAE,IAAI,CAACoC,OAAO,IAAI,IAAI,CAAC,CAC1E;EACH;EAEA,MAAcvC,gBAAgB,GAAG;IAC/B,MAAM,IAAAC,qBAAS,EAAC,IAAI,CAACZ,eAAe,EAAE,MAAOiF,aAAa,IAAK;MAC7D,MAAMC,UAA6B,GAAGD,aAAa,CAACnE,SAAS,CAAC2B,KAAK,CAACC,SAAS;MAC7EuC,aAAa,CAACnE,SAAS,GAAG,MAAM,IAAI,CAAC5B,KAAK,CAACiG,wBAAwB,CAACD,UAAU,CAAC;IACjF,CAAC,CAAC;EACJ;EAEQzE,cAAc,GAAG;IACvB,IAAI,CAACD,gBAAgB,CAAC4E,OAAO,CAAEC,CAAC,IAAK;MACnCA,CAAC,CAACvD,WAAW,GAAGC,wBAAW,CAACuD,OAAO;IACrC,CAAC,CAAC;EACJ;EAEQlF,kBAAkB,GAAG;IAC3B,IAAI,CAACI,gBAAgB,CAAC4E,OAAO,CAAEtE,SAAS,IAAK;MAC3CA,SAAS,CAACyE,GAAG,GAAG;QACdC,QAAQ,EAAE,IAAI,CAAC5F,iBAAiB,CAAC4F,QAAQ,IAAI,IAAI;QACjDC,KAAK,EAAE,IAAI,CAAC7F,iBAAiB,CAAC6F,KAAK,IAAI,YAAY;QACnDC,OAAO,EAAE,IAAI,CAAC9F,iBAAiB,CAAC8F,OAAO,IAAI,qBAAqB;QAChEC,IAAI,EAAEC,IAAI,CAACC,GAAG,EAAE,CAACC,QAAQ;MAC3B,CAAC;IACH,CAAC,CAAC;EACJ;EAEA,MAAc3F,aAAa,GAAG;IAC5B,MAAMU,UAAU,GAAG,IAAI,CAACb,eAAe,CAACuC,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAAC1B,SAAS,CAAC;IAC/D;IACA;IACA;IACA,MAAMiF,aAAa,GAAGlF,UAAU,CAAC0B,GAAG,CAAE8C,CAAC,IAAKA,CAAC,CAACZ,EAAE,CAACuB,OAAO,CAAC;IACzD,MAAM,IAAApF,qBAAS,EAAC,IAAI,CAACZ,eAAe,EAAE,OAAO;MAAEc,SAAS;MAAEyD;IAAa,CAAC,KAAK;MAC3E,MAAM,IAAI,CAAC0B,qCAAqC,CAACnF,SAAS,EAAEyD,YAAY,EAAEwB,aAAa,CAAC;MACxF,MAAM,IAAI,CAACG,wBAAwB,CAACpF,SAAS,CAAC;IAChD,CAAC,CAAC;EACJ;EAEA,MAAcb,oBAAoB,CAACN,kBAAsC,EAA4B;IACnG,IAAI,CAACR,MAAM,CAACgH,aAAa,CAAE,WAAUxG,kBAAkB,CAAC6D,MAAO,kCAAiC,CAAC;IACjG,OAAO,IAAA5C,qBAAS,EAACjB,kBAAkB,EAAE,MAAOyG,gBAAgB,IAAK;MAC/D,MAAMjC,WAAW,GAAGF,wBAAW,CAACC,UAAU,CAACkC,gBAAgB,CAACjC,WAAW,CAAC;MACxE,MAAMrD,SAAS,GAAG,MAAM,IAAI,CAAC5B,KAAK,CAACmH,IAAI,CAAClC,WAAW,CAAC;MACpD,IAAI,CAACrD,SAAS,EAAE,MAAM,KAAIwF,0BAAiB,EAACnC,WAAW,CAAC;MACxD,MAAMI,YAAY,GAAG,MAAMZ,OAAO,CAACC,GAAG,CACpCwC,gBAAgB,CAAC7B,YAAY,CAAChC,GAAG,CAAEiC,GAAG,IAAK,IAAI,CAAC+B,6BAA6B,CAAC/B,GAAG,CAAC,CAAC,CACpF;MACD,OAAO;QAAE1D,SAAS;QAAEyD,YAAY;QAAEiC,YAAY,EAAEJ,gBAAgB,CAACI;MAAa,CAAC;IACjF,CAAC,CAAC;EACJ;EAEA,MAAcD,6BAA6B,CAACE,MAAc,EAAwB;IAChF,MAAMC,MAAM,GAAGzC,wBAAW,CAACC,UAAU,CAACuC,MAAM,CAAC;IAC7C,IAAI,IAAI,CAAC7G,iBAAiB,CAACS,UAAU,EAAE;MACrC;MACA;MACA,OAAOqG,MAAM;IACf;IACA,IAAI,IAAAC,0BAAM,EAACD,MAAM,CAACE,OAAO,CAAC,EAAE;MAC1B,OAAOF,MAAM;IACf;IACA,MAAMG,KAAK,GAAGH,MAAM,CAACE,OAAO,IAAI,GAAG,CAAC,CAAC;IACrC,MAAMnC,EAAE,GAAGiC,MAAM,CAAChC,aAAa,CAACoC,SAAS,CAAC;IAC1C,MAAMC,YAAY,GAAG,MAAM,IAAI,CAAC7H,KAAK,CAAC8H,4BAA4B,CAACvC,EAAE,EAAEoC,KAAK,CAAC;IAC7E,IAAI,CAACE,YAAY,EAAE;MACjB,MAAM,IAAItD,KAAK,CAAE,4CAA2CoD,KAAM,SAAQJ,MAAO,GAAE,CAAC;IACtF;IACA,OAAOC,MAAM,CAAChC,aAAa,CAACqC,YAAY,CAAC;EAC3C;EAEA,MAAc7G,mBAAmB,GAAG;IAClC,IAAI,CAACf,MAAM,CAACgH,aAAa,CAAE,wBAAuB,CAAC;IACnD,MAAM,IAAAvF,qBAAS,EAAC,IAAI,CAACZ,eAAe,EAAE,MAAOiF,aAAa,IAAK;MAC7D,MAAMC,UAA6B,GAAGD,aAAa,CAACnE,SAAS,CAAC2B,KAAK,CAACC,SAAS;MAC7E,MAAMuE,cAAc,GAAG,MAAM,IAAI,CAAC/H,KAAK,CAACqB,WAAW,CAAC2G,iBAAiB,CAAChC,UAAU,CAACT,EAAE,CAAC;MACpF,IAAI,IAAI,CAAC7E,iBAAiB,CAACuH,GAAG,EAAE;QAC9B,MAAM;UAAEC,WAAW;UAAEL;QAAa,CAAC,GAAG,IAAAM,4CAA4B,EAACpC,aAAa,CAACuB,YAAY,IAAI,OAAO,CAAC;QACzGtB,UAAU,CAAC0B,OAAO,GAAGK,cAAc,CAACK,eAAe,CAACF,WAAW,EAAEL,YAAY,CAAC;MAChF,CAAC,MAAM;QACL;QACA7B,UAAU,CAAC0B,OAAO,GAAGK,cAAc,CAACM,YAAY,EAAE;MACpD;IACF,CAAC,CAAC;EACJ;EAEA,MAAcrB,wBAAwB,CAACpF,SAAoB,EAAE;IAC3D,MAAM0G,gBAAgB,GAAG,MAAM,IAAI,CAACnI,kBAAkB,CAACoI,qBAAqB,CAAC3G,SAAS,CAAC;IACvF,MAAMyD,YAAY,GAAGiD,gBAAgB,CAACE,SAAS,EAAE;IACjD,MAAMC,KAAK,GAAGC,8CAAwB,CAACnD,EAAE;IACzC,MAAMoD,IAAI,GAAG;MAAEtD;IAAa,CAAC;IAC7B,MAAMuD,iBAAiB,GAAGhH,SAAS,CAAC2B,KAAK,CAACC,SAAS,CAACqF,UAAU,CAACC,aAAa,CAACL,KAAK,CAAC;IACnF,IAAIG,iBAAiB,EAAE;MACrB;MACAG,MAAM,CAACC,MAAM,CAACJ,iBAAiB,CAACD,IAAI,EAAEA,IAAI,CAAC;MAC3C;IACF;IACA,MAAMM,SAAS,GAAG,KAAIC,4BAAkB,EAACtB,SAAS,EAAEA,SAAS,EAAEa,KAAK,EAAEb,SAAS,EAAEe,IAAI,CAAC;IACtF/G,SAAS,CAAC2B,KAAK,CAACC,SAAS,CAACqF,UAAU,CAACnD,IAAI,CAACuD,SAAS,CAAC;EACtD;EAEA,MAAclC,qCAAqC,CACjDnF,SAAoB,EACpByD,YAA2B,EAC3BwB,aAAsB,EACtB;IACA,MAAMsC,UAAU,GAAG9D,YAAY,CAAChC,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACwD,OAAO,CAAC;IACrD,MAAMsC,UAAU,GAAGC,eAAM,CAACC,SAAS,CAAC,CAAC,GAAGzC,aAAa,EAAE,GAAGsC,UAAU,CAAC,CAAC;IACtE,MAAMI,cAAc,GAAG3H,SAAS,CAAC2D,EAAE,CAACqB,QAAQ,EAAE;IAC9C,MAAM4C,eAAkC,GAAG5H,SAAS,CAAC2B,KAAK,CAACC,SAAS;IACpE,MAAMiG,IAAI,GAAG,CAAC,GAAGD,eAAe,CAACnE,YAAY,CAACqE,GAAG,EAAE,EAAE,GAAGF,eAAe,CAACG,eAAe,CAACD,GAAG,EAAE,CAAC;IAC9F,MAAMpB,gBAAgB,GAAG,MAAM,IAAI,CAACnI,kBAAkB,CAACyJ,eAAe,CAAChI,SAAS,CAAC;IACjF6H,IAAI,CAACvD,OAAO,CAAEZ,GAAG,IAAK;MACpB,MAAMuE,YAAY,GAAGT,UAAU,CAACU,oBAAoB,CAACxE,GAAG,CAACC,EAAE,CAAC;MAC5D,IAAIsE,YAAY,EAAE;QAAA;QAChB,MAAME,QAAQ,GAAGzE,GAAG,CAACC,EAAE,CAACqB,QAAQ,EAAE;QAClC,MAAMoD,WAAW,4BAAG1B,gBAAgB,CAAC2B,cAAc,CAACF,QAAQ,CAAC,oFAAzC,sBAA2CG,cAAc,2DAAzD,kDAA6D;QACjF,IAAI,CAACF,WAAW,EAAE;UAChB,MAAM,IAAIzF,KAAK,CACZ,uCAAsCwF,QAAS,wDAAuDR,cAAe,GAAE,CACzH;QACH;QACA,IAAI,CAACtJ,MAAM,CAACkK,KAAK,CAAE,aAAYZ,cAAe,iBAAgBQ,QAAS,eAAcF,YAAY,CAACnC,OAAQ,GAAE,CAAC;QAC7GpC,GAAG,CAACC,EAAE,GAAGsE,YAAY;QACrBvE,GAAG,CAAC0E,WAAW,GAAGA,WAAW;MAC/B;IACF,CAAC,CAAC;IACFR,eAAe,CAACX,UAAU,CAAC3C,OAAO,CAAEkE,GAAG,IAAK;MAC1C,IAAI,CAACA,GAAG,CAACC,WAAW,EAAE;MACtB,MAAMR,YAAY,GAAGT,UAAU,CAACU,oBAAoB,CAACM,GAAG,CAACC,WAAW,CAAC;MACrE,IAAIR,YAAY,EAAE;QAChB,IAAI,CAAC5J,MAAM,CAACkK,KAAK,CACd,aAAYZ,cAAe,gBAAea,GAAG,CAACC,WAAW,CAACzD,QAAQ,EAAG,eAAciD,YAAY,CAACnC,OAAQ,GAAE,CAC5G;QACD0C,GAAG,CAACC,WAAW,GAAGR,YAAY;MAChC;IACF,CAAC,CAAC;EACJ;EAEA,MAAc7G,sBAAsB,CAACJ,WAAwB,EAAE;IAC7D,MAAM,IAAAlB,qBAAS,EAAC,IAAI,CAACJ,gBAAgB,EAAE,MAAOM,SAAS,IAAK;MAC1DA,SAAS,CAACgB,WAAW,GAAGA,WAAW;MACnC,MAAM,IAAI,CAACvC,QAAQ,CAACiK,WAAW,CAAC1I,SAAS,CAAC;IAC5C,CAAC,CAAC;IACF,MAAM,IAAI,CAAC5B,KAAK,CAACqB,WAAW,CAACkJ,OAAO,CAACC,OAAO,EAAE;EAChD;EAEA,MAAcvH,MAAM,GAAG;IACrB,MAAMwH,YAAY,GAAG,IAAI,CAAC/J,iBAAiB,CAACgF,IAAI;IAChD,IAAI,CAAC+E,YAAY,EAAE;IACnB,MAAMrG,GAAG,GAAGiF,eAAM,CAACC,SAAS,CAAC,IAAI,CAAChI,gBAAgB,CAAC+B,GAAG,CAAE8C,CAAC,IAAKA,CAAC,CAACZ,EAAE,CAAC,CAAC;IACpE,MAAM,IAAI,CAAChF,QAAQ,CAACmK,UAAU,CAAC;MAC7B1K,KAAK,EAAE,IAAI,CAACA,KAAK,CAACqB,WAAW;MAC7B+C,GAAG;MACHuG,kBAAkB,EAAEvG,GAAG;MACvBwG,UAAU,EAAE,IAAI,CAAC5G,OAAO;MACxB6G,WAAW,EAAE;IACf,CAAC,CAAC;EACJ;EAiBA,aAAaC,QAAQ,CACnB,CAACC,GAAG,EAAE/K,KAAK,EAAEgL,UAAU,EAAE9K,OAAO,EAAEC,kBAAkB,EAAEE,QAAQ,EAAEC,KAAK,EAAEC,QAAQ,CAS9E,EACD0K,CAAC,EACD,CAAC7K,4BAA4B,CAAiC,EAC9D;IACA,MAAMH,MAAM,GAAG+K,UAAU,CAACE,YAAY,CAACC,+CAAwB,CAAC5F,EAAE,CAAC;IACnE,MAAM6F,sBAAsB,GAAG,IAAItL,sBAAsB,CACvDE,KAAK,EACLC,MAAM,EACNC,OAAO,EACPC,kBAAkB,EAClBC,4BAA4B,EAC5BC,QAAQ,EACRC,KAAK,EACLC,QAAQ,CACT;IACDwK,GAAG,CAACpH,QAAQ,CAAC,KAAI0H,2CAAqB,EAACD,sBAAsB,EAAEpL,KAAK,EAAEC,MAAM,CAAC,CAAC;IAC9E,OAAOmL,sBAAsB;EAC/B;AACF;AAAC;AAAA,gCAlUYtL,sBAAsB,aAuRhBwL,kBAAW;AAAA,gCAvRjBxL,sBAAsB,kBAyRX,CACpByL,gBAAS,EACTC,oBAAW,EACXC,sBAAY,EACZC,wBAAa,EACbhD,8CAAwB,EACxBiD,0BAAc,EACdC,oBAAW,EACXC,sBAAY,CACb;AAAA,gCAlSU/L,sBAAsB,WAoSlB,CAACgM,eAAI,CAACC,QAAQ,EAAgC,CAAC;AAgChEZ,+CAAwB,CAACa,UAAU,CAAClM,sBAAsB,CAAC"}