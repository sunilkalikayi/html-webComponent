{"version":3,"names":["UpdateDependenciesCmd","constructor","updateDependenciesMain","scope","logger","report","data","updateDepsOptions","push","simulation","Error","depsUpdateItems","parseData","results","updateDependenciesVersions","componentOutput","depUpdateItem","title","chalk","bold","component","id","toString","dependencies","map","dep","join","length","d","dataParsed","JSON","parse","err","message","Array","isArray","forEach","dataItem","componentId"],"sources":["update-dependencies.cmd.ts"],"sourcesContent":["import chalk from 'chalk';\nimport { Command, CommandOptions } from '@teambit/cli';\nimport { ScopeMain } from '@teambit/scope';\nimport { Logger } from '@teambit/logger';\nimport {\n  UpdateDependenciesMain,\n  UpdateDepsOptions,\n  DepUpdateItemRaw,\n  DepUpdateItem,\n} from './update-dependencies.main.runtime';\n\nexport class UpdateDependenciesCmd implements Command {\n  name = 'update-dependencies <data>';\n  private = true;\n  description = 'update dependencies for components and tag/snap the results';\n  extendedDescription = `this command should be running from a new bare scope, it first imports the components it needs and then processes the update.\nthe input data is a stringified JSON of an array of the following object.\n{\n  componentId: string; // ids always have scope, so it's safe to parse them from string\n  dependencies: string[]; // e.g. [teambit/compiler@1.0.0, teambit/tester@1.0.0]\n  versionToTag?: string; // specific version (e.g. '1.0.0') or semver (e.g. 'minor', 'patch')\n}\nan example of the final data: '[{\"componentId\":\"ci.remote2/comp-b\",\"dependencies\":[\"ci.remote/comp1@0.0.2\"]}]'\n`;\n  alias = '';\n  group = 'development';\n  options = [\n    ['', 'tag', 'tag once the build is completed (by default it snaps)'],\n    ['', 'simulation', 'simulation purpose. should never be pushed (otherwise, flattened-deps are invalid)'],\n    ['', 'push', 'export the updated objects to the original scopes once tagged/snapped'],\n    ['', 'message <string>', 'message to be saved as part of the version log'],\n    ['', 'username <string>', 'username to be saved as part of the version log'],\n    ['', 'email <string>', 'email to be saved as part of the version log'],\n    ['', 'lane <lane-id>', 'helps to fetch the components from the lane scope (relevant for --multiple)'],\n    ['', 'skip-new-scope-validation', 'avoid throwing an error when running on a non-new scope'],\n  ] as CommandOptions;\n\n  constructor(\n    private updateDependenciesMain: UpdateDependenciesMain,\n    private scope: ScopeMain,\n    private logger: Logger\n  ) {}\n\n  async report([data]: [string], updateDepsOptions: UpdateDepsOptions) {\n    if (updateDepsOptions.push && updateDepsOptions.simulation) {\n      throw new Error('you cannot use both --push and --simulation flags');\n    }\n    const depsUpdateItems = this.parseData(data);\n    const results = await this.updateDependenciesMain.updateDependenciesVersions(depsUpdateItems, updateDepsOptions);\n    const componentOutput = (depUpdateItem: DepUpdateItem) => {\n      const title = chalk.bold(depUpdateItem.component.id.toString());\n      const dependencies = depUpdateItem.dependencies.map((dep) => `\\t${dep.toString()}`).join('\\n');\n      return `${title}\\n${dependencies}`;\n    };\n    return `the following ${results.depsUpdateItems.length} component(s) were updated:\n${results.depsUpdateItems.map((d) => componentOutput(d)).join('\\n\\n')}`;\n  }\n\n  private parseData(data: string): DepUpdateItemRaw[] {\n    let dataParsed: unknown;\n    try {\n      dataParsed = JSON.parse(data);\n    } catch (err: any) {\n      throw new Error(`failed parsing the data entered as JSON. err ${err.message}`);\n    }\n    if (!Array.isArray(dataParsed)) {\n      throw new Error('expect data to be an array');\n    }\n    dataParsed.forEach((dataItem) => {\n      if (!dataItem.componentId) throw new Error('expect data item to have \"componentId\" prop');\n      if (!dataItem.dependencies) throw new Error('expect data item to have \"dependencies\" prop');\n    });\n    return dataParsed;\n  }\n}\n"],"mappings":"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"}