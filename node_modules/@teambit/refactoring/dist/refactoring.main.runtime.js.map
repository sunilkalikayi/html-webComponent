{"version":3,"names":["RefactoringMain","constructor","componentMain","pkg","refactorDependencyName","components","oldId","newId","oldPackageName","getPackageNameByUnknownId","newPackageName","BitError","changedComponents","Promise","all","map","comp","hasChanged","replaceString","compact","replaceMultipleStrings","stringsToReplace","replaceMultipleStringsInOneComp","id","ComponentID","getPackageNameByComponentID","Error","host","getHost","componentID","resolveComponentId","err","isValidScopedPackageName","get","toString","getPackageName","name","startsWith","includes","length","oldString","newString","changed","filesystem","files","file","isBinary","isBinaryFile","contents","strContent","oldStringRegex","RegExp","newContent","replace","Buffer","from","some","c","forEach","oldStr","newStr","provider","cli","refactoringMain","subCommands","DependencyNameRefactorCmd","refactorCmd","RefactorCmd","commands","register","ComponentAspect","PkgAspect","CLIAspect","MainRuntime","RefactoringAspect","addRuntime"],"sources":["refactoring.main.runtime.ts"],"sourcesContent":["import { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport { isBinaryFile } from 'isbinaryfile';\nimport { compact } from 'lodash';\nimport ComponentAspect, { Component, ComponentID, ComponentMain } from '@teambit/component';\nimport { BitError } from '@teambit/bit-error';\nimport PkgAspect, { PkgMain } from '@teambit/pkg';\nimport { RefactoringAspect } from './refactoring.aspect';\nimport { DependencyNameRefactorCmd, RefactorCmd } from './refactor.cmd';\n\nexport type MultipleStringsReplacement = Array<{ oldStr: string; newStr: string }>;\n\nexport class RefactoringMain {\n  constructor(private componentMain: ComponentMain, private pkg: PkgMain) {}\n\n  /**\n   * refactor the dependency name of a component.\n   * oldId and newId can be either a component-id or a package-name.\n   * this method changes the source code of the component, but doesn't write to the filesystem.\n   */\n  async refactorDependencyName(\n    components: Component[],\n    oldId: ComponentID | string,\n    newId: ComponentID | string\n  ): Promise<{ oldPackageName: string; newPackageName: string; changedComponents: Component[] }> {\n    const oldPackageName = await this.getPackageNameByUnknownId(oldId);\n    const newPackageName = await this.getPackageNameByUnknownId(newId);\n    if (oldPackageName === newPackageName) {\n      throw new BitError(`refactoring: the old package-name and the new package-name are the same: ${oldPackageName}`);\n    }\n    const changedComponents = await Promise.all(\n      components.map(async (comp) => {\n        const hasChanged = await this.replaceString(comp, oldPackageName, newPackageName);\n        return hasChanged ? comp : null;\n      })\n    );\n    return { oldPackageName, newPackageName, changedComponents: compact(changedComponents) };\n  }\n\n  /**\n   * rename multiple packages dependencies.\n   * this method changes the source code of the component, but doesn't write to the filesystem.\n   */\n  async replaceMultipleStrings(\n    components: Component[],\n    stringsToReplace: MultipleStringsReplacement\n  ): Promise<{\n    changedComponents: Component[];\n  }> {\n    const changedComponents = await Promise.all(\n      components.map(async (comp) => {\n        const hasChanged = await this.replaceMultipleStringsInOneComp(comp, stringsToReplace);\n        return hasChanged ? comp : null;\n      })\n    );\n    return { changedComponents: compact(changedComponents) };\n  }\n\n  private async getPackageNameByUnknownId(id: ComponentID | string): Promise<string> {\n    if (id instanceof ComponentID) {\n      return this.getPackageNameByComponentID(id);\n    }\n    if (typeof id !== 'string') {\n      throw new Error(`getPackageNameByUnknownId expects id to be either string or ComponentID, got ${typeof id}`);\n    }\n    try {\n      const host = this.componentMain.getHost();\n      const componentID = await host.resolveComponentId(id);\n      return await this.getPackageNameByComponentID(componentID);\n    } catch (err) {\n      if (this.isValidScopedPackageName(id)) {\n        return id; // assume this is a package-name\n      }\n      throw new BitError(\n        `refactoring: the id \"${id}\" is neither a valid scoped-package-name nor an existing component-id`\n      );\n    }\n  }\n\n  private async getPackageNameByComponentID(id: ComponentID) {\n    const host = this.componentMain.getHost();\n    const comp = await host.get(id);\n    if (!comp) throw new Error(`unable to find a component: \"${id.toString()}\"`);\n    return this.pkg.getPackageName(comp);\n  }\n\n  private isValidScopedPackageName(name: string) {\n    return (\n      name.startsWith('@') && name.includes('/') && name.length <= 214 && !name.includes('\\\\') && !name.includes('..')\n    );\n  }\n\n  private async replaceString(comp: Component, oldString: string, newString: string): Promise<boolean> {\n    const changed = await Promise.all(\n      comp.filesystem.files.map(async (file) => {\n        const isBinary = await isBinaryFile(file.contents);\n        if (isBinary) return false;\n        const strContent = file.contents.toString();\n        if (strContent.includes(oldString)) {\n          const oldStringRegex = new RegExp(oldString, 'g');\n          const newContent = strContent.replace(oldStringRegex, newString);\n          file.contents = Buffer.from(newContent);\n          return true;\n        }\n        return false;\n      })\n    );\n    return changed.some((c) => c);\n  }\n\n  private async replaceMultipleStringsInOneComp(\n    comp: Component,\n    stringsToReplace: MultipleStringsReplacement\n  ): Promise<boolean> {\n    const changed = await Promise.all(\n      comp.filesystem.files.map(async (file) => {\n        const isBinary = await isBinaryFile(file.contents);\n        if (isBinary) return false;\n        const strContent = file.contents.toString();\n        let newContent = strContent;\n        stringsToReplace.forEach(({ oldStr, newStr }) => {\n          const oldStringRegex = new RegExp(oldStr, 'g');\n          newContent = newContent.replace(oldStringRegex, newStr);\n        });\n        if (strContent !== newContent) {\n          file.contents = Buffer.from(newContent);\n          return true;\n        }\n        return false;\n      })\n    );\n    return changed.some((c) => c);\n  }\n\n  static slots = [];\n  static dependencies = [ComponentAspect, PkgAspect, CLIAspect];\n  static runtime = MainRuntime;\n  static async provider([componentMain, pkg, cli]: [ComponentMain, PkgMain, CLIMain]) {\n    const refactoringMain = new RefactoringMain(componentMain, pkg);\n    const subCommands = [new DependencyNameRefactorCmd(refactoringMain, componentMain)];\n    const refactorCmd = new RefactorCmd();\n    refactorCmd.commands = subCommands;\n    cli.register(refactorCmd);\n    return refactoringMain;\n  }\n}\n\nRefactoringAspect.addRuntime(RefactoringMain);\n"],"mappings":"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"}