"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RefactorCmd = exports.DependencyNameRefactorCmd = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
// eslint-disable-next-line max-classes-per-file

// import { PATTERN_HELP } from '@teambit/legacy/dist/constants';

class DependencyNameRefactorCmd {
  // extendedDescription = `${PATTERN_HELP('refactor dependency-name')}`;

  constructor(refactoringMain, componentMain) {
    this.refactoringMain = refactoringMain;
    this.componentMain = componentMain;
    (0, _defineProperty2().default)(this, "name", 'dependency-name <old-id> <new-id>');
    (0, _defineProperty2().default)(this, "description", "replace the dependency's old package-name with a new one in the code");
    (0, _defineProperty2().default)(this, "options", []);
    (0, _defineProperty2().default)(this, "group", 'development');
    (0, _defineProperty2().default)(this, "extendedDescription", `the \`<old-id>\` and \`<new-id>\` arguments can be either a component-id or a package-name.`);
  }
  async report([oldId, newId]) {
    const host = this.componentMain.getHost();
    const allComps = await host.list();
    const {
      changedComponents,
      oldPackageName,
      newPackageName
    } = await this.refactoringMain.refactorDependencyName(allComps, oldId, newId);
    await Promise.all(changedComponents.map(comp => host.write(comp)));
    return `the following components have been changed (${oldPackageName} => ${newPackageName}):\n${changedComponents.map(c => c.id.toString()).join('\n')}`;
  }
}
exports.DependencyNameRefactorCmd = DependencyNameRefactorCmd;
class RefactorCmd {
  constructor() {
    (0, _defineProperty2().default)(this, "name", 'refactor <sub-command>');
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "description", 'EXPERIMENTAL. source code refactoring / codemod');
    (0, _defineProperty2().default)(this, "options", []);
    (0, _defineProperty2().default)(this, "group", 'development');
    (0, _defineProperty2().default)(this, "commands", []);
  }
  async report([unrecognizedSubcommand]) {
    return _chalk().default.red(`"${unrecognizedSubcommand}" is not a subcommand of "refactor", please run "bit refactor --help" to list the subcommands`);
  }
}
exports.RefactorCmd = RefactorCmd;

//# sourceMappingURL=refactor.cmd.js.map