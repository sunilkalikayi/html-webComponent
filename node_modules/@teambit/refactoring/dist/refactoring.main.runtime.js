"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
require("core-js/modules/es.regexp.constructor.js");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.string.replace.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RefactoringMain = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _cli() {
  const data = require("@teambit/cli");
  _cli = function () {
    return data;
  };
  return data;
}
function _isbinaryfile() {
  const data = require("isbinaryfile");
  _isbinaryfile = function () {
    return data;
  };
  return data;
}
function _lodash() {
  const data = require("lodash");
  _lodash = function () {
    return data;
  };
  return data;
}
function _component() {
  const data = _interopRequireWildcard(require("@teambit/component"));
  _component = function () {
    return data;
  };
  return data;
}
function _bitError() {
  const data = require("@teambit/bit-error");
  _bitError = function () {
    return data;
  };
  return data;
}
function _pkg() {
  const data = _interopRequireDefault(require("@teambit/pkg"));
  _pkg = function () {
    return data;
  };
  return data;
}
function _refactoring() {
  const data = require("./refactoring.aspect");
  _refactoring = function () {
    return data;
  };
  return data;
}
function _refactor() {
  const data = require("./refactor.cmd");
  _refactor = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
class RefactoringMain {
  constructor(componentMain, pkg) {
    this.componentMain = componentMain;
    this.pkg = pkg;
  }

  /**
   * refactor the dependency name of a component.
   * oldId and newId can be either a component-id or a package-name.
   * this method changes the source code of the component, but doesn't write to the filesystem.
   */
  async refactorDependencyName(components, oldId, newId) {
    const oldPackageName = await this.getPackageNameByUnknownId(oldId);
    const newPackageName = await this.getPackageNameByUnknownId(newId);
    if (oldPackageName === newPackageName) {
      throw new (_bitError().BitError)(`refactoring: the old package-name and the new package-name are the same: ${oldPackageName}`);
    }
    const changedComponents = await Promise.all(components.map(async comp => {
      const hasChanged = await this.replaceString(comp, oldPackageName, newPackageName);
      return hasChanged ? comp : null;
    }));
    return {
      oldPackageName,
      newPackageName,
      changedComponents: (0, _lodash().compact)(changedComponents)
    };
  }

  /**
   * rename multiple packages dependencies.
   * this method changes the source code of the component, but doesn't write to the filesystem.
   */
  async replaceMultipleStrings(components, stringsToReplace) {
    const changedComponents = await Promise.all(components.map(async comp => {
      const hasChanged = await this.replaceMultipleStringsInOneComp(comp, stringsToReplace);
      return hasChanged ? comp : null;
    }));
    return {
      changedComponents: (0, _lodash().compact)(changedComponents)
    };
  }
  async getPackageNameByUnknownId(id) {
    if (id instanceof _component().ComponentID) {
      return this.getPackageNameByComponentID(id);
    }
    if (typeof id !== 'string') {
      throw new Error(`getPackageNameByUnknownId expects id to be either string or ComponentID, got ${typeof id}`);
    }
    try {
      const host = this.componentMain.getHost();
      const componentID = await host.resolveComponentId(id);
      return await this.getPackageNameByComponentID(componentID);
    } catch (err) {
      if (this.isValidScopedPackageName(id)) {
        return id; // assume this is a package-name
      }

      throw new (_bitError().BitError)(`refactoring: the id "${id}" is neither a valid scoped-package-name nor an existing component-id`);
    }
  }
  async getPackageNameByComponentID(id) {
    const host = this.componentMain.getHost();
    const comp = await host.get(id);
    if (!comp) throw new Error(`unable to find a component: "${id.toString()}"`);
    return this.pkg.getPackageName(comp);
  }
  isValidScopedPackageName(name) {
    return name.startsWith('@') && name.includes('/') && name.length <= 214 && !name.includes('\\') && !name.includes('..');
  }
  async replaceString(comp, oldString, newString) {
    const changed = await Promise.all(comp.filesystem.files.map(async file => {
      const isBinary = await (0, _isbinaryfile().isBinaryFile)(file.contents);
      if (isBinary) return false;
      const strContent = file.contents.toString();
      if (strContent.includes(oldString)) {
        const oldStringRegex = new RegExp(oldString, 'g');
        const newContent = strContent.replace(oldStringRegex, newString);
        file.contents = Buffer.from(newContent);
        return true;
      }
      return false;
    }));
    return changed.some(c => c);
  }
  async replaceMultipleStringsInOneComp(comp, stringsToReplace) {
    const changed = await Promise.all(comp.filesystem.files.map(async file => {
      const isBinary = await (0, _isbinaryfile().isBinaryFile)(file.contents);
      if (isBinary) return false;
      const strContent = file.contents.toString();
      let newContent = strContent;
      stringsToReplace.forEach(({
        oldStr,
        newStr
      }) => {
        const oldStringRegex = new RegExp(oldStr, 'g');
        newContent = newContent.replace(oldStringRegex, newStr);
      });
      if (strContent !== newContent) {
        file.contents = Buffer.from(newContent);
        return true;
      }
      return false;
    }));
    return changed.some(c => c);
  }
  static async provider([componentMain, pkg, cli]) {
    const refactoringMain = new RefactoringMain(componentMain, pkg);
    const subCommands = [new (_refactor().DependencyNameRefactorCmd)(refactoringMain, componentMain)];
    const refactorCmd = new (_refactor().RefactorCmd)();
    refactorCmd.commands = subCommands;
    cli.register(refactorCmd);
    return refactoringMain;
  }
}
exports.RefactoringMain = RefactoringMain;
(0, _defineProperty2().default)(RefactoringMain, "slots", []);
(0, _defineProperty2().default)(RefactoringMain, "dependencies", [_component().default, _pkg().default, _cli().CLIAspect]);
(0, _defineProperty2().default)(RefactoringMain, "runtime", _cli().MainRuntime);
_refactoring().RefactoringAspect.addRuntime(RefactoringMain);

//# sourceMappingURL=refactoring.main.runtime.js.map