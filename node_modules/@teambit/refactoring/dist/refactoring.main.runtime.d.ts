import { CLIMain } from '@teambit/cli';
import { Component, ComponentID, ComponentMain } from '@teambit/component';
import { PkgMain } from '@teambit/pkg';
export declare type MultipleStringsReplacement = Array<{
    oldStr: string;
    newStr: string;
}>;
export declare class RefactoringMain {
    private componentMain;
    private pkg;
    constructor(componentMain: ComponentMain, pkg: PkgMain);
    /**
     * refactor the dependency name of a component.
     * oldId and newId can be either a component-id or a package-name.
     * this method changes the source code of the component, but doesn't write to the filesystem.
     */
    refactorDependencyName(components: Component[], oldId: ComponentID | string, newId: ComponentID | string): Promise<{
        oldPackageName: string;
        newPackageName: string;
        changedComponents: Component[];
    }>;
    /**
     * rename multiple packages dependencies.
     * this method changes the source code of the component, but doesn't write to the filesystem.
     */
    replaceMultipleStrings(components: Component[], stringsToReplace: MultipleStringsReplacement): Promise<{
        changedComponents: Component[];
    }>;
    private getPackageNameByUnknownId;
    private getPackageNameByComponentID;
    private isValidScopedPackageName;
    private replaceString;
    private replaceMultipleStringsInOneComp;
    static slots: never[];
    static dependencies: import("@teambit/harmony").Aspect[];
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static provider([componentMain, pkg, cli]: [ComponentMain, PkgMain, CLIMain]): Promise<RefactoringMain>;
}
