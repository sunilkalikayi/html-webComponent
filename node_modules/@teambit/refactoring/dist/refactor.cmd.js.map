{"version":3,"names":["DependencyNameRefactorCmd","constructor","refactoringMain","componentMain","report","oldId","newId","host","getHost","allComps","list","changedComponents","oldPackageName","newPackageName","refactorDependencyName","Promise","all","map","comp","write","c","id","toString","join","RefactorCmd","unrecognizedSubcommand","chalk","red"],"sources":["refactor.cmd.ts"],"sourcesContent":["// eslint-disable-next-line max-classes-per-file\nimport { Command, CommandOptions } from '@teambit/cli';\nimport { ComponentMain } from '@teambit/component';\n// import { PATTERN_HELP } from '@teambit/legacy/dist/constants';\nimport chalk from 'chalk';\nimport { RefactoringMain } from './refactoring.main.runtime';\n\nexport class DependencyNameRefactorCmd implements Command {\n  name = 'dependency-name <old-id> <new-id>';\n  description = \"replace the dependency's old package-name with a new one in the code\";\n  options = [] as CommandOptions;\n  group = 'development';\n  // extendedDescription = `${PATTERN_HELP('refactor dependency-name')}`;\n  extendedDescription = `the \\`<old-id>\\` and \\`<new-id>\\` arguments can be either a component-id or a package-name.`;\n\n  constructor(private refactoringMain: RefactoringMain, private componentMain: ComponentMain) {}\n\n  async report([oldId, newId]: [string, string]) {\n    const host = this.componentMain.getHost();\n    const allComps = await host.list();\n    const { changedComponents, oldPackageName, newPackageName } = await this.refactoringMain.refactorDependencyName(\n      allComps,\n      oldId,\n      newId\n    );\n    await Promise.all(changedComponents.map((comp) => host.write(comp)));\n    return `the following components have been changed (${oldPackageName} => ${newPackageName}):\\n${changedComponents\n      .map((c) => c.id.toString())\n      .join('\\n')}`;\n  }\n}\n\nexport class RefactorCmd implements Command {\n  name = 'refactor <sub-command>';\n  alias = '';\n  description = 'EXPERIMENTAL. source code refactoring / codemod';\n  options = [];\n  group = 'development';\n  commands: Command[] = [];\n\n  async report([unrecognizedSubcommand]: [string]) {\n    return chalk.red(\n      `\"${unrecognizedSubcommand}\" is not a subcommand of \"refactor\", please run \"bit refactor --help\" to list the subcommands`\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAIA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAJA;;AAGA;;AAIO,MAAMA,yBAAyB,CAAoB;EAKxD;;EAGAC,WAAW,CAASC,eAAgC,EAAUC,aAA4B,EAAE;IAAA,KAAxED,eAAgC,GAAhCA,eAAgC;IAAA,KAAUC,aAA4B,GAA5BA,aAA4B;IAAA,8CAPnF,mCAAmC;IAAA,qDAC5B,sEAAsE;IAAA,iDAC1E,EAAE;IAAA,+CACJ,aAAa;IAAA,6DAEE,6FAA4F;EAEtB;EAE7F,MAAMC,MAAM,CAAC,CAACC,KAAK,EAAEC,KAAK,CAAmB,EAAE;IAC7C,MAAMC,IAAI,GAAG,IAAI,CAACJ,aAAa,CAACK,OAAO,EAAE;IACzC,MAAMC,QAAQ,GAAG,MAAMF,IAAI,CAACG,IAAI,EAAE;IAClC,MAAM;MAAEC,iBAAiB;MAAEC,cAAc;MAAEC;IAAe,CAAC,GAAG,MAAM,IAAI,CAACX,eAAe,CAACY,sBAAsB,CAC7GL,QAAQ,EACRJ,KAAK,EACLC,KAAK,CACN;IACD,MAAMS,OAAO,CAACC,GAAG,CAACL,iBAAiB,CAACM,GAAG,CAAEC,IAAI,IAAKX,IAAI,CAACY,KAAK,CAACD,IAAI,CAAC,CAAC,CAAC;IACpE,OAAQ,+CAA8CN,cAAe,OAAMC,cAAe,OAAMF,iBAAiB,CAC9GM,GAAG,CAAEG,CAAC,IAAKA,CAAC,CAACC,EAAE,CAACC,QAAQ,EAAE,CAAC,CAC3BC,IAAI,CAAC,IAAI,CAAE,EAAC;EACjB;AACF;AAAC;AAEM,MAAMC,WAAW,CAAoB;EAAA;IAAA,8CACnC,wBAAwB;IAAA,+CACvB,EAAE;IAAA,qDACI,iDAAiD;IAAA,iDACrD,EAAE;IAAA,+CACJ,aAAa;IAAA,kDACC,EAAE;EAAA;EAExB,MAAMpB,MAAM,CAAC,CAACqB,sBAAsB,CAAW,EAAE;IAC/C,OAAOC,gBAAK,CAACC,GAAG,CACb,IAAGF,sBAAuB,+FAA8F,CAC1H;EACH;AACF;AAAC"}