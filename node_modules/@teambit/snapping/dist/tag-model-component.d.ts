import { ReleaseType } from 'semver';
import { BitId, BitIds } from '@teambit/legacy/dist/bit-id';
import Component from '@teambit/legacy/dist/consumer/component/consumer-component';
import { AutoTagResult } from '@teambit/legacy/dist/scope/component-ops/auto-tag';
import { BuilderMain } from '@teambit/builder';
import { ModelComponent } from '@teambit/legacy/dist/scope/models';
import { DependencyResolverMain } from '@teambit/dependency-resolver';
import { ScopeMain } from '@teambit/scope';
import { Workspace } from '@teambit/workspace';
import { SnappingMain } from './snapping.main.runtime';
export declare type onTagIdTransformer = (id: BitId) => BitId | null;
export declare type BasicTagParams = {
    message: string;
    ignoreNewestVersion?: boolean;
    skipTests?: boolean;
    skipAutoTag?: boolean;
    build?: boolean;
    soft?: boolean;
    persist: boolean;
    disableTagAndSnapPipelines?: boolean;
    forceDeploy?: boolean;
    preReleaseId?: string;
    editor?: string;
    unmodified?: boolean;
};
export declare function tagModelComponent({ workspace, scope, snapping, builder, consumerComponents, ids, message, editor, exactVersion, releaseType, preReleaseId, ignoreNewestVersion, skipTests, skipAutoTag, soft, build, persist, isSnap, disableTagAndSnapPipelines, forceDeploy, incrementBy, packageManagerConfigRootDir, dependencyResolver, }: {
    workspace?: Workspace;
    scope: ScopeMain;
    snapping: SnappingMain;
    builder: BuilderMain;
    consumerComponents: Component[];
    ids: BitIds;
    exactVersion?: string | null | undefined;
    releaseType?: ReleaseType;
    incrementBy?: number;
    isSnap?: boolean;
    packageManagerConfigRootDir?: string;
    dependencyResolver: DependencyResolverMain;
} & BasicTagParams): Promise<{
    taggedComponents: Component[];
    autoTaggedResults: AutoTagResult[];
    publishedPackages: string[];
}>;
export declare function updateComponentsVersions(workspace: Workspace, components: Array<ModelComponent | Component>, isTag?: boolean): Promise<any>;
