"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.flat.js");
require("core-js/modules/es.array.unscopables.flat.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ComponentsHaveIssues = void 0;
function _bitError() {
  const data = require("@teambit/bit-error");
  _bitError = function () {
    return data;
  };
  return data;
}
function _issues() {
  const data = _interopRequireDefault(require("@teambit/issues"));
  _issues = function () {
    return data;
  };
  return data;
}
function _componentIssuesTemplate() {
  const data = require("@teambit/legacy/dist/cli/templates/component-issues-template");
  _componentIssuesTemplate = function () {
    return data;
  };
  return data;
}
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
function _lodash() {
  const data = require("lodash");
  _lodash = function () {
    return data;
  };
  return data;
}
class ComponentsHaveIssues extends _bitError().BitError {
  constructor(components) {
    components.forEach(component => {
      component.issues = component.issues.filterNonTagBlocking();
    });
    const allIssueNames = (0, _lodash().uniq)(components.map(comp => comp.issues.getAllIssueNames()).flat());
    const issuesColored = componentIssuesTemplate(components);
    super(`error: issues found with the following components
${issuesColored}

to get the list of component-issues names and suggestions how to resolve them, run "bit component-issues".

while highly not recommended, it's possible to ignore issues in two ways:
1) temporarily ignore for this tag/snap command by entering "--ignore-issues" flag, e.g. \`bit tag --ignore-issues "${allIssueNames.join(', ')}" \`
2) ignore the issue completely by configuring it in the workspace.jsonc file. e.g:
"${_issues().default.id}": {
  "ignoreIssues": [${allIssueNames.map(issue => `"${issue}"`).join(', ')}]
}
`);
  }
}
exports.ComponentsHaveIssues = ComponentsHaveIssues;
function componentIssuesTemplate(components) {
  function format(component) {
    return `${_chalk().default.underline(_chalk().default.cyan(component.id.toString()))}\n${(0, _componentIssuesTemplate().formatIssues)(component)}`;
  }
  const result = `\n${components.map(format).join('\n')}`;
  return result;
}

//# sourceMappingURL=components-have-issues.js.map