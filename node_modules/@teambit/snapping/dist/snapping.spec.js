"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));
  _fsExtra = function () {
    return data;
  };
  return data;
}
function _path() {
  const data = _interopRequireDefault(require("path"));
  _path = function () {
    return data;
  };
  return data;
}
function _harmonyTesting() {
  const data = require("@teambit/harmony.testing.load-aspect");
  _harmonyTesting = function () {
    return data;
  };
  return data;
}
function _workspaceTesting() {
  const data = require("@teambit/workspace.testing.mock-workspace");
  _workspaceTesting = function () {
    return data;
  };
  return data;
}
function _issues() {
  const data = _interopRequireDefault(require("@teambit/issues"));
  _issues = function () {
    return data;
  };
  return data;
}
function _compiler() {
  const data = require("@teambit/compiler");
  _compiler = function () {
    return data;
  };
  return data;
}
function _componentTesting() {
  const data = require("@teambit/component.testing.mock-components");
  _componentTesting = function () {
    return data;
  };
  return data;
}
function _snapping() {
  const data = require("./snapping.aspect");
  _snapping = function () {
    return data;
  };
  return data;
}
function _componentsHaveIssues() {
  const data = require("./components-have-issues");
  _componentsHaveIssues = function () {
    return data;
  };
  return data;
}
describe('Snapping aspect', () => {
  let workspaceData;
  let snapping;
  describe('components with issues', () => {
    beforeAll(async () => {
      workspaceData = (0, _workspaceTesting().mockWorkspace)();
      const {
        workspacePath
      } = workspaceData;
      // eslint-disable-next-line no-console
      console.log('workspace created at ', workspacePath);
      await (0, _componentTesting().mockComponents)(workspacePath);
      await _fsExtra().default.writeFile(_path().default.join(workspacePath, 'comp1/index.js'), `const nonExist = require("non-exist");`);
      const compiler = await (0, _harmonyTesting().loadAspect)(_compiler().CompilerAspect, workspacePath);
      await compiler.compileOnWorkspace();
      snapping = await (0, _harmonyTesting().loadAspect)(_snapping().SnappingAspect, workspacePath);
    });
    it('tag should throw an ComponentsHaveIssues error', async () => {
      try {
        await snapping.tag({
          ids: ['comp1']
        });
      } catch (err) {
        expect(err.constructor.name).toEqual(_componentsHaveIssues().ComponentsHaveIssues.name);
      }
    });
    // @todo: this test fails during "bit build" for some reason. It passes on "bit test";
    it.skip('should not throw an error if the config was set to ignore MissingPackagesDependenciesOnFs error', async () => {
      await (0, _workspaceTesting().setWorkspaceConfig)(workspaceData.workspacePath, _issues().default.id, {
        ignoreIssues: ['MissingPackagesDependenciesOnFs']
      });
      snapping = await (0, _harmonyTesting().loadAspect)(_snapping().SnappingAspect, workspaceData.workspacePath);
      const results = await snapping.tag({
        ids: ['comp1']
      });
      expect(results === null || results === void 0 ? void 0 : results.taggedComponents.length).toEqual(1);
    });
    afterAll(async () => {
      await (0, _workspaceTesting().destroyWorkspace)(workspaceData);
    });
  });
});

//# sourceMappingURL=snapping.spec.js.map