"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _bitError() {
  const data = require("@teambit/bit-error");
  _bitError = function () {
    return data;
  };
  return data;
}
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
function _constants() {
  const data = require("@teambit/legacy/dist/constants");
  _constants = function () {
    return data;
  };
  return data;
}
class ResetCmd {
  constructor(snapping) {
    this.snapping = snapping;
    (0, _defineProperty2().default)(this, "name", 'reset [component-pattern]');
    (0, _defineProperty2().default)(this, "description", 'revert tagged or snapped versions for component(s)');
    (0, _defineProperty2().default)(this, "arguments", [{
      name: 'component-pattern',
      description: _constants().COMPONENT_PATTERN_HELP
    }, {
      name: 'component-version',
      description: 'the version to untag (semver for tags. hash for snaps)'
    }]);
    (0, _defineProperty2().default)(this, "group", 'development');
    (0, _defineProperty2().default)(this, "extendedDescription", `https://${_constants().BASE_DOCS_DOMAIN}/components/tags#undoing-a-tag`);
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "options", [['a', 'all', 'revert tag/snap for all tagged/snapped components'], ['', 'head', 'revert the head tag/snap only (by default, all local tags/snaps are reverted)'], ['', 'soft', 'revert only soft-tags (components tagged with --soft flag)'], ['f', 'force', 'revert the tag even if used as a dependency. WARNING: components that depend on this tag will corrupt']]);
    (0, _defineProperty2().default)(this, "loader", true);
    (0, _defineProperty2().default)(this, "migration", true);
  }
  async report([pattern], {
    all = false,
    head = false,
    force = false,
    soft = false
  }) {
    if (!pattern && !all) {
      throw new (_bitError().BitError)('please specify a component-pattern or use --all flag');
    }
    if (pattern && all) {
      throw new (_bitError().BitError)('please specify either a component-pattern or --all flag, not both');
    }
    if (soft && head) {
      throw new (_bitError().BitError)('please specify either --soft or --head flag, not both');
    }
    const {
      results,
      isSoftUntag
    } = await this.snapping.reset(pattern, head, force, soft);
    const titleSuffix = isSoftUntag ? 'soft-untagged (are not candidate for tagging anymore)' : 'untagged';
    const title = _chalk().default.green(`${results.length} component(s) were ${titleSuffix}:\n`);
    const components = results.map(result => {
      return `${_chalk().default.cyan(result.id.toStringWithoutVersion())}. version(s): ${result.versions.join(', ')}`;
    });
    return title + components.join('\n');
  }
}
exports.default = ResetCmd;

//# sourceMappingURL=reset-cmd.js.map