"use strict";

require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
require("core-js/modules/es.regexp.exec.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAspectDef = getAspectDef;
exports.getAspectDir = getAspectDir;
exports.getAspectDirFromBvm = getAspectDirFromBvm;
exports.getAspectDistDir = getAspectDistDir;
exports.getCoreAspectName = getCoreAspectName;
exports.getCoreAspectPackageName = getCoreAspectPackageName;
function _bitError() {
  const data = require("@teambit/bit-error");
  _bitError = function () {
    return data;
  };
  return data;
}
function _fsExtra() {
  const data = require("fs-extra");
  _fsExtra = function () {
    return data;
  };
  return data;
}
function _path() {
  const data = require("path");
  _path = function () {
    return data;
  };
  return data;
}
function _bvm() {
  const data = require("@teambit/bvm.config");
  _bvm = function () {
    return data;
  };
  return data;
}
let _bvmConfig;
function getAspectDirFromPath(id, pathsToResolveAspects) {
  const aspectName = getCoreAspectName(id);
  const packageName = getCoreAspectPackageName(id);
  let moduleDirectory;
  if (pathsToResolveAspects && pathsToResolveAspects.length) {
    moduleDirectory = require.resolve(packageName, {
      paths: pathsToResolveAspects
    });
  } else {
    moduleDirectory = require.resolve(packageName);
  }
  const dirPath = (0, _path().join)(moduleDirectory, '../..'); // to remove the "index.js" at the end
  if (!(0, _fsExtra().existsSync)(dirPath)) {
    throw new Error(`unable to find ${aspectName} in ${dirPath}`);
  }
  return dirPath;
}
function getAspectDir(id) {
  const aspectName = getCoreAspectName(id);
  let dirPath;
  try {
    dirPath = getAspectDirFromPath(id);
  } catch (err) {
    dirPath = (0, _path().resolve)(__dirname, '../..', aspectName, 'dist');
  }
  if (!(0, _fsExtra().existsSync)(dirPath)) {
    throw new Error(`unable to find ${aspectName} in ${dirPath}`);
  }
  return dirPath;
}
function getAspectDirFromBvm(id, bvmDirOptions) {
  if (!_bvmConfig) {
    _bvmConfig = _bvm().Config.load(false, ['env', 'file']);
  }
  const bvmConfig = _bvmConfig;
  let version;
  if (bvmDirOptions !== null && bvmDirOptions !== void 0 && bvmDirOptions.version) {
    version = bvmDirOptions === null || bvmDirOptions === void 0 ? void 0 : bvmDirOptions.version;
  } else {
    const link = (bvmDirOptions === null || bvmDirOptions === void 0 ? void 0 : bvmDirOptions.linkName) || bvmConfig.getDefaultLinkName();
    const links = bvmConfig.getLinks();
    version = links[link];
    if (!version) {
      throw new (_bitError().BitError)(`can't find link named ${bvmDirOptions === null || bvmDirOptions === void 0 ? void 0 : bvmDirOptions.linkName} in bvm config`);
    }
  }
  const {
    versionDir,
    exists
  } = bvmConfig.getSpecificVersionDir(version, true);
  if (!exists) {
    throw new (_bitError().BitError)(`can't find version ${version} in bvm folder`);
  }
  return getAspectDirFromPath(id, [versionDir]);
}
function getAspectDistDir(id) {
  return (0, _path().resolve)(`${getAspectDir(id)}/dist`);
}
function getCoreAspectName(id) {
  const [, ...name] = id.split('/');
  const aspectName = name.join('.');
  return aspectName;
}
function getCoreAspectPackageName(id) {
  const aspectName = getCoreAspectName(id);
  return `@teambit/${aspectName}`;
}
async function getAspectDef(aspectName, runtime) {
  const dirPath = getAspectDistDir(aspectName);
  const files = await (0, _fsExtra().readdir)(dirPath);
  let runtimeFile;
  if (runtime) {
    runtimeFile = files.find(file => file.includes(`.${runtime}.runtime.js`)) || null;
  }
  return {
    id: aspectName,
    aspectPath: (0, _path().join)(dirPath, '..'),
    runtimePath: runtimeFile ? (0, _path().resolve)(`${dirPath}/${runtimeFile}`) : null
  };
}

//# sourceMappingURL=core-aspects.js.map