{"version":3,"names":["Plugins","constructor","component","plugins","getByRuntime","runtime","filter","plugin","supportsRuntime","load","aspect","Aspect","create","id","toString","addRuntime","provider","forEach","register","dependencies","has","Boolean","length","from","defs","resolvePath","flatMap","pluginDef","files","pattern","filesystem","byGlob","byRegex","map","file","Plugin","relative","path"],"sources":["plugins.ts"],"sourcesContent":["import { Component } from '@teambit/component';\nimport { Aspect } from '@teambit/harmony';\nimport { PluginDefinition } from './plugin-definition';\nimport { Plugin } from './plugin';\n\nexport type PluginMap = { [filePath: string]: PluginDefinition };\n\nexport class Plugins {\n  constructor(readonly component: Component, readonly plugins: Plugin[]) {}\n\n  // computeDependencies(runtime: string): Aspect[] {\n  //   const inRuntime = this.getByRuntime(runtime);\n  //   return inRuntime.flatMap((plugin) => {\n  //     return plugin.def.dependencies;\n  //   });\n  // }\n\n  getByRuntime(runtime: string) {\n    return this.plugins.filter((plugin) => {\n      return plugin.supportsRuntime(runtime);\n    });\n  }\n\n  async load(runtime: string) {\n    const plugins = this.getByRuntime(runtime);\n    const aspect = Aspect.create({\n      id: this.component.id.toString(),\n    });\n\n    aspect.addRuntime({\n      provider: async () => {\n        plugins.forEach((plugin) => {\n          plugin.register(aspect);\n        });\n      },\n      runtime,\n      // dependencies: this.computeDependencies(runtime)\n      dependencies: [],\n    });\n\n    return aspect;\n  }\n\n  has() {\n    return Boolean(this.plugins.length);\n  }\n\n  static from(component: Component, defs: PluginDefinition[], resolvePath?: (path: string) => string) {\n    const plugins = defs.flatMap((pluginDef) => {\n      const files =\n        typeof pluginDef.pattern === 'string'\n          ? component.filesystem.byGlob([pluginDef.pattern])\n          : component.filesystem.byRegex(pluginDef.pattern);\n\n      return files.map((file) => {\n        return new Plugin(pluginDef, resolvePath ? resolvePath(file.relative) : file.path);\n      });\n    });\n\n    return new Plugins(component, plugins);\n  }\n}\n"],"mappings":";;;;;;;;;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAIO,MAAMA,OAAO,CAAC;EACnBC,WAAW,CAAUC,SAAoB,EAAWC,OAAiB,EAAE;IAAA,KAAlDD,SAAoB,GAApBA,SAAoB;IAAA,KAAWC,OAAiB,GAAjBA,OAAiB;EAAG;;EAExE;EACA;EACA;EACA;EACA;EACA;;EAEAC,YAAY,CAACC,OAAe,EAAE;IAC5B,OAAO,IAAI,CAACF,OAAO,CAACG,MAAM,CAAEC,MAAM,IAAK;MACrC,OAAOA,MAAM,CAACC,eAAe,CAACH,OAAO,CAAC;IACxC,CAAC,CAAC;EACJ;EAEA,MAAMI,IAAI,CAACJ,OAAe,EAAE;IAC1B,MAAMF,OAAO,GAAG,IAAI,CAACC,YAAY,CAACC,OAAO,CAAC;IAC1C,MAAMK,MAAM,GAAGC,iBAAM,CAACC,MAAM,CAAC;MAC3BC,EAAE,EAAE,IAAI,CAACX,SAAS,CAACW,EAAE,CAACC,QAAQ;IAChC,CAAC,CAAC;IAEFJ,MAAM,CAACK,UAAU,CAAC;MAChBC,QAAQ,EAAE,YAAY;QACpBb,OAAO,CAACc,OAAO,CAAEV,MAAM,IAAK;UAC1BA,MAAM,CAACW,QAAQ,CAACR,MAAM,CAAC;QACzB,CAAC,CAAC;MACJ,CAAC;MACDL,OAAO;MACP;MACAc,YAAY,EAAE;IAChB,CAAC,CAAC;IAEF,OAAOT,MAAM;EACf;EAEAU,GAAG,GAAG;IACJ,OAAOC,OAAO,CAAC,IAAI,CAAClB,OAAO,CAACmB,MAAM,CAAC;EACrC;EAEA,OAAOC,IAAI,CAACrB,SAAoB,EAAEsB,IAAwB,EAAEC,WAAsC,EAAE;IAClG,MAAMtB,OAAO,GAAGqB,IAAI,CAACE,OAAO,CAAEC,SAAS,IAAK;MAC1C,MAAMC,KAAK,GACT,OAAOD,SAAS,CAACE,OAAO,KAAK,QAAQ,GACjC3B,SAAS,CAAC4B,UAAU,CAACC,MAAM,CAAC,CAACJ,SAAS,CAACE,OAAO,CAAC,CAAC,GAChD3B,SAAS,CAAC4B,UAAU,CAACE,OAAO,CAACL,SAAS,CAACE,OAAO,CAAC;MAErD,OAAOD,KAAK,CAACK,GAAG,CAAEC,IAAI,IAAK;QACzB,OAAO,KAAIC,gBAAM,EAACR,SAAS,EAAEF,WAAW,GAAGA,WAAW,CAACS,IAAI,CAACE,QAAQ,CAAC,GAAGF,IAAI,CAACG,IAAI,CAAC;MACpF,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,OAAO,IAAIrC,OAAO,CAACE,SAAS,EAAEC,OAAO,CAAC;EACxC;AACF;AAAC"}