"use strict";

require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GraphBuilder = void 0;
function _graph() {
  const data = require("@teambit/graph.cleargraph");
  _graph = function () {
    return data;
  };
  return data;
}
function _componentGraph() {
  const data = require("./component-graph");
  _componentGraph = function () {
    return data;
  };
  return data;
}
function _dependency() {
  const data = require("./model/dependency");
  _dependency = function () {
    return data;
  };
  return data;
}
class GraphBuilder {
  constructor(componentAspect) {
    this.componentAspect = componentAspect;
  }
  async getGraph(ids, opts = {}) {
    const componentHost = opts.host || this.componentAspect.getHost();
    const legacyGraph = await componentHost.getLegacyGraph(ids, false);
    const graph = await this.buildFromLegacy(legacyGraph, {
      host: opts.host
    });
    graph.seederIds = ids || (await componentHost.listIds());
    return graph;
  }
  async buildFromLegacy(legacyGraph, opts = {}) {
    const newGraph = new (_componentGraph().ComponentGraph)();
    const componentHost = opts.host || this.componentAspect.getHost();
    const setNodeP = legacyGraph.nodes().map(async nodeId => {
      const componentId = await componentHost.resolveComponentId(nodeId);
      const component = await componentHost.get(componentId);
      if (component) {
        newGraph.setNode(new (_graph().Node)(componentId.toString(), component));
      }
    });
    await Promise.all(setNodeP);
    const setEdgePromise = legacyGraph.edges().map(async edgeId => {
      const source = await componentHost.resolveComponentId(edgeId.v);
      const target = await componentHost.resolveComponentId(edgeId.w);
      const edgeObj = legacyGraph.edge(edgeId.v, edgeId.w) === 'dependencies' ? new (_dependency().Dependency)('runtime') : new (_dependency().Dependency)('dev');
      newGraph.setEdge(new (_graph().Edge)(source.toString(), target.toString(), edgeObj));
    });
    await Promise.all(setEdgePromise);
    return newGraph;
  }
}
exports.GraphBuilder = GraphBuilder;

//# sourceMappingURL=graph-builder.js.map