{"version":3,"names":["textCmp","Intl","Collator","compare","graphSchema","graphBuilder","componentAspect","typeDefs","gql","resolvers","ComponentGraph","nodes","graph","map","node","id","component","attr","sort","a","b","edges","edge","sourceId","targetId","dependencyLifecycleType","getDependencyLifecycleType","type","Query","_parent","ids","filter","componentsHost","getHost","resolvedIds","resolveMultipleComponentIds","list","x","getGraph","undefined","runtimeGraph","runtimeOnly","toString","edgeRawData","EdgeType","dev","runtime","peer"],"sources":["graph.graphql.ts"],"sourcesContent":["import { ComponentMain } from '@teambit/component';\nimport { Schema } from '@teambit/graphql';\nimport gql from 'graphql-tag';\n\nimport { GraphBuilder } from './graph-builder';\nimport { ComponentGraph } from './component-graph';\nimport { GraphFilter } from './model/graph-filters';\nimport { DependencyType } from './model/dependency';\nimport { EdgeType } from './edge-type';\n\nconst textCmp = new Intl.Collator().compare;\n\nexport function graphSchema(graphBuilder: GraphBuilder, componentAspect: ComponentMain): Schema {\n  return {\n    typeDefs: gql`\n      type ComponentGraph {\n        nodes: [ComponentGraphNode]\n        edges: [ComponentGraphEdge]\n      }\n\n      type ComponentGraphNode {\n        id: String\n        component: Component\n      }\n\n      enum DependencyLifecycleType {\n        PEER\n        RUNTIME\n        DEV\n      }\n\n      type ComponentGraphEdge {\n        sourceId: String\n        targetId: String\n        dependencyLifecycleType: DependencyLifecycleType\n      }\n\n      extend type Query {\n        graph(ids: [String], filter: String): ComponentGraph\n      }\n    `,\n    resolvers: {\n      ComponentGraph: {\n        nodes: (graph: ComponentGraph) => {\n          return graph.nodes\n            .map((node) => {\n              return {\n                id: node.id,\n                component: node.attr,\n              };\n            })\n            .sort((a, b) => textCmp(a.id, b.id));\n        },\n        edges: (graph: ComponentGraph) => {\n          return graph.edges\n            .map(\n              (edge) =>\n                ({\n                  sourceId: edge.sourceId,\n                  targetId: edge.targetId,\n                  dependencyLifecycleType: getDependencyLifecycleType(edge.attr.type),\n                } as { sourceId: string; targetId: string; dependencyLifecycleType: EdgeType })\n            )\n            .sort((a, b) => textCmp(a.sourceId, b.sourceId))\n            .sort((a, b) => textCmp(a.targetId, b.targetId));\n        },\n      },\n      Query: {\n        graph: async (_parent, { ids, filter }: { ids?: string[]; filter?: GraphFilter }) => {\n          const componentsHost = componentAspect.getHost();\n          const resolvedIds = ids\n            ? await componentsHost.resolveMultipleComponentIds(ids)\n            : (await componentsHost.list()).map((x) => x.id);\n\n          const graph = await graphBuilder.getGraph(resolvedIds);\n          if (!graph) return undefined;\n\n          if (filter === 'runtimeOnly') {\n            const runtimeGraph = graph.runtimeOnly(resolvedIds.map((x) => x.toString()));\n            return runtimeGraph;\n          }\n\n          return graph;\n        },\n      },\n    },\n  };\n}\n\nfunction getDependencyLifecycleType(edgeRawData: DependencyType): EdgeType {\n  if (edgeRawData === 'dev') return EdgeType.dev;\n  if (edgeRawData === 'runtime') return EdgeType.runtime;\n  return EdgeType.peer;\n}\n"],"mappings":";;;;;;;;;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAMA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA,MAAMA,OAAO,GAAG,IAAIC,IAAI,CAACC,QAAQ,EAAE,CAACC,OAAO;AAEpC,SAASC,WAAW,CAACC,YAA0B,EAAEC,eAA8B,EAAU;EAC9F,OAAO;IACLC,QAAQ,EAAE,IAAAC,qBAAG,CAAC;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDC,SAAS,EAAE;MACTC,cAAc,EAAE;QACdC,KAAK,EAAGC,KAAqB,IAAK;UAChC,OAAOA,KAAK,CAACD,KAAK,CACfE,GAAG,CAAEC,IAAI,IAAK;YACb,OAAO;cACLC,EAAE,EAAED,IAAI,CAACC,EAAE;cACXC,SAAS,EAAEF,IAAI,CAACG;YAClB,CAAC;UACH,CAAC,CAAC,CACDC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKpB,OAAO,CAACmB,CAAC,CAACJ,EAAE,EAAEK,CAAC,CAACL,EAAE,CAAC,CAAC;QACxC,CAAC;QACDM,KAAK,EAAGT,KAAqB,IAAK;UAChC,OAAOA,KAAK,CAACS,KAAK,CACfR,GAAG,CACDS,IAAI,KACF;YACCC,QAAQ,EAAED,IAAI,CAACC,QAAQ;YACvBC,QAAQ,EAAEF,IAAI,CAACE,QAAQ;YACvBC,uBAAuB,EAAEC,0BAA0B,CAACJ,IAAI,CAACL,IAAI,CAACU,IAAI;UACpE,CAAC,CAA8E,CAClF,CACAT,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKpB,OAAO,CAACmB,CAAC,CAACI,QAAQ,EAAEH,CAAC,CAACG,QAAQ,CAAC,CAAC,CAC/CL,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKpB,OAAO,CAACmB,CAAC,CAACK,QAAQ,EAAEJ,CAAC,CAACI,QAAQ,CAAC,CAAC;QACpD;MACF,CAAC;MACDI,KAAK,EAAE;QACLhB,KAAK,EAAE,OAAOiB,OAAO,EAAE;UAAEC,GAAG;UAAEC;QAAiD,CAAC,KAAK;UACnF,MAAMC,cAAc,GAAG1B,eAAe,CAAC2B,OAAO,EAAE;UAChD,MAAMC,WAAW,GAAGJ,GAAG,GACnB,MAAME,cAAc,CAACG,2BAA2B,CAACL,GAAG,CAAC,GACrD,CAAC,MAAME,cAAc,CAACI,IAAI,EAAE,EAAEvB,GAAG,CAAEwB,CAAC,IAAKA,CAAC,CAACtB,EAAE,CAAC;UAElD,MAAMH,KAAK,GAAG,MAAMP,YAAY,CAACiC,QAAQ,CAACJ,WAAW,CAAC;UACtD,IAAI,CAACtB,KAAK,EAAE,OAAO2B,SAAS;UAE5B,IAAIR,MAAM,KAAK,aAAa,EAAE;YAC5B,MAAMS,YAAY,GAAG5B,KAAK,CAAC6B,WAAW,CAACP,WAAW,CAACrB,GAAG,CAAEwB,CAAC,IAAKA,CAAC,CAACK,QAAQ,EAAE,CAAC,CAAC;YAC5E,OAAOF,YAAY;UACrB;UAEA,OAAO5B,KAAK;QACd;MACF;IACF;EACF,CAAC;AACH;AAEA,SAASc,0BAA0B,CAACiB,WAA2B,EAAY;EACzE,IAAIA,WAAW,KAAK,KAAK,EAAE,OAAOC,oBAAQ,CAACC,GAAG;EAC9C,IAAIF,WAAW,KAAK,SAAS,EAAE,OAAOC,oBAAQ,CAACE,OAAO;EACtD,OAAOF,oBAAQ,CAACG,IAAI;AACtB"}