"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GraphUI = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _ui() {
  const data = require("@teambit/ui");
  _ui = function () {
    return data;
  };
  return data;
}
function _harmony() {
  const data = require("@teambit/harmony");
  _harmony = function () {
    return data;
  };
  return data;
}
function _componentCompare() {
  const data = require("@teambit/component-compare");
  _componentCompare = function () {
    return data;
  };
  return data;
}
function _component() {
  const data = require("@teambit/component");
  _component = function () {
    return data;
  };
  return data;
}
function _graph() {
  const data = require("./graph.aspect");
  _graph = function () {
    return data;
  };
  return data;
}
function _graph2() {
  const data = require("./ui/graph.section");
  _graph2 = function () {
    return data;
  };
  return data;
}
function _graphCompare() {
  const data = require("./graph.compare.section");
  _graphCompare = function () {
    return data;
  };
  return data;
}
function _dependenciesGraph() {
  const data = require("./ui/dependencies-graph");
  _dependenciesGraph = function () {
    return data;
  };
  return data;
}
/**
 * Presents dependencies graph in the component page
 */
class GraphUI {
  getDependenciesGraph() {
    return _dependenciesGraph().DependenciesGraph;
  }

  /**
   * adds plugins to component nodes
   * @param value
   */
  registerComponentWidget(value) {
    this.componentWidgetSlot.register(value);
  }
  constructor(componentWidgetSlot) {
    this.componentWidgetSlot = componentWidgetSlot;
  }
  static async provider([componentUI, componentCompare], config, [componentWidgetSlot]) {
    const graphUI = new GraphUI(componentWidgetSlot);
    const section = new (_graph2().GraphSection)(componentWidgetSlot);
    const graphSection = new (_graphCompare().GraphCompareSection)();
    if (config.componentTab) componentUI.registerNavigation(section.navigationLink, section.order);
    componentUI.registerRoute(section.route);
    componentCompare.registerNavigation({
      props: graphSection.navigationLink,
      order: graphSection.navigationLink.order
    });
    componentCompare.registerRoutes([graphSection.route]);
    return graphUI;
  }
}
exports.GraphUI = GraphUI;
(0, _defineProperty2().default)(GraphUI, "dependencies", [_component().ComponentAspect, _componentCompare().ComponentCompareAspect]);
(0, _defineProperty2().default)(GraphUI, "runtime", _ui().UIRuntime);
(0, _defineProperty2().default)(GraphUI, "slots", [_harmony().Slot.withType()]);
(0, _defineProperty2().default)(GraphUI, "defaultConfig", {
  componentTab: true
});
_graph().GraphAspect.addRuntime(GraphUI);

//# sourceMappingURL=graph.ui.runtime.js.map