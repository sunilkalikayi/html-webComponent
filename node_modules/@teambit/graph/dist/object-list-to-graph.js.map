{"version":3,"names":["IdGraph","Graph","constructor","nodes","edges","objectListToGraph","objectList","bitObjectsList","toBitObjects","bitObjectListToGraph","exportMetadata","getExportMetadata","components","getComponents","versions","getVersions","Promise","all","map","component","compFromMetadata","exportVersions","find","c","id","isEqualWithoutVersion","toBitId","startFrom","head","versionsInfo","getAllVersionsInfo","modelComponent","versionObjects","throws","forEach","versionInfo","changeVersion","tag","ref","toString","idStr","push","Node","version","dependencies","devDependencies","extensionDependencies","depsIdsGroupedByType","addDep","depId","edge","depIdStr","Edge","runTime","Dependency","dev","uniqNodes","uniqBy","idGraph"],"sources":["object-list-to-graph.ts"],"sourcesContent":["import { Graph, Node, Edge } from '@teambit/graph.cleargraph';\nimport { uniqBy } from 'lodash';\nimport { BitId } from '@teambit/legacy-bit-id';\nimport type { ObjectList } from '@teambit/legacy/dist/scope/objects/object-list';\nimport { BitObjectList } from '@teambit/legacy/dist/scope/objects/bit-object-list';\nimport { getAllVersionsInfo } from '@teambit/legacy/dist/scope/component-ops/traverse-versions';\nimport { Dependency } from './model/dependency';\n\ntype BitIdNode = Node<BitId>;\ntype DependencyEdge = Edge<Dependency>;\n\nexport class IdGraph extends Graph<BitId, Dependency> {\n  constructor(nodes: BitIdNode[] = [], edges: DependencyEdge[] = []) {\n    super(nodes, edges);\n  }\n}\n\nexport async function objectListToGraph(objectList: ObjectList): Promise<IdGraph> {\n  const bitObjectsList = await objectList.toBitObjects();\n\n  return bitObjectListToGraph(bitObjectsList);\n}\n\nexport async function bitObjectListToGraph(bitObjectsList: BitObjectList): Promise<IdGraph> {\n  const exportMetadata = bitObjectsList.getExportMetadata();\n  const components = bitObjectsList.getComponents();\n  const versions = bitObjectsList.getVersions();\n  const nodes: BitIdNode[] = [];\n  const edges: DependencyEdge[] = [];\n  await Promise.all(\n    components.map(async (component) => {\n      const compFromMetadata = exportMetadata?.exportVersions.find((c) =>\n        c.id.isEqualWithoutVersion(component.toBitId())\n      );\n      const startFrom = compFromMetadata?.head;\n      const versionsInfo = await getAllVersionsInfo({\n        modelComponent: component,\n        versionObjects: versions,\n        startFrom,\n        throws: false,\n      });\n      versionsInfo.forEach((versionInfo) => {\n        const id = component.toBitId().changeVersion(versionInfo.tag || versionInfo.ref.toString());\n        const idStr = id.toString();\n        nodes.push(new Node(idStr, id));\n        if (!versionInfo.version) {\n          return;\n        }\n        const { dependencies, devDependencies, extensionDependencies } = versionInfo.version.depsIdsGroupedByType;\n        const addDep = (depId: BitId, edge: Dependency) => {\n          const depIdStr = depId.toString();\n          nodes.push(new Node(depIdStr, depId));\n          edges.push(new Edge(idStr, depIdStr, edge));\n        };\n        const runTime = new Dependency('runtime');\n        const dev = new Dependency('dev');\n        dependencies.forEach((depId) => addDep(depId, runTime));\n        [...devDependencies, ...extensionDependencies].forEach((depId) => addDep(depId, dev));\n      });\n    })\n  );\n  const uniqNodes = uniqBy(nodes, 'id');\n  const idGraph = new IdGraph(uniqNodes, edges);\n\n  return idGraph;\n}\n"],"mappings":"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"}