"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GraphCmd = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
function _os() {
  const data = _interopRequireDefault(require("os"));
  _os = function () {
    return data;
  };
  return data;
}
function path() {
  const data = _interopRequireWildcard(require("path"));
  path = function () {
    return data;
  };
  return data;
}
function _graphlib() {
  const data = _interopRequireDefault(require("graphlib"));
  _graphlib = function () {
    return data;
  };
  return data;
}
function _legacyBitId() {
  const data = require("@teambit/legacy-bit-id");
  _legacyBitId = function () {
    return data;
  };
  return data;
}
function _utils() {
  const data = require("@teambit/legacy/dist/utils");
  _utils = function () {
    return data;
  };
  return data;
}
function _vizgraph() {
  const data = _interopRequireDefault(require("@teambit/legacy/dist/scope/graph/vizgraph"));
  _vizgraph = function () {
    return data;
  };
  return data;
}
function _consumer() {
  const data = require("@teambit/legacy/dist/consumer");
  _consumer = function () {
    return data;
  };
  return data;
}
function _scopeGraph() {
  const data = _interopRequireDefault(require("@teambit/legacy/dist/scope/graph/scope-graph"));
  _scopeGraph = function () {
    return data;
  };
  return data;
}
function _exceptions() {
  const data = require("@teambit/legacy/dist/consumer/exceptions");
  _exceptions = function () {
    return data;
  };
  return data;
}
function _getRemoteByName() {
  const data = _interopRequireDefault(require("@teambit/legacy/dist/remotes/get-remote-by-name"));
  _getRemoteByName = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
class GraphCmd {
  constructor() {
    (0, _defineProperty2().default)(this, "name", 'graph [id]');
    (0, _defineProperty2().default)(this, "description", 'EXPERIMENTAL. generate an image file with the dependencies graph');
    (0, _defineProperty2().default)(this, "group", 'discover');
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "options", [['i', 'image <image>', 'image path. use one of the following extensions: [gif, png, svg, pdf]'], ['r', 'remote [remoteName]', 'remote name (name is optional, leave empty when id is specified)'], ['', 'all-versions', 'enter all components versions into the graph, not only latest'], ['', 'layout <name>', 'GraphVis layout. default to "dot". options are [circo, dot, fdp, neato, osage, patchwork, sfdp, twopi]'], ['j', 'json', 'json format']]);
    (0, _defineProperty2().default)(this, "remoteOp", true);
  }
  async report([id], {
    remote,
    allVersions,
    layout,
    image
  }) {
    const consumer = await (0, _consumer().loadConsumerIfExist)();
    if (!consumer && !remote) throw new (_exceptions().ConsumerNotFound)();
    const graph = await this.generateGraph(consumer, id, remote, allVersions);
    const config = {};
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    if (layout) config.layout = layout;
    const visualDependencyGraph = await _vizgraph().default.loadFromGraphlib(graph, config);
    const getBitId = () => {
      if (!id) return undefined;
      if (remote) return _legacyBitId().BitId.parse(id, true); // user used --remote so we know it has a scope
      return consumer === null || consumer === void 0 ? void 0 : consumer.getParsedId(id);
    };
    const bitId = getBitId();
    if (bitId) {
      visualDependencyGraph.highlightId(bitId);
    }
    image = image || path().join(_os().default.tmpdir(), `${(0, _utils().generateRandomStr)()}.png`);
    const result = await visualDependencyGraph.image(image);
    return _chalk().default.green(`image created at ${result}`);
  }
  async generateGraph(consumer, id, remote, allVersions) {
    if (!consumer && !remote) throw new (_exceptions().ConsumerNotFound)();
    const getBitId = () => {
      if (!id) return undefined;
      if (remote) return _legacyBitId().BitId.parse(id, true); // user used --remote so we know it has a scope
      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
      return consumer.getParsedId(id);
    };
    const bitId = getBitId();
    if (remote) {
      if (id) {
        // @ts-ignore scope must be set as it came from a remote
        const scopeName = typeof remote === 'string' ? remote : bitId.scope;
        const remoteScope = await (0, _getRemoteByName().default)(scopeName, consumer);
        const componentDepGraph = await remoteScope.graph(bitId);
        return componentDepGraph.graph;
      }
      if (typeof remote !== 'string') {
        throw new Error('please specify remote scope name or enter an id');
      }
      const remoteScope = await (0, _getRemoteByName().default)(remote, consumer);
      const componentDepGraph = await remoteScope.graph();
      return componentDepGraph.graph;
    }
    const onlyLatest = !allVersions;
    // @ts-ignore consumer must be set here
    const workspaceGraph = await _scopeGraph().default.buildGraphFromWorkspace(consumer, onlyLatest);
    const dependencyGraph = new (_scopeGraph().default)(workspaceGraph);
    if (id) {
      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
      const componentGraph = dependencyGraph.getSubGraphOfConnectedComponents(bitId);
      const componentDepGraph = new (_scopeGraph().default)(componentGraph);
      return componentDepGraph.graph;
    }
    return dependencyGraph.graph;
  }
  async json([id], {
    remote,
    allVersions
  }) {
    const consumer = await (0, _consumer().loadConsumerIfExist)();
    if (!consumer && !remote) throw new (_exceptions().ConsumerNotFound)();
    const graph = await this.generateGraph(consumer, id, remote, allVersions);
    return _graphlib().default.json.write(graph);
  }
}
exports.GraphCmd = GraphCmd;

//# sourceMappingURL=graph-cmd.js.map