"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GraphMain = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _cli() {
  const data = require("@teambit/cli");
  _cli = function () {
    return data;
  };
  return data;
}
function _component() {
  const data = require("@teambit/component");
  _component = function () {
    return data;
  };
  return data;
}
function _graphql() {
  const data = require("@teambit/graphql");
  _graphql = function () {
    return data;
  };
  return data;
}
function _logger() {
  const data = require("@teambit/logger");
  _logger = function () {
    return data;
  };
  return data;
}
function _graphBuilder() {
  const data = require("./graph-builder");
  _graphBuilder = function () {
    return data;
  };
  return data;
}
function _graph() {
  const data = require("./graph.graphql");
  _graph = function () {
    return data;
  };
  return data;
}
function _graph2() {
  const data = require("./graph.aspect");
  _graph2 = function () {
    return data;
  };
  return data;
}
function _graphCmd() {
  const data = require("./graph-cmd");
  _graphCmd = function () {
    return data;
  };
  return data;
}
class GraphMain {
  constructor(componentAspect, logger) {
    this.componentAspect = componentAspect;
    this.logger = logger;
  }
  async getGraph(ids, opts = {}) {
    const graphBuilder = new (_graphBuilder().GraphBuilder)(this.componentAspect);
    return graphBuilder.getGraph(ids, opts);
  }
  static async provider([graphql, componentAspect, cli, loggerMain]) {
    const logger = loggerMain.createLogger(_graph2().GraphAspect.id);
    const graphBuilder = new (_graphBuilder().GraphBuilder)(componentAspect);
    graphql.register((0, _graph().graphSchema)(graphBuilder, componentAspect));
    const graphMain = new GraphMain(componentAspect, logger);
    cli.register(new (_graphCmd().GraphCmd)());
    return graphMain;
  }
}
exports.GraphMain = GraphMain;
(0, _defineProperty2().default)(GraphMain, "slots", []);
(0, _defineProperty2().default)(GraphMain, "dependencies", [_graphql().GraphqlAspect, _component().ComponentAspect, _cli().CLIAspect, _logger().LoggerAspect]);
(0, _defineProperty2().default)(GraphMain, "runtime", _cli().MainRuntime);
_graph2().GraphAspect.addRuntime(GraphMain);

//# sourceMappingURL=graph.main.runtime.js.map