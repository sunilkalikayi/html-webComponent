{"version":3,"names":["DEPENDENCIES_TYPES","ComponentGraph","Graph","constructor","nodes","edges","create","findIdsFromSourcesToTargets","sources","targets","removeVerFromIdStr","idStr","split","sourcesStr","map","s","toStringWithoutVersion","targetsStr","t","allFlattened","source","successors","toString","flat","allFlattenedIds","uniq","f","id","results","forEach","idWithNoVer","includes","allSuccessors","allSuccessorsWithNoVersion","find","push","components","getNodes","n","attr","c","findCycles","graph","cycles","shouldLimitToSeedersOnly","seederIdsStr","seederIds","cyclesWithSeeders","filter","cycle","some","cycleIdStr","findDuplicateDependencies","versionMap","calculateVersionMap","seederIdsNoVersions","duplicateDependencies","Map","compFullName","versions","allVersionNodes","length","versionSubgraphs","notLatestVersions","version","latestVersionNode","predecessors","predecessorsSubgraph","immediatePredecessors","predecessor","subGraph","buildFromCleargraph","versionSubgraph","versionId","immediateDependents","isSeeder","shouldDisplayDueToBeingSeeder","duplicateDep","DuplicateDependency","set","runtimeOnly","componentIds","successorsSubgraph","edgeFilter","edge","type","node","comp","compKey","_legacy","has","value","get","Object","prototype","hasOwnProperty","call","currentComp","latestComp","head","Date","timestamp"],"sources":["component-graph.ts"],"sourcesContent":["import { Component, ComponentID } from '@teambit/component';\nimport { Graph, Node, Edge } from '@teambit/graph.cleargraph';\nimport { uniq } from 'lodash';\n\nimport { Dependency } from '../model/dependency';\nimport { DuplicateDependency, VersionSubgraph } from '../duplicate-dependency';\n\nexport const DEPENDENCIES_TYPES = ['dependencies', 'devDependencies'];\n\ntype ComponentNode = Node<Component>;\ntype DependencyEdge = Edge<Dependency>;\n\nexport class ComponentGraph extends Graph<Component, Dependency> {\n  seederIds: ComponentID[] = []; // component IDs that started the graph. (if from workspace, the .bitmap ids normally)\n  constructor(nodes: ComponentNode[] = [], edges: DependencyEdge[] = []) {\n    super(nodes, edges);\n  }\n\n  protected create(nodes: ComponentNode[] = [], edges: DependencyEdge[] = []): this {\n    return new ComponentGraph(nodes, edges) as this;\n  }\n\n  /**\n   * check all the routes from the sources to targets and return the components found during this traversal.\n   * e.g.\n   * A -> B -> C -> N.\n   * A -> E -> N.\n   * B -> F -> G.\n   * given source: A, targets: N. The results will be: B, C, E\n   */\n  findIdsFromSourcesToTargets(sources: ComponentID[], targets: ComponentID[]): ComponentID[] {\n    const removeVerFromIdStr = (idStr: string) => idStr.split('@')[0];\n    const sourcesStr = sources.map((s) => s.toStringWithoutVersion());\n    const targetsStr = targets.map((t) => t.toStringWithoutVersion());\n    const allFlattened = sources.map((source) => this.successors(source.toString())).flat();\n    const allFlattenedIds = uniq(allFlattened.map((f) => f.id));\n    const results: string[] = [];\n    allFlattenedIds.forEach((id) => {\n      const idWithNoVer = removeVerFromIdStr(id);\n      if (sourcesStr.includes(idWithNoVer) || targetsStr.includes(idWithNoVer)) return;\n      const allSuccessors = this.successors(id);\n      const allSuccessorsWithNoVersion = allSuccessors.map((s) => removeVerFromIdStr(s.id));\n      if (allSuccessorsWithNoVersion.find((s) => targetsStr.includes(s))) results.push(id);\n    });\n    const components = this.getNodes(results).map((n) => n.attr);\n\n    return components.map((c) => c.id);\n  }\n\n  /**\n   * overrides the super class to eliminate non-seeders components\n   */\n  findCycles(graph?: this): string[][] {\n    const cycles = super.findCycles(graph);\n    if (!this.shouldLimitToSeedersOnly()) {\n      return cycles;\n    }\n    const seederIdsStr = this.seederIds.map((id) => id.toString());\n    const cyclesWithSeeders = cycles.filter((cycle) => {\n      return cycle.some((cycleIdStr) => seederIdsStr.includes(cycleIdStr));\n    });\n    return cyclesWithSeeders;\n  }\n\n  findDuplicateDependencies(): Map<string, DuplicateDependency> {\n    const versionMap = this.calculateVersionMap();\n    const seederIdsNoVersions = this.seederIds.map((id) => id.toStringWithoutVersion());\n    const duplicateDependencies: Map<string, DuplicateDependency> = new Map();\n    for (const [compFullName, versions] of versionMap) {\n      if (versions.allVersionNodes.length > 1) {\n        const versionSubgraphs: VersionSubgraph[] = [];\n        const notLatestVersions = versions.allVersionNodes.filter((version) => version !== versions.latestVersionNode);\n        notLatestVersions.forEach((version) => {\n          const predecessors = this.predecessorsSubgraph(version);\n          const immediatePredecessors = this.predecessors(version).map((predecessor) => predecessor.id);\n          const subGraph = this.buildFromCleargraph(predecessors);\n          const versionSubgraph: VersionSubgraph = {\n            versionId: version,\n            subGraph,\n            // TODO: validate that this is working correctly\n            immediateDependents: immediatePredecessors,\n          };\n          versionSubgraphs.push(versionSubgraph);\n        });\n        const isSeeder = seederIdsNoVersions.includes(compFullName);\n        const shouldDisplayDueToBeingSeeder = !this.shouldLimitToSeedersOnly() || isSeeder;\n        if (shouldDisplayDueToBeingSeeder && versionSubgraphs.length > 0) {\n          const duplicateDep = new DuplicateDependency(versions.latestVersionNode, versionSubgraphs);\n          duplicateDependencies.set(compFullName, duplicateDep);\n        }\n      }\n    }\n    return duplicateDependencies;\n  }\n\n  buildFromCleargraph(graph: Graph<Component, Dependency>): ComponentGraph {\n    return this.create(graph.nodes, graph.edges);\n  }\n\n  runtimeOnly(componentIds: string[]) {\n    return this.successorsSubgraph(componentIds, {\n      edgeFilter: (edge: DependencyEdge) => edge.attr.type === 'runtime',\n    });\n  }\n\n  private shouldLimitToSeedersOnly() {\n    return this.seederIds.length;\n  }\n\n  private calculateVersionMap(): Map<string, { allVersionNodes: string[]; latestVersionNode: string }> {\n    const versionMap: Map<string, { allVersionNodes: string[]; latestVersionNode: string }> = new Map();\n    for (const node of this.nodes) {\n      const comp = node.attr;\n      const compKey = node.id;\n      const compFullName = comp.id._legacy.toStringWithoutVersion();\n      if (!versionMap.has(compFullName)) {\n        versionMap.set(compFullName, {\n          allVersionNodes: [compKey],\n          latestVersionNode: compKey,\n        });\n      } else {\n        const value = versionMap.get(compFullName);\n        if (value) {\n          if (Object.prototype.hasOwnProperty.call(value, 'allVersionNodes')) {\n            value.allVersionNodes.push(compKey);\n          }\n          const currentComp = comp;\n          const latestComp = this.node(value.latestVersionNode)?.attr;\n          // @todo: this check won't work when the component doesn't have head.\n          // it happens when a dependency is needed in an old version (not head). which Bit doesn't fetch the head\n          // Version object, and as a result, the `Component.head` is empty.\n          // for now it's probably good enough because it's used only for `findDuplicateDependencies`, which only\n          // checks the components on the workspace.\n          if (\n            currentComp.head &&\n            latestComp?.head &&\n            new Date(currentComp.head.timestamp) > new Date(latestComp.head.timestamp)\n          ) {\n            value.latestVersionNode = compKey;\n          }\n        }\n      }\n    }\n    return versionMap;\n  }\n}\n"],"mappings":"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"}