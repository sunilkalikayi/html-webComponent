"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DependenciesCompare = DependenciesCompare;
function _classnames() {
  const data = _interopRequireDefault(require("classnames"));
  _classnames = function () {
    return data;
  };
  return data;
}
function _componentUi() {
  const data = require("@teambit/component.ui.compare");
  _componentUi = function () {
    return data;
  };
  return data;
}
function _designUi() {
  const data = require("@teambit/design.ui.round-loader");
  _designUi = function () {
    return data;
  };
  return data;
}
function _graph() {
  const data = require("@teambit/graph");
  _graph = function () {
    return data;
  };
  return data;
}
function _react() {
  const data = _interopRequireWildcard(require("react"));
  _react = function () {
    return data;
  };
  return data;
}
function _reactFlowRenderer() {
  const data = _interopRequireWildcard(require("react-flow-renderer"));
  _reactFlowRenderer = function () {
    return data;
  };
  return data;
}
function _dependenciesCompareModule() {
  const data = _interopRequireDefault(require("./dependencies-compare.module.scss"));
  _dependenciesCompareModule = function () {
    return data;
  };
  return data;
}
function _dependencyCompareNode() {
  const data = require("./dependency-compare-node");
  _dependencyCompareNode = function () {
    return data;
  };
  return data;
}
function _diffGraph2() {
  const data = require("./diff-graph");
  _diffGraph2 = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ComponentNodeContainer(props) {
  const {
    sourcePosition = _reactFlowRenderer().Position.Top,
    targetPosition = _reactFlowRenderer().Position.Bottom,
    data,
    id
  } = props;
  return /*#__PURE__*/_react().default.createElement("div", {
    key: id
  }, /*#__PURE__*/_react().default.createElement(_reactFlowRenderer().Handle, {
    type: "target",
    position: targetPosition,
    isConnectable: false
  }), /*#__PURE__*/_react().default.createElement(_reactFlowRenderer().Handle, {
    type: "source",
    position: sourcePosition,
    isConnectable: false
  }), /*#__PURE__*/_react().default.createElement(_dependencyCompareNode().DependencyCompareNode, {
    node: data.node,
    type: data.type
  }));
}
const NodeTypes = {
  ComponentNode: ComponentNodeContainer
};
function DependenciesCompare() {
  var _componentCompare$bas, _componentCompare$com, _diffGraph;
  const graphRef = (0, _react().useRef)();
  const componentCompare = (0, _componentUi().useComponentCompare)();
  const baseId = componentCompare === null || componentCompare === void 0 ? void 0 : (_componentCompare$bas = componentCompare.base) === null || _componentCompare$bas === void 0 ? void 0 : _componentCompare$bas.model.id;
  const compareId = componentCompare === null || componentCompare === void 0 ? void 0 : (_componentCompare$com = componentCompare.compare) === null || _componentCompare$com === void 0 ? void 0 : _componentCompare$com.model.id;
  const [filter, setFilter] = (0, _react().useState)('runtimeOnly');
  const isFiltered = filter === 'runtimeOnly';
  const {
    loading: baseLoading,
    graph: baseGraph
  } = (0, _graph().useGraphQuery)(baseId && [baseId.toString()], filter);
  const {
    loading: compareLoading,
    graph: compareGraph
  } = (0, _graph().useGraphQuery)(compareId && [compareId.toString()], filter);
  const loading = baseLoading || compareLoading;
  const graph = (_diffGraph = (0, _diffGraph2().diffGraph)(baseGraph, compareGraph, baseId)) !== null && _diffGraph !== void 0 ? _diffGraph : undefined;
  const elements = (0, _graph().calcElements)(graph, {
    rootNode: baseId
  });
  (0, _react().useEffect)(() => {
    var _graphRef$current;
    (_graphRef$current = graphRef.current) === null || _graphRef$current === void 0 ? void 0 : _graphRef$current.fitView();
  }, [elements]);
  function handleLoad(instance) {
    var _graphRef$current2;
    graphRef.current = instance;
    (_graphRef$current2 = graphRef.current) === null || _graphRef$current2 === void 0 ? void 0 : _graphRef$current2.fitView();
  }
  const onCheckFilter = _isFiltered => {
    setFilter(_isFiltered ? 'runtimeOnly' : undefined);
  };
  if (!loading && (!baseGraph || !compareGraph)) {
    return /*#__PURE__*/_react().default.createElement(_react().default.Fragment, null);
  }
  return /*#__PURE__*/_react().default.createElement("div", {
    className: (0, _classnames().default)([_dependenciesCompareModule().default.page, _graph().graphPageStyles.graph])
  }, loading && /*#__PURE__*/_react().default.createElement("div", {
    className: _dependenciesCompareModule().default.loader
  }, /*#__PURE__*/_react().default.createElement(_designUi().RoundLoader, null)), /*#__PURE__*/_react().default.createElement(_reactFlowRenderer().ReactFlowProvider, null, /*#__PURE__*/_react().default.createElement(_reactFlowRenderer().default, {
    draggable: false,
    nodesDraggable: true,
    selectNodesOnDrag: false,
    nodesConnectable: false,
    zoomOnDoubleClick: false,
    elementsSelectable: false,
    maxZoom: 1,
    className: _graph().dependenciesGraphStyles.graph,
    elements: elements,
    nodeTypes: NodeTypes,
    onLoad: handleLoad
  }, /*#__PURE__*/_react().default.createElement(_reactFlowRenderer().Background, null), /*#__PURE__*/_react().default.createElement(_reactFlowRenderer().Controls, {
    className: _graph().dependenciesGraphStyles.controls
  }), /*#__PURE__*/_react().default.createElement(_reactFlowRenderer().MiniMap, {
    nodeColor: _graph().calcMinimapColors,
    className: _graph().dependenciesGraphStyles.minimap
  }), /*#__PURE__*/_react().default.createElement(_graph().GraphFilters, {
    className: _graph().graphPageStyles.filters,
    disable: loading,
    isFiltered: isFiltered,
    onChangeFilter: onCheckFilter
  }))));
}

//# sourceMappingURL=dependencies-compare.js.map