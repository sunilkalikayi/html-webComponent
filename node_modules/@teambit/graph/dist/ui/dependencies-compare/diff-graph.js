"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.regexp.exec.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.diffGraph = diffGraph;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _compareGraphModel() {
  const data = require("./compare-graph-model");
  _compareGraphModel = function () {
    return data;
  };
  return data;
}
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
const toShortId = node => node.component.id.toStringWithoutVersion();

// this is to get a key with versions ignored so that we'll have a unique set of component nodes
const toShortIdFromNodeId = nodeId => nodeId.split('@')[0];
const delim = '::';
const getEdgeId = _e => {
  return `${toShortIdFromNodeId(_e.sourceId)}${delim}${toShortIdFromNodeId(_e.targetId)}`;
};
function diffGraph(baseGraph, compareGraph, baseId) {
  if (!baseGraph || !compareGraph || !baseId) return null;
  const baseNodes = baseGraph.nodes;
  const compareNodes = compareGraph.nodes;
  const baseNodesMap = new Map(baseNodes.map(n => [toShortId(n), n]));
  const compareNodesMap = new Map(compareNodes.map(n => [toShortId(n), n]));
  const allNodes = [];
  for (const baseNode of baseNodes) {
    const compareNode = compareNodesMap.get(toShortId(baseNode));
    if (compareNode) {
      allNodes.push(_objectSpread(_objectSpread({}, baseNode), {}, {
        compareVersion: compareNode.component.version,
        status: compareNode.component.id.isEqual(baseNode.component.id) ? undefined : 'modified'
      }));
    } else {
      allNodes.push(_objectSpread(_objectSpread({}, baseNode), {}, {
        compareVersion: baseNode.component.version,
        status: 'deleted'
      }));
    }
  }
  const newNodes = compareNodes.filter(n => !baseNodesMap.has(toShortId(n)));
  for (const node of newNodes) {
    allNodes.push(_objectSpread(_objectSpread({}, node), {}, {
      compareVersion: '',
      status: 'new'
    }));
  }
  const allNodesMap = new Map(allNodes.map(n => [toShortId(n), n]));
  const baseEdgesMap = new Map(baseGraph.edges.map(baseEdge => [getEdgeId(baseEdge), baseEdge]));
  const edgesOnlyInCompare = compareGraph.edges.filter(compareEdge => !baseEdgesMap.has(getEdgeId(compareEdge))).map(compareEdge => {
    var _allNodesMap$get, _allNodesMap$get2;
    return _objectSpread(_objectSpread({}, compareEdge), {}, {
      sourceId: ((_allNodesMap$get = allNodesMap.get(toShortIdFromNodeId(compareEdge.sourceId))) === null || _allNodesMap$get === void 0 ? void 0 : _allNodesMap$get.id.toString()) || baseId.toString(),
      targetId: ((_allNodesMap$get2 = allNodesMap.get(toShortIdFromNodeId(compareEdge.targetId))) === null || _allNodesMap$get2 === void 0 ? void 0 : _allNodesMap$get2.id.toString()) || baseId.toString()
    });
  });
  const allEdges = [...baseGraph.edges, ...edgesOnlyInCompare];
  return new (_compareGraphModel().CompareGraphModel)(allNodes, allEdges);
}

//# sourceMappingURL=diff-graph.js.map