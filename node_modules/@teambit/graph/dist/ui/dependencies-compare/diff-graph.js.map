{"version":3,"names":["toShortId","node","component","id","toStringWithoutVersion","toShortIdFromNodeId","nodeId","split","delim","getEdgeId","_e","sourceId","targetId","diffGraph","baseGraph","compareGraph","baseId","baseNodes","nodes","compareNodes","baseNodesMap","Map","map","n","compareNodesMap","allNodes","baseNode","compareNode","get","push","compareVersion","version","status","isEqual","undefined","newNodes","filter","has","allNodesMap","baseEdgesMap","edges","baseEdge","edgesOnlyInCompare","compareEdge","toString","allEdges","CompareGraphModel"],"sources":["diff-graph.ts"],"sourcesContent":["import { ComponentID } from '@teambit/component';\nimport { EdgeModel, GraphModel, NodeModel } from '@teambit/graph';\nimport { CompareGraphModel } from './compare-graph-model';\nimport { CompareNodeModel } from './compare-node-model';\n\nconst toShortId = (node: NodeModel) => node.component.id.toStringWithoutVersion();\n\n// this is to get a key with versions ignored so that we'll have a unique set of component nodes\nconst toShortIdFromNodeId = (nodeId: string) => nodeId.split('@')[0];\n\nconst delim = '::';\n\nconst getEdgeId = (_e: EdgeModel) => {\n  return `${toShortIdFromNodeId(_e.sourceId)}${delim}${toShortIdFromNodeId(_e.targetId)}`;\n};\n\nexport function diffGraph(\n  baseGraph?: GraphModel<NodeModel, EdgeModel>,\n  compareGraph?: GraphModel<NodeModel, EdgeModel>,\n  baseId?: ComponentID\n) {\n  if (!baseGraph || !compareGraph || !baseId) return null;\n\n  const baseNodes = baseGraph.nodes;\n  const compareNodes = compareGraph.nodes;\n\n  const baseNodesMap = new Map<string, NodeModel>(baseNodes.map((n) => [toShortId(n), n]));\n  const compareNodesMap = new Map<string, NodeModel>(compareNodes.map((n) => [toShortId(n), n]));\n\n  const allNodes: Array<CompareNodeModel> = [];\n  for (const baseNode of baseNodes) {\n    const compareNode = compareNodesMap.get(toShortId(baseNode));\n    if (compareNode) {\n      allNodes.push({\n        ...baseNode,\n        compareVersion: compareNode.component.version,\n        status: compareNode.component.id.isEqual(baseNode.component.id) ? undefined : 'modified',\n      });\n    } else {\n      allNodes.push({\n        ...baseNode,\n        compareVersion: baseNode.component.version,\n        status: 'deleted',\n      });\n    }\n  }\n\n  const newNodes = compareNodes.filter((n) => !baseNodesMap.has(toShortId(n)));\n\n  for (const node of newNodes) {\n    allNodes.push({\n      ...node,\n      compareVersion: '',\n      status: 'new',\n    });\n  }\n  const allNodesMap = new Map<string, CompareNodeModel>(allNodes.map((n) => [toShortId(n), n]));\n\n  const baseEdgesMap = new Map<string, EdgeModel>(baseGraph.edges.map((baseEdge) => [getEdgeId(baseEdge), baseEdge]));\n  const edgesOnlyInCompare = compareGraph.edges\n    .filter((compareEdge) => !baseEdgesMap.has(getEdgeId(compareEdge)))\n    .map((compareEdge) => ({\n      ...compareEdge,\n      sourceId: allNodesMap.get(toShortIdFromNodeId(compareEdge.sourceId))?.id.toString() || baseId.toString(),\n      targetId: allNodesMap.get(toShortIdFromNodeId(compareEdge.targetId))?.id.toString() || baseId.toString(),\n    }));\n  const allEdges = [...baseGraph.edges, ...edgesOnlyInCompare];\n  return new CompareGraphModel(allNodes, allEdges);\n}\n"],"mappings":"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"}