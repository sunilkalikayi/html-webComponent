"use strict";

require("core-js/modules/es.array.iterator.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calcElements = calcElements;
function _react() {
  const data = require("react");
  _react = function () {
    return data;
  };
  return data;
}
function _reactFlowRenderer() {
  const data = require("react-flow-renderer");
  _reactFlowRenderer = function () {
    return data;
  };
  return data;
}
function _calcLayout() {
  const data = require("./calc-layout");
  _calcLayout = function () {
    return data;
  };
  return data;
}
function _depEdge() {
  const data = require("./dep-edge");
  _depEdge = function () {
    return data;
  };
  return data;
}
/**
 * generate Nodes and Edges for the ReactFlowRenderer graph renderer
 */
function calcElements(graph, {
  rootNode
}) {
  return (0, _react().useMemo)(() => {
    if (!graph) return [];
    const positions = (0, _calcLayout().calcLayout)(graph);
    const nodes = Array.from(graph.nodes.values()).map(x => {
      return {
        id: x.id,
        type: 'ComponentNode',
        data: {
          node: x,
          type: rootNode && x.component.id.isEqual(rootNode, {
            ignoreVersion: true
          }) ? 'root' : undefined
        },
        position: positions.get(x.id) || {
          x: 0,
          y: 0
        }
      };
    });
    const edges = graph.edges.map(e => ({
      id: `_${e.sourceId}__${e.targetId}`,
      source: e.sourceId,
      target: e.targetId,
      label: (0, _depEdge().depTypeToLabel)(e.dependencyLifecycleType),
      labelBgPadding: [4, 4],
      type: 'smoothstep',
      className: (0, _depEdge().depTypeToClass)(e.dependencyLifecycleType),
      arrowHeadType: _reactFlowRenderer().ArrowHeadType.Arrow
    }));
    return [...nodes, ...edges];
  }, [graph]);
}

//# sourceMappingURL=calc-elements.js.map