"use strict";

require("core-js/modules/es.array.iterator.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calcLayout = calcLayout;
function _dagre() {
  const data = _interopRequireWildcard(require("dagre"));
  _dagre = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const NODE_WIDTH = 260;
const NODE_HEIGHT = 90;
const BOTTOM_TO_TOP = 'BT';

/**
 * calculate the specific location of each node in the graph
 */
function calcLayout(graph) {
  const g = new (_dagre().graphlib.Graph)();
  g.setGraph({
    rankdir: BOTTOM_TO_TOP
  });
  g.setDefaultEdgeLabel(() => ({}));

  // make a new instance of { width, height } per node, or dagre will get confused and place all nodes in the same spot
  graph.nodes.forEach(n => g.setNode(n.id, {
    width: NODE_WIDTH,
    height: NODE_HEIGHT
  }));
  graph.edges.forEach(e => g.setEdge({
    v: e.sourceId,
    w: e.targetId
  }));

  // position items in graph
  _dagre().default.layout(g);
  const positionsArr = g.nodes().map(nodeId => {
    const node = g.node(nodeId);
    const pos = {
      x: node.x - node.width / 2,
      y: node.y - node.height / 2
    };
    return [nodeId, pos];
  });
  return new Map(positionsArr);
}

//# sourceMappingURL=calc-layout.js.map