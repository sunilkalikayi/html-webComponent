"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useGraphQuery = useGraphQuery;
function _react() {
  const data = require("react");
  _react = function () {
    return data;
  };
  return data;
}
function _uiFoundationUiHooks() {
  const data = require("@teambit/ui-foundation.ui.hooks.use-data-query");
  _uiFoundationUiHooks = function () {
    return data;
  };
  return data;
}
function _graphql() {
  const data = require("@teambit/graphql");
  _graphql = function () {
    return data;
  };
  return data;
}
function _getGraph() {
  const data = require("./get-graph.query");
  _getGraph = function () {
    return data;
  };
  return data;
}
function _graphModel() {
  const data = require("./graph-model");
  _graphModel = function () {
    return data;
  };
  return data;
}
/** provides dependencies graph data from graphQL */
function useGraphQuery(componentId, filter) {
  const {
    data,
    error,
    loading
  } = (0, _uiFoundationUiHooks().useDataQuery)(_getGraph().GET_GRAPH, {
    variables: {
      ids: componentId,
      filter
    },
    skip: !componentId
  });
  const rawGraph = data === null || data === void 0 ? void 0 : data.graph;
  const clientError = !rawGraph && !loading ? new (_graphql().GraphQlError)(404) : undefined;
  const serverError = error ? new (_graphql().GraphQlError)(500, error.message) : undefined;
  return (0, _react().useMemo)(() => {
    return {
      graph: rawGraph ? _graphModel().GraphModel.from(rawGraph) : undefined,
      error: serverError || clientError,
      loading
    };
  }, [rawGraph, error]);
}

//# sourceMappingURL=use-graph-query.js.map