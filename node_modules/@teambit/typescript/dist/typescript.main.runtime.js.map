{"version":3,"names":["TypescriptMain","constructor","logger","schemaTransformerSlot","workspace","depResolver","envs","tsConfigWriter","createCompiler","options","transformers","tsModule","ts","configMutator","TypescriptConfigMutator","transformerContext","afterMutation","runTransformersWithContext","clone","TypescriptCompiler","TypescriptAspect","id","raw","getTsserverClient","tsServer","initTsserverClient","projectPath","files","TsserverClient","init","initTsserverClientFromWorkspace","Error","path","createCjsCompiler","getCjsTransformer","createEsmCompiler","getEsmTransformer","cjsTransformer","config","setModule","esmTransformer","createSchemaExtractor","tsconfig","TypeScriptExtractor","getCjsPackageJsonProps","main","types","getEsmPackageJsonProps","type","getSupportedFilesForTsserver","components","map","c","filesystem","flat","f","filter","endsWith","cleanTsconfigJson","list","runtime","createEnvironment","execContext","getEnvExecutionContext","results","TsconfigWriter","clean","writeTsconfigJson","cleanResults","writeResults","write","onPreWatch","watchOpts","spawnTSServer","verbose","checkTypes","printTypeErrors","Boolean","onComponentChange","component","pMapSeries","file","onFileChange","provider","schema","loggerExt","aspectLoader","cli","registerParser","TypeScriptParser","createLogger","registerPlugins","SchemaTransformerPlugin","tsconfigWriter","tsMain","register","ExportDeclaration","FunctionDeclaration","VariableStatementTransformer","VariableDeclaration","SourceFileTransformer","TypeAliasTransformer","ClassDecelerationTransformer","InterfaceDeclarationTransformer","EnumDeclarationTransformer","BindingElementTransformer","registerOnPreWatch","bind","registerOnComponentChange","registerOnComponentAdd","checkTypesCmd","CheckTypesCmd","writeTsconfigCmd","WriteTsconfigCmd","MainRuntime","SchemaAspect","LoggerAspect","AspectLoaderAspect","WorkspaceAspect","CLIAspect","DependencyResolverAspect","EnvsAspect","Slot","withType","addRuntime","context","Array","isArray","newConfig","reduce","acc","transformer"],"sources":["typescript.main.runtime.ts"],"sourcesContent":["import ts from 'typescript';\nimport { Slot, SlotRegistry } from '@teambit/harmony';\nimport { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport { Compiler } from '@teambit/compiler';\nimport { Logger, LoggerAspect, LoggerMain } from '@teambit/logger';\nimport { SchemaAspect, SchemaExtractor, SchemaMain } from '@teambit/schema';\nimport { PackageJsonProps } from '@teambit/pkg';\nimport { TypescriptConfigMutator } from '@teambit/typescript.modules.ts-config-mutator';\nimport { WorkspaceAspect } from '@teambit/workspace';\nimport type { WatchOptions, Workspace } from '@teambit/workspace';\nimport { DependencyResolverAspect, DependencyResolverMain } from '@teambit/dependency-resolver';\nimport pMapSeries from 'p-map-series';\nimport { TsserverClient, TsserverClientOpts } from '@teambit/ts-server';\nimport AspectLoaderAspect, { AspectLoaderMain } from '@teambit/aspect-loader';\nimport type { Component } from '@teambit/component';\nimport EnvsAspect, { EnvsMain } from '@teambit/envs';\nimport { TypeScriptExtractor } from './typescript.extractor';\nimport { TypeScriptCompilerOptions } from './compiler-options';\nimport { TypescriptAspect } from './typescript.aspect';\nimport { TypescriptCompiler } from './typescript.compiler';\nimport { TypeScriptParser } from './typescript.parser';\nimport { SchemaTransformer } from './schema-transformer';\nimport { SchemaTransformerPlugin } from './schema-transformer.plugin';\nimport {\n  ExportDeclaration,\n  TypeAliasTransformer,\n  FunctionDeclaration,\n  VariableStatementTransformer,\n  VariableDeclaration,\n  SourceFileTransformer,\n  ClassDecelerationTransformer,\n  InterfaceDeclarationTransformer,\n  EnumDeclarationTransformer,\n  BindingElementTransformer,\n} from './transformers';\nimport { CheckTypesCmd } from './cmds/check-types.cmd';\nimport { TsconfigPathsPerEnv, TsconfigWriter } from './tsconfig-writer';\nimport WriteTsconfigCmd from './cmds/write-tsconfig.cmd';\n\nexport type TsMode = 'build' | 'dev';\n\nexport type SchemaTransformerSlot = SlotRegistry<SchemaTransformer[]>;\n\nexport type TsConfigTransformContext = {\n  // mode: TsMode;\n};\n\nexport type TsconfigWriterOptions = {\n  clean?: boolean;\n  silent?: boolean; // no prompt\n  dedupe?: boolean;\n  dryRun?: boolean;\n  dryRunWithTsconfig?: boolean;\n};\n\nexport type TsConfigTransformer = (\n  config: TypescriptConfigMutator,\n  context: TsConfigTransformContext\n) => TypescriptConfigMutator;\n\nexport class TypescriptMain {\n  constructor(\n    private logger: Logger,\n    private schemaTransformerSlot: SchemaTransformerSlot,\n    private workspace: Workspace,\n    private depResolver: DependencyResolverMain,\n    private envs: EnvsMain,\n    private tsConfigWriter: TsconfigWriter\n  ) {}\n\n  private tsServer: TsserverClient;\n  /**\n   * create a new compiler.\n   */\n  createCompiler(\n    options: TypeScriptCompilerOptions,\n    transformers: TsConfigTransformer[] = [],\n    tsModule = ts\n  ): Compiler {\n    const configMutator = new TypescriptConfigMutator(options);\n    const transformerContext: TsConfigTransformContext = {};\n    const afterMutation = runTransformersWithContext(configMutator.clone(), transformers, transformerContext);\n    return new TypescriptCompiler(TypescriptAspect.id, this.logger, afterMutation.raw, tsModule);\n  }\n\n  /**\n   * get TsserverClient instance if initiated already, otherwise, return undefined.\n   */\n  getTsserverClient(): TsserverClient | undefined {\n    return this.tsServer;\n  }\n\n  /**\n   * starts a tsserver process to communicate with its API.\n   * @param projectPath absolute path of the project root directory\n   * @param options TsserverClientOpts\n   * @param files optionally, if check-types is enabled, provide files to open and type check.\n   * @returns TsserverClient\n   */\n  async initTsserverClient(\n    projectPath: string,\n    options: TsserverClientOpts = {},\n    files: string[] = []\n  ): Promise<TsserverClient> {\n    this.tsServer = new TsserverClient(projectPath, this.logger, options, files);\n    this.tsServer.init();\n    return this.tsServer;\n  }\n\n  /**\n   * starts a tsserver process to communicate with its API. use only when running on the workspace.\n   * @param options TsserverClientOpts\n   * @param files optionally, if check-types is enabled, provide files to open and type check.\n   * @returns TsserverClient\n   */\n  async initTsserverClientFromWorkspace(\n    options: TsserverClientOpts = {},\n    files: string[] = []\n  ): Promise<TsserverClient> {\n    if (!this.workspace) {\n      throw new Error(`initTsserverClientFromWorkspace: workspace was not found`);\n    }\n    return this.initTsserverClient(this.workspace.path, options, files);\n  }\n\n  /**\n   * Create a compiler instance and run the cjs transformer for it\n   * @param options\n   * @param transformers\n   * @param tsModule\n   * @returns\n   */\n  createCjsCompiler(options: TypeScriptCompilerOptions, transformers: TsConfigTransformer[] = [], tsModule = ts) {\n    return this.createCompiler(options, [this.getCjsTransformer(), ...transformers], tsModule);\n  }\n\n  /**\n   * Create a compiler instance and run the esm transformer for it\n   * @param options\n   * @param transformers\n   * @param tsModule\n   * @returns\n   */\n  createEsmCompiler(options: TypeScriptCompilerOptions, transformers: TsConfigTransformer[] = [], tsModule = ts) {\n    return this.createCompiler(options, [this.getEsmTransformer(), ...transformers], tsModule);\n  }\n\n  /**\n   * Create a transformer that change the ts module to CommonJS\n   * @returns\n   */\n  getCjsTransformer(): TsConfigTransformer {\n    const cjsTransformer = (config: TypescriptConfigMutator) => {\n      config.setModule('CommonJS');\n      return config;\n    };\n    return cjsTransformer;\n  }\n\n  /**\n   * Create a transformer that change the ts module to ES2020\n   * @returns\n   */\n  getEsmTransformer(): TsConfigTransformer {\n    const esmTransformer = (config: TypescriptConfigMutator) => {\n      config.setModule('ES2020');\n      return config;\n    };\n    return esmTransformer;\n  }\n\n  /**\n   * create an instance of a typescript semantic schema extractor.\n   */\n  createSchemaExtractor(tsconfig: any, path?: string): SchemaExtractor {\n    return new TypeScriptExtractor(\n      tsconfig,\n      this.schemaTransformerSlot,\n      this,\n      path || this.workspace.path,\n      this.depResolver,\n      this.workspace\n    );\n  }\n\n  /**\n   * add the default package json properties to the component\n   * :TODO @gilad why do we need this DSL? can't I just get the args here.\n   */\n  getCjsPackageJsonProps(): PackageJsonProps {\n    return {\n      main: 'dist/{main}.js',\n      types: '{main}.ts',\n    };\n  }\n\n  /**\n   * add type: module to the package.json props and the default props\n   * :TODO @gilad why do we need this DSL? can't I just get the args here.\n   */\n  getEsmPackageJsonProps(): PackageJsonProps {\n    return {\n      // main: 'dist-esm/{main}.js',\n      main: 'dist/{main}.js',\n      type: 'module',\n      types: '{main}.ts',\n    };\n  }\n\n  getSupportedFilesForTsserver(components: Component[]): string[] {\n    const files = components\n      .map((c) => c.filesystem.files)\n      .flat()\n      .map((f) => f.path);\n    return files.filter((f) => f.endsWith('.ts') || f.endsWith('.tsx'));\n  }\n\n  async cleanTsconfigJson(options: TsconfigWriterOptions = {}) {\n    const components = await this.workspace.list();\n    const runtime = await this.envs.createEnvironment(components);\n    const execContext = runtime.getEnvExecutionContext();\n\n    const results = await new TsconfigWriter(this.workspace, this.logger).clean(execContext, options);\n\n    return results;\n  }\n\n  async writeTsconfigJson(options: TsconfigWriterOptions = {}): Promise<{\n    cleanResults?: string[];\n    writeResults: TsconfigPathsPerEnv[];\n  }> {\n    const components = await this.workspace.list();\n    const runtime = await this.envs.createEnvironment(components);\n    const execContext = runtime.getEnvExecutionContext();\n\n    let cleanResults: string[] | undefined;\n    if (options.clean) {\n      cleanResults = await this.tsConfigWriter.clean(execContext, options);\n    }\n\n    const writeResults = await this.tsConfigWriter.write(execContext, options);\n\n    return { writeResults, cleanResults };\n  }\n\n  private async onPreWatch(components: Component[], watchOpts: WatchOptions) {\n    const workspace = this.workspace;\n    if (!workspace || !watchOpts.spawnTSServer) {\n      return;\n    }\n    const { verbose, checkTypes } = watchOpts;\n    const files = checkTypes ? this.getSupportedFilesForTsserver(components) : [];\n    const printTypeErrors = Boolean(checkTypes);\n    await this.initTsserverClientFromWorkspace({ verbose, checkTypes, printTypeErrors }, files);\n  }\n\n  private async onComponentChange(component: Component, files: string[]) {\n    if (!this.tsServer) {\n      return {\n        results: 'N/A',\n      };\n    }\n    await pMapSeries(files, (file) => this.tsServer.onFileChange(file));\n    return {\n      results: 'succeed',\n    };\n  }\n\n  static runtime = MainRuntime;\n  static dependencies = [\n    SchemaAspect,\n    LoggerAspect,\n    AspectLoaderAspect,\n    WorkspaceAspect,\n    CLIAspect,\n    DependencyResolverAspect,\n    EnvsAspect,\n  ];\n  static slots = [Slot.withType<SchemaTransformer[]>()];\n\n  static async provider(\n    [schema, loggerExt, aspectLoader, workspace, cli, depResolver, envs]: [\n      SchemaMain,\n      LoggerMain,\n      AspectLoaderMain,\n      Workspace,\n      CLIMain,\n      DependencyResolverMain,\n      EnvsMain\n    ],\n    config,\n    [schemaTransformerSlot]: [SchemaTransformerSlot]\n  ) {\n    schema.registerParser(new TypeScriptParser());\n    const logger = loggerExt.createLogger(TypescriptAspect.id);\n    aspectLoader.registerPlugins([new SchemaTransformerPlugin(schemaTransformerSlot)]);\n    const tsconfigWriter = new TsconfigWriter(workspace, logger);\n    const tsMain = new TypescriptMain(logger, schemaTransformerSlot, workspace, depResolver, envs, tsconfigWriter);\n    schemaTransformerSlot.register([\n      new ExportDeclaration(),\n      new FunctionDeclaration(),\n      new VariableStatementTransformer(),\n      new VariableDeclaration(),\n      new SourceFileTransformer(),\n      new TypeAliasTransformer(),\n      new ClassDecelerationTransformer(),\n      new InterfaceDeclarationTransformer(),\n      new EnumDeclarationTransformer(),\n      new BindingElementTransformer(),\n    ]);\n\n    if (workspace) {\n      workspace.registerOnPreWatch(tsMain.onPreWatch.bind(this));\n      workspace.registerOnComponentChange(tsMain.onComponentChange.bind(this));\n      workspace.registerOnComponentAdd(tsMain.onComponentChange.bind(this));\n    }\n\n    const checkTypesCmd = new CheckTypesCmd(tsMain, workspace, logger);\n    const writeTsconfigCmd = new WriteTsconfigCmd(tsMain);\n    cli.register(checkTypesCmd, writeTsconfigCmd);\n\n    return tsMain;\n  }\n}\n\nTypescriptAspect.addRuntime(TypescriptMain);\n\nexport function runTransformersWithContext(\n  config: TypescriptConfigMutator,\n  transformers: TsConfigTransformer[] = [],\n  context: TsConfigTransformContext\n): TypescriptConfigMutator {\n  if (!Array.isArray(transformers)) return config;\n  const newConfig = transformers.reduce((acc, transformer) => {\n    return transformer(acc, context);\n  }, config);\n  return newConfig;\n}\n\nexport default TypescriptMain;\n"],"mappings":"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"}