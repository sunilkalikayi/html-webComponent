{"version":3,"names":["TypescriptCompiler","constructor","id","logger","options","tsModule","distDir","distGlobPatterns","shouldCopyNonSupportedFiles","artifactName","tsconfig","compilerOptions","outDir","displayConfig","stringifyTsconfig","getDistDir","transpileFile","fileContent","isFileSupported","filePath","compilerOptionsFromTsconfig","convertCompilerOptionsFromJson","errors","length","formattedErrors","formatDiagnosticsWithColorAndContext","getFormatDiagnosticsHost","Error","sourceRoot","componentDir","rootDir","result","transpileModule","fileName","reportDiagnostics","diagnostics","formatHost","error","outputPath","replaceFileExtToJs","outputFiles","outputText","sourceMapText","push","preBuild","context","capsules","capsuleNetwork","seedersCapsules","capsuleDirs","map","capsule","path","writeTsConfig","writeTypes","writeNpmIgnore","build","componentsResults","runTscBuild","artifacts","getArtifactDefinition","postBuild","Promise","all","packageJson","PackageJsonFile","loadFromCapsuleSync","packageJsonObject","types","write","generatedBy","name","globPatterns","getDistPathBySrcPath","srcPath","fileWithJSExtIfNeeded","join","isJsAndCompile","compileJs","endsWith","isJsxAndCompile","compileJsx","network","capsulesRootDir","getCapsulesToCompile","getAllCapsuleDirs","getCanonicalFileName","p","getCurrentDirectory","getNewLine","sys","newLine","currentComponentResult","reportDiagnostic","diagnostic","errorStr","process","stdout","isTTY","formatDiagnostic","file","BitError","consoleFailure","component","reportSolutionBuilderStatus","diag","msg","messageText","debug","errorCounter","errorCount","info","host","createSolutionBuilderHost","undefined","writeProjectReferencesTsConfig","solutionBuilder","createSolutionBuilder","verbose","nextProject","longProcessLogger","createLongProcessLogger","getNextInvalidatedProject","capsulePath","project","replace","currentComponentId","getIdByPathInCapsule","logProgress","toString","getCapsule","startTime","Date","now","done","endTime","end","dirs","typePath","contents","fs","readFile","filename","basename","dir","pathExists","outputFile","NPM_IGNORE_FILE","npmIgnorePath","npmIgnoreEntriesStr","appendFile","projects","files","references","tsconfigStr","writeFile","JSON","stringify","fileExtension","extname","RegExp","version"],"sources":["typescript.compiler.ts"],"sourcesContent":["import { BuildContext, BuiltTaskResult, ComponentResult } from '@teambit/builder';\nimport { Compiler, TranspileFileParams, TranspileFileOutput } from '@teambit/compiler';\nimport { Network } from '@teambit/isolator';\nimport { Logger } from '@teambit/logger';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport ts from 'typescript';\nimport { BitError } from '@teambit/bit-error';\nimport PackageJsonFile from '@teambit/legacy/dist/consumer/component/package-json-file';\nimport { TypeScriptCompilerOptions } from './compiler-options';\n\nexport class TypescriptCompiler implements Compiler {\n  distDir: string;\n  distGlobPatterns: string[];\n  shouldCopyNonSupportedFiles: boolean;\n  artifactName: string;\n  constructor(\n    readonly id: string,\n    private logger: Logger,\n    private options: TypeScriptCompilerOptions,\n    private tsModule: typeof ts\n  ) {\n    this.distDir = options.distDir || 'dist';\n    this.distGlobPatterns = options.distGlobPatterns || [`${this.distDir}/**`, `!${this.distDir}/tsconfig.tsbuildinfo`];\n    this.shouldCopyNonSupportedFiles =\n      typeof options.shouldCopyNonSupportedFiles === 'boolean' ? options.shouldCopyNonSupportedFiles : true;\n    this.artifactName = options.artifactName || 'dist';\n    this.options.tsconfig ||= {};\n    this.options.tsconfig.compilerOptions ||= {};\n    // mutate the outDir, otherwise, on capsules, the dists might be written to a different directory and make confusion\n    this.options.tsconfig.compilerOptions.outDir = this.distDir;\n  }\n\n  displayName = 'TypeScript';\n  deleteDistDir = false;\n\n  displayConfig() {\n    return this.stringifyTsconfig(this.options.tsconfig);\n  }\n\n  getDistDir() {\n    return this.distDir;\n  }\n\n  /**\n   * compile one file on the workspace\n   */\n  transpileFile(fileContent: string, options: TranspileFileParams): TranspileFileOutput {\n    if (!this.isFileSupported(options.filePath)) {\n      return null; // file is not supported\n    }\n    const compilerOptionsFromTsconfig = this.tsModule.convertCompilerOptionsFromJson(\n      this.options.tsconfig.compilerOptions,\n      '.'\n    );\n    if (compilerOptionsFromTsconfig.errors.length) {\n      // :TODO @david replace to a more concrete error type and put in 'exceptions' directory here.\n      const formattedErrors = this.tsModule.formatDiagnosticsWithColorAndContext(\n        compilerOptionsFromTsconfig.errors,\n        this.getFormatDiagnosticsHost()\n      );\n      throw new Error(`failed parsing the tsconfig.json.\\n${formattedErrors}`);\n    }\n\n    const compilerOptions = compilerOptionsFromTsconfig.options;\n    compilerOptions.sourceRoot = options.componentDir;\n    compilerOptions.rootDir = '.';\n    const result = this.tsModule.transpileModule(fileContent, {\n      compilerOptions,\n      fileName: options.filePath,\n      reportDiagnostics: true,\n    });\n\n    if (result.diagnostics && result.diagnostics.length) {\n      const formatHost = this.getFormatDiagnosticsHost();\n      const error = this.tsModule.formatDiagnosticsWithColorAndContext(result.diagnostics, formatHost);\n\n      // :TODO @david please replace to a more concrete error type and put in 'exceptions' directory here.\n      throw new Error(error);\n    }\n\n    const outputPath = this.replaceFileExtToJs(options.filePath);\n    const outputFiles = [{ outputText: result.outputText, outputPath }];\n    if (result.sourceMapText) {\n      outputFiles.push({\n        outputText: result.sourceMapText,\n        outputPath: `${outputPath}.map`,\n      });\n    }\n    return outputFiles;\n  }\n\n  async preBuild(context: BuildContext) {\n    const capsules = context.capsuleNetwork.seedersCapsules;\n    const capsuleDirs = capsules.map((capsule) => capsule.path);\n    await this.writeTsConfig(capsuleDirs);\n    await this.writeTypes(capsuleDirs);\n    await this.writeNpmIgnore(capsuleDirs);\n  }\n\n  /**\n   * compile multiple components on the capsules\n   */\n  async build(context: BuildContext): Promise<BuiltTaskResult> {\n    const componentsResults = await this.runTscBuild(context.capsuleNetwork);\n\n    return {\n      artifacts: this.getArtifactDefinition(),\n      componentsResults,\n    };\n  }\n\n  async postBuild(context: BuildContext) {\n    await Promise.all(\n      context.capsuleNetwork.seedersCapsules.map(async (capsule) => {\n        const packageJson = PackageJsonFile.loadFromCapsuleSync(capsule.path);\n        // the types['index.ts'] is needed only during the build to avoid errors when tsc finds the\n        // same type once in the d.ts and once in the ts file.\n        if (packageJson.packageJsonObject.types) {\n          delete packageJson.packageJsonObject.types;\n          await packageJson.write();\n        }\n      })\n    );\n  }\n\n  getArtifactDefinition() {\n    return [\n      {\n        generatedBy: this.id,\n        name: this.artifactName,\n        globPatterns: this.distGlobPatterns,\n      },\n    ];\n  }\n\n  /**\n   * given a source file, return its parallel in the dists. e.g. index.ts => dist/index.js\n   */\n  getDistPathBySrcPath(srcPath: string) {\n    const fileWithJSExtIfNeeded = this.replaceFileExtToJs(srcPath);\n    return path.join(this.distDir, fileWithJSExtIfNeeded);\n  }\n\n  /**\n   * whether typescript is able to compile the given path\n   */\n  isFileSupported(filePath: string): boolean {\n    const isJsAndCompile = !!this.options.compileJs && filePath.endsWith('.js');\n    const isJsxAndCompile = !!this.options.compileJsx && filePath.endsWith('.jsx');\n    return (\n      (filePath.endsWith('.ts') || filePath.endsWith('.tsx') || isJsAndCompile || isJsxAndCompile) &&\n      !filePath.endsWith('.d.ts')\n    );\n  }\n\n  /**\n   * we have two options here:\n   * 1. pass all capsules-dir at the second parameter of createSolutionBuilder and then no\n   * need to write the main tsconfig.json with all the references.\n   * 2. write main tsconfig.json and pass the capsules root-dir.\n   * we went with option #2 because it'll be easier for users to go to the capsule-root and run\n   * `tsc --build` to debug issues.\n   */\n  private async runTscBuild(network: Network): Promise<ComponentResult[]> {\n    const rootDir = network.capsulesRootDir;\n    const capsules = await network.getCapsulesToCompile();\n    if (!capsules.length) {\n      return [];\n    }\n    const capsuleDirs = capsules.getAllCapsuleDirs();\n    const formatHost = {\n      getCanonicalFileName: (p) => p,\n      getCurrentDirectory: () => '', // it helps to get the files with absolute paths\n      getNewLine: () => this.tsModule.sys.newLine,\n    };\n    const componentsResults: ComponentResult[] = [];\n    let currentComponentResult: Partial<ComponentResult> = { errors: [] };\n    const reportDiagnostic = (diagnostic: ts.Diagnostic) => {\n      const errorStr = process.stdout.isTTY\n        ? this.tsModule.formatDiagnosticsWithColorAndContext([diagnostic], formatHost)\n        : this.tsModule.formatDiagnostic(diagnostic, formatHost);\n      if (!diagnostic.file) {\n        // the error is general and not related to a specific file. e.g. tsconfig is missing.\n        throw new BitError(errorStr);\n      }\n      this.logger.consoleFailure(errorStr);\n      if (!currentComponentResult.component || !currentComponentResult.errors) {\n        throw new Error(`currentComponentResult is not defined yet for ${diagnostic.file}`);\n      }\n      currentComponentResult.errors.push(errorStr);\n    };\n    // this only works when `verbose` is `true` in the `ts.createSolutionBuilder` function.\n    const reportSolutionBuilderStatus = (diag: ts.Diagnostic) => {\n      const msg = diag.messageText as string;\n      this.logger.debug(msg);\n    };\n    const errorCounter = (errorCount: number) => {\n      this.logger.info(`total error found: ${errorCount}`);\n    };\n    const host = this.tsModule.createSolutionBuilderHost(\n      undefined,\n      undefined,\n      reportDiagnostic,\n      reportSolutionBuilderStatus,\n      errorCounter\n    );\n    await this.writeProjectReferencesTsConfig(rootDir, capsuleDirs);\n    const solutionBuilder = this.tsModule.createSolutionBuilder(host, [rootDir], { verbose: true });\n    let nextProject;\n    const longProcessLogger = this.logger.createLongProcessLogger('compile typescript components', capsules.length);\n    // eslint-disable-next-line no-cond-assign\n    while ((nextProject = solutionBuilder.getNextInvalidatedProject())) {\n      // regex to make sure it will work correctly for both linux and windows\n      // it replaces both /tsconfig.json and \\tsocnfig.json\n      const capsulePath = nextProject.project.replace(/[/\\\\]tsconfig.json/, '');\n      const currentComponentId = capsules.getIdByPathInCapsule(capsulePath);\n      if (!currentComponentId) throw new Error(`unable to find component for ${capsulePath}`);\n      longProcessLogger.logProgress(currentComponentId.toString());\n      const capsule = capsules.getCapsule(currentComponentId);\n      if (!capsule) throw new Error(`unable to find capsule for ${currentComponentId.toString()}`);\n      currentComponentResult.component = capsule.component;\n      currentComponentResult.startTime = Date.now();\n      nextProject.done();\n      currentComponentResult.endTime = Date.now();\n      componentsResults.push({ ...currentComponentResult } as ComponentResult);\n      currentComponentResult = { errors: [] };\n    }\n    longProcessLogger.end();\n\n    return componentsResults;\n  }\n\n  private getFormatDiagnosticsHost(): ts.FormatDiagnosticsHost {\n    return {\n      getCanonicalFileName: (p) => p,\n      getCurrentDirectory: this.tsModule.sys.getCurrentDirectory,\n      getNewLine: () => this.tsModule.sys.newLine,\n    };\n  }\n\n  private async writeTypes(dirs: string[]) {\n    await Promise.all(\n      this.options.types.map(async (typePath) => {\n        const contents = await fs.readFile(typePath, 'utf8');\n        const filename = path.basename(typePath);\n\n        await Promise.all(\n          dirs.map(async (dir) => {\n            const filePath = path.join(dir, 'types', filename);\n            if (!(await fs.pathExists(filePath))) {\n              await fs.outputFile(filePath, contents);\n            }\n          })\n        );\n      })\n    );\n  }\n\n  /**\n   * when using project-references, typescript adds a file \"tsconfig.tsbuildinfo\" which is not\n   * needed for the package.\n   */\n  private async writeNpmIgnore(dirs: string[]) {\n    const NPM_IGNORE_FILE = '.npmignore';\n    await Promise.all(\n      dirs.map(async (dir) => {\n        const npmIgnorePath = path.join(dir, NPM_IGNORE_FILE);\n        const npmIgnoreEntriesStr = `\\n${this.distDir}/tsconfig.tsbuildinfo\\n`;\n        await fs.appendFile(npmIgnorePath, npmIgnoreEntriesStr);\n      })\n    );\n  }\n\n  private async writeProjectReferencesTsConfig(rootDir: string, projects: string[]) {\n    const files = [];\n    const references = projects.map((project) => ({ path: project }));\n    const tsconfig = { files, references };\n    const tsconfigStr = this.stringifyTsconfig(tsconfig);\n    await fs.writeFile(path.join(rootDir, 'tsconfig.json'), tsconfigStr);\n  }\n\n  private async writeTsConfig(dirs: string[]) {\n    const tsconfigStr = this.stringifyTsconfig(this.options.tsconfig);\n    await Promise.all(dirs.map((dir) => fs.writeFile(path.join(dir, 'tsconfig.json'), tsconfigStr)));\n  }\n\n  private stringifyTsconfig(tsconfig) {\n    return JSON.stringify(tsconfig, undefined, 2);\n  }\n\n  private replaceFileExtToJs(filePath: string): string {\n    if (!this.isFileSupported(filePath)) return filePath;\n    const fileExtension = path.extname(filePath);\n    return filePath.replace(new RegExp(`${fileExtension}$`), '.js'); // makes sure it's the last occurrence\n  }\n\n  version() {\n    return this.tsModule.version;\n  }\n}\n"],"mappings":"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"}