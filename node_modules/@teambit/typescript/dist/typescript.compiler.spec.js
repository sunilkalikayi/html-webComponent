"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _logger() {
  const data = require("@teambit/logger");
  _logger = function () {
    return data;
  };
  return data;
}
function _typescript() {
  const data = _interopRequireDefault(require("typescript"));
  _typescript = function () {
    return data;
  };
  return data;
}
function _chai() {
  const data = require("chai");
  _chai = function () {
    return data;
  };
  return data;
}
function _path() {
  const data = _interopRequireDefault(require("path"));
  _path = function () {
    return data;
  };
  return data;
}
function _typescript2() {
  const data = require("./typescript.aspect");
  _typescript2 = function () {
    return data;
  };
  return data;
}
function _typescript3() {
  const data = require("./typescript.compiler");
  _typescript3 = function () {
    return data;
  };
  return data;
}
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
const defaultOpts = {
  tsconfig: {},
  types: []
};
describe('TypescriptCompiler', () => {
  describe('getDistPathBySrcPath', () => {
    it('should replace the extension with .js and prepend the dist dir', () => {
      const tsCompiler = getTsCompiler();
      (0, _chai().expect)(tsCompiler.getDistPathBySrcPath('index.ts')).to.equal(_path().default.join('dist', 'index.js'));
      (0, _chai().expect)(tsCompiler.getDistPathBySrcPath('index.tsx')).to.equal(_path().default.join('dist', 'index.js'));
    });
    it('should not replace the extension if the file is not supported', () => {
      const tsCompiler = getTsCompiler();
      (0, _chai().expect)(tsCompiler.getDistPathBySrcPath('style.css')).to.equal(_path().default.join('dist', 'style.css'));
      (0, _chai().expect)(tsCompiler.getDistPathBySrcPath('index.d.ts')).to.equal(_path().default.join('dist', 'index.d.ts'));
    });
  });
  describe('isFileSupported', () => {
    it('should support .ts files', () => {
      const tsCompiler = getTsCompiler();
      (0, _chai().expect)(tsCompiler.isFileSupported('index.ts')).to.be.true;
    });
    it('should support .tsx files', () => {
      const tsCompiler = getTsCompiler();
      (0, _chai().expect)(tsCompiler.isFileSupported('index.tsx')).to.be.true;
    });
    it('should not support .jsx files by default', () => {
      const tsCompiler = getTsCompiler();
      (0, _chai().expect)(tsCompiler.isFileSupported('index.jsx')).to.be.false;
    });
    it('should not support .js files by default', () => {
      const tsCompiler = getTsCompiler();
      (0, _chai().expect)(tsCompiler.isFileSupported('index.js')).to.be.false;
    });
    it('should support .jsx files when passing compileJsx', () => {
      const tsCompiler = getTsCompiler(_objectSpread({
        compileJsx: true
      }, defaultOpts));
      (0, _chai().expect)(tsCompiler.isFileSupported('index.jsx')).to.be.true;
    });
    it('should support .js files when passing compileJs', () => {
      const tsCompiler = getTsCompiler(_objectSpread({
        compileJs: true
      }, defaultOpts));
      (0, _chai().expect)(tsCompiler.isFileSupported('index.js')).to.be.true;
    });
    it('should not support .d.ts files', () => {
      const tsCompiler = getTsCompiler();
      (0, _chai().expect)(tsCompiler.isFileSupported('index.d.ts')).to.be.false;
    });
  });
});
function getTsCompiler(opts = defaultOpts) {
  const finalOpts = Object.assign({}, defaultOpts, opts);
  return new (_typescript3().TypescriptCompiler)(_typescript2().TypescriptAspect.id, new (_logger().Logger)('test'), finalOpts, _typescript().default);
}

//# sourceMappingURL=typescript.compiler.spec.js.map