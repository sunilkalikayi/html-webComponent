"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TypeScriptParser = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _semanticsEntities() {
  const data = require("@teambit/semantics.entities.semantic-schema");
  _semanticsEntities = function () {
    return data;
  };
  return data;
}
function _fsExtra() {
  const data = require("fs-extra");
  _fsExtra = function () {
    return data;
  };
  return data;
}
function _typescript() {
  const data = _interopRequireWildcard(require("typescript"));
  _typescript = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
class TypeScriptParser {
  getExports(sourceFile) {
    const staticProperties = this.parseStaticProperties(sourceFile);
    const exports = sourceFile.statements.filter(statement => {
      if (!statement.modifiers) return false;
      return statement.modifiers.find(modifier => {
        return modifier.kind === _typescript().default.SyntaxKind.ExportKeyword;
      });
    });
    const exportModels = exports.map(statement => {
      // todo refactor to a registry of variable statements.
      if ((0, _typescript().isVariableStatement)(statement)) {
        const child = statement.declarationList.declarations[0];
        const name = child.name.text;
        return new (_semanticsEntities().Export)(name, staticProperties.get(name));
      }
      if ((0, _typescript().isFunctionDeclaration)(statement)) {
        if (!statement.name) return undefined;
        const name = statement.name.text;
        return new (_semanticsEntities().Export)(name, staticProperties.get(name));
      }
      if ((0, _typescript().isClassDeclaration)(statement)) {
        if (!statement.name) return undefined;
        const name = statement.name.text;
        return new (_semanticsEntities().Export)(name, staticProperties.get(name));
      }
      return undefined;
    });
    const withoutEmpty = exportModels.filter(exportModel => exportModel !== undefined);
    // @ts-ignore
    return withoutEmpty;
  }
  parseModule(modulePath) {
    const ast = _typescript().default.createSourceFile(modulePath, (0, _fsExtra().readFileSync)(modulePath, 'utf8'), _typescript().default.ScriptTarget.Latest);
    const moduleExports = this.getExports(ast);
    return moduleExports;
  }
  parseStaticProperties(sourceFile) {
    // TODO - should we also parse staticProperties inside classes / objects?

    const exportStaticProperties = new Map();
    sourceFile.statements.forEach(statement => {
      try {
        if (!_typescript().default.isExpressionStatement(statement)) return;
        if (!_typescript().default.isBinaryExpression(statement.expression)) return;
        if (statement.expression.operatorToken.kind !== _typescript().default.SyntaxKind.EqualsToken) return;
        if (!_typescript().default.isPropertyAccessExpression(statement.expression.left)) return;
        if (!_typescript().default.isIdentifier(statement.expression.left.expression)) return;
        const targetName = statement.expression.left.expression.text;
        const propertyName = statement.expression.left.name.text;
        if (!exportStaticProperties.has(targetName)) exportStaticProperties.set(targetName, new Map());
        const existingProperties = exportStaticProperties.get(targetName);
        if (_typescript().default.isStringLiteral(statement.expression.right)) {
          existingProperties === null || existingProperties === void 0 ? void 0 : existingProperties.set(propertyName, statement.expression.right.text);
        } else if (_typescript().default.isNumericLiteral(statement.expression.right)) {
          existingProperties === null || existingProperties === void 0 ? void 0 : existingProperties.set(propertyName, +statement.expression.right.text);
        } else if (statement.expression.right.kind === _typescript().default.SyntaxKind.UndefinedKeyword) {
          existingProperties === null || existingProperties === void 0 ? void 0 : existingProperties.set(propertyName, undefined);
        } else if (statement.expression.right.kind === _typescript().default.SyntaxKind.NullKeyword) {
          existingProperties === null || existingProperties === void 0 ? void 0 : existingProperties.set(propertyName, null);
        } else if (statement.expression.right.kind === _typescript().default.SyntaxKind.TrueKeyword) {
          existingProperties === null || existingProperties === void 0 ? void 0 : existingProperties.set(propertyName, true);
        } else if (statement.expression.right.kind === _typescript().default.SyntaxKind.FalseKeyword) {
          existingProperties === null || existingProperties === void 0 ? void 0 : existingProperties.set(propertyName, false);
        }
      } catch (err) {
        var _this$logger;
        (_this$logger = this.logger) === null || _this$logger === void 0 ? void 0 : _this$logger.error('failed parsing static properties', err);
      }
    });
    return exportStaticProperties;
  }
  constructor(logger) {
    this.logger = logger;
    (0, _defineProperty2().default)(this, "extension", /^.*\.(js|jsx|ts|tsx)$/);
  }
}
exports.TypeScriptParser = TypeScriptParser;

//# sourceMappingURL=typescript.parser.js.map