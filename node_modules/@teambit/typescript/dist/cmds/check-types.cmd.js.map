{"version":3,"names":["CheckTypesCmd","constructor","typescript","workspace","logger","name","description","COMPONENT_PATTERN_HELP","report","pattern","all","strict","ConsumerNotFound","components","getComponentsByUserInput","setStatusLine","length","files","getSupportedFilesForTsserver","initTsserverClientFromWorkspace","printTypeErrors","tsserver","getTsserverClient","Error","start","Date","now","getDiagnostic","end","msg","killTsServer","lastDiagnostics","code","data","chalk","red","green"],"sources":["check-types.cmd.ts"],"sourcesContent":["import { Command, CommandOptions } from '@teambit/cli';\nimport { ConsumerNotFound } from '@teambit/legacy/dist/consumer/exceptions';\nimport { Logger } from '@teambit/logger';\nimport { Workspace } from '@teambit/workspace';\nimport chalk from 'chalk';\nimport { COMPONENT_PATTERN_HELP } from '@teambit/legacy/dist/constants';\nimport { TypescriptMain } from '../typescript.main.runtime';\n\nexport class CheckTypesCmd implements Command {\n  name = 'check-types [component-pattern]';\n  description = 'check typescript types';\n  arguments = [{ name: 'component-pattern', description: COMPONENT_PATTERN_HELP }];\n  alias = '';\n  group = 'development';\n  options = [\n    ['a', 'all', 'check-types for all components, not only modified and new'],\n    ['', 'strict', 'in case issues found, exit with code 1'],\n  ] as CommandOptions;\n\n  constructor(private typescript: TypescriptMain, private workspace: Workspace, private logger: Logger) {}\n\n  async report([pattern]: [string], { all = false, strict = false }: { all: boolean; strict: boolean }) {\n    if (!this.workspace) throw new ConsumerNotFound();\n    const components = await this.workspace.getComponentsByUserInput(all, pattern);\n    this.logger.setStatusLine(`checking types for ${components.length} components`);\n    const files = this.typescript.getSupportedFilesForTsserver(components);\n    await this.typescript.initTsserverClientFromWorkspace({ printTypeErrors: true }, files);\n    const tsserver = this.typescript.getTsserverClient();\n    if (!tsserver) throw new Error(`unable to start tsserver`);\n    const start = Date.now();\n    await tsserver.getDiagnostic(files);\n    const end = Date.now() - start;\n    const msg = `completed type checking (${end / 1000} sec)`;\n    tsserver.killTsServer();\n    if (tsserver.lastDiagnostics.length) {\n      return {\n        code: strict ? 1 : 0,\n        data: chalk.red(`${msg}. found errors in ${tsserver.lastDiagnostics.length} files.`),\n      };\n    }\n    return {\n      code: 0,\n      data: chalk.green(`${msg}. no errors were found.`),\n    };\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAGA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAGO,MAAMA,aAAa,CAAoB;EAW5CC,WAAW,CAASC,UAA0B,EAAUC,SAAoB,EAAUC,MAAc,EAAE;IAAA,KAAlFF,UAA0B,GAA1BA,UAA0B;IAAA,KAAUC,SAAoB,GAApBA,SAAoB;IAAA,KAAUC,MAAc,GAAdA,MAAc;IAAA,8CAV7F,iCAAiC;IAAA,qDAC1B,wBAAwB;IAAA,mDAC1B,CAAC;MAAEC,IAAI,EAAE,mBAAmB;MAAEC,WAAW,EAAEC;IAAuB,CAAC,CAAC;IAAA,+CACxE,EAAE;IAAA,+CACF,aAAa;IAAA,iDACX,CACR,CAAC,GAAG,EAAE,KAAK,EAAE,2DAA2D,CAAC,EACzE,CAAC,EAAE,EAAE,QAAQ,EAAE,wCAAwC,CAAC,CACzD;EAEsG;EAEvG,MAAMC,MAAM,CAAC,CAACC,OAAO,CAAW,EAAE;IAAEC,GAAG,GAAG,KAAK;IAAEC,MAAM,GAAG;EAAyC,CAAC,EAAE;IACpG,IAAI,CAAC,IAAI,CAACR,SAAS,EAAE,MAAM,KAAIS,8BAAgB,GAAE;IACjD,MAAMC,UAAU,GAAG,MAAM,IAAI,CAACV,SAAS,CAACW,wBAAwB,CAACJ,GAAG,EAAED,OAAO,CAAC;IAC9E,IAAI,CAACL,MAAM,CAACW,aAAa,CAAE,sBAAqBF,UAAU,CAACG,MAAO,aAAY,CAAC;IAC/E,MAAMC,KAAK,GAAG,IAAI,CAACf,UAAU,CAACgB,4BAA4B,CAACL,UAAU,CAAC;IACtE,MAAM,IAAI,CAACX,UAAU,CAACiB,+BAA+B,CAAC;MAAEC,eAAe,EAAE;IAAK,CAAC,EAAEH,KAAK,CAAC;IACvF,MAAMI,QAAQ,GAAG,IAAI,CAACnB,UAAU,CAACoB,iBAAiB,EAAE;IACpD,IAAI,CAACD,QAAQ,EAAE,MAAM,IAAIE,KAAK,CAAE,0BAAyB,CAAC;IAC1D,MAAMC,KAAK,GAAGC,IAAI,CAACC,GAAG,EAAE;IACxB,MAAML,QAAQ,CAACM,aAAa,CAACV,KAAK,CAAC;IACnC,MAAMW,GAAG,GAAGH,IAAI,CAACC,GAAG,EAAE,GAAGF,KAAK;IAC9B,MAAMK,GAAG,GAAI,4BAA2BD,GAAG,GAAG,IAAK,OAAM;IACzDP,QAAQ,CAACS,YAAY,EAAE;IACvB,IAAIT,QAAQ,CAACU,eAAe,CAACf,MAAM,EAAE;MACnC,OAAO;QACLgB,IAAI,EAAErB,MAAM,GAAG,CAAC,GAAG,CAAC;QACpBsB,IAAI,EAAEC,gBAAK,CAACC,GAAG,CAAE,GAAEN,GAAI,qBAAoBR,QAAQ,CAACU,eAAe,CAACf,MAAO,SAAQ;MACrF,CAAC;IACH;IACA,OAAO;MACLgB,IAAI,EAAE,CAAC;MACPC,IAAI,EAAEC,gBAAK,CAACE,KAAK,CAAE,GAAEP,GAAI,yBAAwB;IACnD,CAAC;EACH;AACF;AAAC"}