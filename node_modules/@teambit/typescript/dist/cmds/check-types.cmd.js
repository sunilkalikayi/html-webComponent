"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CheckTypesCmd = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _exceptions() {
  const data = require("@teambit/legacy/dist/consumer/exceptions");
  _exceptions = function () {
    return data;
  };
  return data;
}
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
function _constants() {
  const data = require("@teambit/legacy/dist/constants");
  _constants = function () {
    return data;
  };
  return data;
}
class CheckTypesCmd {
  constructor(typescript, workspace, logger) {
    this.typescript = typescript;
    this.workspace = workspace;
    this.logger = logger;
    (0, _defineProperty2().default)(this, "name", 'check-types [component-pattern]');
    (0, _defineProperty2().default)(this, "description", 'check typescript types');
    (0, _defineProperty2().default)(this, "arguments", [{
      name: 'component-pattern',
      description: _constants().COMPONENT_PATTERN_HELP
    }]);
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "group", 'development');
    (0, _defineProperty2().default)(this, "options", [['a', 'all', 'check-types for all components, not only modified and new'], ['', 'strict', 'in case issues found, exit with code 1']]);
  }
  async report([pattern], {
    all = false,
    strict = false
  }) {
    if (!this.workspace) throw new (_exceptions().ConsumerNotFound)();
    const components = await this.workspace.getComponentsByUserInput(all, pattern);
    this.logger.setStatusLine(`checking types for ${components.length} components`);
    const files = this.typescript.getSupportedFilesForTsserver(components);
    await this.typescript.initTsserverClientFromWorkspace({
      printTypeErrors: true
    }, files);
    const tsserver = this.typescript.getTsserverClient();
    if (!tsserver) throw new Error(`unable to start tsserver`);
    const start = Date.now();
    await tsserver.getDiagnostic(files);
    const end = Date.now() - start;
    const msg = `completed type checking (${end / 1000} sec)`;
    tsserver.killTsServer();
    if (tsserver.lastDiagnostics.length) {
      return {
        code: strict ? 1 : 0,
        data: _chalk().default.red(`${msg}. found errors in ${tsserver.lastDiagnostics.length} files.`)
      };
    }
    return {
      code: 0,
      data: _chalk().default.green(`${msg}. no errors were found.`)
    };
  }
}
exports.CheckTypesCmd = CheckTypesCmd;

//# sourceMappingURL=check-types.cmd.js.map