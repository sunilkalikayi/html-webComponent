{"version":3,"names":["WriteTsconfigCmd","constructor","tsMain","report","_args","flags","cleanResults","writeResults","json","dryRunWithTsconfig","Error","isDryRun","dryRun","cleanResultsOutput","chalk","green","join","totalFiles","map","r","paths","length","reduce","acc","current","writeTitle","writeOutput","result","p","path","str","bold","envIds","clean","silent","noDedupe","writeTsconfigJson","dedupe","writeJson","s","omit"],"sources":["write-tsconfig.cmd.ts"],"sourcesContent":["import path from 'path';\nimport { omit } from 'lodash';\nimport { Command, CommandOptions } from '@teambit/cli';\nimport chalk from 'chalk';\nimport { TypescriptMain } from '../typescript.main.runtime';\n\ntype Flags = { dryRun?: boolean; noDedupe?: boolean; dryRunWithTsconfig?: boolean; clean?: boolean; silent?: boolean };\n\nexport default class WriteTsconfigCmd implements Command {\n  name = 'write-tsconfig';\n  description = 'EXPERIMENTAL. write tsconfig.json files in the component directories';\n  alias = '';\n  group = 'development';\n  options = [\n    ['c', 'clean', 'delete tsconfig files from the workspace. highly recommended to run it with \"--dry-run\" first'],\n    ['s', 'silent', 'do not prompt for confirmation'],\n    ['', 'no-dedupe', \"write tsconfig.json inside each one of the component's dir, avoid deduping\"],\n    ['', 'dry-run', 'show the paths that tsconfig will be written per env'],\n    [\n      '',\n      'dry-run-with-tsconfig',\n      'use with --json flag. show the tsconfig.json content and the paths it will be written per env',\n    ],\n    ['j', 'json', 'json format'],\n  ] as CommandOptions;\n\n  constructor(private tsMain: TypescriptMain) {}\n\n  async report(_args, flags: Flags) {\n    const { cleanResults, writeResults } = await this.json(_args, flags);\n    if (flags.dryRunWithTsconfig) {\n      throw new Error(`use --json flag along with --dry-run-with-tsconfig`);\n    }\n    const isDryRun = flags.dryRun;\n    const cleanResultsOutput = cleanResults\n      ? `${chalk.green(`the following paths ${isDryRun ? 'will be' : 'were'} deleted`)}\\n${cleanResults.join('\\n')}\\n\\n`\n      : '';\n\n    const totalFiles = writeResults.map((r) => r.paths.length).reduce((acc, current) => acc + current);\n    const writeTitle = isDryRun\n      ? chalk.green(`${totalFiles} files will be written`)\n      : chalk.green(`${totalFiles} files have been written successfully`);\n    const writeOutput = writeResults\n      .map((result) => {\n        const paths = result.paths\n          .map((p) => path.join(p, 'tsconfig.json'))\n          .map((str) => `  ${str}`)\n          .join('\\n');\n        return `The following paths are according to env(s) ${chalk.bold(result.envIds.join(', '))}\\n${paths}`;\n      })\n      .join('\\n\\n');\n    return `${cleanResultsOutput}${writeTitle}\\n${writeOutput}`;\n  }\n\n  async json(_args, flags: Flags) {\n    const { clean, silent, noDedupe, dryRunWithTsconfig } = flags;\n    const dryRun = dryRunWithTsconfig ? true : flags.dryRun;\n    const { cleanResults, writeResults } = await this.tsMain.writeTsconfigJson({\n      clean,\n      dedupe: !noDedupe,\n      dryRun,\n      dryRunWithTsconfig,\n      silent,\n    });\n\n    if (dryRun) {\n      const writeJson = dryRunWithTsconfig ? writeResults : writeResults.map((s) => omit(s, ['tsconfig']));\n      // return JSON.stringify({ cleanResults, writeResults: writeJson }, undefined, 2);\n      return { cleanResults, writeResults: writeJson };\n    }\n    return { cleanResults, writeResults };\n  }\n}\n"],"mappings":"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"}