import { TsserverClient } from '@teambit/ts-server';
import ts, { ExportDeclaration, Node, TypeNode } from 'typescript';
import protocol from 'typescript/lib/protocol';
import type { AbstractVinyl } from '@teambit/legacy/dist/consumer/component/sources';
import { Component } from '@teambit/component';
import { TypeRefSchema, SchemaNode, Location } from '@teambit/semantics.entities.semantic-schema';
import { ComponentDependency } from '@teambit/dependency-resolver';
import { TypeScriptExtractor } from './typescript.extractor';
import { ExportList } from './export-list';
export declare class SchemaExtractorContext {
    readonly tsserver: TsserverClient;
    readonly component: Component;
    readonly extractor: TypeScriptExtractor;
    readonly componentDeps: ComponentDependency[];
    constructor(tsserver: TsserverClient, component: Component, extractor: TypeScriptExtractor, componentDeps: ComponentDependency[]);
    computeSchema(node: Node): Promise<SchemaNode>;
    /**
     * returns the location of a node in a source file.
     */
    getLocation(node: Node, targetSourceFile?: ts.SourceFile, absolutePath?: boolean): Location;
    getLocationAsString(node: Node): string;
    getPathRelativeToComponent(filePath: string): string;
    /**
     * returns a signature for a node.
     */
    getSignature(node: Node): Promise<protocol.SignatureHelpResponse | undefined>;
    /**
     * get the position for the tsserver.
     */
    getPosition(sourceFile: ts.SourceFile, line: number, offset: number): number;
    /**
     * get the path for a source file.
     */
    getPath(node: Node): string;
    getQuickInfo(node: Node): Promise<protocol.QuickInfoResponse | undefined>;
    getQuickInfoDisplayString(node: Node): Promise<string>;
    /**
     * returns the type definition for a type.
     */
    typeDefinition(node: Node): Promise<protocol.TypeDefinitionResponse | undefined>;
    visitTypeDefinition(): void;
    private findFileInComponent;
    private parsePackageNameFromPath;
    /**
     * return the file if part of the component.
     * otherwise, a reference to the target package and the type name.
     */
    getSourceFileInsideComponent(filePath: string): ts.SourceFile | undefined;
    getSourceFileFromNode(node: Node): Promise<ts.SourceFile | undefined>;
    getFilePathByNode(node: Node): Promise<string | undefined>;
    definitionInfo(node: Node): Promise<protocol.DefinitionInfo | undefined>;
    /**
     * get a definition for a given node.
     */
    definition(definitonInfo: protocol.DefinitionInfo): Promise<Node | undefined>;
    /**
     * visit a definition for node - e.g. return it's schema.
     */
    visitDefinition(node: Node): Promise<SchemaNode | undefined>;
    visit(node: Node): Promise<SchemaNode>;
    references(): void;
    isExported(): void;
    isFromComponent(): void;
    getFileExports(exportDec: ExportDeclaration): Promise<import("./export-identifier").ExportIdentifier[]>;
    _exports: ExportList | undefined;
    setExports(exports: ExportList): this;
    getExportedIdentifiers(node: Node): Promise<import("./export-identifier").ExportIdentifier[]>;
    jump(file: AbstractVinyl, start: any): Promise<SchemaNode | undefined>;
    /**
     * resolve a type by a node and its identifier.
     */
    resolveType(node: Node & {
        type?: TypeNode;
    }, typeStr: string, isTypeStrFromQuickInfo?: boolean): Promise<SchemaNode>;
    private getCompIdByPkgName;
    getTypeRefForExternalNode(node: Node): Promise<TypeRefSchema>;
    getTypeRefForExternalPath(typeStr: string, filePath: string, location: Location): Promise<TypeRefSchema>;
}
