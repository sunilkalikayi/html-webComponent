import { BuildContext, BuiltTaskResult } from '@teambit/builder';
import { Compiler, TranspileFileParams, TranspileFileOutput } from '@teambit/compiler';
import { Logger } from '@teambit/logger';
import ts from 'typescript';
import { TypeScriptCompilerOptions } from './compiler-options';
export declare class TypescriptCompiler implements Compiler {
    readonly id: string;
    private logger;
    private options;
    private tsModule;
    distDir: string;
    distGlobPatterns: string[];
    shouldCopyNonSupportedFiles: boolean;
    artifactName: string;
    constructor(id: string, logger: Logger, options: TypeScriptCompilerOptions, tsModule: typeof ts);
    displayName: string;
    deleteDistDir: boolean;
    displayConfig(): string;
    getDistDir(): string;
    /**
     * compile one file on the workspace
     */
    transpileFile(fileContent: string, options: TranspileFileParams): TranspileFileOutput;
    preBuild(context: BuildContext): Promise<void>;
    /**
     * compile multiple components on the capsules
     */
    build(context: BuildContext): Promise<BuiltTaskResult>;
    postBuild(context: BuildContext): Promise<void>;
    getArtifactDefinition(): {
        generatedBy: string;
        name: string;
        globPatterns: string[];
    }[];
    /**
     * given a source file, return its parallel in the dists. e.g. index.ts => dist/index.js
     */
    getDistPathBySrcPath(srcPath: string): string;
    /**
     * whether typescript is able to compile the given path
     */
    isFileSupported(filePath: string): boolean;
    /**
     * we have two options here:
     * 1. pass all capsules-dir at the second parameter of createSolutionBuilder and then no
     * need to write the main tsconfig.json with all the references.
     * 2. write main tsconfig.json and pass the capsules root-dir.
     * we went with option #2 because it'll be easier for users to go to the capsule-root and run
     * `tsc --build` to debug issues.
     */
    private runTscBuild;
    private getFormatDiagnosticsHost;
    private writeTypes;
    /**
     * when using project-references, typescript adds a file "tsconfig.tsbuildinfo" which is not
     * needed for the package.
     */
    private writeNpmIgnore;
    private writeProjectReferencesTsConfig;
    private writeTsConfig;
    private stringifyTsconfig;
    private replaceFileExtToJs;
    version(): string;
}
