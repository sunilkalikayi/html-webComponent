{"version":3,"names":["defaultOpts","tsconfig","types","describe","it","tsCompiler","getTsCompiler","expect","getDistPathBySrcPath","to","equal","path","join","isFileSupported","be","true","false","compileJsx","compileJs","opts","finalOpts","Object","assign","TypescriptCompiler","TypescriptAspect","id","Logger","ts"],"sources":["typescript.compiler.spec.ts"],"sourcesContent":["import { Logger } from '@teambit/logger';\nimport ts from 'typescript';\nimport { expect } from 'chai';\nimport path from 'path';\nimport { TypescriptAspect } from './typescript.aspect';\n\nimport { TypescriptCompiler } from './typescript.compiler';\nimport type { TsCompilerOptionsWithoutTsConfig } from './compiler-options';\n\nconst defaultOpts = {\n  tsconfig: {},\n  types: [],\n};\n\ndescribe('TypescriptCompiler', () => {\n  describe('getDistPathBySrcPath', () => {\n    it('should replace the extension with .js and prepend the dist dir', () => {\n      const tsCompiler = getTsCompiler();\n      expect(tsCompiler.getDistPathBySrcPath('index.ts')).to.equal(path.join('dist', 'index.js'));\n      expect(tsCompiler.getDistPathBySrcPath('index.tsx')).to.equal(path.join('dist', 'index.js'));\n    });\n    it('should not replace the extension if the file is not supported', () => {\n      const tsCompiler = getTsCompiler();\n      expect(tsCompiler.getDistPathBySrcPath('style.css')).to.equal(path.join('dist', 'style.css'));\n      expect(tsCompiler.getDistPathBySrcPath('index.d.ts')).to.equal(path.join('dist', 'index.d.ts'));\n    });\n  });\n  describe('isFileSupported', () => {\n    it('should support .ts files', () => {\n      const tsCompiler = getTsCompiler();\n      expect(tsCompiler.isFileSupported('index.ts')).to.be.true;\n    });\n    it('should support .tsx files', () => {\n      const tsCompiler = getTsCompiler();\n      expect(tsCompiler.isFileSupported('index.tsx')).to.be.true;\n    });\n    it('should not support .jsx files by default', () => {\n      const tsCompiler = getTsCompiler();\n      expect(tsCompiler.isFileSupported('index.jsx')).to.be.false;\n    });\n    it('should not support .js files by default', () => {\n      const tsCompiler = getTsCompiler();\n      expect(tsCompiler.isFileSupported('index.js')).to.be.false;\n    });\n    it('should support .jsx files when passing compileJsx', () => {\n      const tsCompiler = getTsCompiler({ compileJsx: true, ...defaultOpts });\n      expect(tsCompiler.isFileSupported('index.jsx')).to.be.true;\n    });\n    it('should support .js files when passing compileJs', () => {\n      const tsCompiler = getTsCompiler({ compileJs: true, ...defaultOpts });\n      expect(tsCompiler.isFileSupported('index.js')).to.be.true;\n    });\n    it('should not support .d.ts files', () => {\n      const tsCompiler = getTsCompiler();\n      expect(tsCompiler.isFileSupported('index.d.ts')).to.be.false;\n    });\n  });\n});\n\nfunction getTsCompiler(opts: TsCompilerOptionsWithoutTsConfig = defaultOpts) {\n  const finalOpts = Object.assign({}, defaultOpts, opts);\n  return new TypescriptCompiler(TypescriptAspect.id, new Logger('test'), finalOpts, ts);\n}\n"],"mappings":"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"}