"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VariableStatementTransformer = void 0;
function _semanticsEntities() {
  const data = require("@teambit/semantics.entities.semantic-schema");
  _semanticsEntities = function () {
    return data;
  };
  return data;
}
function _lodash() {
  const data = require("lodash");
  _lodash = function () {
    return data;
  };
  return data;
}
function _pMapSeries() {
  const data = _interopRequireDefault(require("p-map-series"));
  _pMapSeries = function () {
    return data;
  };
  return data;
}
function _typescript() {
  const data = _interopRequireDefault(require("typescript"));
  _typescript = function () {
    return data;
  };
  return data;
}
function _exportIdentifier() {
  const data = require("../export-identifier");
  _exportIdentifier = function () {
    return data;
  };
  return data;
}
/**
 * variable statement is a collection of variable declarations.
 * e.g. `export const a = 1, b = () => {}, c = {};`
 */
class VariableStatementTransformer {
  predicate(node) {
    return node.kind === _typescript().default.SyntaxKind.VariableStatement;
  }
  async getIdentifiers(node) {
    return node.declarationList.declarations.map(dec => {
      return new (_exportIdentifier().ExportIdentifier)(dec.name.getText(), dec.getSourceFile().fileName);
    });
  }
  async transform(node, context) {
    const schemas = await (0, _pMapSeries().default)(node.declarationList.declarations, async dec => {
      // this will get the schema from variable-declaration
      const schema = await context.visitDefinition(dec.name);
      return schema;
    });
    return new (_semanticsEntities().Module)(context.getLocation(node), (0, _lodash().compact)(schemas));
  }
}
exports.VariableStatementTransformer = VariableStatementTransformer;

//# sourceMappingURL=variable-statement.js.map