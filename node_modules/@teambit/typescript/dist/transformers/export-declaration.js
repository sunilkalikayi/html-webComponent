"use strict";

require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExportDeclaration = void 0;
function _semanticsEntities() {
  const data = require("@teambit/semantics.entities.semantic-schema");
  _semanticsEntities = function () {
    return data;
  };
  return data;
}
function _typescript() {
  const data = _interopRequireWildcard(require("typescript"));
  _typescript = function () {
    return data;
  };
  return data;
}
function _exportIdentifier() {
  const data = require("../export-identifier");
  _exportIdentifier = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
class ExportDeclaration {
  predicate(node) {
    return node.kind === _typescript().SyntaxKind.ExportDeclaration;
  }
  async getIdentifiers(exportDec, context) {
    var _exportDec$exportClau, _exportDec$exportClau2;
    if (((_exportDec$exportClau = exportDec.exportClause) === null || _exportDec$exportClau === void 0 ? void 0 : _exportDec$exportClau.kind) === _typescript().default.SyntaxKind.NamedExports) {
      exportDec.exportClause;
      return exportDec.exportClause.elements.map(elm => {
        return new (_exportIdentifier().ExportIdentifier)(elm.name.getText(), elm.getSourceFile().fileName);
      });
    }
    if (((_exportDec$exportClau2 = exportDec.exportClause) === null || _exportDec$exportClau2 === void 0 ? void 0 : _exportDec$exportClau2.kind) === _typescript().default.SyntaxKind.NamespaceExport) {
      return [new (_exportIdentifier().ExportIdentifier)(exportDec.exportClause.name.getText(), exportDec.getSourceFile().fileName)];
    }
    if (exportDec.moduleSpecifier) {
      return context.getFileExports(exportDec);
    }
    return [];
  }
  async transform(exportDec, context) {
    const exportClause = exportDec.exportClause;

    // it's export-all, e.g. `export * from './button'`;
    if (!exportClause) {
      const specifier = exportDec.moduleSpecifier;
      if (!specifier) {
        throw new Error(`fatal: no specifier`);
      }
      const sourceFile = await context.getSourceFileFromNode(specifier);
      if (!sourceFile) {
        throw new Error(`unable to find the source-file`);
      }
      return context.computeSchema(sourceFile);
    }

    // e.g. `export { button1, button2 } as Composition from './button';
    if (exportClause.kind === _typescript().SyntaxKind.NamedExports) {
      const schemas = await namedExport(exportClause, context);
      return new (_semanticsEntities().Module)(context.getLocation(exportDec), schemas);
    }
    // e.g. `export * as Composition from './button';
    if (exportClause.kind === _typescript().SyntaxKind.NamespaceExport) {
      return namespaceExport(exportClause, exportDec, context);
    }

    // should never reach here. exportClause can be either NamespaceExport or NamedExports
    throw new Error(`unrecognized exportClause type`);
  }
}
exports.ExportDeclaration = ExportDeclaration;
function isSameNode(nodeA, nodeB) {
  return nodeA.kind === nodeB.kind && nodeA.pos === nodeB.pos && nodeA.end === nodeB.end;
}
async function namedExport(exportClause, context) {
  const schemas = await Promise.all(exportClause.elements.map(async element => {
    return exportSpecifierToSchemaNode(element, context);
  }));
  return schemas;
}
async function exportSpecifierToSchemaNode(element, context) {
  const definitionInfo = await context.definitionInfo(element);
  if (!definitionInfo) {
    // happens for example when the main index.ts file exports variable from an mdx file.
    // tsserver is unable to get the definition node because it doesn't know to parse mdx files.
    return new (_semanticsEntities().UnresolvedSchema)(context.getLocation(element.name), element.name.getText());
  }
  const definitionNode = await context.definition(definitionInfo);
  if (!definitionNode) {
    return context.getTypeRefForExternalNode(element);
  }

  // if it is reexported from another export
  if (isSameNode(element, definitionNode.parent)) {
    // the definition node is the same node as element.name. tsserver wasn't able to find the source for it
    // normally, "bit install" should fix it. another option is to open vscode and look for errors.
    throw new Error(`error: tsserver is unable to locate the identifier "${element.name.getText()}" at ${context.getLocationAsString(element.name)}.
make sure "bit status" is clean and there are no errors about missing packages/links.
also, make sure the tsconfig.json in the root has the "jsx" setting defined.`);
  }
  if (definitionNode.parent.kind === _typescript().SyntaxKind.ExportSpecifier) return exportSpecifierToSchemaNode(definitionNode.parent, context);
  return context.computeSchema(definitionNode.parent);
}
async function namespaceExport(exportClause, exportDec, context) {
  const namespace = exportClause.name.getText();
  const filePath = await context.getFilePathByNode(exportClause.name);
  if (!filePath) {
    throw new Error(`unable to find the file-path for "${namespace}"`);
  }
  const sourceFile = context.getSourceFileInsideComponent(filePath);
  if (!sourceFile) {
    // it's a namespace from another component or an external package.
    return context.getTypeRefForExternalPath(namespace, filePath, context.getLocation(exportDec));
  }
  const result = await context.computeSchema(sourceFile);
  if (!(result instanceof _semanticsEntities().Module)) {
    throw new Error(`expect result to be instance of Module`);
  }
  result.namespace = namespace;
  return result;
}

//# sourceMappingURL=export-declaration.js.map