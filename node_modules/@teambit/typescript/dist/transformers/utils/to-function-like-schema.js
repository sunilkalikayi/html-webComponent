"use strict";

require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toFunctionLikeSchema = toFunctionLikeSchema;
function _semanticsEntities() {
  const data = require("@teambit/semantics.entities.semantic-schema");
  _semanticsEntities = function () {
    return data;
  };
  return data;
}
function _getParams() {
  const data = require("./get-params");
  _getParams = function () {
    return data;
  };
  return data;
}
function _parseTypeFromQuickInfo() {
  const data = require("./parse-type-from-quick-info");
  _parseTypeFromQuickInfo = function () {
    return data;
  };
  return data;
}
function _jsdocToDocSchema() {
  const data = require("./jsdoc-to-doc-schema");
  _jsdocToDocSchema = function () {
    return data;
  };
  return data;
}
async function toFunctionLikeSchema(node, context, funcName) {
  var _node$name, _info$body, _node$modifiers, _node$typeParameters;
  const name = funcName || ((_node$name = node.name) === null || _node$name === void 0 ? void 0 : _node$name.getText()) || '';
  const info = node.name ? await context.getQuickInfo(node.name) : null;
  const returnTypeStr = info ? (0, _parseTypeFromQuickInfo().parseTypeFromQuickInfo)(info) : 'any';
  const displaySig = (info === null || info === void 0 ? void 0 : (_info$body = info.body) === null || _info$body === void 0 ? void 0 : _info$body.displayString) || '';
  const args = await (0, _getParams().getParams)(node.parameters, context);
  const returnType = await context.resolveType(node, returnTypeStr, Boolean(info));
  const modifiers = ((_node$modifiers = node.modifiers) === null || _node$modifiers === void 0 ? void 0 : _node$modifiers.map(modifier => modifier.getText())) || [];
  const typeParameters = (_node$typeParameters = node.typeParameters) === null || _node$typeParameters === void 0 ? void 0 : _node$typeParameters.map(typeParam => typeParam.name.getText());
  const location = context.getLocation(node);
  const doc = await (0, _jsdocToDocSchema().jsDocToDocSchema)(node, context);
  return new (_semanticsEntities().FunctionLikeSchema)(location, name, args, returnType, displaySig, modifiers, doc, typeParameters);
}

//# sourceMappingURL=to-function-like-schema.js.map