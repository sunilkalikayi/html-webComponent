{"version":3,"names":["typeNodeToSchema","node","context","location","getLocation","isKeywordType","KeywordTypeSchema","getText","kind","SyntaxKind","IntersectionType","intersectionType","UnionType","unionType","TypeReference","typeReference","TypeLiteral","typeLiteral","LiteralType","LiteralTypeSchema","FunctionType","functionType","TypeQuery","typeQuery","ArrayType","arrayType","TypeOperator","typeOperator","TupleType","tupleType","ParenthesizedType","parenthesizedType","TypePredicate","typePredicate","IndexedAccessType","indexedAccessType","TemplateLiteralTypeSpan","templateLiteralTypeSpan","TemplateLiteralType","templateLiteralType","ThisType","thisType","ConditionalType","conditionalType","ConstructorType","NamedTupleMember","OptionalType","RestType","InferType","MappedType","ImportType","ExpressionWithTypeArguments","JSDocTypeExpression","JSDocAllType","JSDocUnknownType","JSDocNonNullableType","JSDocNullableType","JSDocOptionalType","JSDocFunctionType","JSDocVariadicType","JSDocNamepathType","JSDocSignature","JSDocTypeLiteral","Error","AnyKeyword","BigIntKeyword","BooleanKeyword","IntrinsicKeyword","NeverKeyword","NumberKeyword","ObjectKeyword","StringKeyword","SymbolKeyword","UndefinedKeyword","UnknownKeyword","VoidKeyword","types","pMapSeries","type","typeSchema","TypeIntersectionSchema","TypeUnionSchema","members","member","typeElementToSchema","TypeLiteralSchema","name","typeName","resolveType","typeArguments","TypeRefSchema","args","arg","typeArgs","params","getParams","parameters","returnType","modifiers","map","modifier","doc","jsDocToDocSchema","FunctionLikeSchema","displaySig","getQuickInfoDisplayString","exprName","TypeQuerySchema","elementType","TypeArraySchema","operatorName","getOperatorName","operator","TypeOperatorSchema","KeyOfKeyword","UniqueKeyword","ReadonlyKeyword","elements","elem","TupleTypeSchema","ParenthesizedTypeSchema","parameterName","isIdentifier","undefined","hasAssertsModifier","Boolean","assertsModifier","TypePredicateSchema","objectType","indexType","IndexedAccessSchema","templateSpans","span","head","text","TemplateLiteralTypeSchema","literal","TemplateLiteralTypeSpanSchema","ThisTypeSchema","checkType","extendsType","trueType","falseType","ConditionalTypeSchema"],"sources":["type-node-to-schema.ts"],"sourcesContent":["import {\n  TypeNode,\n  SyntaxKind,\n  KeywordTypeNode,\n  FunctionTypeNode,\n  TypeQueryNode,\n  TypeReferenceNode,\n  ArrayTypeNode,\n  TypeOperatorNode,\n  TupleTypeNode,\n  IntersectionTypeNode,\n  UnionTypeNode,\n  TypeLiteralNode,\n  ParenthesizedTypeNode,\n  TypePredicateNode,\n  isIdentifier,\n  IndexedAccessTypeNode,\n  TemplateLiteralTypeNode,\n  TemplateLiteralTypeSpan,\n  ThisTypeNode,\n  ConditionalTypeNode,\n} from 'typescript';\nimport {\n  SchemaNode,\n  TypeRefSchema,\n  TypeIntersectionSchema,\n  TypeUnionSchema,\n  TypeLiteralSchema,\n  TypeQuerySchema,\n  LiteralTypeSchema,\n  KeywordTypeSchema,\n  TypeArraySchema,\n  TypeOperatorSchema,\n  TupleTypeSchema,\n  FunctionLikeSchema,\n  ParenthesizedTypeSchema,\n  TypePredicateSchema,\n  IndexedAccessSchema,\n  TemplateLiteralTypeSpanSchema,\n  TemplateLiteralTypeSchema,\n  ThisTypeSchema,\n  Modifier,\n  ConditionalTypeSchema,\n} from '@teambit/semantics.entities.semantic-schema';\nimport pMapSeries from 'p-map-series';\nimport { SchemaExtractorContext } from '../../schema-extractor-context';\nimport { getParams } from './get-params';\nimport { typeElementToSchema } from './type-element-to-schema';\nimport { jsDocToDocSchema } from './jsdoc-to-doc-schema';\n\n// eslint-disable-next-line complexity\nexport async function typeNodeToSchema(node: TypeNode, context: SchemaExtractorContext): Promise<SchemaNode> {\n  const location = context.getLocation(node);\n  if (isKeywordType(node)) {\n    return new KeywordTypeSchema(location, node.getText());\n  }\n  switch (node.kind) {\n    case SyntaxKind.IntersectionType:\n      return intersectionType(node as IntersectionTypeNode, context);\n    case SyntaxKind.UnionType:\n      return unionType(node as UnionTypeNode, context);\n    case SyntaxKind.TypeReference:\n      return typeReference(node as TypeReferenceNode, context);\n    case SyntaxKind.TypeLiteral:\n      return typeLiteral(node as TypeLiteralNode, context);\n    case SyntaxKind.LiteralType: // e.g. string/boolean\n      return new LiteralTypeSchema(location, node.getText());\n    case SyntaxKind.FunctionType:\n      return functionType(node as FunctionTypeNode, context);\n    case SyntaxKind.TypeQuery:\n      return typeQuery(node as TypeQueryNode, context);\n    case SyntaxKind.ArrayType:\n      return arrayType(node as ArrayTypeNode, context);\n    case SyntaxKind.TypeOperator:\n      return typeOperator(node as TypeOperatorNode, context);\n    case SyntaxKind.TupleType:\n      return tupleType(node as TupleTypeNode, context);\n    case SyntaxKind.ParenthesizedType:\n      return parenthesizedType(node as ParenthesizedTypeNode, context);\n    case SyntaxKind.TypePredicate:\n      return typePredicate(node as TypePredicateNode, context);\n    case SyntaxKind.IndexedAccessType:\n      return indexedAccessType(node as IndexedAccessTypeNode, context);\n    case SyntaxKind.TemplateLiteralTypeSpan:\n      return templateLiteralTypeSpan(node as TemplateLiteralTypeSpan, context);\n    case SyntaxKind.TemplateLiteralType:\n      return templateLiteralType(node as TemplateLiteralTypeNode, context);\n    case SyntaxKind.ThisType:\n      return thisType(node as ThisTypeNode, context);\n    case SyntaxKind.ConditionalType:\n      return conditionalType(node as ConditionalTypeNode, context);\n    case SyntaxKind.ConstructorType:\n    case SyntaxKind.NamedTupleMember:\n    case SyntaxKind.OptionalType:\n    case SyntaxKind.RestType:\n    case SyntaxKind.InferType:\n    case SyntaxKind.MappedType:\n    case SyntaxKind.ImportType:\n    case SyntaxKind.ExpressionWithTypeArguments:\n    case SyntaxKind.JSDocTypeExpression:\n    case SyntaxKind.JSDocAllType:\n    case SyntaxKind.JSDocUnknownType:\n    case SyntaxKind.JSDocNonNullableType:\n    case SyntaxKind.JSDocNullableType:\n    case SyntaxKind.JSDocOptionalType:\n    case SyntaxKind.JSDocFunctionType:\n    case SyntaxKind.JSDocVariadicType:\n    case SyntaxKind.JSDocNamepathType:\n    case SyntaxKind.JSDocSignature:\n    case SyntaxKind.JSDocTypeLiteral:\n      throw new Error(`TypeNode ${node.kind} (probably ${SyntaxKind[node.kind]}) was not implemented yet.\ncontext: ${node.getText()}`);\n    default:\n      throw new Error(`Node ${node.kind} (probably ${SyntaxKind[node.kind]}) is not a TypeNode.\ncontext: ${node.getText()}`);\n  }\n}\n\n/**\n * whether it's kind of `ts.KeywordTypeSyntaxKind`\n */\nfunction isKeywordType(node: TypeNode): node is KeywordTypeNode {\n  switch (node.kind) {\n    case SyntaxKind.AnyKeyword:\n    case SyntaxKind.BigIntKeyword:\n    case SyntaxKind.BooleanKeyword:\n    case SyntaxKind.IntrinsicKeyword:\n    case SyntaxKind.NeverKeyword:\n    case SyntaxKind.NumberKeyword:\n    case SyntaxKind.ObjectKeyword:\n    case SyntaxKind.StringKeyword:\n    case SyntaxKind.SymbolKeyword:\n    case SyntaxKind.UndefinedKeyword:\n    case SyntaxKind.UnknownKeyword:\n    case SyntaxKind.VoidKeyword:\n      return true;\n    default:\n      return false;\n  }\n}\n\nasync function intersectionType(node: IntersectionTypeNode, context: SchemaExtractorContext) {\n  const types = await pMapSeries(node.types, async (type) => {\n    const typeSchema = await typeNodeToSchema(type, context);\n    return typeSchema;\n  });\n  const location = context.getLocation(node);\n  return new TypeIntersectionSchema(location, types);\n}\n\nasync function unionType(node: UnionTypeNode, context: SchemaExtractorContext) {\n  const types = await pMapSeries(node.types, async (type) => {\n    const typeSchema = await typeNodeToSchema(type, context);\n    return typeSchema;\n  });\n  const location = context.getLocation(node);\n  return new TypeUnionSchema(location, types);\n}\n\n/**\n * not to be confused with \"LiteralType\", which is string/boolean/null.\n * this \"TypeLiteral\" is an object with properties, such as: `{ a: string; b: number }`, similar to Interface.\n */\nasync function typeLiteral(node: TypeLiteralNode, context: SchemaExtractorContext) {\n  const members = await pMapSeries(node.members, (member) => typeElementToSchema(member, context));\n  const location = context.getLocation(node);\n  return new TypeLiteralSchema(location, members);\n}\n\n/**\n * In the following example, `AriaButtonProps` is a type reference\n * ```ts\n * import type { AriaButtonProps } from '@react-types/button';\n * export type ButtonProps = AriaButtonProps & { a: string };\n * ```\n */\nasync function typeReference(node: TypeReferenceNode, context: SchemaExtractorContext) {\n  const name = node.typeName.getText();\n  const type = await context.resolveType(node, name, false);\n  if (node.typeArguments && type instanceof TypeRefSchema) {\n    const args = await pMapSeries(node.typeArguments, (arg) => typeNodeToSchema(arg, context));\n    type.typeArgs = args;\n  }\n  return type;\n}\n\nasync function functionType(node: FunctionTypeNode, context: SchemaExtractorContext): Promise<SchemaNode> {\n  const name = node.name?.getText() || '';\n  const params = await getParams(node.parameters, context);\n  const returnType = await typeNodeToSchema(node.type, context);\n  const location = context.getLocation(node);\n  const modifiers = node.modifiers?.map((modifier) => modifier.getText()) || [];\n  const doc = await jsDocToDocSchema(node, context);\n  return new FunctionLikeSchema(location, name, params, returnType, '', modifiers as Modifier[], doc);\n}\n\n/**\n * e.g. `typeof Foo`\n */\nasync function typeQuery(node: TypeQueryNode, context: SchemaExtractorContext) {\n  const displaySig = await context.getQuickInfoDisplayString(node.exprName);\n  const type = await context.resolveType(node.exprName, node.exprName.getText(), false);\n  const location = context.getLocation(node);\n  return new TypeQuerySchema(location, type, displaySig);\n}\n\nasync function arrayType(node: ArrayTypeNode, context: SchemaExtractorContext) {\n  const type = await typeNodeToSchema(node.elementType, context);\n  const location = context.getLocation(node);\n  return new TypeArraySchema(location, type);\n}\n\n/**\n * e.g. keyof typeof Foo\n */\nasync function typeOperator(node: TypeOperatorNode, context: SchemaExtractorContext) {\n  const operatorName = getOperatorName(node.operator);\n  const type = await typeNodeToSchema(node.type, context);\n  return new TypeOperatorSchema(context.getLocation(node), operatorName, type);\n}\n\nfunction getOperatorName(operator: SyntaxKind.KeyOfKeyword | SyntaxKind.UniqueKeyword | SyntaxKind.ReadonlyKeyword) {\n  switch (operator) {\n    case SyntaxKind.KeyOfKeyword:\n      return 'keyof';\n    case SyntaxKind.UniqueKeyword:\n      return 'unique';\n    case SyntaxKind.ReadonlyKeyword:\n      return 'readonly';\n    default:\n      throw new Error(`getOperatorName: unable to find operator name for ${operator}`);\n  }\n}\n\nasync function tupleType(node: TupleTypeNode, context: SchemaExtractorContext) {\n  const elements = await pMapSeries(node.elements, async (elem) => {\n    const typeSchema = await typeNodeToSchema(elem, context);\n    return typeSchema;\n  });\n  return new TupleTypeSchema(context.getLocation(node), elements);\n}\n\nasync function parenthesizedType(node: ParenthesizedTypeNode, context: SchemaExtractorContext) {\n  const type = await typeNodeToSchema(node.type, context);\n  return new ParenthesizedTypeSchema(context.getLocation(node), type);\n}\n\nasync function typePredicate(node: TypePredicateNode, context: SchemaExtractorContext) {\n  const parameterName = isIdentifier(node.parameterName) ? node.parameterName.getText() : 'this';\n  const type = node.type ? await typeNodeToSchema(node.type, context) : undefined;\n  const hasAssertsModifier = Boolean(node.assertsModifier);\n  return new TypePredicateSchema(context.getLocation(node), parameterName, type, hasAssertsModifier);\n}\n\nasync function indexedAccessType(node: IndexedAccessTypeNode, context: SchemaExtractorContext) {\n  const objectType = await typeNodeToSchema(node.objectType, context);\n  const indexType = await typeNodeToSchema(node.indexType, context);\n  return new IndexedAccessSchema(context.getLocation(node), objectType, indexType);\n}\n\nasync function templateLiteralType(node: TemplateLiteralTypeNode, context: SchemaExtractorContext) {\n  const templateSpans = await pMapSeries(node.templateSpans, (span) => templateLiteralTypeSpan(span, context));\n  const head = node.head.text;\n  return new TemplateLiteralTypeSchema(context.getLocation(node), head, templateSpans);\n}\n\nasync function templateLiteralTypeSpan(node: TemplateLiteralTypeSpan, context: SchemaExtractorContext) {\n  const type = await typeNodeToSchema(node.type, context);\n  const literal = node.literal.text;\n  return new TemplateLiteralTypeSpanSchema(context.getLocation(node), literal, type);\n}\n\nasync function thisType(node: ThisTypeNode, context: SchemaExtractorContext) {\n  return new ThisTypeSchema(context.getLocation(node));\n}\n\nasync function conditionalType(node: ConditionalTypeNode, context: SchemaExtractorContext) {\n  const checkType = await typeNodeToSchema(node.checkType, context);\n  const extendsType = await typeNodeToSchema(node.extendsType, context);\n  const trueType = await typeNodeToSchema(node.trueType, context);\n  const falseType = await typeNodeToSchema(node.falseType, context);\n  return new ConditionalTypeSchema(context.getLocation(node), checkType, extendsType, trueType, falseType);\n}\n"],"mappings":"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"}