"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VariableDeclaration = void 0;
function _semanticsEntities() {
  const data = require("@teambit/semantics.entities.semantic-schema");
  _semanticsEntities = function () {
    return data;
  };
  return data;
}
function _typescript() {
  const data = _interopRequireDefault(require("typescript"));
  _typescript = function () {
    return data;
  };
  return data;
}
function _exportIdentifier() {
  const data = require("../export-identifier");
  _exportIdentifier = function () {
    return data;
  };
  return data;
}
function _getParams() {
  const data = require("./utils/get-params");
  _getParams = function () {
    return data;
  };
  return data;
}
function _parseTypeFromQuickInfo() {
  const data = require("./utils/parse-type-from-quick-info");
  _parseTypeFromQuickInfo = function () {
    return data;
  };
  return data;
}
function _jsdocToDocSchema() {
  const data = require("./utils/jsdoc-to-doc-schema");
  _jsdocToDocSchema = function () {
    return data;
  };
  return data;
}
class VariableDeclaration {
  predicate(node) {
    return node.kind === _typescript().default.SyntaxKind.VariableDeclaration;
  }
  getName(node) {
    return node.name.getText();
  }
  async getIdentifiers(node) {
    return [new (_exportIdentifier().ExportIdentifier)(node.name.getText(), node.getSourceFile().fileName)];
  }
  async transform(varDec, context) {
    var _info$body, _varDec$initializer;
    const name = this.getName(varDec);
    const info = await context.getQuickInfo(varDec.name);
    const displaySig = (info === null || info === void 0 ? void 0 : (_info$body = info.body) === null || _info$body === void 0 ? void 0 : _info$body.displayString) || '';
    const location = context.getLocation(varDec);
    const doc = await (0, _jsdocToDocSchema().jsDocToDocSchema)(varDec, context);
    if (((_varDec$initializer = varDec.initializer) === null || _varDec$initializer === void 0 ? void 0 : _varDec$initializer.kind) === _typescript().default.SyntaxKind.ArrowFunction) {
      var _varDec$modifiers;
      const args = await (0, _getParams().getParams)(varDec.initializer.parameters, context);
      const typeStr = (0, _parseTypeFromQuickInfo().parseReturnTypeFromQuickInfo)(info);
      const returnType = await context.resolveType(varDec, typeStr);
      const modifiers = ((_varDec$modifiers = varDec.modifiers) === null || _varDec$modifiers === void 0 ? void 0 : _varDec$modifiers.map(modifier => modifier.getText())) || [];
      return new (_semanticsEntities().FunctionLikeSchema)(location, name, args, returnType, displaySig, modifiers, doc);
    }
    const typeStr = (0, _parseTypeFromQuickInfo().parseTypeFromQuickInfo)(info);
    const type = await context.resolveType(varDec, typeStr);
    return new (_semanticsEntities().VariableLikeSchema)(location, name, displaySig, type, false, doc);
  }
}
exports.VariableDeclaration = VariableDeclaration;

//# sourceMappingURL=variable-declaration.js.map