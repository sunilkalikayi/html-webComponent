"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BindingElementTransformer = void 0;
function _typescript() {
  const data = _interopRequireDefault(require("typescript"));
  _typescript = function () {
    return data;
  };
  return data;
}
function _semanticsEntities() {
  const data = require("@teambit/semantics.entities.semantic-schema");
  _semanticsEntities = function () {
    return data;
  };
  return data;
}
function _exportIdentifier() {
  const data = require("../export-identifier");
  _exportIdentifier = function () {
    return data;
  };
  return data;
}
function _parseTypeFromQuickInfo() {
  const data = require("./utils/parse-type-from-quick-info");
  _parseTypeFromQuickInfo = function () {
    return data;
  };
  return data;
}
function _jsdocToDocSchema() {
  const data = require("./utils/jsdoc-to-doc-schema");
  _jsdocToDocSchema = function () {
    return data;
  };
  return data;
}
/**
 * for example:
 *
 * const objBindingElem = { elem1: 1, elem2: 2 };
 * const { elem1 } = objBindingElem;
 * export { elem1 };
 */
class BindingElementTransformer {
  predicate(node) {
    return node.kind === _typescript().default.SyntaxKind.BindingElement;
  }
  async getIdentifiers(node) {
    return [new (_exportIdentifier().ExportIdentifier)(node.name.getText(), node.getSourceFile().fileName)];
  }
  async transform(node, context) {
    var _info$body;
    const name = node.name.getText();
    const info = await context.getQuickInfo(node.name);
    const displaySig = (info === null || info === void 0 ? void 0 : (_info$body = info.body) === null || _info$body === void 0 ? void 0 : _info$body.displayString) || '';
    const typeStr = (0, _parseTypeFromQuickInfo().parseTypeFromQuickInfo)(info);
    const type = await context.resolveType(node, typeStr);
    const doc = await (0, _jsdocToDocSchema().jsDocToDocSchema)(node, context);
    return new (_semanticsEntities().VariableLikeSchema)(context.getLocation(node), name, displaySig, type, false, doc);
  }
}
exports.BindingElementTransformer = BindingElementTransformer;

//# sourceMappingURL=binding-element.js.map