"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TypeAliasTransformer = void 0;
function _typescript() {
  const data = _interopRequireDefault(require("typescript"));
  _typescript = function () {
    return data;
  };
  return data;
}
function _semanticsEntities() {
  const data = require("@teambit/semantics.entities.semantic-schema");
  _semanticsEntities = function () {
    return data;
  };
  return data;
}
function _exportIdentifier() {
  const data = require("../export-identifier");
  _exportIdentifier = function () {
    return data;
  };
  return data;
}
function _typeNodeToSchema() {
  const data = require("./utils/type-node-to-schema");
  _typeNodeToSchema = function () {
    return data;
  };
  return data;
}
function _jsdocToDocSchema() {
  const data = require("./utils/jsdoc-to-doc-schema");
  _jsdocToDocSchema = function () {
    return data;
  };
  return data;
}
class TypeAliasTransformer {
  predicate(node) {
    return node.kind === _typescript().default.SyntaxKind.TypeAliasDeclaration;
  }
  async getIdentifiers(node) {
    return [new (_exportIdentifier().ExportIdentifier)(node.name.getText(), node.getSourceFile().fileName)];
  }
  getName(node) {
    return node.name.getText();
  }
  async transform(typeAlias, context) {
    const type = await (0, _typeNodeToSchema().typeNodeToSchema)(typeAlias.type, context);
    const displaySig = await context.getQuickInfoDisplayString(typeAlias.name);
    const doc = await (0, _jsdocToDocSchema().jsDocToDocSchema)(typeAlias, context);
    return new (_semanticsEntities().TypeSchema)(context.getLocation(typeAlias), this.getName(typeAlias), type, displaySig, doc);
  }
}
exports.TypeAliasTransformer = TypeAliasTransformer;

//# sourceMappingURL=type-alias.js.map