{"version":3,"names":["SourceFileTransformer","predicate","node","kind","ts","SyntaxKind","SourceFile","getIdentifiers","sourceFile","context","exports","listExports","exportNames","Promise","all","map","getExportedIdentifiers","exportIds","flatten","reduce","acc","current","item","find","exportName","id","push","transform","schemas","pMapSeries","exportNode","computeSchema","Module","getLocation","ast","compact","statements","statement","ExportDeclaration","isExport","Boolean","modifiers","modifier","ExportKeyword"],"sources":["source-file-transformer.ts"],"sourcesContent":["import ts, { Node, SourceFile } from 'typescript';\nimport { compact, flatten } from 'lodash';\nimport pMapSeries from 'p-map-series';\nimport { Module } from '@teambit/semantics.entities.semantic-schema';\nimport { SchemaTransformer } from '../schema-transformer';\nimport { ExportIdentifier } from '../export-identifier';\nimport { SchemaExtractorContext } from '../schema-extractor-context';\n\nexport class SourceFileTransformer implements SchemaTransformer {\n  predicate(node: Node) {\n    return node.kind === ts.SyntaxKind.SourceFile;\n  }\n\n  async getIdentifiers(sourceFile: SourceFile, context: SchemaExtractorContext) {\n    const exports = this.listExports(sourceFile);\n\n    const exportNames = await Promise.all(\n      exports.map((node: Node) => {\n        return context.getExportedIdentifiers(node);\n      })\n    );\n\n    const exportIds = flatten(exportNames).reduce<ExportIdentifier[]>((acc, current) => {\n      const item = acc.find((exportName) => exportName.id === current.id);\n      if (!item) acc.push(current);\n      return acc;\n    }, []);\n\n    return exportIds;\n  }\n\n  async transform(node: SourceFile, context: SchemaExtractorContext) {\n    const exports = this.listExports(node);\n    const schemas = await pMapSeries(exports, (exportNode) => {\n      return context.computeSchema(exportNode);\n    });\n\n    return new Module(context.getLocation(node), schemas);\n  }\n\n  /**\n   * list all exports of a source file.\n   */\n  private listExports(ast: SourceFile): Node[] {\n    return compact(\n      ast.statements.map((statement) => {\n        if (statement.kind === ts.SyntaxKind.ExportDeclaration) return statement;\n        const isExport = Boolean(\n          statement.modifiers?.find((modifier) => {\n            return modifier.kind === ts.SyntaxKind.ExportKeyword;\n          })\n        );\n\n        // eslint-disable-next-line consistent-return\n        if (!isExport) return;\n        return statement;\n      })\n    );\n  }\n}\n"],"mappings":";;;;;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAKO,MAAMA,qBAAqB,CAA8B;EAC9DC,SAAS,CAACC,IAAU,EAAE;IACpB,OAAOA,IAAI,CAACC,IAAI,KAAKC,qBAAE,CAACC,UAAU,CAACC,UAAU;EAC/C;EAEA,MAAMC,cAAc,CAACC,UAAsB,EAAEC,OAA+B,EAAE;IAC5E,MAAMC,OAAO,GAAG,IAAI,CAACC,WAAW,CAACH,UAAU,CAAC;IAE5C,MAAMI,WAAW,GAAG,MAAMC,OAAO,CAACC,GAAG,CACnCJ,OAAO,CAACK,GAAG,CAAEb,IAAU,IAAK;MAC1B,OAAOO,OAAO,CAACO,sBAAsB,CAACd,IAAI,CAAC;IAC7C,CAAC,CAAC,CACH;IAED,MAAMe,SAAS,GAAG,IAAAC,iBAAO,EAACN,WAAW,CAAC,CAACO,MAAM,CAAqB,CAACC,GAAG,EAAEC,OAAO,KAAK;MAClF,MAAMC,IAAI,GAAGF,GAAG,CAACG,IAAI,CAAEC,UAAU,IAAKA,UAAU,CAACC,EAAE,KAAKJ,OAAO,CAACI,EAAE,CAAC;MACnE,IAAI,CAACH,IAAI,EAAEF,GAAG,CAACM,IAAI,CAACL,OAAO,CAAC;MAC5B,OAAOD,GAAG;IACZ,CAAC,EAAE,EAAE,CAAC;IAEN,OAAOH,SAAS;EAClB;EAEA,MAAMU,SAAS,CAACzB,IAAgB,EAAEO,OAA+B,EAAE;IACjE,MAAMC,OAAO,GAAG,IAAI,CAACC,WAAW,CAACT,IAAI,CAAC;IACtC,MAAM0B,OAAO,GAAG,MAAM,IAAAC,qBAAU,EAACnB,OAAO,EAAGoB,UAAU,IAAK;MACxD,OAAOrB,OAAO,CAACsB,aAAa,CAACD,UAAU,CAAC;IAC1C,CAAC,CAAC;IAEF,OAAO,KAAIE,2BAAM,EAACvB,OAAO,CAACwB,WAAW,CAAC/B,IAAI,CAAC,EAAE0B,OAAO,CAAC;EACvD;;EAEA;AACF;AACA;EACUjB,WAAW,CAACuB,GAAe,EAAU;IAC3C,OAAO,IAAAC,iBAAO,EACZD,GAAG,CAACE,UAAU,CAACrB,GAAG,CAAEsB,SAAS,IAAK;MAAA;MAChC,IAAIA,SAAS,CAAClC,IAAI,KAAKC,qBAAE,CAACC,UAAU,CAACiC,iBAAiB,EAAE,OAAOD,SAAS;MACxE,MAAME,QAAQ,GAAGC,OAAO,yBACtBH,SAAS,CAACI,SAAS,yDAAnB,qBAAqBlB,IAAI,CAAEmB,QAAQ,IAAK;QACtC,OAAOA,QAAQ,CAACvC,IAAI,KAAKC,qBAAE,CAACC,UAAU,CAACsC,aAAa;MACtD,CAAC,CAAC,CACH;;MAED;MACA,IAAI,CAACJ,QAAQ,EAAE;MACf,OAAOF,SAAS;IAClB,CAAC,CAAC,CACH;EACH;AACF;AAAC"}