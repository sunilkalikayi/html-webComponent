"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
function _typescript() {
  const data = _interopRequireDefault(require("typescript"));
  _typescript = function () {
    return data;
  };
  return data;
}
function _chai() {
  const data = require("chai");
  _chai = function () {
    return data;
  };
  return data;
}
function _typescript2() {
  const data = require("./typescript.parser");
  _typescript2 = function () {
    return data;
  };
  return data;
}
describe('TypescriptParser', () => {
  describe('getExports', () => {
    const exampleArrowFunction = `
      export const arrow = () => { return 3; }
      arrow.textProperty = "propertyValue";
    `;
    const exampleFunction = `
      export function func() { return 3; }
      func.textProperty = "propertyValue";
    `;
    const exampleClass = `
      export class classy{ render() { return 3; } }
      classy.textProperty = "propertyValue";
    `;
    it('should parse arrowFunctions', () => {
      const ast = _typescript().default.createSourceFile('example.tsx', exampleArrowFunction, _typescript().default.ScriptTarget.Latest);
      const exports = new (_typescript2().TypeScriptParser)().getExports(ast);
      const exportArrow = exports.find(x => x.identifier === 'arrow');
      (0, _chai().expect)(exportArrow).to.exist;
    });
    it('should parse function exports', () => {
      const ast = _typescript().default.createSourceFile('example.tsx', exampleFunction, _typescript().default.ScriptTarget.Latest);
      const exports = new (_typescript2().TypeScriptParser)().getExports(ast);
      const exportFunction = exports.find(x => x.identifier === 'func');
      (0, _chai().expect)(exportFunction).to.exist;
    });
    it('should parse classes', () => {
      const ast = _typescript().default.createSourceFile('example.tsx', exampleClass, _typescript().default.ScriptTarget.Latest);
      const exports = new (_typescript2().TypeScriptParser)().getExports(ast);
      const exportClass = exports.find(x => x.identifier === 'classy');
      (0, _chai().expect)(exportClass).to.exist;
    });
    describe('staticProperties', () => {
      it('should include staticProperties, when on arrowFunctions', () => {
        var _exportArrow$staticPr;
        const ast = _typescript().default.createSourceFile('example.tsx', exampleArrowFunction, _typescript().default.ScriptTarget.Latest);
        const exports = new (_typescript2().TypeScriptParser)().getExports(ast);
        const exportArrow = exports.find(x => x.identifier === 'arrow');
        (0, _chai().expect)(exportArrow === null || exportArrow === void 0 ? void 0 : (_exportArrow$staticPr = exportArrow.staticProperties) === null || _exportArrow$staticPr === void 0 ? void 0 : _exportArrow$staticPr.get('textProperty')).to.equal('propertyValue');
      });
      it('should include staticProperties, when on regular functions', () => {
        var _exportClass$staticPr;
        const ast = _typescript().default.createSourceFile('example.tsx', exampleFunction, _typescript().default.ScriptTarget.Latest);
        const exports = new (_typescript2().TypeScriptParser)().getExports(ast);
        const exportClass = exports.find(x => x.identifier === 'func');
        (0, _chai().expect)(exportClass === null || exportClass === void 0 ? void 0 : (_exportClass$staticPr = exportClass.staticProperties) === null || _exportClass$staticPr === void 0 ? void 0 : _exportClass$staticPr.get('textProperty')).to.equal('propertyValue');
      });
      it('should include staticProperties, when on classes', () => {
        var _exportClass$staticPr2;
        const ast = _typescript().default.createSourceFile('example.tsx', exampleClass, _typescript().default.ScriptTarget.Latest);
        const exports = new (_typescript2().TypeScriptParser)().getExports(ast);
        const exportClass = exports.find(x => x.identifier === 'classy');
        (0, _chai().expect)(exportClass === null || exportClass === void 0 ? void 0 : (_exportClass$staticPr2 = exportClass.staticProperties) === null || _exportClass$staticPr2 === void 0 ? void 0 : _exportClass$staticPr2.get('textProperty')).to.equal('propertyValue');
      });
    });
  });
  describe('collectStaticProperties', () => {
    const exampleFile = `
      export const hello = () => { return 3; }

      hello.text = "is";
      hello.count = 3;
      hello.nullish = null;
      hello.undef = undefined;
      hello.disable = false;
      hello.enable = true;
      hello.complextLiteral = \`what \${hello.text} it?\`;
      hello.nonAssignedProperty += 'value';
    `;
    it('should parse all primitive values', () => {
      const ast = _typescript().default.createSourceFile('example.tsx', exampleFile, _typescript().default.ScriptTarget.Latest);
      const staticProperties = new (_typescript2().TypeScriptParser)().parseStaticProperties(ast);
      (0, _chai().expect)(staticProperties).to.exist;
      const exportHello = staticProperties.get('hello');
      (0, _chai().expect)(exportHello).to.exist;
      (0, _chai().expect)(exportHello === null || exportHello === void 0 ? void 0 : exportHello.get('text')).to.equal('is');
      (0, _chai().expect)(exportHello === null || exportHello === void 0 ? void 0 : exportHello.get('count')).to.equal(3);
      (0, _chai().expect)(exportHello === null || exportHello === void 0 ? void 0 : exportHello.get('nullish')).to.equal(null);
      (0, _chai().expect)(exportHello === null || exportHello === void 0 ? void 0 : exportHello.get('undef')).to.equal(undefined);
      (0, _chai().expect)(exportHello === null || exportHello === void 0 ? void 0 : exportHello.get('disable')).to.equal(false);
      (0, _chai().expect)(exportHello === null || exportHello === void 0 ? void 0 : exportHello.get('enable')).to.equal(true);
      (0, _chai().expect)(exportHello === null || exportHello === void 0 ? void 0 : exportHello.has('complextLiteral')).to.be.false;
    });
    it('should skip non primitive values', () => {
      const ast = _typescript().default.createSourceFile('example.tsx', exampleFile, _typescript().default.ScriptTarget.Latest);
      const staticProperties = new (_typescript2().TypeScriptParser)().parseStaticProperties(ast);
      const exportHello = staticProperties.get('hello');
      (0, _chai().expect)(exportHello === null || exportHello === void 0 ? void 0 : exportHello.has('complextLiteral')).to.be.false;
    });
    it('should skip non assignment statements', () => {
      const ast = _typescript().default.createSourceFile('example.tsx', exampleFile, _typescript().default.ScriptTarget.Latest);
      const staticProperties = new (_typescript2().TypeScriptParser)().parseStaticProperties(ast);
      const exportHello = staticProperties.get('hello');
      (0, _chai().expect)(exportHello === null || exportHello === void 0 ? void 0 : exportHello.has('nonAssignedProperty')).to.be.false;
    });
  });
});

//# sourceMappingURL=typescript.parser.spec.js.map