{"version":3,"names":["TsconfigWriter","constructor","workspace","logger","write","envsExecutionContext","options","pathsPerEnvs","getPathsPerEnv","tsconfigPathsPerEnv","map","pathsPerEnv","envIds","ids","tsconfig","env","getTsConfig","paths","dryRun","silent","promptForWriting","p","flat","writeFiles","clean","dedupe","componentPaths","allPossibleDirs","getAllPossibleDirsFromPaths","dirsWithTsconfig","filterDirsWithTsconfigFile","tsconfigFiles","dir","path","join","length","promptForCleaning","deleteFiles","dirs","clearStatusLine","ok","yesno","question","chalk","underline","bold","PromptCanceled","Promise","all","f","fs","remove","tsconfigPathsPerEnvs","writeJSON","spaces","envExecution","id","components","c","componentDir","undefined","relative","envsWithFiles","e","file","envsPerFile","isEnvProcessed","envId","find","forEach","foundSameFile","filter","isEqual","push","fileContent","pathsPerEnvIds","compact","envsPerDedupedPaths","dedupePaths","dedupedPathsPerEnvs","envWithDedupePaths","found","includes","Error","hasTsconfig","pathExists","getAllParentsDirOfPath","uniq","current","dirname","pathsPerEnvId","rootDir","individualPathPerConcatenatedEnvIds","reduce","acc","allPaths","Object","keys","allPathsPerEnvId","calculateBestEnvForDir","allPathsShareSameDir","startsWith","countPerEnv","envIdStr","max","Math","values","envWithMax","dirPath","dedupedPathsPerEnvIds","envIdsPerDedupedPaths","invertBy","split"],"sources":["tsconfig-writer.ts"],"sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\nimport yesno from 'yesno';\nimport { PathLinuxRelative } from '@teambit/legacy/dist/utils/path';\nimport { compact, invertBy, isEqual, uniq } from 'lodash';\nimport { PromptCanceled } from '@teambit/legacy/dist/prompts/exceptions';\nimport { Environment, ExecutionContext } from '@teambit/envs';\nimport { Workspace } from '@teambit/workspace';\nimport { Logger } from '@teambit/logger';\nimport chalk from 'chalk';\nimport { TsconfigWriterOptions } from './typescript.main.runtime';\n\nexport type TsconfigPathsPerEnv = { envIds: string[]; tsconfig: Record<string, any>; paths: string[] };\n\ntype PathsPerEnv = { env: Environment; ids: string[]; paths: string[] };\n\nexport class TsconfigWriter {\n  constructor(private workspace: Workspace, private logger: Logger) {}\n\n  async write(\n    envsExecutionContext: ExecutionContext[],\n    options: TsconfigWriterOptions\n  ): Promise<TsconfigPathsPerEnv[]> {\n    const pathsPerEnvs = this.getPathsPerEnv(envsExecutionContext, options);\n    const tsconfigPathsPerEnv = pathsPerEnvs.map((pathsPerEnv) => ({\n      envIds: pathsPerEnv.ids,\n      tsconfig: pathsPerEnv.env.getTsConfig(),\n      paths: pathsPerEnv.paths,\n    }));\n    if (options.dryRun) return tsconfigPathsPerEnv;\n    if (!options.silent) await this.promptForWriting(tsconfigPathsPerEnv.map((p) => p.paths).flat());\n    await this.writeFiles(tsconfigPathsPerEnv);\n    return tsconfigPathsPerEnv;\n  }\n\n  async clean(envsExecutionContext: ExecutionContext[], { dryRun, silent }: TsconfigWriterOptions): Promise<string[]> {\n    const pathsPerEnvs = this.getPathsPerEnv(envsExecutionContext, { dedupe: false });\n    const componentPaths = pathsPerEnvs.map((p) => p.paths).flat();\n    const allPossibleDirs = getAllPossibleDirsFromPaths(componentPaths);\n    const dirsWithTsconfig = await filterDirsWithTsconfigFile(allPossibleDirs);\n    const tsconfigFiles = dirsWithTsconfig.map((dir) => path.join(dir, 'tsconfig.json'));\n    if (dryRun) return tsconfigFiles;\n    if (!dirsWithTsconfig.length) return [];\n    if (!silent) await this.promptForCleaning(tsconfigFiles);\n    await this.deleteFiles(tsconfigFiles);\n    return tsconfigFiles;\n  }\n\n  private async promptForWriting(dirs: string[]) {\n    this.logger.clearStatusLine();\n    const tsconfigFiles = dirs.map((dir) => path.join(dir, 'tsconfig.json'));\n    const ok = await yesno({\n      question: `${chalk.underline('The following paths will be written:')}\n${tsconfigFiles.join('\\n')}\n${chalk.bold('Do you want to continue? [yes(y)/no(n)]')}`,\n    });\n    if (!ok) {\n      throw new PromptCanceled();\n    }\n  }\n\n  private async promptForCleaning(tsconfigFiles: string[]) {\n    this.logger.clearStatusLine();\n    const ok = await yesno({\n      question: `${chalk.underline('The following paths will be deleted:')}\n${tsconfigFiles.join('\\n')}\n${chalk.bold('Do you want to continue? [yes(y)/no(n)]')}`,\n    });\n    if (!ok) {\n      throw new PromptCanceled();\n    }\n  }\n\n  private async deleteFiles(tsconfigFiles: string[]) {\n    await Promise.all(tsconfigFiles.map((f) => fs.remove(f)));\n  }\n\n  private async writeFiles(tsconfigPathsPerEnvs: TsconfigPathsPerEnv[]) {\n    await Promise.all(\n      tsconfigPathsPerEnvs.map((pathsPerEnv) => {\n        return Promise.all(\n          pathsPerEnv.paths.map((p) => fs.writeJSON(path.join(p, 'tsconfig.json'), pathsPerEnv.tsconfig, { spaces: 2 }))\n        );\n      })\n    );\n  }\n\n  private getPathsPerEnv(envsExecutionContext: ExecutionContext[], { dedupe }: TsconfigWriterOptions): PathsPerEnv[] {\n    const pathsPerEnvs = envsExecutionContext.map((envExecution) => {\n      return {\n        id: envExecution.id,\n        env: envExecution.env,\n        paths: envExecution.components.map((c) => this.workspace.componentDir(c.id, undefined, { relative: true })),\n      };\n    });\n    if (!dedupe) {\n      return pathsPerEnvs.map(({ id, env, paths }) => ({ ids: [id], env, paths }));\n    }\n\n    const envsWithFiles = envsExecutionContext.map((e) => ({\n      id: e.id,\n      file: e.env.getTsConfig(),\n    }));\n    const envsPerFile: { envIds: string[]; fileContent: Record<string, any> }[] = [];\n    const isEnvProcessed = (envId: string) =>\n      envsPerFile\n        .map((e) => e.envIds)\n        .flat()\n        .find((e) => e === envId);\n    envsWithFiles.forEach(({ id, file }) => {\n      if (isEnvProcessed(id)) return;\n      const foundSameFile = envsWithFiles.filter((e) => isEqual(file, e.file));\n      envsPerFile.push({ envIds: foundSameFile.map((f) => f.id), fileContent: file });\n    });\n    const pathsPerEnvIds = envsPerFile.map((e) => ({\n      ids: e.envIds,\n      paths: compact(e.envIds.map((envId) => pathsPerEnvs.find((p) => p.id === envId)?.paths).flat()),\n    }));\n    // const pathsPerEnvIds = pathsPerEnvs.map((p) => ({ ids: p.ids, paths: p.paths }));\n    const envsPerDedupedPaths = dedupePaths(pathsPerEnvIds);\n    const dedupedPathsPerEnvs: PathsPerEnv[] = envsPerDedupedPaths.map((envWithDedupePaths) => {\n      const found = pathsPerEnvs.find((p) => envWithDedupePaths.ids.includes(p.id));\n      if (!found) throw new Error(`dedupedPathsPerEnvs, unable to find ${envWithDedupePaths.ids}`);\n      return {\n        env: found.env,\n        ids: envWithDedupePaths.ids,\n        paths: envWithDedupePaths.paths,\n      };\n    });\n\n    return dedupedPathsPerEnvs;\n  }\n}\n\ntype PathsPerEnvIds = { ids: string[]; paths: string[] };\n\nasync function filterDirsWithTsconfigFile(dirs: string[]): Promise<string[]> {\n  const dirsWithTsconfig = await Promise.all(\n    dirs.map(async (dir) => {\n      const hasTsconfig = await fs.pathExists(path.join(dir, 'tsconfig.json'));\n      return hasTsconfig ? dir : undefined;\n    })\n  );\n  return compact(dirsWithTsconfig);\n}\n\nfunction getAllPossibleDirsFromPaths(paths: PathLinuxRelative[]): PathLinuxRelative[] {\n  const dirs = paths.map((p) => getAllParentsDirOfPath(p)).flat();\n  dirs.push('.'); // add the root dir\n  return uniq(dirs);\n}\n\nfunction getAllParentsDirOfPath(p: PathLinuxRelative): PathLinuxRelative[] {\n  const all: string[] = [];\n  let current = p;\n  while (current !== '.') {\n    all.push(current);\n    current = path.dirname(current);\n  }\n  return all;\n}\n\n/**\n * easier to understand by an example:\n * input:\n * [\n *   { id: react, paths: [ui/button, ui/form] },\n *   { id: aspect, paths: [p/a1, p/a2] },\n *   { id: node, paths: [p/n1] },\n * ]\n *\n * output:\n * [\n *   { id: react, paths: [ui] },\n *   { id: aspect, paths: [p] },\n *   { id: node, paths: [p/n1] },\n * ]\n *\n * the goal is to minimize the amount of files to write per env if possible.\n * when multiple components of the same env share a root-dir, then, it's enough to write a file in that shared dir.\n * if in a shared-dir, some components using env1 and some env2, it finds the env that has the max number of\n * components, this env will be optimized. other components, will have the files written inside their dirs.\n */\nexport function dedupePaths(pathsPerEnvId: PathsPerEnvIds[]): PathsPerEnvIds[] {\n  const rootDir = '.';\n  const individualPathPerConcatenatedEnvIds: { [path: string]: string } = pathsPerEnvId.reduce((acc, current) => {\n    current.paths.forEach((p) => {\n      acc[p] = current.ids.join(',');\n    });\n    return acc;\n  }, {});\n  const allPaths = Object.keys(individualPathPerConcatenatedEnvIds);\n  const allPossibleDirs = getAllPossibleDirsFromPaths(allPaths);\n\n  const allPathsPerEnvId: { [path: string]: string | null } = {}; // null when parent-dir has same amount of comps per env.\n\n  const calculateBestEnvForDir = (dir: string) => {\n    if (individualPathPerConcatenatedEnvIds[dir]) {\n      // it's the component dir, so it's the best env\n      allPathsPerEnvId[dir] = individualPathPerConcatenatedEnvIds[dir];\n      return;\n    }\n    const allPathsShareSameDir = dir === rootDir ? allPaths : allPaths.filter((p) => p.startsWith(`${dir}/`));\n    const countPerEnv: { [env: string]: number } = {};\n    allPathsShareSameDir.forEach((p) => {\n      const envIdStr = individualPathPerConcatenatedEnvIds[p];\n      if (countPerEnv[envIdStr]) countPerEnv[envIdStr] += 1;\n      else countPerEnv[envIdStr] = 1;\n    });\n    const max = Math.max(...Object.values(countPerEnv));\n    const envWithMax = Object.keys(countPerEnv).filter((env) => countPerEnv[env] === max);\n    if (!envWithMax.length) throw new Error(`must be at least one env related to path \"${dir}\"`);\n    if (envWithMax.length > 1) allPathsPerEnvId[dir] = null;\n    else allPathsPerEnvId[dir] = envWithMax[0];\n  };\n\n  allPossibleDirs.forEach((dirPath) => {\n    calculateBestEnvForDir(dirPath);\n  });\n\n  // this is the actual deduping. if found a shorter path with the same env, then no need for this path.\n  // in other words, return only the paths that their parent is null or has a different env.\n  const dedupedPathsPerEnvIds = Object.keys(allPathsPerEnvId).reduce((acc, current) => {\n    if (allPathsPerEnvId[current] && allPathsPerEnvId[path.dirname(current)] !== allPathsPerEnvId[current]) {\n      acc[current] = allPathsPerEnvId[current];\n    }\n\n    return acc;\n  }, {});\n  // rootDir parent is always rootDir, so leave it as is.\n  if (allPathsPerEnvId[rootDir]) dedupedPathsPerEnvIds[rootDir] = allPathsPerEnvId[rootDir];\n\n  const envIdsPerDedupedPaths = invertBy(dedupedPathsPerEnvIds);\n\n  return Object.keys(envIdsPerDedupedPaths).map((envIdStr) => ({\n    ids: envIdStr.split(','),\n    paths: envIdsPerDedupedPaths[envIdStr],\n  }));\n}\n"],"mappings":"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"}