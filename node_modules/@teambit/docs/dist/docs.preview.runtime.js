"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DocsPreview = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _react() {
  const data = _interopRequireDefault(require("react"));
  _react = function () {
    return data;
  };
  return data;
}
function _preview() {
  const data = require("@teambit/preview");
  _preview = function () {
    return data;
  };
  return data;
}
function _docs() {
  const data = require("./docs.aspect");
  _docs = function () {
    return data;
  };
  return data;
}
class DocsPreview {
  constructor(
  /**
   * preview extension.
   */
  preview) {
    this.preview = preview;
    (0, _defineProperty2().default)(this, "render", (componentId, modules, [compositions], context) => {
      const docsModule = this.selectPreviewModel(componentId.fullName, modules);
      const isObject = !!modules.mainModule.default.apiObject;

      /**
       * for backwards compatibility - can be removed end of 2022
       */
      if (!isObject) {
        const docsPropsArray = [NoopProvider, componentId.toString(), docsModule, compositions, context];
        modules.mainModule.default(...docsPropsArray);
        return;
      }
      const docsProps = {
        Provider: NoopProvider,
        componentId: componentId.toString(),
        docs: docsModule,
        compositions,
        context
      };
      modules.mainModule.default(docsProps);
    });
  }
  selectPreviewModel(componentId, modules) {
    const relevant = modules.componentMap[componentId];
    if (!relevant) return undefined;

    // only one doc file is supported.
    return relevant[0];
  }
  static async provider([preview]) {
    const docsPreview = new DocsPreview(preview);
    preview.registerPreview({
      name: 'overview',
      render: docsPreview.render.bind(docsPreview),
      selectPreviewModel: docsPreview.selectPreviewModel.bind(docsPreview),
      include: ['compositions']
    });
    return docsPreview;
  }
}
exports.DocsPreview = DocsPreview;
(0, _defineProperty2().default)(DocsPreview, "runtime", _preview().PreviewRuntime);
(0, _defineProperty2().default)(DocsPreview, "dependencies", [_preview().PreviewAspect]);
_docs().DocsAspect.addRuntime(DocsPreview);
function NoopProvider({
  children
}) {
  return /*#__PURE__*/_react().default.createElement(_react().default.Fragment, null, children);
}

//# sourceMappingURL=docs.preview.runtime.js.map