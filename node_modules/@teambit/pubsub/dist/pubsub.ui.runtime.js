"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PubsubUI = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _ui() {
  const data = require("@teambit/ui");
  _ui = function () {
    return data;
  };
  return data;
}
function _eventemitter() {
  const data = require("eventemitter2");
  _eventemitter = function () {
    return data;
  };
  return data;
}
function _penpal() {
  const data = require("penpal");
  _penpal = function () {
    return data;
  };
  return data;
}
function _pubsub() {
  const data = require("./pubsub.aspect");
  _pubsub = function () {
    return data;
  };
  return data;
}
function _pubsubContext() {
  const data = require("./pubsub-context");
  _pubsubContext = function () {
    return data;
  };
  return data;
}
class PubsubUI {
  constructor() {
    (0, _defineProperty2().default)(this, "childApi", void 0);
    (0, _defineProperty2().default)(this, "events", new (_eventemitter().EventEmitter2)());
    (0, _defineProperty2().default)(this, "sub", (topic, callback) => {
      const events = this.events;
      events.on(topic, callback);
      const unSub = () => {
        events.off(topic, callback);
      };
      return unSub;
    });
    (0, _defineProperty2().default)(this, "pub", (topic, event, {
      propagate
    } = {}) => {
      this.emitEvent(topic, event);

      // opt-in to forward to iframe, as we would not want 'private' messages automatically passing to iframe
      if (propagate) {
        this.pubToChild(topic, event);
      }
    });
    (0, _defineProperty2().default)(this, "connectToIframe", iframe => {
      const connection = (0, _penpal().connectToChild)({
        iframe,
        methods: {
          pub: this.emitEvent
        }
      });
      connection.promise.then(childConnection => this.childApi = childConnection).catch(err => {
        // eslint-disable-next-line no-console
        console.error('[Pubsub.ui]', 'failed connecting to child iframe:', err);
      });
      const destroy = () => {
        connection && connection.destroy();
      };
      return destroy;
    });
    (0, _defineProperty2().default)(this, "emitEvent", (topic, event) => {
      this.events.emit(topic, event);
    });
    (0, _defineProperty2().default)(this, "pubToChild", (topic, event) => {
      var _this$childApi;
      return (_this$childApi = this.childApi) === null || _this$childApi === void 0 ? void 0 : _this$childApi.pub(topic, event);
    });
  }
  getPubSubContext() {
    return (0, _pubsubContext().createProvider)({
      connect: this.connectToIframe
    });
  }

  /**
   * publish event to all subscribers in this window
   */

  static async provider([uiUI]) {
    const pubsubUI = new PubsubUI();
    const reactContext = pubsubUI.getPubSubContext();
    if (uiUI) uiUI.registerRenderHooks({
      reactContext
    });
    return pubsubUI;
  }
}
exports.PubsubUI = PubsubUI;
(0, _defineProperty2().default)(PubsubUI, "runtime", _ui().UIRuntime);
(0, _defineProperty2().default)(PubsubUI, "dependencies", [_ui().UIAspect]);
_pubsub().PubsubAspect.addRuntime(PubsubUI);

//# sourceMappingURL=pubsub.ui.runtime.js.map