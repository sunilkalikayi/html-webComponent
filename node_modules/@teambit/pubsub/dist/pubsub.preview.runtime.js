"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PubsubPreview = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _preview() {
  const data = require("@teambit/preview");
  _preview = function () {
    return data;
  };
  return data;
}
function _uiFoundationUi() {
  const data = require("@teambit/ui-foundation.ui.is-browser");
  _uiFoundationUi = function () {
    return data;
  };
  return data;
}
function _eventemitter() {
  const data = require("eventemitter2");
  _eventemitter = function () {
    return data;
  };
  return data;
}
function _penpal() {
  const data = require("penpal");
  _penpal = function () {
    return data;
  };
  return data;
}
function _noParentError() {
  const data = require("./no-parent-error");
  _noParentError = function () {
    return data;
  };
  return data;
}
function _pubsub() {
  const data = require("./pubsub.aspect");
  _pubsub = function () {
    return data;
  };
  return data;
}
/**
 * Please Notice: This file will run in the preview iframe.
 */

class PubsubPreview {
  constructor() {
    (0, _defineProperty2().default)(this, "_parentPubsub", void 0);
    (0, _defineProperty2().default)(this, "events", new (_eventemitter().EventEmitter2)());
    (0, _defineProperty2().default)(this, "connectToParentPubSub", (retries = 10) => {
      if (retries <= 0) throw new (_noParentError().PubSubNoParentError)();
      return (0, _penpal().connectToParent)({
        timeout: 300,
        methods: {
          pub: this.handleMessageFromParent
        }
      }).promise.then(parentPubsub => this._parentPubsub = parentPubsub).catch(e => {
        if (e.code !== _penpal().ErrorCode.ConnectionTimeout) throw e;
        return this.connectToParentPubSub(retries - 1);
      });
    });
    (0, _defineProperty2().default)(this, "handleMessageFromParent", (topic, message) => {
      this.events.emit(topic, message);
    });
  }
  sub(topic, callback) {
    const emitter = this.events;
    emitter.on(topic, callback);
    const unSub = () => {
      emitter.off(topic, callback);
    };
    return unSub;
  }
  pub(topic, event) {
    var _this$_parentPubsub;
    this.events.emit(topic, event);
    (_this$_parentPubsub = this._parentPubsub) === null || _this$_parentPubsub === void 0 ? void 0 : _this$_parentPubsub.pub(topic, event).catch(err => {
      // eslint-disable-next-line no-console
      console.error('[Pubsub.preview]', err);
    });
  }
  inIframe() {
    try {
      return _uiFoundationUi().isBrowser && window.self !== window.top;
    } catch (e) {
      return false;
    }
  }
  static async provider() {
    const pubsubPreview = new PubsubPreview();
    if (pubsubPreview.inIframe()) {
      pubsubPreview.connectToParentPubSub().catch(err => {
        // parent window is not required to accept connections
        if (err instanceof _noParentError().PubSubNoParentError) return;

        // eslint-disable-next-line no-console
        console.error('[Pubsub.preview]', err);
      });
    }
    return pubsubPreview;
  }
}
exports.PubsubPreview = PubsubPreview;
(0, _defineProperty2().default)(PubsubPreview, "runtime", _preview().PreviewRuntime);
_pubsub().PubsubAspect.addRuntime(PubsubPreview);

//# sourceMappingURL=pubsub.preview.runtime.js.map