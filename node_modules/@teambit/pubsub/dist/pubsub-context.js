"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createProvider = createProvider;
exports.pubsubRegistry = void 0;
exports.usePubSub = usePubSub;
exports.usePubSubIframe = usePubSubIframe;
function _react() {
  const data = _interopRequireWildcard(require("react"));
  _react = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const pubsubRegistry = /*#__PURE__*/(0, _react().createContext)(undefined);
exports.pubsubRegistry = pubsubRegistry;
function createProvider(pubSubContext) {
  const PubSubProvider = ({
    children
  }) => /*#__PURE__*/_react().default.createElement(pubsubRegistry.Provider, {
    value: pubSubContext
  }, children);
  return PubSubProvider;
}
function usePubSub() {
  return (0, _react().useContext)(pubsubRegistry);
}
function usePubSubIframe(ref) {
  const pubSub = usePubSub();
  (0, _react().useEffect)(() => {
    if (!(ref !== null && ref !== void 0 && ref.current) || !pubSub) return () => {};
    const destroyConnection = pubSub.connect(ref.current);
    return () => destroyConnection();
  }, [ref === null || ref === void 0 ? void 0 : ref.current, pubSub]);
}

//# sourceMappingURL=pubsub-context.js.map