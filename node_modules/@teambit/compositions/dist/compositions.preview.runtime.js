"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
require("core-js/modules/es.regexp.exec.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CompositionsPreview = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _preview() {
  const data = require("@teambit/preview");
  _preview = function () {
    return data;
  };
  return data;
}
function _lodash() {
  const data = _interopRequireDefault(require("lodash.head"));
  _lodash = function () {
    return data;
  };
  return data;
}
function _compositions() {
  const data = require("./compositions.aspect");
  _compositions = function () {
    return data;
  };
  return data;
}
class CompositionsPreview {
  constructor(
  /**
   * preview extension.
   */
  preview) {
    this.preview = preview;
  }
  render(componentId, modules, otherPreviewDefs, context) {
    if (!modules.componentMap[componentId.fullName]) return;
    const compositions = this.selectPreviewModel(componentId.fullName, modules);
    const metadata = this.getMetadata(componentId.fullName, modules);
    const active = this.getActiveComposition(compositions, metadata);
    modules.mainModule.default(active, context);
  }

  /** gets relevant information for this preview to render */
  selectPreviewModel(componentFullName, previewModule) {
    const files = previewModule.componentMap[componentFullName] || [];

    // allow compositions to come from many files. It is assumed they will have unique named
    const combined = Object.assign({}, ...files);
    return combined;
  }
  getMetadata(componentFullName, previewModule) {
    const metadata = previewModule !== null && previewModule !== void 0 && previewModule.componentMapMetadata ? previewModule.componentMapMetadata[componentFullName] : undefined;
    if (metadata) {
      return metadata;
    }
    return undefined;
  }
  getActiveComposition(module, metadata) {
    const firstQueryParam = window.location.hash.split('&')[1];
    const query = this.preview.getQuery();
    const compositionId = this.preview.getParam(query, 'name') || firstQueryParam;
    if (compositionId && module[compositionId]) {
      return module[compositionId];
    }
    if (metadata && metadata.compositions) {
      const first = (0, _lodash().default)(metadata.compositions);
      const firstId = first === null || first === void 0 ? void 0 : first.identifier;
      if (firstId && module[firstId]) {
        return module[firstId];
      }
    }
    const first = (0, _lodash().default)(Object.values(module));
    return first;
  }
  static async provider([preview]) {
    const compPreview = new CompositionsPreview(preview);
    preview.registerPreview({
      name: 'compositions',
      render: compPreview.render.bind(compPreview),
      selectPreviewModel: compPreview.selectPreviewModel.bind(compPreview),
      default: true
    });
    return compPreview;
  }
}
exports.CompositionsPreview = CompositionsPreview;
(0, _defineProperty2().default)(CompositionsPreview, "runtime", _preview().PreviewRuntime);
(0, _defineProperty2().default)(CompositionsPreview, "dependencies", [_preview().PreviewAspect]);
_compositions().CompositionsAspect.addRuntime(CompositionsPreview);

//# sourceMappingURL=compositions.preview.runtime.js.map