import { Component, ComponentMap } from '@teambit/component';
import type { ExecutionContext, Environment } from '@teambit/envs';
import { PreviewDefinition } from '@teambit/preview';
import { AbstractVinyl } from '@teambit/legacy/dist/consumer/component/sources';
import { CompositionsMain } from './compositions.main.runtime';
import { CompositionBrowserMetadataObject } from './composition';
export declare class CompositionPreviewDefinition implements PreviewDefinition {
    private compositions;
    readonly prefix = "compositions";
    readonly includePeers = true;
    constructor(compositions: CompositionsMain);
    renderTemplatePath(context: ExecutionContext): Promise<string>;
    renderTemplatePathByEnv(env: Environment): Promise<any>;
    getModuleMap(components: Component[]): Promise<ComponentMap<AbstractVinyl[]>>;
    getMetadata(component: Component): Promise<CompositionBrowserMetadataObject>;
}
