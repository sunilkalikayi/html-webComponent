import { AspectData, Component, ComponentMap, IComponent } from '@teambit/component';
import { DevFilesMain } from '@teambit/dev-files';
import { EnvsMain } from '@teambit/envs';
import { GraphqlMain } from '@teambit/graphql';
import { ComponentLoadOptions } from '@teambit/legacy/dist/consumer/component/component-loader';
import { AbstractVinyl } from '@teambit/legacy/dist/consumer/component/sources';
import { PreviewMain } from '@teambit/preview';
import { SchemaMain } from '@teambit/schema';
import { Workspace } from '@teambit/workspace';
import { Composition } from './composition';
export declare type CompositionsConfig = {
    /**
     * glob pattern to detect composition files. This includes all related files, like styles and jsons.
     * @example ['/*.composition?(s).*']
     */
    compositionFilePattern: string[];
    /**
     * glob pattern to select Preview files. this will only include files matched by compositionFilePattern.
     * @example ['*.{t,j}s', '*.{t,j}sx']
     */
    compositionPreviewFilePattern: string[];
};
/**
 * the component documentation extension.
 */
export declare class CompositionsMain {
    /**
     * Glob pattern to select all composition files
     */
    private compositionFilePattern;
    /**
     * Glob pattern to select composition preview files
     */
    private previewFilePattern;
    /**
     * envs extension.
     */
    private preview;
    /**
     * workspace extension.
     */
    private workspace;
    /**
     * schema extension.
     */
    private schema;
    private devFiles;
    private envs;
    constructor(
    /**
     * Glob pattern to select all composition files
     */
    compositionFilePattern: string[], 
    /**
     * Glob pattern to select composition preview files
     */
    previewFilePattern: string[], 
    /**
     * envs extension.
     */
    preview: PreviewMain, 
    /**
     * workspace extension.
     */
    workspace: Workspace, 
    /**
     * schema extension.
     */
    schema: SchemaMain, devFiles: DevFilesMain, envs: EnvsMain);
    /**
     * returns an array of doc file paths for a set of components.
     */
    getPreviewFiles(components: Component[]): ComponentMap<AbstractVinyl[]>;
    /**
     * checks if a file matches the composition file pattern.
     */
    isCompositionFile(filePath: string): boolean;
    /**
     * get component compositions.
     */
    getCompositions(component: IComponent): Composition[];
    /**
     * read composition from the component source code.
     */
    readCompositions(component: Component): Composition[];
    getCompositionFilePattern(): string[];
    getComponentDevPatterns(component: Component): string[];
    getDevPatternToRegister(): (component: Component) => string[];
    onComponentLoad(component: Component, loadOpts?: ComponentLoadOptions): Promise<AspectData | undefined>;
    private computeCompositions;
    static defaultConfig: CompositionsConfig;
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static dependencies: import("@teambit/harmony").Aspect[];
    static provider([preview, graphql, workspace, schema, devFiles, envs]: [
        PreviewMain,
        GraphqlMain,
        Workspace,
        SchemaMain,
        DevFilesMain,
        EnvsMain
    ], config: CompositionsConfig): Promise<CompositionsMain>;
}
