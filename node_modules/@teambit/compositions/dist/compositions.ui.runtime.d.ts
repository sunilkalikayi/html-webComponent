import type { ReactNode } from 'react';
import { ComponentType } from 'react';
import { SlotRegistry } from '@teambit/harmony';
import { ComponentUI } from '@teambit/component';
import { ComponentCompareUI } from '@teambit/component-compare';
import { MenuBarWidget } from './compositions';
export declare type CompositionsMenuSlot = SlotRegistry<MenuBarWidget[]>;
export declare type EmptyStateSlot = SlotRegistry<ComponentType>;
export declare class CompositionsUI {
    private menuBarWidgetSlot;
    private emptyStateSlot;
    constructor(menuBarWidgetSlot: CompositionsMenuSlot, emptyStateSlot: EmptyStateSlot);
    /**
     * register a new tester empty state. this allows to register a different empty state from each environment for example.
     */
    registerEmptyState(emptyStateComponent: ComponentType): this;
    registerMenuWidget(...widget: MenuBarWidget[]): void;
    static dependencies: import("@teambit/harmony").Aspect[];
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static slots: ((registerFn: () => string) => SlotRegistry<ReactNode>)[];
    static provider([component, componentCompare]: [ComponentUI, ComponentCompareUI], config: {}, [compositionMenuSlot, emptyStateSlot]: [CompositionsMenuSlot, EmptyStateSlot]): Promise<CompositionsUI>;
}
export default CompositionsUI;
