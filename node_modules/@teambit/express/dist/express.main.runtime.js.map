{"version":3,"names":["ExpressMain","constructor","config","moduleSlot","logger","middlewareSlot","listen","port","serverPort","app","createApp","register","routes","registerMiddleware","middlewares","createRootRoutes","namespace","ExpressAspect","id","method","path","disableNamespace","req","res","send","expressApp","options","internalRoutes","createRoutes","allRoutes","concat","express","use","next","loggerIgnorePath","includes","url","debug","headers","disableBodyParser","bodyParser","toArray","flatMap","middlewareManifest","middleware","forEach","routeInfo","catchErrorsMiddlewares","routesSlots","routeEntries","map","route","flatten","verbValidation","lowerCase","verb","Verb","READ","status","jsonp","message","error","catchErrors","json","limit","raw","type","provider","loggerFactory","routeSlot","createLogger","MainRuntime","Slot","withType","LoggerAspect","addRuntime"],"sources":["express.main.runtime.ts"],"sourcesContent":["import { MainRuntime } from '@teambit/cli';\nimport { Slot, SlotRegistry } from '@teambit/harmony';\nimport { Logger, LoggerAspect, LoggerMain } from '@teambit/logger';\nimport express, { Express } from 'express';\nimport { concat, flatten, lowerCase } from 'lodash';\nimport bodyParser from 'body-parser';\nimport { ExpressAspect } from './express.aspect';\nimport { catchErrors } from './middlewares';\nimport { Middleware, Request, Response, Route, Verb } from './types';\nimport { MiddlewareManifest } from './middleware-manifest';\n\nexport type ExpressConfig = {\n  port: number;\n  namespace: string;\n  loggerIgnorePath: string[];\n};\n\nexport type MiddlewareSlot = SlotRegistry<MiddlewareManifest[]>;\n\nexport type RouteSlot = SlotRegistry<Route[]>;\n\nexport class ExpressMain {\n  static runtime = MainRuntime;\n\n  constructor(\n    /**\n     * extension config\n     */\n    readonly config: ExpressConfig,\n\n    /**\n     * slot for registering graphql modules\n     */\n    private moduleSlot: RouteSlot,\n\n    /**\n     * logger extension.\n     */\n    readonly logger: Logger,\n\n    readonly middlewareSlot: MiddlewareSlot\n  ) {}\n\n  /**\n   * start a express server.\n   */\n  async listen(port?: number) {\n    const serverPort = port || this.config.port;\n    const app = this.createApp();\n    app.listen(serverPort);\n  }\n\n  /**\n   * register a new express routes.\n   * route will be added as `/api/${route}`\n   */\n  register(routes: Route[]) {\n    this.moduleSlot.register(routes);\n    return this;\n  }\n\n  /**\n   * register a new middleware into express.\n   */\n  registerMiddleware(middlewares: MiddlewareManifest[]) {\n    this.middlewareSlot.register(middlewares);\n    return this;\n  }\n\n  private createRootRoutes() {\n    // TODO: @guy refactor health to service aspect.\n    return [\n      {\n        namespace: ExpressAspect.id,\n        method: 'get',\n        path: '/_health',\n        disableNamespace: false,\n        middlewares: [async (req: Request, res: Response) => res.send('ok')],\n      },\n    ];\n  }\n\n  createApp(expressApp?: Express, options?: { disableBodyParser: true }): Express {\n    const internalRoutes = this.createRootRoutes();\n    const routes = this.createRoutes();\n    const allRoutes = concat(routes, internalRoutes);\n    const app = expressApp || express();\n    app.use((req, res, next) => {\n      if (this.config.loggerIgnorePath.includes(req.url)) return next();\n      this.logger.debug(`express got a request to a URL: ${req.url}', headers:`, req.headers);\n      return next();\n    });\n    if (!options?.disableBodyParser) this.bodyParser(app);\n\n    this.middlewareSlot\n      .toArray()\n      .flatMap(([, middlewares]) =>\n        middlewares.flatMap((middlewareManifest) => app.use(middlewareManifest.middleware))\n      );\n    allRoutes.forEach((routeInfo) => {\n      const { method, path, middlewares, disableNamespace } = routeInfo;\n      // TODO: @guy make sure to support single middleware here.\n      const namespace = disableNamespace ? '' : `/${this.config.namespace}`;\n      app[method](`${namespace}${path}`, this.catchErrorsMiddlewares(middlewares));\n    });\n\n    return app;\n  }\n\n  private createRoutes() {\n    const routesSlots = this.moduleSlot.toArray();\n    const routeEntries = routesSlots.map(([, routes]) => {\n      return routes.map((route) => {\n        const middlewares = flatten([this.verbValidation(route), route.middlewares]);\n        return {\n          method: lowerCase(route.method),\n          path: route.route,\n          disableNamespace: route.disableNamespace,\n          middlewares,\n        };\n      });\n    });\n\n    return flatten(routeEntries);\n  }\n\n  private verbValidation(route: Route): Middleware {\n    return async (req: express.Request, res: express.Response, next: express.NextFunction) => {\n      if (!route.verb) return next();\n      const verb = req.headers['x-verb'] || Verb.READ;\n      if (verb !== route.verb) {\n        res.status(403);\n        return res.jsonp({ message: 'You are not authorized', error: 'forbidden' });\n      }\n      return next();\n    };\n  }\n\n  private catchErrorsMiddlewares(middlewares: Middleware[]) {\n    return middlewares.map((middleware) => catchErrors(middleware));\n  }\n\n  private bodyParser(app: Express) {\n    app.use(bodyParser.json({ limit: '5000mb' }));\n    app.use(bodyParser.raw({ type: 'application/octet-stream', limit: '5000mb' }));\n  }\n\n  static slots = [Slot.withType<Route[]>(), Slot.withType<MiddlewareManifest[]>()];\n  static dependencies = [LoggerAspect];\n\n  static defaultConfig = {\n    port: 4001,\n    namespace: 'api',\n    loggerIgnorePath: ['/api/_health'],\n  };\n\n  static async provider(\n    [loggerFactory]: [LoggerMain],\n    config: ExpressConfig,\n    [routeSlot, middlewareSlot]: [RouteSlot, MiddlewareSlot]\n  ) {\n    const logger = loggerFactory.createLogger(ExpressAspect.id);\n    return new ExpressMain(config, routeSlot, logger, middlewareSlot);\n  }\n}\n\nExpressAspect.addRuntime(ExpressMain);\n"],"mappings":"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"}