"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getWrapperTemplateFn = getWrapperTemplateFn;
function _toolboxPath() {
  const data = require("@teambit/toolbox.path.to-windows-compatible-path");
  _toolboxPath = function () {
    return data;
  };
  return data;
}
function _decamelize() {
  const data = _interopRequireDefault(require("decamelize"));
  _decamelize = function () {
    return data;
  };
  return data;
}
function getWrapperTemplateFn({
  elementsPrefix = 'x'
}) {
  const wrapperTemplateFn = context => {
    const kababName = (0, _decamelize().default)(context.componentName);
    const elementName = elementsPrefix ? `${elementsPrefix}-${kababName}` : kababName;
    return `import React from 'react';
import ReactDOM from 'react-dom';
import Component from '${(0, _toolboxPath().toWindowsCompatiblePath)(context.mainFilePath)}';
class ${context.componentName} extends HTMLElement {
  connectedCallback() {
    const mountPoint = document.createElement('span');
    this.attachShadow({ mode: 'open' }).appendChild(mountPoint);
    const el = this;
    const props = this.getAttributeNames().reduce((acc, curr) => {
      acc[curr] = el.getAttribute(curr);
      return acc;
    }, {})
    ReactDOM.render(<Component {...props}></Component>, mountPoint);
  }
}
customElements.define('${elementName}', ${context.componentName});`;
  };
  return wrapperTemplateFn;
}

//# sourceMappingURL=element-wrapper-template.js.map