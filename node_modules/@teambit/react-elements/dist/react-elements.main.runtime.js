"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReactElementsMain = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _cli() {
  const data = require("@teambit/cli");
  _cli = function () {
    return data;
  };
  return data;
}
function _elements() {
  const data = _interopRequireDefault(require("@teambit/elements"));
  _elements = function () {
    return data;
  };
  return data;
}
function _elementWrapperTemplate() {
  const data = require("./element-wrapper-template");
  _elementWrapperTemplate = function () {
    return data;
  };
  return data;
}
function _webpackConfig() {
  const data = _interopRequireDefault(require("./webpack/webpack.config.base"));
  _webpackConfig = function () {
    return data;
  };
  return data;
}
function _webpackConfigBase() {
  const data = _interopRequireDefault(require("./webpack/webpack.config.base.prod"));
  _webpackConfigBase = function () {
    return data;
  };
  return data;
}
function _reactElements() {
  const data = require("./react-elements.aspect");
  _reactElements = function () {
    return data;
  };
  return data;
}
class ReactElementsMain {
  constructor(elements) {
    this.elements = elements;
  }
  createTask(storageResolver) {
    return this.elements.createTask(storageResolver);
  }
  getWrapperTemplateFn(opts) {
    return (0, _elementWrapperTemplate().getWrapperTemplateFn)(this.getWrapperTemplateOptsWithDefaults(opts || {}));
  }
  getWebpackTransformers() {
    const baseConfig = (0, _webpackConfig().default)(true);
    const baseProdConfig = (0, _webpackConfigBase().default)();
    const baseElementsTransformers = this.elements.getWebpackTransformers();
    const defaultTransformer = configMutator => {
      const merged = configMutator.merge([baseConfig, baseProdConfig]);
      return merged;
    };
    return [...baseElementsTransformers, defaultTransformer];
  }
  getWrapperTemplateOptsWithDefaults(opts) {
    return Object.assign({}, {
      elementsPrefix: 'x'
    }, opts);
  }
  static async provider([elements]) {
    return new ReactElementsMain(elements);
  }
}
exports.ReactElementsMain = ReactElementsMain;
(0, _defineProperty2().default)(ReactElementsMain, "slots", []);
(0, _defineProperty2().default)(ReactElementsMain, "dependencies", [_elements().default]);
(0, _defineProperty2().default)(ReactElementsMain, "runtime", _cli().MainRuntime);
_reactElements().ReactElementsAspect.addRuntime(ReactElementsMain);

//# sourceMappingURL=react-elements.main.runtime.js.map