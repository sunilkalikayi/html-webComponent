{"version":3,"names":["LongProcessLogger","constructor","logPublisher","extensionName","processDescription","totalItems","currentItem","startTime","process","hrtime","start","logProgress","itemName","message","debug","setStatusLine","end","duration","prettyTime","logAndConsole","totalItemsStr","info"],"sources":["long-process-logger.ts"],"sourcesContent":["import prettyTime from 'pretty-time';\nimport type { Logger } from './logger';\n\n/**\n * use it for a long running process. upon creation it logs the `processDescription`.\n * if the process involves iteration over a list of items, such as running tag on a list of\n * components, then pass the `totalItems` as the total components in the list.\n * later, during the iteration, call `logProgress(componentName)`.\n * once done, call `end()`.\n * the status-line will show all messages in the terminal.\n * see README for more data.\n */\nexport class LongProcessLogger {\n  constructor(\n    private logPublisher: Logger,\n    private extensionName: string,\n    private processDescription: string,\n    private totalItems?: number,\n    private currentItem = 0,\n    private startTime = process.hrtime()\n  ) {\n    this.start();\n  }\n\n  logProgress(itemName = '') {\n    this.currentItem += 1;\n    const message = `${this.processDescription} (${this.currentItem}/${this.totalItems}). ${itemName}`;\n    this.logPublisher.debug(message);\n    this.logPublisher.setStatusLine(`${this.extensionName}, ${message}`);\n  }\n\n  end() {\n    const duration = process.hrtime(this.startTime);\n    const message = `${this.processDescription} (completed in ${prettyTime(duration)})`;\n    this.logAndConsole(message);\n  }\n\n  private start() {\n    const totalItemsStr = this.totalItems ? `(total: ${this.totalItems})` : '';\n    const message = `${this.processDescription} ${totalItemsStr}`;\n    this.logAndConsole(message);\n  }\n\n  private logAndConsole(message: string) {\n    this.logPublisher.info(message);\n    this.logPublisher.setStatusLine(`${this.extensionName}, ${message}`);\n  }\n}\n"],"mappings":";;;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,iBAAiB,CAAC;EAC7BC,WAAW,CACDC,YAAoB,EACpBC,aAAqB,EACrBC,kBAA0B,EAC1BC,UAAmB,EACnBC,WAAW,GAAG,CAAC,EACfC,SAAS,GAAGC,OAAO,CAACC,MAAM,EAAE,EACpC;IAAA,KANQP,YAAoB,GAApBA,YAAoB;IAAA,KACpBC,aAAqB,GAArBA,aAAqB;IAAA,KACrBC,kBAA0B,GAA1BA,kBAA0B;IAAA,KAC1BC,UAAmB,GAAnBA,UAAmB;IAAA,KACnBC,WAAW,GAAXA,WAAW;IAAA,KACXC,SAAS,GAATA,SAAS;IAEjB,IAAI,CAACG,KAAK,EAAE;EACd;EAEAC,WAAW,CAACC,QAAQ,GAAG,EAAE,EAAE;IACzB,IAAI,CAACN,WAAW,IAAI,CAAC;IACrB,MAAMO,OAAO,GAAI,GAAE,IAAI,CAACT,kBAAmB,KAAI,IAAI,CAACE,WAAY,IAAG,IAAI,CAACD,UAAW,MAAKO,QAAS,EAAC;IAClG,IAAI,CAACV,YAAY,CAACY,KAAK,CAACD,OAAO,CAAC;IAChC,IAAI,CAACX,YAAY,CAACa,aAAa,CAAE,GAAE,IAAI,CAACZ,aAAc,KAAIU,OAAQ,EAAC,CAAC;EACtE;EAEAG,GAAG,GAAG;IACJ,MAAMC,QAAQ,GAAGT,OAAO,CAACC,MAAM,CAAC,IAAI,CAACF,SAAS,CAAC;IAC/C,MAAMM,OAAO,GAAI,GAAE,IAAI,CAACT,kBAAmB,kBAAiB,IAAAc,qBAAU,EAACD,QAAQ,CAAE,GAAE;IACnF,IAAI,CAACE,aAAa,CAACN,OAAO,CAAC;EAC7B;EAEQH,KAAK,GAAG;IACd,MAAMU,aAAa,GAAG,IAAI,CAACf,UAAU,GAAI,WAAU,IAAI,CAACA,UAAW,GAAE,GAAG,EAAE;IAC1E,MAAMQ,OAAO,GAAI,GAAE,IAAI,CAACT,kBAAmB,IAAGgB,aAAc,EAAC;IAC7D,IAAI,CAACD,aAAa,CAACN,OAAO,CAAC;EAC7B;EAEQM,aAAa,CAACN,OAAe,EAAE;IACrC,IAAI,CAACX,YAAY,CAACmB,IAAI,CAACR,OAAO,CAAC;IAC/B,IAAI,CAACX,YAAY,CAACa,aAAa,CAAE,GAAE,IAAI,CAACZ,aAAc,KAAIU,OAAQ,EAAC,CAAC;EACtE;AACF;AAAC"}