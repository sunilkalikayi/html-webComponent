"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LongProcessLogger = void 0;
function _prettyTime() {
  const data = _interopRequireDefault(require("pretty-time"));
  _prettyTime = function () {
    return data;
  };
  return data;
}
/**
 * use it for a long running process. upon creation it logs the `processDescription`.
 * if the process involves iteration over a list of items, such as running tag on a list of
 * components, then pass the `totalItems` as the total components in the list.
 * later, during the iteration, call `logProgress(componentName)`.
 * once done, call `end()`.
 * the status-line will show all messages in the terminal.
 * see README for more data.
 */
class LongProcessLogger {
  constructor(logPublisher, extensionName, processDescription, totalItems, currentItem = 0, startTime = process.hrtime()) {
    this.logPublisher = logPublisher;
    this.extensionName = extensionName;
    this.processDescription = processDescription;
    this.totalItems = totalItems;
    this.currentItem = currentItem;
    this.startTime = startTime;
    this.start();
  }
  logProgress(itemName = '') {
    this.currentItem += 1;
    const message = `${this.processDescription} (${this.currentItem}/${this.totalItems}). ${itemName}`;
    this.logPublisher.debug(message);
    this.logPublisher.setStatusLine(`${this.extensionName}, ${message}`);
  }
  end() {
    const duration = process.hrtime(this.startTime);
    const message = `${this.processDescription} (completed in ${(0, _prettyTime().default)(duration)})`;
    this.logAndConsole(message);
  }
  start() {
    const totalItemsStr = this.totalItems ? `(total: ${this.totalItems})` : '';
    const message = `${this.processDescription} ${totalItemsStr}`;
    this.logAndConsole(message);
  }
  logAndConsole(message) {
    this.logPublisher.info(message);
    this.logPublisher.setStatusLine(`${this.extensionName}, ${message}`);
  }
}
exports.LongProcessLogger = LongProcessLogger;

//# sourceMappingURL=long-process-logger.js.map