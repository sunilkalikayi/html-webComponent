{"version":3,"names":[],"sources":["insight.ts"],"sourcesContent":["import { Component } from '@teambit/component';\n\nexport type InsightMetaData = {\n  name: string;\n  description: string;\n};\n\nexport type InsightResult = {\n  metaData: InsightMetaData;\n  message: string;\n  data: any;\n  renderedData?: string;\n};\n\nexport type RawResult = {\n  message: string;\n  data: any;\n};\n\nexport interface Insight {\n  name: string;\n  description: string;\n\n  /**\n   * runs a specific insight using _runInsight, gets a RawResult, and uses _formatData to transform the output to InsightResult.\n   */\n  run(...args: any[]): Promise<InsightResult>;\n\n  /**\n   * add the results from the insights as a component-issue so then bit-status could show them and bit-tag could block\n   * them.\n   */\n  addAsComponentIssue?(components: Component[]): Promise<void>;\n}\n"],"mappings":""}