"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.symbol.description.js");
require("core-js/modules/es.array.flat.js");
require("core-js/modules/es.array.unscopables.flat.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.INSIGHT_CIRCULAR_DEPS_NAME = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _componentIssues() {
  const data = require("@teambit/component-issues");
  _componentIssues = function () {
    return data;
  };
  return data;
}
function _lodash() {
  const data = require("lodash");
  _lodash = function () {
    return data;
  };
  return data;
}
const INSIGHT_CIRCULAR_DEPS_NAME = 'circular';
exports.INSIGHT_CIRCULAR_DEPS_NAME = INSIGHT_CIRCULAR_DEPS_NAME;
class FindCycles {
  constructor(graphBuilder) {
    (0, _defineProperty2().default)(this, "name", INSIGHT_CIRCULAR_DEPS_NAME);
    (0, _defineProperty2().default)(this, "description", 'Get all circular dependencies in component graph');
    (0, _defineProperty2().default)(this, "graphBuilder", void 0);
    this.graphBuilder = graphBuilder;
  }
  async runInsight() {
    const graph = await this.graphBuilder.getGraph();
    if (!graph) {
      return {
        message: '',
        data: undefined
      };
    }
    const cycles = graph.findCycles();
    if (cycles.length === 1) {
      return {
        message: `Found ${cycles.length} cycle.`,
        data: cycles
      };
    }
    return {
      message: `Found ${cycles.length} cycles.`,
      data: cycles
    };
  }
  renderData(data) {
    if (data.data.length === 0) {
      return 'No cyclic dependencies';
    }
    const string = data.data.map(cycle => {
      return `\nCyclic dependency
-----------------
- ${cycle.join('\n- ')}`;
    }).join('\n');
    return string;
  }
  async run() {
    const bareResult = await this.runInsight();
    const renderedData = this.renderData(bareResult);
    const result = {
      metaData: {
        name: this.name,
        description: this.description
      },
      data: bareResult.data,
      message: bareResult.message,
      renderedData
    };
    if (bareResult.message) {
      result.message = bareResult.message;
    }
    return result;
  }
  async addAsComponentIssue(components) {
    const result = await this.runInsight();
    if (!result.data.length) {
      return; // no circulars
    }

    const allIds = (0, _lodash().uniq)(result.data.flat());
    const componentsWithCircular = components.filter(component => allIds.includes(component.id.toString()));
    componentsWithCircular.forEach(component => {
      component.state.issues.getOrCreate(_componentIssues().IssuesClasses.CircularDependencies).data = true;
    });
  }
}
exports.default = FindCycles;

//# sourceMappingURL=find-circulars.js.map