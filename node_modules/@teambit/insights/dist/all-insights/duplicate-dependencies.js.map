{"version":3,"names":["INSIGHT_NAME","DuplicateDependencies","constructor","graphBuilder","runInsight","graph","getGraph","message","data","undefined","duplicates","findDuplicateDependencies","lenDependencies","keys","length","formatData","formatted","dependency","depData","entries","totalOutdatedDependents","dependentsByVersion","getDependents","priorVersions","push","dependencyId","latestVersion","latestVersionId","toString","forEach","pVersion","dependents","version","ComponentID","fromString","versionId","split","immediateDependents","dependent","id","usedVersion","compId","sort","revreseCompareVersions","v1","v2","rcompare","err","stringifyDependents","string","map","join","stringifyDependentsByVersion","versions","renderData","obj","run","bareResult","formattedData","renderedData","result","metaData","name","description"],"sources":["duplicate-dependencies.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { GraphBuilder, VersionSubgraph } from '@teambit/graph';\nimport { rcompare } from 'semver';\n// import { ComponentID } from '../../../component/component-id';\nimport { ComponentID } from '@teambit/component';\nimport { Insight, InsightResult, RawResult } from '../insight';\n// import NoDataForInsight from '../exceptions/no-data-for-insight';\n\nexport const INSIGHT_NAME = 'duplicate dependencies';\n\ntype Dependent = {\n  id: string;\n  usedVersion: string;\n};\n\ntype VersionWithDependents = {\n  version: string;\n  compId: string;\n  dependents: Dependent[];\n};\n\ntype FormattedEntry = {\n  dependencyId: string;\n  latestVersion: string;\n  totalOutdatedDependents: string;\n  dependentsByVersion: VersionWithDependents[];\n};\nexport default class DuplicateDependencies implements Insight {\n  name = INSIGHT_NAME;\n  description = 'Get all duplicate dependencies in component graph';\n  graphBuilder: GraphBuilder;\n  constructor(graphBuilder: GraphBuilder) {\n    this.graphBuilder = graphBuilder;\n  }\n  private async runInsight(): Promise<RawResult> {\n    const graph = await this.graphBuilder.getGraph();\n    if (!graph) {\n      return {\n        message: 'No graph found',\n        data: undefined,\n      };\n    }\n    const duplicates = graph.findDuplicateDependencies();\n    const lenDependencies = [...duplicates.keys()].length;\n    if (lenDependencies === 1) {\n      return {\n        message: `Found ${lenDependencies} duplicate dependency.`,\n        data: duplicates,\n      };\n    }\n    return {\n      message: `Found ${lenDependencies} duplicate dependencies.`,\n      data: duplicates,\n    };\n  }\n\n  private formatData(data: any): FormattedEntry[] {\n    const formatted: FormattedEntry[] = [];\n    for (const [dependency, depData] of data.entries()) {\n      const { totalOutdatedDependents, dependentsByVersion } = this.getDependents(depData.priorVersions);\n      formatted.push({\n        dependencyId: dependency,\n        latestVersion: depData.latestVersionId,\n        totalOutdatedDependents: totalOutdatedDependents.toString(),\n        dependentsByVersion,\n      });\n    }\n    return formatted;\n  }\n\n  private getDependents(priorVersions: VersionSubgraph[]): {\n    totalOutdatedDependents: number;\n    dependentsByVersion: VersionWithDependents[];\n  } {\n    let totalOutdatedDependents = 0;\n    const dependentsByVersion: VersionWithDependents[] = [];\n    priorVersions.forEach((pVersion: VersionSubgraph) => {\n      const dependents: Dependent[] = [];\n      const version = ComponentID.fromString(pVersion.versionId).version || pVersion.versionId.split('@')[1];\n      pVersion.immediateDependents.forEach((dependent: string) => {\n        dependents.push({\n          id: dependent,\n          usedVersion: pVersion.versionId,\n        });\n      });\n      dependentsByVersion.push({\n        compId: pVersion.versionId,\n        version,\n        dependents,\n      });\n      totalOutdatedDependents += pVersion.immediateDependents.length;\n    });\n    dependentsByVersion.sort(this.revreseCompareVersions);\n    return { totalOutdatedDependents, dependentsByVersion };\n  }\n\n  revreseCompareVersions(v1: VersionWithDependents, v2: VersionWithDependents) {\n    try {\n      return rcompare(v1.version, v2.version);\n    } catch (err) {\n      // in case one of them is a snap\n      return 0;\n    }\n  }\n\n  private stringifyDependents(dependents: Dependent[]): string {\n    const string = dependents\n      .map((dependent) => {\n        return `- ${dependent.id} => ${dependent.usedVersion}`;\n      })\n      .join('\\n');\n    return string;\n  }\n\n  private stringifyDependentsByVersion(versions: VersionWithDependents[]): string {\n    const string = versions\n      .map((version) => {\n        return `- ${version.compId} has ${version.dependents.length} dependents`;\n      })\n      .join('\\n');\n    return string;\n  }\n\n  private renderData(data: FormattedEntry[]) {\n    const string = data\n      .map((obj) => {\n        return `\\n\\nFound ${obj.totalOutdatedDependents} outdated dependents for ${obj.dependencyId}\nThe latest version is \"${obj.latestVersion}\"\nOutdated dependents:\n${this.stringifyDependentsByVersion(obj.dependentsByVersion)}`;\n      })\n      .join('\\n');\n    return string;\n  }\n\n  async run(): Promise<InsightResult> {\n    const bareResult = await this.runInsight();\n    const formattedData = this.formatData(bareResult.data);\n    const renderedData = this.renderData(formattedData);\n    const result: InsightResult = {\n      metaData: {\n        name: this.name,\n        description: this.description,\n      },\n      data: formattedData,\n      message: bareResult.message,\n      renderedData,\n    };\n\n    if (bareResult.message) {\n      result.message = bareResult.message;\n    }\n    return result;\n  }\n}\n"],"mappings":"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"}