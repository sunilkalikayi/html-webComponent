{"version":3,"names":["InsightManager","constructor","insights","Map","forEach","insight","register","name","has","InsightAlreadyExists","set","listInsights","keys","getByName","insightName","get","delete","InsightNotFound","run","insightNames","opts","res","pMapSeries","insightRes","renderData","renderedData","push","runAll","allInsightNames"],"sources":["insight-manager.ts"],"sourcesContent":["import pMapSeries from 'p-map-series';\nimport InsightAlreadyExists from './exceptions/insight-already-exists';\nimport InsightNotFound from './exceptions/insight-not-found';\nimport { Insight, InsightResult } from './insight';\n\nexport type RunInsightOptions = {\n  renderData: boolean;\n};\nexport class InsightManager {\n  /** insights is an insight registry */\n  readonly insights: Map<string, Insight> = new Map();\n  constructor(\n    /**\n     * array of registered insights\n     */\n    insights: Insight[]\n  ) {\n    insights.forEach((insight) => {\n      this.register(insight);\n    });\n  }\n\n  /**\n   * registers a new insight and returns the updated insight registry map\n   */\n  register(insight: Insight) {\n    const name = insight.name;\n    if (this.insights.has(name)) {\n      throw new InsightAlreadyExists(name);\n    }\n    this.insights.set(name, insight);\n  }\n  /**\n   * list of all registered insights\n   */\n  listInsights(): string[] {\n    return [...this.insights.keys()];\n  }\n\n  /**\n   * gets a specific insight by its name or undefined if doesn't exist\n   */\n  getByName(insightName: string): Insight | undefined {\n    return this.insights.get(insightName);\n  }\n\n  /**\n   * deletes a specific insight by its name if exists\n   */\n  delete(insightName: string) {\n    if (!this.insights.has(insightName)) {\n      throw new InsightNotFound(insightName);\n    }\n    this.insights.delete(insightName);\n  }\n\n  /**\n   * execute an array of insights\n   *\n   */\n  async run(insightNames: string[], opts: RunInsightOptions): Promise<InsightResult[]> {\n    const res: InsightResult[] = [];\n    // the reason for not using Promise.all here is that the current both insights building the graph.\n    // if it happens at the same time, some props are not populated in one of the instances. it obviously\n    // should be fixed in the GraphBuilder class. see \"todo\" there.\n    await pMapSeries(insightNames, async (insightName) => {\n      const insight = this.getByName(insightName);\n      if (insight) {\n        const insightRes: InsightResult = await insight.run();\n        if (!opts.renderData) {\n          delete insightRes.renderedData;\n        }\n        res.push(insightRes);\n      }\n    });\n    return res;\n  }\n\n  /**\n   * execute all insights in the registry\n   *\n   */\n  async runAll(opts: RunInsightOptions): Promise<InsightResult[]> {\n    const allInsightNames = this.listInsights();\n    return this.run(allInsightNames, opts);\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAMO,MAAMA,cAAc,CAAC;EAC1B;;EAEAC,WAAW;EACT;AACJ;AACA;EACIC,QAAmB,EACnB;IAAA,kDANwC,IAAIC,GAAG,EAAE;IAOjDD,QAAQ,CAACE,OAAO,CAAEC,OAAO,IAAK;MAC5B,IAAI,CAACC,QAAQ,CAACD,OAAO,CAAC;IACxB,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;EACEC,QAAQ,CAACD,OAAgB,EAAE;IACzB,MAAME,IAAI,GAAGF,OAAO,CAACE,IAAI;IACzB,IAAI,IAAI,CAACL,QAAQ,CAACM,GAAG,CAACD,IAAI,CAAC,EAAE;MAC3B,MAAM,KAAIE,+BAAoB,EAACF,IAAI,CAAC;IACtC;IACA,IAAI,CAACL,QAAQ,CAACQ,GAAG,CAACH,IAAI,EAAEF,OAAO,CAAC;EAClC;EACA;AACF;AACA;EACEM,YAAY,GAAa;IACvB,OAAO,CAAC,GAAG,IAAI,CAACT,QAAQ,CAACU,IAAI,EAAE,CAAC;EAClC;;EAEA;AACF;AACA;EACEC,SAAS,CAACC,WAAmB,EAAuB;IAClD,OAAO,IAAI,CAACZ,QAAQ,CAACa,GAAG,CAACD,WAAW,CAAC;EACvC;;EAEA;AACF;AACA;EACEE,MAAM,CAACF,WAAmB,EAAE;IAC1B,IAAI,CAAC,IAAI,CAACZ,QAAQ,CAACM,GAAG,CAACM,WAAW,CAAC,EAAE;MACnC,MAAM,KAAIG,0BAAe,EAACH,WAAW,CAAC;IACxC;IACA,IAAI,CAACZ,QAAQ,CAACc,MAAM,CAACF,WAAW,CAAC;EACnC;;EAEA;AACF;AACA;AACA;EACE,MAAMI,GAAG,CAACC,YAAsB,EAAEC,IAAuB,EAA4B;IACnF,MAAMC,GAAoB,GAAG,EAAE;IAC/B;IACA;IACA;IACA,MAAM,IAAAC,qBAAU,EAACH,YAAY,EAAE,MAAOL,WAAW,IAAK;MACpD,MAAMT,OAAO,GAAG,IAAI,CAACQ,SAAS,CAACC,WAAW,CAAC;MAC3C,IAAIT,OAAO,EAAE;QACX,MAAMkB,UAAyB,GAAG,MAAMlB,OAAO,CAACa,GAAG,EAAE;QACrD,IAAI,CAACE,IAAI,CAACI,UAAU,EAAE;UACpB,OAAOD,UAAU,CAACE,YAAY;QAChC;QACAJ,GAAG,CAACK,IAAI,CAACH,UAAU,CAAC;MACtB;IACF,CAAC,CAAC;IACF,OAAOF,GAAG;EACZ;;EAEA;AACF;AACA;AACA;EACE,MAAMM,MAAM,CAACP,IAAuB,EAA4B;IAC9D,MAAMQ,eAAe,GAAG,IAAI,CAACjB,YAAY,EAAE;IAC3C,OAAO,IAAI,CAACO,GAAG,CAACU,eAAe,EAAER,IAAI,CAAC;EACxC;AACF;AAAC"}