{"version":3,"names":["InsightsMain","constructor","insightManager","runInsights","names","opts","results","namesArr","run","runAll","listInsights","addInsightsAsComponentIssues","components","issuesToIgnore","insightNames","insights","map","name","getByName","includes","IssuesClasses","CircularDependencies","pMapSeries","insight","addAsComponentIssue","provider","graphBuilder","cli","issues","initialInsights","getCoreInsights","InsightManager","insightsMain","registerAddComponentsIssues","bind","insightsCmd","InsightsCmd","register","GraphAspect","CLIAspect","IssuesAspect","MainRuntime","silence","InsightsAspect","addRuntime"],"sources":["insights.main.runtime.ts"],"sourcesContent":["import { CLIAspect, MainRuntime, CLIMain } from '@teambit/cli';\nimport { GraphAspect, GraphBuilder } from '@teambit/graph';\nimport { IssuesClasses } from '@teambit/component-issues';\nimport IssuesAspect, { IssuesMain } from '@teambit/issues';\nimport pMapSeries from 'p-map-series';\nimport { Component } from '@teambit/component';\nimport { InsightsAspect } from './insights.aspect';\nimport getCoreInsights from './core-insights-getter';\nimport { Insight, InsightResult } from './insight';\nimport { InsightManager, RunInsightOptions } from './insight-manager';\nimport InsightsCmd from './insights.cmd';\n\nexport class InsightsMain {\n  constructor(private insightManager: InsightManager) {}\n\n  async runInsights(names: string[], opts: RunInsightOptions) {\n    if (names) {\n      let results: InsightResult[] = [];\n      const namesArr = typeof names === 'string' ? [names] : names;\n      results = await this.insightManager.run(namesArr, opts);\n      return results;\n    }\n    const results = await this.insightManager.runAll(opts);\n    return results;\n  }\n\n  listInsights() {\n    return this.insightManager.listInsights();\n  }\n\n  async addInsightsAsComponentIssues(components: Component[], issuesToIgnore: string[]) {\n    const insightNames: string[] = this.listInsights();\n    const insights = insightNames.map((name) => this.insightManager.getByName(name));\n    if (!issuesToIgnore.includes(IssuesClasses.CircularDependencies.name)) {\n      await pMapSeries(insights, async (insight) => {\n        if (insight && insight.addAsComponentIssue) {\n          await insight.addAsComponentIssue(components);\n        }\n      });\n    }\n  }\n\n  static slots = [];\n  static dependencies = [GraphAspect, CLIAspect, IssuesAspect];\n  static runtime = MainRuntime;\n  static config = {\n    silence: false,\n  };\n  static async provider([graphBuilder, cli, issues]: [GraphBuilder, CLIMain, IssuesMain]) {\n    // get all insights from registry\n    const initialInsights: Insight[] = getCoreInsights(graphBuilder);\n    // register all insights in cli\n    // TODO - get user-defined insights as well, and use them when instantiating InsightManager and InsightsCmd\n    const insightManager = new InsightManager(initialInsights);\n    const insightsMain = new InsightsMain(insightManager);\n    issues.registerAddComponentsIssues(insightsMain.addInsightsAsComponentIssues.bind(insightsMain));\n    const insightsCmd = new InsightsCmd(insightsMain);\n    cli.register(insightsCmd);\n    return insightsMain;\n  }\n}\n\nInsightsAspect.addRuntime(InsightsMain);\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEO,MAAMA,YAAY,CAAC;EACxBC,WAAW,CAASC,cAA8B,EAAE;IAAA,KAAhCA,cAA8B,GAA9BA,cAA8B;EAAG;EAErD,MAAMC,WAAW,CAACC,KAAe,EAAEC,IAAuB,EAAE;IAC1D,IAAID,KAAK,EAAE;MACT,IAAIE,OAAwB,GAAG,EAAE;MACjC,MAAMC,QAAQ,GAAG,OAAOH,KAAK,KAAK,QAAQ,GAAG,CAACA,KAAK,CAAC,GAAGA,KAAK;MAC5DE,OAAO,GAAG,MAAM,IAAI,CAACJ,cAAc,CAACM,GAAG,CAACD,QAAQ,EAAEF,IAAI,CAAC;MACvD,OAAOC,OAAO;IAChB;IACA,MAAMA,OAAO,GAAG,MAAM,IAAI,CAACJ,cAAc,CAACO,MAAM,CAACJ,IAAI,CAAC;IACtD,OAAOC,OAAO;EAChB;EAEAI,YAAY,GAAG;IACb,OAAO,IAAI,CAACR,cAAc,CAACQ,YAAY,EAAE;EAC3C;EAEA,MAAMC,4BAA4B,CAACC,UAAuB,EAAEC,cAAwB,EAAE;IACpF,MAAMC,YAAsB,GAAG,IAAI,CAACJ,YAAY,EAAE;IAClD,MAAMK,QAAQ,GAAGD,YAAY,CAACE,GAAG,CAAEC,IAAI,IAAK,IAAI,CAACf,cAAc,CAACgB,SAAS,CAACD,IAAI,CAAC,CAAC;IAChF,IAAI,CAACJ,cAAc,CAACM,QAAQ,CAACC,gCAAa,CAACC,oBAAoB,CAACJ,IAAI,CAAC,EAAE;MACrE,MAAM,IAAAK,qBAAU,EAACP,QAAQ,EAAE,MAAOQ,OAAO,IAAK;QAC5C,IAAIA,OAAO,IAAIA,OAAO,CAACC,mBAAmB,EAAE;UAC1C,MAAMD,OAAO,CAACC,mBAAmB,CAACZ,UAAU,CAAC;QAC/C;MACF,CAAC,CAAC;IACJ;EACF;EAQA,aAAaa,QAAQ,CAAC,CAACC,YAAY,EAAEC,GAAG,EAAEC,MAAM,CAAsC,EAAE;IACtF;IACA,MAAMC,eAA0B,GAAG,IAAAC,6BAAe,EAACJ,YAAY,CAAC;IAChE;IACA;IACA,MAAMxB,cAAc,GAAG,KAAI6B,gCAAc,EAACF,eAAe,CAAC;IAC1D,MAAMG,YAAY,GAAG,IAAIhC,YAAY,CAACE,cAAc,CAAC;IACrD0B,MAAM,CAACK,2BAA2B,CAACD,YAAY,CAACrB,4BAA4B,CAACuB,IAAI,CAACF,YAAY,CAAC,CAAC;IAChG,MAAMG,WAAW,GAAG,KAAIC,oBAAW,EAACJ,YAAY,CAAC;IACjDL,GAAG,CAACU,QAAQ,CAACF,WAAW,CAAC;IACzB,OAAOH,YAAY;EACrB;AACF;AAAC;AAAA,gCAhDYhC,YAAY,WA8BR,EAAE;AAAA,gCA9BNA,YAAY,kBA+BD,CAACsC,oBAAW,EAAEC,gBAAS,EAAEC,iBAAY,CAAC;AAAA,gCA/BjDxC,YAAY,aAgCNyC,kBAAW;AAAA,gCAhCjBzC,YAAY,YAiCP;EACd0C,OAAO,EAAE;AACX,CAAC;AAeHC,0BAAc,CAACC,UAAU,CAAC5C,YAAY,CAAC"}