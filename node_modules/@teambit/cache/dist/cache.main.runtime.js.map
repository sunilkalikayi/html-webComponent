{"version":3,"names":["CacheMain","constructor","config","logger","set","key","data","ttl","debug","expire","Date","getTime","cacache","put","globalCacheFolder","JSON","stringify","then","catch","get","cacheObject","parse","toString","rm","undefined","cacheDirectory","provider","loggerFactory","createLogger","CacheAspect","id","MainRuntime","LoggerAspect","CACHE_ROOT","addRuntime"],"sources":["cache.main.runtime.ts"],"sourcesContent":["import { MainRuntime } from '@teambit/cli';\nimport { Logger, LoggerAspect, LoggerMain } from '@teambit/logger';\nimport { CACHE_ROOT } from '@teambit/legacy/dist/constants';\nimport cacache from 'cacache';\n\nimport { CacheAspect } from './cache.aspect';\n\nexport type CacheConfig = {\n  cacheDirectory: string;\n};\n\nexport class CacheMain {\n  static runtime = MainRuntime;\n\n  constructor(\n    /**\n     * extension config\n     */\n    readonly config: CacheConfig,\n\n    /**\n     * logger extension.\n     */\n    private readonly logger: Logger\n  ) {}\n\n  static dependencies = [LoggerAspect];\n\n  static defaultConfig = {\n    cacheDirectory: CACHE_ROOT,\n  };\n\n  async set(key: string, data: any, ttl?: number): Promise<boolean> {\n    this.logger.debug(`put cache to ${key} with data ${data}`);\n    const expire = ttl ? new Date().getTime() + ttl : null;\n    return cacache\n      .put(this.globalCacheFolder, key, JSON.stringify({ data, expire }))\n      .then(() => true)\n      .catch(() => false);\n  }\n\n  async get<T>(key: string): Promise<T | undefined> {\n    this.logger.debug(`get cache for ${key}`);\n    return cacache\n      .get(this.globalCacheFolder, key)\n      .then(async (cacheObject) => {\n        const { data, expire } = JSON.parse(cacheObject.data.toString());\n        if (expire && new Date().getTime() > expire) {\n          return cacache.rm(this.globalCacheFolder, key);\n        }\n        return data;\n      })\n      .catch(() => undefined);\n  }\n\n  private get globalCacheFolder() {\n    return this.config.cacheDirectory;\n  }\n\n  static async provider([loggerFactory]: [LoggerMain], config: CacheConfig) {\n    const logger = loggerFactory.createLogger(CacheAspect.id);\n    return new CacheMain(config, logger);\n  }\n}\n\nCacheAspect.addRuntime(CacheMain);\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAMO,MAAMA,SAAS,CAAC;EAGrBC,WAAW;EACT;AACJ;AACA;EACaC,MAAmB;EAE5B;AACJ;AACA;EACqBC,MAAc,EAC/B;IAAA,KANSD,MAAmB,GAAnBA,MAAmB;IAAA,KAKXC,MAAc,GAAdA,MAAc;EAC9B;EAQH,MAAMC,GAAG,CAACC,GAAW,EAAEC,IAAS,EAAEC,GAAY,EAAoB;IAChE,IAAI,CAACJ,MAAM,CAACK,KAAK,CAAE,gBAAeH,GAAI,cAAaC,IAAK,EAAC,CAAC;IAC1D,MAAMG,MAAM,GAAGF,GAAG,GAAG,IAAIG,IAAI,EAAE,CAACC,OAAO,EAAE,GAAGJ,GAAG,GAAG,IAAI;IACtD,OAAOK,kBAAO,CACXC,GAAG,CAAC,IAAI,CAACC,iBAAiB,EAAET,GAAG,EAAEU,IAAI,CAACC,SAAS,CAAC;MAAEV,IAAI;MAAEG;IAAO,CAAC,CAAC,CAAC,CAClEQ,IAAI,CAAC,MAAM,IAAI,CAAC,CAChBC,KAAK,CAAC,MAAM,KAAK,CAAC;EACvB;EAEA,MAAMC,GAAG,CAAId,GAAW,EAA0B;IAChD,IAAI,CAACF,MAAM,CAACK,KAAK,CAAE,iBAAgBH,GAAI,EAAC,CAAC;IACzC,OAAOO,kBAAO,CACXO,GAAG,CAAC,IAAI,CAACL,iBAAiB,EAAET,GAAG,CAAC,CAChCY,IAAI,CAAC,MAAOG,WAAW,IAAK;MAC3B,MAAM;QAAEd,IAAI;QAAEG;MAAO,CAAC,GAAGM,IAAI,CAACM,KAAK,CAACD,WAAW,CAACd,IAAI,CAACgB,QAAQ,EAAE,CAAC;MAChE,IAAIb,MAAM,IAAI,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE,GAAGF,MAAM,EAAE;QAC3C,OAAOG,kBAAO,CAACW,EAAE,CAAC,IAAI,CAACT,iBAAiB,EAAET,GAAG,CAAC;MAChD;MACA,OAAOC,IAAI;IACb,CAAC,CAAC,CACDY,KAAK,CAAC,MAAMM,SAAS,CAAC;EAC3B;EAEA,IAAYV,iBAAiB,GAAG;IAC9B,OAAO,IAAI,CAACZ,MAAM,CAACuB,cAAc;EACnC;EAEA,aAAaC,QAAQ,CAAC,CAACC,aAAa,CAAe,EAAEzB,MAAmB,EAAE;IACxE,MAAMC,MAAM,GAAGwB,aAAa,CAACC,YAAY,CAACC,oBAAW,CAACC,EAAE,CAAC;IACzD,OAAO,IAAI9B,SAAS,CAACE,MAAM,EAAEC,MAAM,CAAC;EACtC;AACF;AAAC;AAAA,gCApDYH,SAAS,aACH+B,kBAAW;AAAA,gCADjB/B,SAAS,kBAeE,CAACgC,sBAAY,CAAC;AAAA,gCAfzBhC,SAAS,mBAiBG;EACrByB,cAAc,EAAEQ;AAClB,CAAC;AAmCHJ,oBAAW,CAACK,UAAU,CAAClC,SAAS,CAAC"}