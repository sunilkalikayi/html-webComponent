"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CacheMain = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _cli() {
  const data = require("@teambit/cli");
  _cli = function () {
    return data;
  };
  return data;
}
function _logger() {
  const data = require("@teambit/logger");
  _logger = function () {
    return data;
  };
  return data;
}
function _constants() {
  const data = require("@teambit/legacy/dist/constants");
  _constants = function () {
    return data;
  };
  return data;
}
function _cacache() {
  const data = _interopRequireDefault(require("cacache"));
  _cacache = function () {
    return data;
  };
  return data;
}
function _cache() {
  const data = require("./cache.aspect");
  _cache = function () {
    return data;
  };
  return data;
}
class CacheMain {
  constructor(
  /**
   * extension config
   */
  config,
  /**
   * logger extension.
   */
  logger) {
    this.config = config;
    this.logger = logger;
  }
  async set(key, data, ttl) {
    this.logger.debug(`put cache to ${key} with data ${data}`);
    const expire = ttl ? new Date().getTime() + ttl : null;
    return _cacache().default.put(this.globalCacheFolder, key, JSON.stringify({
      data,
      expire
    })).then(() => true).catch(() => false);
  }
  async get(key) {
    this.logger.debug(`get cache for ${key}`);
    return _cacache().default.get(this.globalCacheFolder, key).then(async cacheObject => {
      const {
        data,
        expire
      } = JSON.parse(cacheObject.data.toString());
      if (expire && new Date().getTime() > expire) {
        return _cacache().default.rm(this.globalCacheFolder, key);
      }
      return data;
    }).catch(() => undefined);
  }
  get globalCacheFolder() {
    return this.config.cacheDirectory;
  }
  static async provider([loggerFactory], config) {
    const logger = loggerFactory.createLogger(_cache().CacheAspect.id);
    return new CacheMain(config, logger);
  }
}
exports.CacheMain = CacheMain;
(0, _defineProperty2().default)(CacheMain, "runtime", _cli().MainRuntime);
(0, _defineProperty2().default)(CacheMain, "dependencies", [_logger().LoggerAspect]);
(0, _defineProperty2().default)(CacheMain, "defaultConfig", {
  cacheDirectory: _constants().CACHE_ROOT
});
_cache().CacheAspect.addRuntime(CacheMain);

//# sourceMappingURL=cache.main.runtime.js.map