"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FetchCmd = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
function _mergeVersion() {
  const data = require("@teambit/legacy/dist/consumer/versions-ops/merge-version/merge-version");
  _mergeVersion = function () {
    return data;
  };
  return data;
}
class FetchCmd {
  constructor(importer) {
    this.importer = importer;
    (0, _defineProperty2().default)(this, "name", 'fetch [ids...]');
    (0, _defineProperty2().default)(this, "description", `fetch remote objects and store locally`);
    (0, _defineProperty2().default)(this, "extendedDescription", `for lanes, use "/" as a separator between the remote and the lane name, e.g. teambit.ui/fix-button`);
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "private", true);
    (0, _defineProperty2().default)(this, "options", [['l', 'lanes', 'EXPERIMENTAL. fetch component objects from lanes. note, it does not save the remote lanes objects locally, only the refs'], ['c', 'components', 'fetch components'], ['j', 'json', 'return the output as JSON'], ['', 'from-original-scopes', 'fetch indirect dependencies from their original scope as opposed to from their dependents']]);
    (0, _defineProperty2().default)(this, "loader", true);
  }
  async report([ids = []], {
    lanes = false,
    components = false,
    json = false,
    fromOriginalScope = false
  }) {
    const {
      importedIds,
      importDetails
    } = await this.importer.fetch(ids, lanes, components, fromOriginalScope);
    if (json) {
      return JSON.stringify({
        importDetails
      }, null, 4);
    }
    if (importedIds.length) {
      const title = importedIds.length === 1 ? 'successfully fetched one component' : `successfully fetched ${importedIds.length} components`;
      const componentDependencies = importedIds.map(id => {
        const details = importDetails.find(c => c.id === id.toStringWithoutVersion());
        if (!details) throw new Error(`missing details of component ${id.toString()}`);
        return formatPlainComponentItemWithVersions(id, details);
      });
      const componentDependenciesOutput = [_chalk().default.green(title)].concat(componentDependencies).join('\n');
      return componentDependenciesOutput;
    }
    return _chalk().default.yellow('nothing to import');
  }
}
exports.FetchCmd = FetchCmd;
function formatPlainComponentItemWithVersions(bitId, importDetails) {
  const status = importDetails.status;
  const id = bitId.toStringWithoutVersion();
  const versions = importDetails.versions.length ? `new versions: ${importDetails.versions.join(', ')}` : '';
  const usedVersion = status === 'added' ? `, currently used version ${bitId.version}` : '';
  const getConflictMessage = () => {
    if (!importDetails.filesStatus) return '';
    const conflictedFiles = Object.keys(importDetails.filesStatus) // $FlowFixMe file is set
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    .filter(file => importDetails.filesStatus[file] === _mergeVersion().FileStatus.manual);
    if (!conflictedFiles.length) return '';
    return `(the following files were saved with conflicts ${conflictedFiles.map(file => _chalk().default.bold(file)).join(', ')}) `;
  };
  const deprecated = importDetails.deprecated ? _chalk().default.yellow('deprecated') : '';
  const missingDeps = importDetails.missingDeps.length ? _chalk().default.red(`missing dependencies: ${importDetails.missingDeps.map(d => d.toString()).join(', ')}`) : '';
  return `- ${_chalk().default.green(status)} ${_chalk().default.cyan(id)} ${versions}${usedVersion} ${getConflictMessage()}${deprecated} ${missingDeps}`;
}

//# sourceMappingURL=fetch-cmd.js.map