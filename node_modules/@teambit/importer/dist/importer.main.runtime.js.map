{"version":3,"names":["ImporterMain","constructor","workspace","depResolver","graph","import","importOptions","packageManagerArgs","ConsumerNotFound","consumer","ids","length","objectsOnly","isOnLane","currentRemoteLane","getCurrentRemoteLane","lanes","laneIds","toLaneId","currentLaneId","getCurrentLaneId","importComponents","ImportComponents","results","Analytics","setExtraData","importedIds","writtenComponents","removeFromWorkspaceConfig","onDestroy","importWithOptions","fetch","components","fromOriginalScope","BitError","loader","start","verbose","writeConfig","override","installNpmPackages","getLanes","importDetails","result","remoteLaneIds","map","id","trackLane","scope","getRemoteTrackedDataByLocalLane","LaneId","from","remoteLane","remoteScope","parse","objects","remoteLanes","getAllRemoteLaneIds","scopeComponentImporter","ScopeComponentsImporter","getInstance","importLanes","push","err","InvalidScopeName","ScopeNotFoundOrDenied","LaneNotFound","InvalidScopeNameFromRemote","stop","logger","console","message","component","importedPackageNames","getImportedPackagesNames","removeFromRootPolicy","persistConfig","path","componentIdToPackageName","provider","cli","community","importerMain","register","ImportCmd","getDocsDomain","FetchCmd","CLIAspect","WorkspaceAspect","DependencyResolverAspect","CommunityAspect","GraphAspect","MainRuntime","ImporterAspect","addRuntime"],"sources":["importer.main.runtime.ts"],"sourcesContent":["import { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport { DependencyResolverAspect, DependencyResolverMain } from '@teambit/dependency-resolver';\nimport WorkspaceAspect, { Workspace } from '@teambit/workspace';\nimport { CommunityAspect } from '@teambit/community';\nimport type { CommunityMain } from '@teambit/community';\nimport { Analytics } from '@teambit/legacy/dist/analytics/analytics';\nimport ConsumerComponent from '@teambit/legacy/dist/consumer/component';\nimport componentIdToPackageName from '@teambit/legacy/dist/utils/bit/component-id-to-package-name';\nimport { ConsumerNotFound } from '@teambit/legacy/dist/consumer/exceptions';\n\nimport { InvalidScopeName, InvalidScopeNameFromRemote } from '@teambit/legacy-bit-id';\nimport logger from '@teambit/legacy/dist/logger/logger';\nimport { LaneId } from '@teambit/lane-id';\nimport ScopeComponentsImporter from '@teambit/legacy/dist/scope/component-ops/scope-components-importer';\nimport loader from '@teambit/legacy/dist/cli/loader';\nimport { Lane } from '@teambit/legacy/dist/scope/models';\nimport { ScopeNotFoundOrDenied } from '@teambit/legacy/dist/remotes/exceptions/scope-not-found-or-denied';\nimport GraphAspect, { GraphMain } from '@teambit/graph';\nimport { LaneNotFound } from '@teambit/legacy/dist/api/scope/lib/exceptions/lane-not-found';\nimport { BitError } from '@teambit/bit-error';\nimport { ImportCmd } from './import.cmd';\nimport { ImporterAspect } from './importer.aspect';\nimport { FetchCmd } from './fetch-cmd';\nimport ImportComponents, { ImportOptions, ImportResult } from './import-components';\n\nexport class ImporterMain {\n  constructor(private workspace: Workspace, private depResolver: DependencyResolverMain, private graph: GraphMain) {}\n\n  async import(importOptions: ImportOptions, packageManagerArgs: string[]): Promise<ImportResult> {\n    if (!this.workspace) throw new ConsumerNotFound();\n    const consumer = this.workspace.consumer;\n    consumer.packageManagerArgs = packageManagerArgs;\n    if (!importOptions.ids.length) {\n      importOptions.objectsOnly = true;\n    }\n    if (this.workspace.consumer.isOnLane()) {\n      const currentRemoteLane = await this.workspace.getCurrentRemoteLane();\n      if (currentRemoteLane) {\n        importOptions.lanes = { laneIds: [currentRemoteLane.toLaneId()], lanes: [currentRemoteLane] };\n      } else if (!importOptions.ids.length) {\n        // this is probably a local lane that was never exported.\n        // although no need to fetch from the lane, still, the import is needed for main (which are available on this\n        // local lane)\n        const currentLaneId = this.workspace.getCurrentLaneId();\n        importOptions.lanes = { laneIds: [currentLaneId], lanes: [] };\n      }\n    }\n    const importComponents = new ImportComponents(this.workspace, this.graph, importOptions);\n    const results = await importComponents.importComponents();\n    Analytics.setExtraData('num_components', results.importedIds.length);\n    if (results.writtenComponents && results.writtenComponents.length) {\n      await this.removeFromWorkspaceConfig(results.writtenComponents);\n    }\n    await consumer.onDestroy();\n    return results;\n  }\n\n  /**\n   * @todo: combine with this.import()\n   */\n  async importWithOptions(importOptions: ImportOptions) {\n    if (!this.workspace) throw new ConsumerNotFound();\n    const importComponents = new ImportComponents(this.workspace, this.graph, importOptions);\n    return importComponents.importComponents();\n  }\n\n  async fetch(ids: string[], lanes: boolean, components: boolean, fromOriginalScope: boolean) {\n    if (!lanes && !components) {\n      throw new BitError(\n        `please provide the type of objects you would like to pull, the options are --components and --lanes`\n      );\n    }\n    loader.start('fetching objects...');\n    if (!this.workspace) throw new ConsumerNotFound();\n    const consumer = this.workspace.consumer;\n    const importOptions: ImportOptions = {\n      ids,\n      objectsOnly: true,\n      verbose: false,\n      writeConfig: false,\n      override: false,\n      installNpmPackages: false,\n      fromOriginalScope,\n    };\n    if (lanes) {\n      importOptions.lanes = await getLanes();\n      importOptions.ids = [];\n    }\n    const importComponents = new ImportComponents(this.workspace, this.graph, importOptions);\n    const { importedIds, importDetails } = await importComponents.importComponents();\n    Analytics.setExtraData('num_components', importedIds.length);\n    await consumer.onDestroy();\n    return { importedIds, importDetails };\n\n    async function getLanes(): Promise<{ laneIds: LaneId[]; lanes: Lane[] }> {\n      const result: { laneIds: LaneId[]; lanes: Lane[] } = { laneIds: [], lanes: [] };\n      let remoteLaneIds: LaneId[] = [];\n      if (ids.length) {\n        remoteLaneIds = ids.map((id) => {\n          const trackLane = consumer.scope.lanes.getRemoteTrackedDataByLocalLane(id);\n          if (trackLane) return LaneId.from(trackLane.remoteLane, trackLane.remoteScope);\n          return LaneId.parse(id);\n        });\n      } else {\n        remoteLaneIds = await consumer.scope.objects.remoteLanes.getAllRemoteLaneIds();\n      }\n      const scopeComponentImporter = ScopeComponentsImporter.getInstance(consumer.scope);\n      try {\n        const remoteLanes = await scopeComponentImporter.importLanes(remoteLaneIds);\n        result.laneIds.push(...remoteLaneIds);\n        result.lanes.push(...remoteLanes);\n      } catch (err) {\n        if (\n          err instanceof InvalidScopeName ||\n          err instanceof ScopeNotFoundOrDenied ||\n          err instanceof LaneNotFound ||\n          err instanceof InvalidScopeNameFromRemote\n        ) {\n          // the lane could be a local lane so no need to throw an error in such case\n          loader.stop();\n          logger.console(`unable to get lane's data from a remote due to an error:\\n${err.message}`, 'warn', 'yellow');\n        } else {\n          throw err;\n        }\n      }\n\n      return result;\n    }\n  }\n\n  private async removeFromWorkspaceConfig(component: ConsumerComponent[]) {\n    const importedPackageNames = this.getImportedPackagesNames(component);\n    this.depResolver.removeFromRootPolicy(importedPackageNames);\n    await this.depResolver.persistConfig(this.workspace.path);\n  }\n\n  private getImportedPackagesNames(components: ConsumerComponent[]): string[] {\n    return components.map((component) => componentIdToPackageName(component));\n  }\n\n  static slots = [];\n  static dependencies = [CLIAspect, WorkspaceAspect, DependencyResolverAspect, CommunityAspect, GraphAspect];\n  static runtime = MainRuntime;\n  static async provider([cli, workspace, depResolver, community, graph]: [\n    CLIMain,\n    Workspace,\n    DependencyResolverMain,\n    CommunityMain,\n    GraphMain\n  ]) {\n    const importerMain = new ImporterMain(workspace, depResolver, graph);\n    cli.register(new ImportCmd(importerMain, community.getDocsDomain()), new FetchCmd(importerMain));\n    return importerMain;\n  }\n}\n\nImporterAspect.addRuntime(ImporterMain);\n"],"mappings":"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"}