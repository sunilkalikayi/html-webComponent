import { CLIMain } from '@teambit/cli';
import { DependencyResolverMain } from '@teambit/dependency-resolver';
import { Workspace } from '@teambit/workspace';
import type { CommunityMain } from '@teambit/community';
import { GraphMain } from '@teambit/graph';
import { ImportOptions, ImportResult } from './import-components';
export declare class ImporterMain {
    private workspace;
    private depResolver;
    private graph;
    constructor(workspace: Workspace, depResolver: DependencyResolverMain, graph: GraphMain);
    import(importOptions: ImportOptions, packageManagerArgs: string[]): Promise<ImportResult>;
    /**
     * @todo: combine with this.import()
     */
    importWithOptions(importOptions: ImportOptions): Promise<ImportResult>;
    fetch(ids: string[], lanes: boolean, components: boolean, fromOriginalScope: boolean): Promise<{
        importedIds: import("@teambit/legacy/dist/bit-id").BitId[];
        importDetails: import("./import-components").ImportDetails[];
    }>;
    private removeFromWorkspaceConfig;
    private getImportedPackagesNames;
    static slots: never[];
    static dependencies: import("@teambit/harmony").Aspect[];
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static provider([cli, workspace, depResolver, community, graph]: [
        CLIMain,
        Workspace,
        DependencyResolverMain,
        CommunityMain,
        GraphMain
    ]): Promise<ImporterMain>;
}
