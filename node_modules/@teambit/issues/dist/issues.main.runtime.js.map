{"version":3,"names":["IssuesMain","constructor","config","addComponentsIssuesSlot","getIssuesToIgnoreGlobally","issuesToIgnore","ignoreIssues","validateIssueNames","getIssuesToIgnorePerComponent","component","state","aspects","get","IssuesAspect","id","issues","allIssues","listIssues","map","issue","name","forEach","includes","NonExistIssueError","instances","Object","keys","IssuesClasses","issueClass","issuesList","IssuesList","getAllIssues","issueInstance","description","solution","isTagBlocker","removeIgnoredIssuesFromComponents","components","issuesToIgnoreGlobally","issuesToIgnoreForThisComp","issueToIgnore","delete","registerAddComponentsIssues","addComponentsIssues","register","triggerAddComponentIssues","allFunctions","values","pMapSeries","func","provider","cli","issuesMain","ComponentIssuesCmd","Slot","withType","CLIAspect","MainRuntime","addRuntime"],"sources":["issues.main.runtime.ts"],"sourcesContent":["import { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport { Component } from '@teambit/component';\nimport { IssuesClasses, IssuesList } from '@teambit/component-issues';\nimport { Slot, SlotRegistry } from '@teambit/harmony';\nimport pMapSeries from 'p-map-series';\nimport { ComponentIssuesCmd } from './issues-cmd';\nimport { IssuesAspect } from './issues.aspect';\nimport { NonExistIssueError } from './non-exist-issue-error';\n\nexport type IssuesConfig = {\n  ignoreIssues: string[];\n};\n\nexport type AddComponentsIssues = (components: Component[], issuesToIgnore: string[]) => Promise<void>;\n\nexport type AddComponentsIssuesSlot = SlotRegistry<AddComponentsIssues>;\n\nexport class IssuesMain {\n  constructor(private config: IssuesConfig, private addComponentsIssuesSlot: AddComponentsIssuesSlot) {}\n\n  getIssuesToIgnoreGlobally(): string[] {\n    const issuesToIgnore = this.config.ignoreIssues || [];\n    this.validateIssueNames(issuesToIgnore);\n    return issuesToIgnore;\n  }\n\n  getIssuesToIgnorePerComponent(component: Component): string[] {\n    const issuesToIgnore = component.state.aspects.get(IssuesAspect.id)?.config.ignoreIssues;\n    if (!issuesToIgnore) return [];\n    this.validateIssueNames(issuesToIgnore);\n    return issuesToIgnore;\n  }\n\n  private validateIssueNames(issues: string[]) {\n    const allIssues = this.listIssues().map((issue) => issue.name);\n    issues.forEach((issue) => {\n      if (!allIssues.includes(issue)) {\n        throw new NonExistIssueError(issue);\n      }\n    });\n  }\n\n  listIssues() {\n    const instances = Object.keys(IssuesClasses).map((issueClass) => new IssuesClasses[issueClass]());\n    const issuesList = new IssuesList(instances);\n    const allIssues = issuesList.getAllIssues();\n    return allIssues.map((issueInstance) => {\n      return {\n        name: issueInstance.constructor.name,\n        description: issueInstance.description,\n        solution: issueInstance.solution,\n        isTagBlocker: issueInstance.isTagBlocker,\n      };\n    });\n  }\n\n  removeIgnoredIssuesFromComponents(components: Component[]) {\n    const issuesToIgnoreGlobally = this.getIssuesToIgnoreGlobally();\n    components.forEach((component) => {\n      const issuesToIgnoreForThisComp = this.getIssuesToIgnorePerComponent(component);\n      const issuesToIgnore = [...issuesToIgnoreGlobally, ...issuesToIgnoreForThisComp];\n      issuesToIgnore.forEach((issueToIgnore) => {\n        component.state.issues.delete(IssuesClasses[issueToIgnore]);\n      });\n    });\n  }\n\n  /**\n   * register to this slot in order to add a component-issue in bit-status and bit-snap/tag.\n   * your function gets all components in one param and the issuesToIgnore as a second param, you don't need to check\n   * for issuesToIgnore. if the issue you added is configured to be ignored, it'll be ignored later in the process.\n   * this is useful for optimization, if you don't want to calculate the component issue when it's ignored.\n   */\n  registerAddComponentsIssues(addComponentsIssues: AddComponentsIssues) {\n    this.addComponentsIssuesSlot.register(addComponentsIssues);\n  }\n\n  async triggerAddComponentIssues(components: Component[], issuesToIgnore: string[]) {\n    const allFunctions = this.addComponentsIssuesSlot.values();\n    await pMapSeries(allFunctions, (func) => func(components, issuesToIgnore));\n  }\n\n  static slots = [Slot.withType<AddComponentsIssues>()];\n  static dependencies = [CLIAspect];\n  static defaultConfig = {\n    ignoreIssues: [],\n  };\n  static runtime = MainRuntime;\n  static async provider([cli]: [CLIMain], config: IssuesConfig, [addComponentsIssuesSlot]: [AddComponentsIssuesSlot]) {\n    const issuesMain = new IssuesMain(config, addComponentsIssuesSlot);\n    cli.register(new ComponentIssuesCmd(issuesMain));\n    return issuesMain;\n  }\n}\n\nIssuesAspect.addRuntime(IssuesMain);\n"],"mappings":"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"}