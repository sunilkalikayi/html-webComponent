import * as babel from '@babel/core';
import { BuildContext, BuiltTaskResult } from '@teambit/builder';
import { Compiler, CompilerMain, TranspileFileParams, TranspileFileOutput } from '@teambit/compiler';
import { Logger } from '@teambit/logger';
import { BabelCompilerOptions } from './compiler-options';
export declare class BabelCompiler implements Compiler {
    readonly id: string;
    private logger;
    private compiler;
    private options;
    private babelModule;
    distDir: string;
    distGlobPatterns: string[];
    shouldCopyNonSupportedFiles: boolean;
    artifactName: string;
    supportedFilesGlobPatterns: string[] | null;
    constructor(id: string, logger: Logger, compiler: CompilerMain, options: BabelCompilerOptions, babelModule?: typeof babel);
    displayName: string;
    deleteDistDir: boolean;
    version(): string;
    getDistDir(): string;
    /**
     * compile one file on the workspace
     */
    transpileFile(fileContent: string, options: TranspileFileParams): TranspileFileOutput;
    /**
     * compile multiple components on the capsules
     */
    build(context: BuildContext): Promise<BuiltTaskResult>;
    createTask(name?: string): import("@teambit/compiler/compiler.task").CompilerTask;
    private buildOneCapsule;
    getArtifactDefinition(): {
        generatedBy: string;
        name: string;
        globPatterns: string[];
    }[];
    /**
     * given a source file, return its parallel in the dists. e.g. index.ts => dist/index.js
     */
    getDistPathBySrcPath(srcPath: string): string;
    /**
     * whether babel is able to compile the given path
     */
    isFileSupported(filePath: string): boolean;
    displayConfig(): string;
    private replaceFileExtToJs;
}
