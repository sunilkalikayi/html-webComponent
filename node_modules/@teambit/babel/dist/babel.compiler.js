"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BabelCompiler = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function babel() {
  const data = _interopRequireWildcard(require("@babel/core"));
  babel = function () {
    return data;
  };
  return data;
}
function _multimatch() {
  const data = _interopRequireDefault(require("multimatch"));
  _multimatch = function () {
    return data;
  };
  return data;
}
function _lodash() {
  const data = require("lodash");
  _lodash = function () {
    return data;
  };
  return data;
}
function _pMapSeries() {
  const data = _interopRequireDefault(require("p-map-series"));
  _pMapSeries = function () {
    return data;
  };
  return data;
}
function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));
  _fsExtra = function () {
    return data;
  };
  return data;
}
function _path() {
  const data = _interopRequireDefault(require("path"));
  _path = function () {
    return data;
  };
  return data;
}
function _compilationModules() {
  const data = require("@teambit/compilation.modules.babel-compiler");
  _compilationModules = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
class BabelCompiler {
  constructor(id, logger, compiler, options, babelModule = babel()) {
    this.id = id;
    this.logger = logger;
    this.compiler = compiler;
    this.options = options;
    this.babelModule = babelModule;
    (0, _defineProperty2().default)(this, "distDir", void 0);
    (0, _defineProperty2().default)(this, "distGlobPatterns", void 0);
    (0, _defineProperty2().default)(this, "shouldCopyNonSupportedFiles", void 0);
    (0, _defineProperty2().default)(this, "artifactName", void 0);
    (0, _defineProperty2().default)(this, "supportedFilesGlobPatterns", void 0);
    (0, _defineProperty2().default)(this, "displayName", 'Babel');
    (0, _defineProperty2().default)(this, "deleteDistDir", false);
    this.distDir = options.distDir || 'dist';
    this.distGlobPatterns = options.distGlobPatterns || [`${this.distDir}/**`, `!${this.distDir}/tsconfig.tsbuildinfo`];
    this.shouldCopyNonSupportedFiles = typeof options.shouldCopyNonSupportedFiles === 'boolean' ? options.shouldCopyNonSupportedFiles : true;
    this.artifactName = options.artifactName || 'dist';
    this.supportedFilesGlobPatterns = options.supportedFilesGlobPatterns ? (0, _lodash().flatten)(options.supportedFilesGlobPatterns) : null;
  }
  version() {
    return this.babelModule.version;
  }
  getDistDir() {
    return this.distDir;
  }

  /**
   * compile one file on the workspace
   */
  transpileFile(fileContent, options) {
    const supportedExtensions = ['.ts', '.tsx', '.js', '.jsx'];
    const fileExtension = _path().default.extname(options.filePath);
    if (!supportedExtensions.includes(fileExtension) || options.filePath.endsWith('.d.ts')) {
      return null; // file is not supported
    }

    const transformOptions = this.options.babelTransformOptions || {};
    const context = {
      filePath: options.filePath,
      rootDir: options.componentDir
    };
    const outputFiles = (0, _compilationModules().transpileFileContent)(fileContent, context, transformOptions, this.babelModule);
    return outputFiles;
  }

  /**
   * compile multiple components on the capsules
   */
  async build(context) {
    const capsules = context.capsuleNetwork.seedersCapsules;
    const componentsResults = [];
    const longProcessLogger = this.logger.createLongProcessLogger('compile babel components', capsules.length);
    await (0, _pMapSeries().default)(capsules, async capsule => {
      const currentComponentResult = {
        errors: [],
        component: capsule.component
      };
      longProcessLogger.logProgress(capsule.component.id.toString());
      await this.buildOneCapsule(capsule, currentComponentResult);
      componentsResults.push(_objectSpread({}, currentComponentResult));
    });
    return {
      artifacts: this.getArtifactDefinition(),
      componentsResults
    };
  }
  createTask(name = 'BabelCompiler') {
    return this.compiler.createTask(name, this);
  }
  async buildOneCapsule(capsule, componentResult) {
    componentResult.startTime = Date.now();
    const sourceFiles = capsule.component.filesystem.files.map(file => file.relative);
    await _fsExtra().default.ensureDir(_path().default.join(capsule.path, this.distDir));
    await Promise.all(sourceFiles.map(async filePath => {
      if (this.isFileSupported(filePath)) {
        var _this$options;
        const absoluteFilePath = _path().default.join(capsule.path, filePath);
        (_this$options = this.options).babelTransformOptions || (_this$options.babelTransformOptions = {});
        this.options.babelTransformOptions.sourceFileName = _path().default.basename(filePath);
        this.options.babelTransformOptions.filename = _path().default.basename(filePath);
        try {
          const result = await (0, _compilationModules().transpileFilePathAsync)(absoluteFilePath, this.options.babelTransformOptions || {}, this.babelModule);
          if (!result || !result.length) {
            this.logger.debug(`getting an empty response from Babel for the file ${filePath}. it might be configured to be ignored`);
            return;
          }
          // Make sure to get only the relative path of the dist because we want to add the dist dir.
          // If we use the result outputPath we will get an absolute path here
          const distPath = this.replaceFileExtToJs(filePath);
          const distPathMap = `${distPath}.map`;
          await _fsExtra().default.outputFile(_path().default.join(capsule.path, this.distDir, distPath), result[0].outputText);
          if (result.length > 1) {
            await _fsExtra().default.outputFile(_path().default.join(capsule.path, this.distDir, distPathMap), result[1].outputText);
          }
        } catch (err) {
          var _componentResult$erro;
          (_componentResult$erro = componentResult.errors) === null || _componentResult$erro === void 0 ? void 0 : _componentResult$erro.push(err);
        }
      }
    }));
    componentResult.endTime = Date.now();
  }
  getArtifactDefinition() {
    return [{
      generatedBy: this.id,
      name: this.artifactName,
      globPatterns: this.distGlobPatterns
    }];
  }

  /**
   * given a source file, return its parallel in the dists. e.g. index.ts => dist/index.js
   */
  getDistPathBySrcPath(srcPath) {
    const fileWithJSExtIfNeeded = this.replaceFileExtToJs(srcPath);
    return _path().default.join(this.distDir, fileWithJSExtIfNeeded);
  }

  /**
   * whether babel is able to compile the given path
   */
  isFileSupported(filePath) {
    if (this.supportedFilesGlobPatterns) {
      return (0, _compilationModules().isFileSupported)(filePath) && !!(0, _multimatch().default)(filePath, this.supportedFilesGlobPatterns).length;
    }
    return (0, _compilationModules().isFileSupported)(filePath);
  }
  displayConfig() {
    return JSON.stringify(this.options.babelTransformOptions || {}, null, 2);
  }
  replaceFileExtToJs(filePath) {
    if (!this.isFileSupported(filePath)) return filePath;
    return (0, _compilationModules().replaceFileExtToJs)(filePath);
  }
}
exports.BabelCompiler = BabelCompiler;

//# sourceMappingURL=babel.compiler.js.map