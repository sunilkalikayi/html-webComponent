{"version":3,"names":["DiagnosticMain","constructor","diagnosticSlot","register","diagnostic","getDiagnosticData","slots","toArray","reduce","prev","cSlot","aspectId","reports","forEach","diag","diagnosticFn","push","getBitVersion","version","getHarmonyVersion","provider","express","graphql","config","diagnosticMain","DiagnosticRoute","DiagnosticGraphql","Slot","withType","ExpressAspect","GraphqlAspect","MainRuntime","DiagnosticAspect","addRuntime"],"sources":["diagnostic.main.runtime.ts"],"sourcesContent":["import { getHarmonyVersion } from '@teambit/legacy/dist/bootstrap';\n\nimport { Slot, SlotRegistry } from '@teambit/harmony';\nimport { MainRuntime } from '@teambit/cli';\nimport { ExpressAspect, ExpressMain } from '@teambit/express';\nimport GraphqlAspect, { GraphqlMain } from '@teambit/graphql';\nimport { DiagnosticAspect } from './diagnostic.aspect';\nimport { DiagnosticRoute } from './diagnostic.route';\nimport { DiagnosticGraphql } from './diagnostic.graphql';\nimport { Diagnostic } from './diagnostic';\n\nexport type DiagnosticSlot = SlotRegistry<Diagnostic[]>;\n\nexport class DiagnosticMain {\n  constructor(\n    /** the diagnostic entity slot */\n    private diagnosticSlot: DiagnosticSlot\n  ) {}\n  static slots = [Slot.withType<Diagnostic[]>()];\n  static dependencies = [ExpressAspect, GraphqlAspect];\n  static runtime = MainRuntime;\n\n  register(...diagnostic: Diagnostic[]) {\n    this.diagnosticSlot.register(diagnostic);\n  }\n\n  getDiagnosticData() {\n    const slots = this.diagnosticSlot.toArray();\n    return slots.reduce((prev, cSlot) => {\n      const [aspectId, diagnostic] = cSlot;\n      prev[aspectId] = { reports: [] };\n      diagnostic.forEach((diag) => {\n        const { diagnosticFn } = diag;\n        prev[aspectId].reports.push(diagnosticFn());\n      });\n      return prev;\n    }, {});\n  }\n\n  static getBitVersion() {\n    const version = getHarmonyVersion(true);\n    return { version };\n  }\n\n  static async provider(\n    [express, graphql]: [ExpressMain, GraphqlMain],\n    config: any,\n    [diagnosticSlot]: [DiagnosticSlot]\n  ) {\n    const diagnosticMain = new DiagnosticMain(diagnosticSlot);\n    diagnosticMain.register({ diagnosticFn: DiagnosticMain.getBitVersion });\n    express.register([new DiagnosticRoute(diagnosticMain)]);\n    graphql.register(new DiagnosticGraphql(diagnosticMain));\n    return diagnosticMain;\n  }\n}\n\nDiagnosticAspect.addRuntime(DiagnosticMain);\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAKO,MAAMA,cAAc,CAAC;EAC1BC,WAAW,EACT;EACQC,cAA8B,EACtC;IAAA,KADQA,cAA8B,GAA9BA,cAA8B;EACrC;EAKHC,QAAQ,CAAC,GAAGC,UAAwB,EAAE;IACpC,IAAI,CAACF,cAAc,CAACC,QAAQ,CAACC,UAAU,CAAC;EAC1C;EAEAC,iBAAiB,GAAG;IAClB,MAAMC,KAAK,GAAG,IAAI,CAACJ,cAAc,CAACK,OAAO,EAAE;IAC3C,OAAOD,KAAK,CAACE,MAAM,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;MACnC,MAAM,CAACC,QAAQ,EAAEP,UAAU,CAAC,GAAGM,KAAK;MACpCD,IAAI,CAACE,QAAQ,CAAC,GAAG;QAAEC,OAAO,EAAE;MAAG,CAAC;MAChCR,UAAU,CAACS,OAAO,CAAEC,IAAI,IAAK;QAC3B,MAAM;UAAEC;QAAa,CAAC,GAAGD,IAAI;QAC7BL,IAAI,CAACE,QAAQ,CAAC,CAACC,OAAO,CAACI,IAAI,CAACD,YAAY,EAAE,CAAC;MAC7C,CAAC,CAAC;MACF,OAAON,IAAI;IACb,CAAC,EAAE,CAAC,CAAC,CAAC;EACR;EAEA,OAAOQ,aAAa,GAAG;IACrB,MAAMC,OAAO,GAAG,IAAAC,8BAAiB,EAAC,IAAI,CAAC;IACvC,OAAO;MAAED;IAAQ,CAAC;EACpB;EAEA,aAAaE,QAAQ,CACnB,CAACC,OAAO,EAAEC,OAAO,CAA6B,EAC9CC,MAAW,EACX,CAACrB,cAAc,CAAmB,EAClC;IACA,MAAMsB,cAAc,GAAG,IAAIxB,cAAc,CAACE,cAAc,CAAC;IACzDsB,cAAc,CAACrB,QAAQ,CAAC;MAAEY,YAAY,EAAEf,cAAc,CAACiB;IAAc,CAAC,CAAC;IACvEI,OAAO,CAAClB,QAAQ,CAAC,CAAC,KAAIsB,8BAAe,EAACD,cAAc,CAAC,CAAC,CAAC;IACvDF,OAAO,CAACnB,QAAQ,CAAC,KAAIuB,gCAAiB,EAACF,cAAc,CAAC,CAAC;IACvD,OAAOA,cAAc;EACvB;AACF;AAAC;AAAA,gCA1CYxB,cAAc,WAKV,CAAC2B,eAAI,CAACC,QAAQ,EAAgB,CAAC;AAAA,gCALnC5B,cAAc,kBAMH,CAAC6B,wBAAa,EAAEC,kBAAa,CAAC;AAAA,gCANzC9B,cAAc,aAOR+B,kBAAW;AAqC9BC,8BAAgB,CAACC,UAAU,CAACjC,cAAc,CAAC"}