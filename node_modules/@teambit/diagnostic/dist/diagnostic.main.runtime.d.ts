import { SlotRegistry } from '@teambit/harmony';
import { ExpressMain } from '@teambit/express';
import { GraphqlMain } from '@teambit/graphql';
import { Diagnostic } from './diagnostic';
export declare type DiagnosticSlot = SlotRegistry<Diagnostic[]>;
export declare class DiagnosticMain {
    /** the diagnostic entity slot */
    private diagnosticSlot;
    constructor(
    /** the diagnostic entity slot */
    diagnosticSlot: DiagnosticSlot);
    static slots: ((registerFn: () => string) => SlotRegistry<Diagnostic[]>)[];
    static dependencies: import("@teambit/harmony").Aspect[];
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    register(...diagnostic: Diagnostic[]): void;
    getDiagnosticData(): {};
    static getBitVersion(): {
        version: any;
    };
    static provider([express, graphql]: [ExpressMain, GraphqlMain], config: any, [diagnosticSlot]: [DiagnosticSlot]): Promise<DiagnosticMain>;
}
