"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DiagnosticMain = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _bootstrap() {
  const data = require("@teambit/legacy/dist/bootstrap");
  _bootstrap = function () {
    return data;
  };
  return data;
}
function _harmony() {
  const data = require("@teambit/harmony");
  _harmony = function () {
    return data;
  };
  return data;
}
function _cli() {
  const data = require("@teambit/cli");
  _cli = function () {
    return data;
  };
  return data;
}
function _express() {
  const data = require("@teambit/express");
  _express = function () {
    return data;
  };
  return data;
}
function _graphql() {
  const data = _interopRequireDefault(require("@teambit/graphql"));
  _graphql = function () {
    return data;
  };
  return data;
}
function _diagnostic() {
  const data = require("./diagnostic.aspect");
  _diagnostic = function () {
    return data;
  };
  return data;
}
function _diagnostic2() {
  const data = require("./diagnostic.route");
  _diagnostic2 = function () {
    return data;
  };
  return data;
}
function _diagnostic3() {
  const data = require("./diagnostic.graphql");
  _diagnostic3 = function () {
    return data;
  };
  return data;
}
class DiagnosticMain {
  constructor( /** the diagnostic entity slot */
  diagnosticSlot) {
    this.diagnosticSlot = diagnosticSlot;
  }
  register(...diagnostic) {
    this.diagnosticSlot.register(diagnostic);
  }
  getDiagnosticData() {
    const slots = this.diagnosticSlot.toArray();
    return slots.reduce((prev, cSlot) => {
      const [aspectId, diagnostic] = cSlot;
      prev[aspectId] = {
        reports: []
      };
      diagnostic.forEach(diag => {
        const {
          diagnosticFn
        } = diag;
        prev[aspectId].reports.push(diagnosticFn());
      });
      return prev;
    }, {});
  }
  static getBitVersion() {
    const version = (0, _bootstrap().getHarmonyVersion)(true);
    return {
      version
    };
  }
  static async provider([express, graphql], config, [diagnosticSlot]) {
    const diagnosticMain = new DiagnosticMain(diagnosticSlot);
    diagnosticMain.register({
      diagnosticFn: DiagnosticMain.getBitVersion
    });
    express.register([new (_diagnostic2().DiagnosticRoute)(diagnosticMain)]);
    graphql.register(new (_diagnostic3().DiagnosticGraphql)(diagnosticMain));
    return diagnosticMain;
  }
}
exports.DiagnosticMain = DiagnosticMain;
(0, _defineProperty2().default)(DiagnosticMain, "slots", [_harmony().Slot.withType()]);
(0, _defineProperty2().default)(DiagnosticMain, "dependencies", [_express().ExpressAspect, _graphql().default]);
(0, _defineProperty2().default)(DiagnosticMain, "runtime", _cli().MainRuntime);
_diagnostic().DiagnosticAspect.addRuntime(DiagnosticMain);

//# sourceMappingURL=diagnostic.main.runtime.js.map