"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HtmlMain = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _mergeDeepLeft() {
  const data = _interopRequireDefault(require("ramda/src/mergeDeepLeft"));
  _mergeDeepLeft = function () {
    return data;
  };
  return data;
}
function _cli() {
  const data = require("@teambit/cli");
  _cli = function () {
    return data;
  };
  return data;
}
function _envs() {
  const data = require("@teambit/envs");
  _envs = function () {
    return data;
  };
  return data;
}
function _react() {
  const data = require("@teambit/react");
  _react = function () {
    return data;
  };
  return data;
}
function _generator() {
  const data = require("@teambit/generator");
  _generator = function () {
    return data;
  };
  return data;
}
function _htmlEnv() {
  const data = require("./templates/html-env");
  _htmlEnv = function () {
    return data;
  };
  return data;
}
function _htmlComponent() {
  const data = require("./templates/html-component");
  _htmlComponent = function () {
    return data;
  };
  return data;
}
function _html() {
  const data = require("./html.aspect");
  _html = function () {
    return data;
  };
  return data;
}
function _html2() {
  const data = require("./html.env");
  _html2 = function () {
    return data;
  };
  return data;
}
class HtmlMain {
  constructor(react, htmlEnv, envs) {
    this.react = react;
    this.htmlEnv = htmlEnv;
    this.envs = envs;
    (0, _defineProperty2().default)(this, "overrideTsConfig", this.react.overrideTsConfig.bind(this.react));
    (0, _defineProperty2().default)(this, "overrideJestConfig", this.react.overrideJestConfig.bind(this.react));
    (0, _defineProperty2().default)(this, "overrideBuildPipe", this.react.overrideBuildPipe.bind(this.react));
    (0, _defineProperty2().default)(this, "overrideCompiler", this.react.overrideCompiler.bind(this.react));
    (0, _defineProperty2().default)(this, "overrideCompilerTasks", this.react.overrideCompilerTasks.bind(this.react));
    (0, _defineProperty2().default)(this, "overrideBuildTsConfig", this.react.overrideBuildTsConfig.bind(this.react));
    (0, _defineProperty2().default)(this, "overridePackageJsonProps", this.react.overridePackageJsonProps.bind(this.react));
    (0, _defineProperty2().default)(this, "useTypescript", this.react.useTypescript.bind(this.react));
    (0, _defineProperty2().default)(this, "useWebpack", this.react.useWebpack.bind(this.react));
    (0, _defineProperty2().default)(this, "usePrettier", this.react.usePrettier.bind(this.react));
    (0, _defineProperty2().default)(this, "useEslint", this.react.useEslint.bind(this.react));
  }
  /**
   * override the dependency configuration of the component environment.
   */
  overrideDependencies(dependencyPolicy) {
    return this.envs.override({
      getDependencies: () => (0, _mergeDeepLeft().default)(dependencyPolicy, this.htmlEnv.getDependencies())
    });
  }

  /**
   * create a new composition of the html environment.
   */
  compose(transformers, targetEnv = {}) {
    return this.envs.compose(this.envs.merge(targetEnv, this.htmlEnv), transformers);
  }
  static async provider([envs, react, generator]) {
    const htmlEnv = envs.merge(new (_html2().HtmlEnv)(), react.reactEnv);
    envs.registerEnv(htmlEnv);
    generator.registerComponentTemplate([_htmlEnv().htmlEnvTemplate, _htmlComponent().htmlComponentTemplate, _htmlComponent().deprecatedHtmlComponentTemplate]);
    return new HtmlMain(react, htmlEnv, envs);
  }
}
exports.HtmlMain = HtmlMain;
(0, _defineProperty2().default)(HtmlMain, "slots", []);
(0, _defineProperty2().default)(HtmlMain, "dependencies", [_envs().EnvsAspect, _react().ReactAspect, _generator().GeneratorAspect]);
(0, _defineProperty2().default)(HtmlMain, "runtime", _cli().MainRuntime);
_html().HtmlAspect.addRuntime(HtmlMain);

//# sourceMappingURL=html.main.runtime.js.map