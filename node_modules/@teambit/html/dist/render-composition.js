"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RenderHtmlComposition = void 0;
function _htmlModules() {
  const data = require("@teambit/html.modules.render-template");
  _htmlModules = function () {
    return data;
  };
  return data;
}
/**
 * this mounts compositions into the DOM in the component preview.
 * this function can be overridden through ReactAspect.overrideCompositionsMounter() API
 * to apply custom logic for component DOM mounting.
 */
const RenderHtmlComposition = (target, composition) => {
  if (!target) return undefined;

  // first clear the root node from any previous compositions. Required as all compositions
  // of a specific component are rendered in the same iframe
  target.innerHTML = '';
  if (composition instanceof Element || composition instanceof HTMLDocument) {
    target.appendChild(composition);
    return undefined;
  }
  switch (typeof composition) {
    case 'function':
      composition(target);
      return undefined;
    case 'string':
      (0, _htmlModules().renderTemplate)(target, composition);
      return undefined;
    default:
      return undefined;
    // TODO error "this type of composition is not supported by the html env"
  }
};
exports.RenderHtmlComposition = RenderHtmlComposition;

//# sourceMappingURL=render-composition.js.map