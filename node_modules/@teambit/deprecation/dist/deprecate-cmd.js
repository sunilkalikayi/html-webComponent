"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DeprecateCmd = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
class DeprecateCmd {
  constructor(deprecation, workspace) {
    this.deprecation = deprecation;
    this.workspace = workspace;
    (0, _defineProperty2().default)(this, "name", 'deprecate <component-name>');
    (0, _defineProperty2().default)(this, "arguments", [{
      name: 'component-name',
      description: 'component name or component id'
    }]);
    (0, _defineProperty2().default)(this, "description", 'deprecate a component');
    (0, _defineProperty2().default)(this, "group", 'collaborate');
    (0, _defineProperty2().default)(this, "skipWorkspace", true);
    (0, _defineProperty2().default)(this, "alias", 'd');
    (0, _defineProperty2().default)(this, "options", [['', 'new-id <string>', 'if replaced by another component, enter the new component id']]);
    (0, _defineProperty2().default)(this, "loader", true);
    (0, _defineProperty2().default)(this, "migration", true);
    (0, _defineProperty2().default)(this, "remoteOp", true);
  }
  async report([id], {
    newId
  }) {
    const result = await this.deprecate(id, newId);
    if (result) {
      return _chalk().default.green(`the component "${id}" has been deprecated successfully`);
    }
    return _chalk().default.bold(`the component "${id}" is already deprecated. no changes have been made`);
  }
  async deprecate(id, newId) {
    const componentId = await this.workspace.resolveComponentId(id);
    const newComponentId = newId ? await this.workspace.resolveComponentId(newId) : undefined;
    return this.deprecation.deprecate(componentId, newComponentId);
  }
}
exports.DeprecateCmd = DeprecateCmd;

//# sourceMappingURL=deprecate-cmd.js.map