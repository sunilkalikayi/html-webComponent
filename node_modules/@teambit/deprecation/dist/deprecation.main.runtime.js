"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DeprecationMain = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _cli() {
  const data = require("@teambit/cli");
  _cli = function () {
    return data;
  };
  return data;
}
function _component() {
  const data = require("@teambit/component");
  _component = function () {
    return data;
  };
  return data;
}
function _scope() {
  const data = require("@teambit/scope");
  _scope = function () {
    return data;
  };
  return data;
}
function _workspace() {
  const data = _interopRequireDefault(require("@teambit/workspace"));
  _workspace = function () {
    return data;
  };
  return data;
}
function _graphql() {
  const data = require("@teambit/graphql");
  _graphql = function () {
    return data;
  };
  return data;
}
function _deprecation() {
  const data = require("./deprecation.aspect");
  _deprecation = function () {
    return data;
  };
  return data;
}
function _deprecation2() {
  const data = require("./deprecation.graphql");
  _deprecation2 = function () {
    return data;
  };
  return data;
}
function _deprecation3() {
  const data = require("./deprecation.fragment");
  _deprecation3 = function () {
    return data;
  };
  return data;
}
function _deprecateCmd() {
  const data = require("./deprecate-cmd");
  _deprecateCmd = function () {
    return data;
  };
  return data;
}
function _undeprecateCmd() {
  const data = require("./undeprecate-cmd");
  _undeprecateCmd = function () {
    return data;
  };
  return data;
}
class DeprecationMain {
  constructor(scope, workspace) {
    this.scope = scope;
    this.workspace = workspace;
  }
  async getDeprecationInfo(component) {
    var _component$config$ext;
    const data = (_component$config$ext = component.config.extensions.findExtension(_deprecation().DeprecationAspect.id)) === null || _component$config$ext === void 0 ? void 0 : _component$config$ext.config;
    const deprecatedBackwardCompatibility = component.state._consumer.deprecated;
    const isDeprecate = Boolean((data === null || data === void 0 ? void 0 : data.deprecate) || deprecatedBackwardCompatibility);
    const newId = data !== null && data !== void 0 && data.newId ? _component().ComponentID.fromObject(data === null || data === void 0 ? void 0 : data.newId).toString() : undefined;
    return {
      isDeprecate,
      newId
    };
  }

  /**
   * mark a component as deprecated. after this change, the component will be modified.
   * tag and export the component to have it deprecated on the remote.
   *
   * @param componentId
   * @param newId
   * @returns boolean whether or not the component has been deprecated
   */
  async deprecate(componentId, newId) {
    const results = this.workspace.bitMap.addComponentConfig(componentId, _deprecation().DeprecationAspect.id, {
      deprecate: true,
      newId: newId === null || newId === void 0 ? void 0 : newId.toObject()
    });
    await this.workspace.bitMap.write();
    return results;
  }
  async unDeprecate(componentId) {
    const results = this.workspace.bitMap.addComponentConfig(componentId, _deprecation().DeprecationAspect.id, {
      deprecate: false,
      newId: ''
    });
    await this.workspace.bitMap.write();
    return results;
  }
  static async provider([graphql, scope, componentAspect, workspace, cli]) {
    const deprecation = new DeprecationMain(scope, workspace);
    cli.register(new (_deprecateCmd().DeprecateCmd)(deprecation, workspace), new (_undeprecateCmd().UndeprecateCmd)(deprecation, workspace));
    componentAspect.registerShowFragments([new (_deprecation3().DeprecationFragment)(deprecation)]);
    graphql.register((0, _deprecation2().deprecationSchema)(deprecation));
    return deprecation;
  }
}
exports.DeprecationMain = DeprecationMain;
(0, _defineProperty2().default)(DeprecationMain, "runtime", _cli().MainRuntime);
(0, _defineProperty2().default)(DeprecationMain, "dependencies", [_graphql().GraphqlAspect, _scope().ScopeAspect, _component().ComponentAspect, _workspace().default, _cli().CLIAspect]);
_deprecation().DeprecationAspect.addRuntime(DeprecationMain);

//# sourceMappingURL=deprecation.main.runtime.js.map