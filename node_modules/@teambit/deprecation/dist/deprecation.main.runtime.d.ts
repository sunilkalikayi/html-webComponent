import { CLIMain } from '@teambit/cli';
import { ComponentMain, Component, ComponentID } from '@teambit/component';
import { ScopeMain } from '@teambit/scope';
import { Workspace } from '@teambit/workspace';
import { GraphqlMain } from '@teambit/graphql';
import { ComponentIdObj } from '@teambit/component-id';
export declare type DeprecationInfo = {
    isDeprecate: boolean;
    newId?: string;
};
export declare type DeprecationMetadata = {
    deprecate?: boolean;
    newId?: ComponentIdObj;
};
export declare class DeprecationMain {
    private scope;
    private workspace;
    constructor(scope: ScopeMain, workspace: Workspace);
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static dependencies: import("@teambit/harmony").Aspect[];
    getDeprecationInfo(component: Component): Promise<DeprecationInfo>;
    /**
     * mark a component as deprecated. after this change, the component will be modified.
     * tag and export the component to have it deprecated on the remote.
     *
     * @param componentId
     * @param newId
     * @returns boolean whether or not the component has been deprecated
     */
    deprecate(componentId: ComponentID, newId?: ComponentID): Promise<boolean>;
    unDeprecate(componentId: ComponentID): Promise<boolean>;
    static provider([graphql, scope, componentAspect, workspace, cli]: [
        GraphqlMain,
        ScopeMain,
        ComponentMain,
        Workspace,
        CLIMain
    ]): Promise<DeprecationMain>;
}
