"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MDXMain = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _babel() {
  const data = require("@teambit/babel");
  _babel = function () {
    return data;
  };
  return data;
}
function _cli() {
  const data = require("@teambit/cli");
  _cli = function () {
    return data;
  };
  return data;
}
function _compiler() {
  const data = require("@teambit/compiler");
  _compiler = function () {
    return data;
  };
  return data;
}
function _dependencyResolver() {
  const data = require("@teambit/dependency-resolver");
  _dependencyResolver = function () {
    return data;
  };
  return data;
}
function _docs() {
  const data = _interopRequireDefault(require("@teambit/docs"));
  _docs = function () {
    return data;
  };
  return data;
}
function _envs() {
  const data = require("@teambit/envs");
  _envs = function () {
    return data;
  };
  return data;
}
function _multiCompiler() {
  const data = _interopRequireDefault(require("@teambit/multi-compiler"));
  _multiCompiler = function () {
    return data;
  };
  return data;
}
function _react() {
  const data = _interopRequireDefault(require("@teambit/react"));
  _react = function () {
    return data;
  };
  return data;
}
function _generator() {
  const data = require("@teambit/generator");
  _generator = function () {
    return data;
  };
  return data;
}
function _mdx() {
  const data = require("./mdx.aspect");
  _mdx = function () {
    return data;
  };
  return data;
}
function _mdx2() {
  const data = require("./mdx.compiler");
  _mdx2 = function () {
    return data;
  };
  return data;
}
function _mdx3() {
  const data = require("./mdx.detector");
  _mdx3 = function () {
    return data;
  };
  return data;
}
function _mdx4() {
  const data = require("./mdx.doc-reader");
  _mdx4 = function () {
    return data;
  };
  return data;
}
function _mdx5() {
  const data = require("./mdx.templates");
  _mdx5 = function () {
    return data;
  };
  return data;
}
function _babel2() {
  const data = require("./babel/babel.config");
  _babel2 = function () {
    return data;
  };
  return data;
}
class MDXMain {
  constructor() {
    (0, _defineProperty2().default)(this, "_mdxEnv", void 0);
  }
  icon() {
    return 'https://static.bit.dev/extensions-icons/mdx-icon-small.svg';
  }

  /**
   * create an instance of the MDX compiler.
   */
  createCompiler(opts = {}) {
    const mdxCompiler = new (_mdx2().MDXCompiler)(_mdx().MDXAspect.id, opts);
    return mdxCompiler;
  }
  get mdxEnv() {
    return this._mdxEnv;
  }
  set mdxEnv(value) {
    this._mdxEnv = value;
  }
  static async provider([docs, depResolver, react, envs, multiCompiler, babel, compiler, generator], config) {
    const mdx = new MDXMain();
    const tsTransformer = tsconfig => {
      // set the shouldCopyNonSupportedFiles to false since we don't want ts to copy the .mdx file to the dist folder (it will conflict with the .mdx.js file created by the mdx compiler)
      tsconfig.setCompileJs(false).setCompileJsx(false).setShouldCopyNonSupportedFiles(false);
      return tsconfig;
    };
    const tsCompiler = react.env.getCompiler([tsTransformer]);
    const mdxCompiler = multiCompiler.createCompiler([
    // set the shouldCopyNonSupportedFiles to false since we don't want babel to copy the .mdx file to the dist folder (it will conflict with the .mdx.js file created by the mdx compiler)
    babel.createCompiler({
      babelTransformOptions: _babel2().babelConfig,
      shouldCopyNonSupportedFiles: false
    }), mdx.createCompiler({
      ignoredPatterns: docs.getPatterns(),
      babelTransformOptions: _babel2().babelConfig
    }), tsCompiler], {});
    const mdxEnv = envs.compose(react.reactEnv, [react.overrideCompiler(mdxCompiler), react.overrideDependencies({
      dependencies: {
        '@teambit/mdx.ui.mdx-scope-context': '0.0.368',
        '@mdx-js/react': '1.6.22'
      }
    }), react.overrideCompilerTasks([compiler.createTask('MDXCompiler', mdxCompiler)]), envs.override({
      __getDescriptor: async () => {
        return {
          type: 'mdx'
        };
      }
    })]);
    envs.registerEnv(mdxEnv);
    depResolver.registerDetector(new (_mdx3().MDXDependencyDetector)(config.extensions));
    docs.registerDocReader(new (_mdx4().MDXDocReader)(config.extensions));
    generator.registerComponentTemplate(_mdx5().componentTemplates);
    mdx.mdxEnv = mdxEnv;
    return mdx;
  }
}
exports.MDXMain = MDXMain;
(0, _defineProperty2().default)(MDXMain, "runtime", _cli().MainRuntime);
(0, _defineProperty2().default)(MDXMain, "dependencies", [_docs().default, _dependencyResolver().DependencyResolverAspect, _react().default, _envs().EnvsAspect, _multiCompiler().default, _babel().BabelAspect, _compiler().CompilerAspect, _generator().GeneratorAspect]);
(0, _defineProperty2().default)(MDXMain, "defaultConfig", {
  extensions: ['.md', '.mdx']
});
_mdx().MDXAspect.addRuntime(MDXMain);

//# sourceMappingURL=mdx.main.runtime.js.map