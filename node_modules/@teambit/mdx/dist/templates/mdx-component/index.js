"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deprecatedMDXComponent = exports.MDXComponent = void 0;
function _component() {
  const data = require("./files/component");
  _component = function () {
    return data;
  };
  return data;
}
function _composition() {
  const data = require("./files/composition");
  _composition = function () {
    return data;
  };
  return data;
}
function _docs() {
  const data = require("./files/docs");
  _docs = function () {
    return data;
  };
  return data;
}
// TODO @ranm8 Tests won't work in MDX until we add a Jest Transformer for the MDX env.
// import { testFile } from './files/test';

const MDXComponent = {
  name: 'mdx',
  description: 'MDX-file compiled by Bit to a reuseable component',
  generateFiles: context => {
    const {
      name,
      namePascalCase: Name
    } = context;
    const indexFile = {
      relativePath: 'index.ts',
      content: `export { default as ${Name}, default } from './${name}.mdx';
`
    };
    return [indexFile, (0, _component().componentFile)(context), (0, _composition().compositionFile)(context), (0, _docs().docsFile)(context)];
  },
  config: {
    'teambit.mdx/mdx': {},
    'teambit.envs/envs': {
      env: 'teambit.mdx/mdx'
    }
  }
};
exports.MDXComponent = MDXComponent;
const deprecatedMDXComponent = {
  name: 'mdx-component',
  description: 'MDX-file compiled by Bit to a reuseable component',
  hidden: true,
  generateFiles: context => {
    const {
      name,
      namePascalCase: Name
    } = context;
    const indexFile = {
      relativePath: 'index.ts',
      content: `export { default as ${Name} } from './${name}.mdx';
`
    };
    return [indexFile, (0, _component().componentFile)(context), (0, _composition().compositionFile)(context), (0, _docs().docsFile)(context)];
  },
  config: {
    'teambit.mdx/mdx': {},
    'teambit.envs/envs': {
      env: 'teambit.mdx/mdx'
    }
  }
};
exports.deprecatedMDXComponent = deprecatedMDXComponent;

//# sourceMappingURL=index.js.map