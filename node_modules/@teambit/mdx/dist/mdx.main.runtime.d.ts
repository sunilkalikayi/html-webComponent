import { BabelMain } from '@teambit/babel';
import { CompilerMain } from '@teambit/compiler';
import { DependencyResolverMain } from '@teambit/dependency-resolver';
import { DocsMain } from '@teambit/docs';
import { EnvsMain } from '@teambit/envs';
import { MultiCompilerMain } from '@teambit/multi-compiler';
import { ReactEnv, ReactMain } from '@teambit/react';
import { GeneratorMain } from '@teambit/generator';
import { MDXCompiler, MDXCompilerOpts } from './mdx.compiler';
export declare type MDXConfig = {
    /**
     * list of file extensions to consider as MDX files.
     */
    extensions: string[];
};
export declare class MDXMain {
    icon(): string;
    /**
     * create an instance of the MDX compiler.
     */
    createCompiler(opts?: MDXCompilerOpts): MDXCompiler;
    _mdxEnv: ReactEnv;
    get mdxEnv(): ReactEnv;
    private set mdxEnv(value);
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static dependencies: import("@teambit/harmony").Aspect[];
    static defaultConfig: {
        extensions: string[];
    };
    static provider([docs, depResolver, react, envs, multiCompiler, babel, compiler, generator]: [
        DocsMain,
        DependencyResolverMain,
        ReactMain,
        EnvsMain,
        MultiCompilerMain,
        BabelMain,
        CompilerMain,
        GeneratorMain
    ], config: MDXConfig): Promise<MDXMain>;
}
