import { Compiler, TranspileFileOutput, TranspileFileParams } from '@teambit/compiler';
import { BuiltTaskResult, BuildContext } from '@teambit/builder';
import type { TransformOptions } from '@babel/core';
export declare type MDXCompilerOpts = {
    ignoredExtensions?: string[];
    ignoredPatterns?: string[];
    babelTransformOptions?: TransformOptions;
};
export declare class MDXCompiler implements Compiler {
    readonly id: string;
    readonly config: MDXCompilerOpts;
    displayName: string;
    shouldCopyNonSupportedFiles: boolean;
    distDir: string;
    constructor(id: string, config: MDXCompilerOpts);
    displayConfig(): string;
    getDistDir(): string;
    transpileFile(fileContent: string, options: TranspileFileParams): TranspileFileOutput;
    /**
     * compile components inside isolated capsules. this being used during tag for the release.
     * meaning, the final package of the component has the dists generated by this method.
     */
    build(context: BuildContext): Promise<BuiltTaskResult>;
    /**
     * given a source file, return its parallel in the dists. e.g. "index.ts" => "dist/index.js"
     * both, the return path and the given path are relative paths.
     */
    getDistPathBySrcPath(srcPath: string): string;
    private replaceFileExtToJs;
    /**
     * only supported files matching get compiled. others, are copied to the dist dir.
     */
    isFileSupported(filePath: string): boolean;
    /**
     * returns the version of the current compiler instance (e.g. '4.0.1').
     */
    version(): string;
}
