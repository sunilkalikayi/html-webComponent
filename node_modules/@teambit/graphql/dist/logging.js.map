{"version":3,"names":["logError","graphQLErrors","networkError","operation","forEach","message","locations","path","console","error","operationName"],"sources":["logging.ts"],"sourcesContent":["import { ErrorResponse } from '@apollo/client/link/error';\n\nexport function logError({ graphQLErrors, networkError, operation }: ErrorResponse) {\n  if (graphQLErrors)\n    graphQLErrors.forEach(({ message, locations, path }) =>\n      // eslint-disable-next-line no-console\n      console.error(`[gql] error on \"${operation.operationName}\" - \"${message}\"`, locations, path)\n    );\n\n  // eslint-disable-next-line no-console\n  if (networkError) console.error('[gql] network error', `\"${operation.operationName}\"`, networkError);\n}\n\n// // // a fetch monkey patch with logs. useful to debug gql\n// function loggingCrossFetch(...p: Parameters<typeof fetch>) {\n//   const [url, init] = p;\n//   const headers = init?.headers;\n//   const body = init?.body;\n\n//   console.debug('[gql]', 'fetching', url, body, { headers });\n//   const promise = crossFetch(...p);\n//   promise\n//     .then((result) => console.debug('[gql]', 'finished', result))\n//     .catch((err) => console.debug('[gql]', 'error', err));\n//   return promise;\n// }\n"],"mappings":";;;;;;AAEO,SAASA,QAAQ,CAAC;EAAEC,aAAa;EAAEC,YAAY;EAAEC;AAAyB,CAAC,EAAE;EAClF,IAAIF,aAAa,EACfA,aAAa,CAACG,OAAO,CAAC,CAAC;IAAEC,OAAO;IAAEC,SAAS;IAAEC;EAAK,CAAC;EACjD;EACAC,OAAO,CAACC,KAAK,CAAE,mBAAkBN,SAAS,CAACO,aAAc,QAAOL,OAAQ,GAAE,EAAEC,SAAS,EAAEC,IAAI,CAAC,CAC7F;;EAEH;EACA,IAAIL,YAAY,EAAEM,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAG,IAAGN,SAAS,CAACO,aAAc,GAAE,EAAER,YAAY,CAAC;AACtG;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA"}