import { ReactNode } from 'react';
import { ApolloClient } from '@apollo/client';
import type { NormalizedCacheObject } from '@apollo/client';
import { GraphqlRenderPlugins } from './render-lifecycle';
/**
 * Type of gql client.
 * Used to abstract Apollo client, so consumers could import the type from graphql.ui, and not have to depend on @apollo/client directly
 * */
export declare type GraphQLClient<T> = ApolloClient<T>;
declare type ClientOptions = {
    /** Preset in-memory cache with state (e.g. continue state from SSR) */
    state?: NormalizedCacheObject;
    /** endpoint for websocket connections */
    subscriptionUri?: string;
};
export declare class GraphqlUI {
    createClient(uri: string, { state, subscriptionUri }?: ClientOptions): ApolloClient<NormalizedCacheObject>;
    createSsrClient({ serverUrl, headers }: {
        serverUrl: string;
        headers: any;
    }): ApolloClient<NormalizedCacheObject>;
    private createCache;
    private createLink;
    /**
     * get the graphQL provider
     */
    getProvider: ({ client, children }: {
        client: GraphQLClient<any>;
        children: ReactNode;
    }) => JSX.Element;
    readonly renderPlugins: GraphqlRenderPlugins;
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static dependencies: never[];
    static slots: never[];
    static provider(): Promise<GraphqlUI>;
}
export {};
