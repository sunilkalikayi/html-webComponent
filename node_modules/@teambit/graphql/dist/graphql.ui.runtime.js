"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GraphqlUI = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _react() {
  const data = _interopRequireDefault(require("react"));
  _react = function () {
    return data;
  };
  return data;
}
function _ui() {
  const data = require("@teambit/ui");
  _ui = function () {
    return data;
  };
  return data;
}
function _client() {
  const data = require("@apollo/client");
  _client = function () {
    return data;
  };
  return data;
}
function _ws() {
  const data = require("@apollo/client/link/ws");
  _ws = function () {
    return data;
  };
  return data;
}
function _error() {
  const data = require("@apollo/client/link/error");
  _error = function () {
    return data;
  };
  return data;
}
function _crossFetch() {
  const data = _interopRequireDefault(require("cross-fetch"));
  _crossFetch = function () {
    return data;
  };
  return data;
}
function _createLink() {
  const data = require("./create-link");
  _createLink = function () {
    return data;
  };
  return data;
}
function _graphqlProvider() {
  const data = require("./graphql-provider");
  _graphqlProvider = function () {
    return data;
  };
  return data;
}
function _graphql() {
  const data = require("./graphql.aspect");
  _graphql = function () {
    return data;
  };
  return data;
}
function _renderLifecycle() {
  const data = require("./render-lifecycle");
  _renderLifecycle = function () {
    return data;
  };
  return data;
}
function _logging() {
  const data = require("./logging");
  _logging = function () {
    return data;
  };
  return data;
}
class GraphqlUI {
  constructor() {
    (0, _defineProperty2().default)(this, "getProvider", ({
      client,
      children
    }) => {
      return /*#__PURE__*/_react().default.createElement(_graphqlProvider().GraphQLProvider, {
        client: client
      }, children);
    });
    (0, _defineProperty2().default)(this, "renderPlugins", new (_renderLifecycle().GraphqlRenderPlugins)(this));
  }
  createClient(uri, {
    state,
    subscriptionUri
  } = {}) {
    const client = new (_client().ApolloClient)({
      link: this.createLink(uri, {
        subscriptionUri
      }),
      cache: this.createCache({
        state
      })
    });
    return client;
  }
  createSsrClient({
    serverUrl,
    headers
  }) {
    const link = _client().ApolloLink.from([(0, _error().onError)(_logging().logError), (0, _client().createHttpLink)({
      credentials: 'include',
      uri: serverUrl,
      headers,
      fetch: _crossFetch().default
    })]);
    const client = new (_client().ApolloClient)({
      ssrMode: true,
      link,
      cache: this.createCache()
    });
    return client;
  }
  createCache({
    state
  } = {}) {
    const cache = new (_client().InMemoryCache)();
    if (state) cache.restore(state);
    return cache;
  }
  createLink(uri, {
    subscriptionUri
  } = {}) {
    const httpLink = new (_client().HttpLink)({
      credentials: 'include',
      uri
    });
    const subsLink = subscriptionUri ? new (_ws().WebSocketLink)({
      uri: subscriptionUri,
      options: {
        reconnect: true
      }
    }) : undefined;
    const hybridLink = subsLink ? (0, _createLink().createSplitLink)(httpLink, subsLink) : httpLink;
    const errorLogger = (0, _error().onError)(_logging().logError);
    return _client().ApolloLink.from([errorLogger, hybridLink]);
  }

  /**
   * get the graphQL provider
   */

  static async provider() {
    const graphqlUI = new GraphqlUI();
    return graphqlUI;
  }
}
exports.GraphqlUI = GraphqlUI;
(0, _defineProperty2().default)(GraphqlUI, "runtime", _ui().UIRuntime);
(0, _defineProperty2().default)(GraphqlUI, "dependencies", []);
(0, _defineProperty2().default)(GraphqlUI, "slots", []);
_graphql().GraphqlAspect.addRuntime(GraphqlUI);

//# sourceMappingURL=graphql.ui.runtime.js.map