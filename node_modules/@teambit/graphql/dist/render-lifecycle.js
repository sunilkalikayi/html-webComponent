"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GraphqlRenderPlugins = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _react() {
  const data = _interopRequireDefault(require("react"));
  _react = function () {
    return data;
  };
  return data;
}
function _ssr() {
  const data = require("@apollo/client/react/ssr");
  _ssr = function () {
    return data;
  };
  return data;
}
function _server() {
  const data = _interopRequireDefault(require("react-dom/server"));
  _server = function () {
    return data;
  };
  return data;
}
function _lodash() {
  const data = _interopRequireDefault(require("lodash.pick"));
  _lodash = function () {
    return data;
  };
  return data;
}
function _uiFoundationUi() {
  const data = require("@teambit/ui-foundation.ui.is-browser");
  _uiFoundationUi = function () {
    return data;
  };
  return data;
}
function _graphqlProvider() {
  const data = require("./graphql-provider");
  _graphqlProvider = function () {
    return data;
  };
  return data;
}
function _graphql() {
  const data = require("./graphql.aspect");
  _graphql = function () {
    return data;
  };
  return data;
}
// Calling getMarkupFromTree instead of getDataFromTree so we can control the render function
// This is required since upgrade to @apollo/client v3.6.9 because otherwise the ssr is not working since
// webpack is not bundling the react-dom/server

const ALLOWED_HEADERS = ['cookie'];
class GraphqlRenderPlugins {
  constructor(graphqlUI) {
    this.graphqlUI = graphqlUI;
    (0, _defineProperty2().default)(this, "key", _graphql().GraphqlAspect.id);
    (0, _defineProperty2().default)(this, "serverInit", ({
      browser
    }) => {
      const port = (browser === null || browser === void 0 ? void 0 : browser.location.port) || 3000;
      const serverUrl = `http://localhost:${port}/graphql`;
      const client = this.graphqlUI.createSsrClient({
        serverUrl,
        headers: (0, _lodash().default)(browser === null || browser === void 0 ? void 0 : browser.headers, ALLOWED_HEADERS)
      });
      const ctx = {
        client
      };
      return ctx;
    });
    (0, _defineProperty2().default)(this, "onBeforeRender", async (ctx, app) => {
      await (0, _ssr().getMarkupFromTree)({
        tree: app,
        renderFunction: _server().default.renderToStaticMarkup
      });
    });
    (0, _defineProperty2().default)(this, "serialize", ctx => {
      const client = ctx === null || ctx === void 0 ? void 0 : ctx.client;
      if (!client) return undefined;
      return {
        json: JSON.stringify(client.extract())
      };
    });
    (0, _defineProperty2().default)(this, "deserialize", raw => {
      if (!raw) return {
        state: undefined
      };
      let state;
      try {
        state = JSON.parse(raw);
      } catch (e) {
        // eslint-disable-next-line no-console
        console.error('[GraphQL] failed deserializing state from DOM', e);
      }
      return {
        state
      };
    });
    (0, _defineProperty2().default)(this, "_client", undefined);
    (0, _defineProperty2().default)(this, "browserInit", ({
      state
    } = {}) => {
      const {
        location
      } = window;
      const isInsecure = location.protocol === 'http:';
      const wsUrl = `${isInsecure ? 'ws:' : 'wss:'}//${location.host}/subscriptions`;
      const client = this.graphqlUI.createClient('/graphql', {
        state,
        subscriptionUri: wsUrl
      });
      this._client = client;
      return {
        client
      };
    });
    (0, _defineProperty2().default)(this, "BrowserGqlProvider", ({
      renderCtx,
      children
    }) => {
      if (!(renderCtx !== null && renderCtx !== void 0 && renderCtx.client)) throw new TypeError('GQL client is not initialized, make sure `.browserInit()` executes');
      return /*#__PURE__*/_react().default.createElement(this.graphqlUI.getProvider, {
        client: renderCtx === null || renderCtx === void 0 ? void 0 : renderCtx.client
      }, children);
    });
    (0, _defineProperty2().default)(this, "reactContext", _uiFoundationUi().isBrowser ? this.BrowserGqlProvider : ServerGqlProvider);
  }
  getClient() {
    if (!this._client) return this.browserInit().client;
    return this._client;
  }
}
exports.GraphqlRenderPlugins = GraphqlRenderPlugins;
function ServerGqlProvider({
  renderCtx,
  children
}) {
  if (!(renderCtx !== null && renderCtx !== void 0 && renderCtx.client)) throw new TypeError('GQL client has not been initialized during SSR, make sure `.serverInit()` executes');
  const {
    client
  } = renderCtx;
  return /*#__PURE__*/_react().default.createElement(_graphqlProvider().GraphQLProvider, {
    client: client
  }, children);
}

//# sourceMappingURL=render-lifecycle.js.map