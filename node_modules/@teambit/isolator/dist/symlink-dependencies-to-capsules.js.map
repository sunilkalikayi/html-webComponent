{"version":3,"names":["symlinkDependenciesToCapsules","capsules","capsuleList","logger","debug","length","Promise","all","map","capsule","symlinkComponent","component","state","_consumer","symlinkOnCapsuleRoot","capsuleRoot","modulesPath","path","join","symlinks","packageName","componentIdToPackageName","dest","src","relative","resolve","Symlink","id","_legacy","symlink","write","componentCapsule","getCapsuleIgnoreScopeAndVersion","ComponentID","Error","toString","allDeps","getAllDependenciesIds","depId","devCapsule","toStringWithoutVersion","devCapsulePath"],"sources":["symlink-dependencies-to-capsules.ts"],"sourcesContent":["import { ComponentID } from '@teambit/component';\nimport { Logger } from '@teambit/logger';\nimport { BitId } from '@teambit/legacy-bit-id';\nimport ConsumerComponent from '@teambit/legacy/dist/consumer/component';\nimport Symlink from '@teambit/legacy/dist/links/symlink';\nimport componentIdToPackageName from '@teambit/legacy/dist/utils/bit/component-id-to-package-name';\nimport path from 'path';\n\nimport { Capsule } from './capsule';\nimport CapsuleList from './capsule-list';\n\nexport async function symlinkDependenciesToCapsules(capsules: Capsule[], capsuleList: CapsuleList, logger: Logger) {\n  logger.debug(`symlinkDependenciesToCapsules, ${capsules.length} capsules`);\n  await Promise.all(\n    capsules.map((capsule) => {\n      return symlinkComponent(capsule.component.state._consumer, capsuleList, logger);\n    })\n  );\n}\n\nexport async function symlinkOnCapsuleRoot(capsuleList: CapsuleList, logger: Logger, capsuleRoot: string) {\n  const modulesPath = path.join(capsuleRoot, 'node_modules');\n  const symlinks = capsuleList.map((capsule) => {\n    const packageName = componentIdToPackageName(capsule.component.state._consumer);\n    const dest = path.join(modulesPath, packageName);\n    const src = path.relative(path.resolve(dest, '..'), capsule.path);\n\n    return new Symlink(src, dest, capsule.component.id._legacy);\n  });\n\n  await Promise.all(symlinks.map((symlink) => symlink.write()));\n}\n\nasync function symlinkComponent(component: ConsumerComponent, capsuleList: CapsuleList, logger: Logger) {\n  const componentCapsule = capsuleList.getCapsuleIgnoreScopeAndVersion(new ComponentID(component.id));\n  if (!componentCapsule) throw new Error(`unable to find the capsule for ${component.id.toString()}`);\n  const allDeps = component.getAllDependenciesIds();\n  const symlinks = allDeps.map((depId: BitId) => {\n    // TODO: this is dangerous - we might have 2 capsules for the same component with different version, then we might link to the wrong place\n    const devCapsule = capsuleList.getCapsuleIgnoreScopeAndVersion(new ComponentID(depId));\n    if (!devCapsule) {\n      // happens when a dependency is not in the workspace. (it gets installed via the package manager)\n      logger.debug(\n        `symlinkComponentToCapsule: unable to find the capsule for ${depId.toStringWithoutVersion()}. skipping`\n      );\n      return null;\n    }\n    const packageName = componentIdToPackageName(devCapsule.component.state._consumer);\n    const devCapsulePath = devCapsule.path;\n    // @todo: this is a hack, the capsule should be the one responsible to symlink, this works only for FS capsules.\n    const dest = path.join(componentCapsule.path, 'node_modules', packageName);\n    // use relative symlink in capsules to make it really isolated from the machine fs\n    const src = path.relative(path.resolve(dest, '..'), devCapsulePath);\n    return new Symlink(src, dest, component.id);\n  });\n\n  await Promise.all(symlinks.map((symlink) => symlink && symlink.write()));\n}\n"],"mappings":"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"}