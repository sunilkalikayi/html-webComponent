"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.string.replace.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.copyBitLegacyToCapsuleRoot = copyBitLegacyToCapsuleRoot;
exports.symlinkBitLegacyToCapsules = symlinkBitLegacyToCapsules;
function _createSymlinkOrCopy() {
  const data = _interopRequireDefault(require("@teambit/legacy/dist/utils/fs/create-symlink-or-copy"));
  _createSymlinkOrCopy = function () {
    return data;
  };
  return data;
}
function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));
  _fsExtra = function () {
    return data;
  };
  return data;
}
function _path() {
  const data = _interopRequireDefault(require("path"));
  _path = function () {
    return data;
  };
  return data;
}
async function symlinkBitLegacyToCapsules(capsules, logger) {
  logger.debug(`symlink bit bin to capsules, ${capsules.length} capsules`);
  const linksP = capsules.map(async capsule => linkBitLegacyInCapsule(capsule));
  return Promise.all(linksP);
}
async function copyBitLegacyToCapsuleRoot(root, logger) {
  logger.debug(`symlink @teambit/legacy package to capsule root`);
  const localBitLegacyPath = _path().default.join(__dirname, '@teambit/legacy/dist/..');
  const targetPath = _path().default.join(root, './node_modules/@teambit/legacy');
  await _fsExtra().default.copy(localBitLegacyPath, targetPath);
}
async function linkBitLegacyInCapsule(capsule) {
  const bitLegacyPath = _path().default.join(capsule.wrkDir, './node_modules/@teambit/legacy');
  const getLocalBitLegacyPath = () => {
    const pathOutsideNodeModules = _path().default.join(__dirname, '@teambit/legacy/dist/..');
    const dirInIsolator = _path().default.normalize('node_modules/@teambit/isolator/dist/@teambit/legacy');
    if (pathOutsideNodeModules.includes(dirInIsolator)) {
      return pathOutsideNodeModules.replace(dirInIsolator, '');
    }
    return pathOutsideNodeModules;
    // if (pathOutsideNodeModules.endsWith(`${path.sep}dist`)) {
    //   return pathOutsideNodeModules;
    // }
    // if (__dirname.includes('build-harmony')) {
    //   // for @teambit/legacy development, the cli extension is installed as a package in build-harmony directory
    //   return path.join(__dirname.split('build-harmony')[0], 'dist');
    // }
    // throw new Error('unable to link @teambit/legacy to the capsule, the location of @teambit/legacy is unknown');
  };

  const localBitLegacyPath = getLocalBitLegacyPath();
  // if there are no deps, sometimes the node_modules folder is not created
  // and we need it in order to perform the linking
  try {
    capsule.fs.mkdirSync('node_modules');
  } catch (e) {
    // fail silently - we only need to create it if it doesn't already exist
  }

  // we use fs directly here rather than the capsule.fs because there are some edge cases
  // that the capsule fs does not deal with well (eg. identifying and deleting
  // a symlink rather than the what the symlink links to)
  await _fsExtra().default.remove(bitLegacyPath);
  (0, _createSymlinkOrCopy().default)(localBitLegacyPath, bitLegacyPath);
}

//# sourceMappingURL=symlink-bit-legacy-to-capsules.js.map