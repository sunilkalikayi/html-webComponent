{"version":3,"names":["Network","constructor","_graphCapsules","seedersIds","_capsulesRootDir","seedersCapsules","capsules","map","seederId","capsule","graphCapsules","getCapsule","Error","toString","CapsuleList","fromArray","originalSeedersCapsules","getOriginalSeeders","getCapsulesToCompile","Promise","all","seederCapsule","component","id","isModified","compact","_originalSeeders","capsulesRootDir"],"sources":["network.ts"],"sourcesContent":["import { ComponentID } from '@teambit/component';\nimport { PathOsBasedAbsolute } from '@teambit/legacy/dist/utils/path';\nimport { compact } from 'lodash';\nimport CapsuleList from './capsule-list';\n\n/**\n * collection of isolated components (capsules).\n * normally, \"seeders\" are the components that this network was created for.\n * \"graphCapsules\" is the graph created from the seeders and it includes also the dependencies.\n *\n * however, during \"bit build\"/\"bit tag\"/\"bit snap\", things are more complex because there is one more variable in the\n * picture, which is the \"env\". the Network is created per env.\n * in practice, for \"build-task\", a task is called per env, and the network passed to the task is relevant to that env.\n * the \"originalSeeders\" are the ones the network was created for, but only for this env.\n * the \"seeders\" are similar to the \"graphCapsules\" above, which contains also the dependencies, but only for this env.\n * the \"graphCapsules\" is the entire graph, including capsules from other envs.\n *\n * for example:\n * comp1 depends on comp2. comp1 env is \"react\". comp2 env is \"aspect\".\n *\n * when the user is running \"bit build comp1\", two `Network` instances will be created with the following:\n * Network for \"react\" env:  originalSeeders: ['comp1'], seeders: ['comp1'], graphCapsules: ['comp1', 'comp2'].\n * Network for \"aspect\" env: originalSeeders: [], seeders: ['comp2'], graphCapsules: ['comp2'].\n *\n * on the other hand, when the user is running \"bit capsule create comp1\", only one `Network` instance is created:\n * Network: originalSeeders: ['comp1'], seeders: ['comp1'], graphCapsules: ['comp1', 'comp2'].\n *\n * (as a side note, another implementation was attempt to have the \"seeders\" as the original-seeders for build,\n * however, it's failed. see https://github.com/teambit/bit/pull/5407 for more details).\n */\nexport class Network {\n  _originalSeeders: ComponentID[] | undefined;\n  constructor(\n    private _graphCapsules: CapsuleList,\n    private seedersIds: ComponentID[],\n    private _capsulesRootDir: string\n  ) {}\n\n  /**\n   * for build-tasks (during bit build/tag/snap), this includes the component graph of the current env only.\n   * otherwise, this includes the original components the network was created for.\n   */\n  get seedersCapsules(): CapsuleList {\n    const capsules = this.seedersIds.map((seederId) => {\n      const capsule = this.graphCapsules.getCapsule(seederId);\n      if (!capsule) throw new Error(`unable to find ${seederId.toString()} in the capsule list`);\n      return capsule;\n    });\n    return CapsuleList.fromArray(capsules);\n  }\n\n  /**\n   * for build-tasks (during bit build/tag/snap), this includes the original components of the current env.\n   * otherwise, this is the same as `this.seedersCapsules()`.\n   */\n  get originalSeedersCapsules(): CapsuleList {\n    const capsules = this.getOriginalSeeders().map((seederId) => {\n      const capsule = this.graphCapsules.getCapsule(seederId);\n      if (!capsule) throw new Error(`unable to find ${seederId.toString()} in the capsule list`);\n      return capsule;\n    });\n    return CapsuleList.fromArray(capsules);\n  }\n\n  /**\n   * some of the capsules (non-modified) are written already with the dists files, so no need to re-compile them.\n   * this method helps optimizing compilers that are running on the capsules.\n   */\n  async getCapsulesToCompile() {\n    const originalSeedersCapsules = this.originalSeedersCapsules;\n    const capsules = await Promise.all(\n      this.seedersCapsules.map(async (seederCapsule) => {\n        if (originalSeedersCapsules.getCapsule(seederCapsule.component.id)) {\n          return seederCapsule;\n        }\n        const isModified = await seederCapsule.component.isModified();\n        return isModified ? seederCapsule : null;\n      })\n    );\n    return CapsuleList.fromArray(compact(capsules));\n  }\n\n  /**\n   * originalSeeders are not always set (currently, only during build process), so if they're missing, just provide the\n   * seeders, which are probably the original-seeders\n   */\n  private getOriginalSeeders(): ComponentID[] {\n    return this._originalSeeders || this.seedersIds;\n  }\n\n  /**\n   * all capsules, including the dependencies of the seeders. (even when they belong to another env)\n   */\n  get graphCapsules(): CapsuleList {\n    return this._graphCapsules;\n  }\n\n  get capsulesRootDir(): PathOsBasedAbsolute {\n    return this._capsulesRootDir;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,OAAO,CAAC;EAEnBC,WAAW,CACDC,cAA2B,EAC3BC,UAAyB,EACzBC,gBAAwB,EAChC;IAAA,KAHQF,cAA2B,GAA3BA,cAA2B;IAAA,KAC3BC,UAAyB,GAAzBA,UAAyB;IAAA,KACzBC,gBAAwB,GAAxBA,gBAAwB;IAAA;EAC/B;;EAEH;AACF;AACA;AACA;EACE,IAAIC,eAAe,GAAgB;IACjC,MAAMC,QAAQ,GAAG,IAAI,CAACH,UAAU,CAACI,GAAG,CAAEC,QAAQ,IAAK;MACjD,MAAMC,OAAO,GAAG,IAAI,CAACC,aAAa,CAACC,UAAU,CAACH,QAAQ,CAAC;MACvD,IAAI,CAACC,OAAO,EAAE,MAAM,IAAIG,KAAK,CAAE,kBAAiBJ,QAAQ,CAACK,QAAQ,EAAG,sBAAqB,CAAC;MAC1F,OAAOJ,OAAO;IAChB,CAAC,CAAC;IACF,OAAOK,sBAAW,CAACC,SAAS,CAACT,QAAQ,CAAC;EACxC;;EAEA;AACF;AACA;AACA;EACE,IAAIU,uBAAuB,GAAgB;IACzC,MAAMV,QAAQ,GAAG,IAAI,CAACW,kBAAkB,EAAE,CAACV,GAAG,CAAEC,QAAQ,IAAK;MAC3D,MAAMC,OAAO,GAAG,IAAI,CAACC,aAAa,CAACC,UAAU,CAACH,QAAQ,CAAC;MACvD,IAAI,CAACC,OAAO,EAAE,MAAM,IAAIG,KAAK,CAAE,kBAAiBJ,QAAQ,CAACK,QAAQ,EAAG,sBAAqB,CAAC;MAC1F,OAAOJ,OAAO;IAChB,CAAC,CAAC;IACF,OAAOK,sBAAW,CAACC,SAAS,CAACT,QAAQ,CAAC;EACxC;;EAEA;AACF;AACA;AACA;EACE,MAAMY,oBAAoB,GAAG;IAC3B,MAAMF,uBAAuB,GAAG,IAAI,CAACA,uBAAuB;IAC5D,MAAMV,QAAQ,GAAG,MAAMa,OAAO,CAACC,GAAG,CAChC,IAAI,CAACf,eAAe,CAACE,GAAG,CAAC,MAAOc,aAAa,IAAK;MAChD,IAAIL,uBAAuB,CAACL,UAAU,CAACU,aAAa,CAACC,SAAS,CAACC,EAAE,CAAC,EAAE;QAClE,OAAOF,aAAa;MACtB;MACA,MAAMG,UAAU,GAAG,MAAMH,aAAa,CAACC,SAAS,CAACE,UAAU,EAAE;MAC7D,OAAOA,UAAU,GAAGH,aAAa,GAAG,IAAI;IAC1C,CAAC,CAAC,CACH;IACD,OAAOP,sBAAW,CAACC,SAAS,CAAC,IAAAU,iBAAO,EAACnB,QAAQ,CAAC,CAAC;EACjD;;EAEA;AACF;AACA;AACA;EACUW,kBAAkB,GAAkB;IAC1C,OAAO,IAAI,CAACS,gBAAgB,IAAI,IAAI,CAACvB,UAAU;EACjD;;EAEA;AACF;AACA;EACE,IAAIO,aAAa,GAAgB;IAC/B,OAAO,IAAI,CAACR,cAAc;EAC5B;EAEA,IAAIyB,eAAe,GAAwB;IACzC,OAAO,IAAI,CAACvB,gBAAgB;EAC9B;AACF;AAAC"}