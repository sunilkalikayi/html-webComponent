"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
require("core-js/modules/es.regexp.exec.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _capsule() {
  const data = require("@teambit/capsule");
  _capsule = function () {
    return data;
  };
  return data;
}
function _filenamify() {
  const data = _interopRequireDefault(require("filenamify"));
  _filenamify = function () {
    return data;
  };
  return data;
}
function _fs() {
  const data = require("fs");
  _fs = function () {
    return data;
  };
  return data;
}
function _glob() {
  const data = _interopRequireDefault(require("glob"));
  _glob = function () {
    return data;
  };
  return data;
}
function _path() {
  const data = _interopRequireDefault(require("path"));
  _path = function () {
    return data;
  };
  return data;
}
function _uuid() {
  const data = require("uuid");
  _uuid = function () {
    return data;
  };
  return data;
}
function _container() {
  const data = _interopRequireDefault(require("./container"));
  _container = function () {
    return data;
  };
  return data;
}
function _containerExec() {
  const data = _interopRequireDefault(require("./container-exec"));
  _containerExec = function () {
    return data;
  };
  return data;
}
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
class Capsule extends _capsule().Capsule {
  constructor(
  /**
   * container implementation the capsule is being executed within.
   */
  container,
  /**
   * the capsule's file system.
   */
  fs,
  /**
   * console for controlling process streams as stdout, stdin and stderr.
   */
  console = new (_capsule().Console)(),
  /**
   * capsule's state.
   */
  state, component) {
    super(container, fs, console, state);
    this.container = container;
    this.fs = fs;
    this.console = console;
    this.state = state;
    this.component = component;
    (0, _defineProperty2().default)(this, "_wrkDir", void 0);
    this._wrkDir = container.wrkDir;
  }

  /**
   * @deprecated please use `this.path`
   */
  get wrkDir() {
    return this.path;
  }
  get path() {
    return (0, _fs().realpathSync)(this._wrkDir);
  }
  start() {
    return this.container.start();
  }
  async execNode(executable, args, exec) {
    return this.typedExec({
      command: ['node', executable, ...(args.args || [])],
      cwd: ''
    }, exec);
  }
  async typedExec(opts, exec = new (_containerExec().default)()) {
    return this.container.exec(opts, exec);
  }
  outputFile(file, data, options) {
    return this.container.outputFile(file, data, options);
  }
  removePath(dir) {
    return this.container.removePath(dir);
  }
  symlink(src, dest) {
    return this.container.symlink(src, dest);
  }

  // TODO: refactor this crap and simplify capsule API
  async execute(cmd, options) {
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    const execResults = await this.exec({
      command: cmd.split(' '),
      options
    });
    let stdout = '';
    let stderr = '';
    return new Promise((resolve, reject) => {
      execResults.stdout.on('data', data => {
        stdout += data;
      });
      execResults.stdout.on('error', error => {
        return reject(error);
      });
      // @ts-ignore
      execResults.on('close', () => {
        return resolve({
          stdout,
          stderr
        });
      });
      execResults.stderr.on('error', error => {
        return reject(error);
      });
      execResults.stderr.on('data', data => {
        stderr += data;
      });
    });
  }

  /**
   * @todo: fix.
   * it skips the capsule fs because for some reason `capsule.fs.promises.readdir` doesn't work
   * the same as `capsule.fs.readdir` and it doesn't have the capsule dir as pwd.
   *
   * returns the paths inside the capsule
   */
  getAllFilesPaths(dir = '.', options = {}) {
    const files = _glob().default.sync('**', _objectSpread({
      cwd: _path().default.join(this.path, dir),
      nodir: true
    }, options));
    return files.map(file => _path().default.join(dir, file));
  }
  static getCapsuleDirName(component, config = {}) {
    return config.name || (0, _filenamify().default)(component.id.toString(), {
      replacement: '_'
    });
  }
  static getCapsuleRootDir(component, baseDir, config = {}) {
    return _path().default.join(baseDir, Capsule.getCapsuleDirName(component, config));
  }
  static async createFromComponent(component, baseDir, config = {}) {
    // TODO: make this a static method and combine with ComponentCapsule
    const capsuleDirName = Capsule.getCapsuleDirName(component, config);
    const wrkDir = _path().default.join(baseDir, config.alwaysNew ? `${capsuleDirName}_${(0, _uuid().v4)()}` : capsuleDirName);
    const container = new (_container().default)(wrkDir);
    const capsule = new Capsule(container, container.fs, new (_capsule().Console)(), new (_capsule().State)(), component);
    await capsule.start();
    return capsule;
  }
}
exports.default = Capsule;

//# sourceMappingURL=capsule.js.map