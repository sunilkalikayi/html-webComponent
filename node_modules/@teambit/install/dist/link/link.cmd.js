"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LinkCommand = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _toolboxTime() {
  const data = require("@teambit/toolbox.time.time-format");
  _toolboxTime = function () {
    return data;
  };
  return data;
}
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
function _componentListLinks() {
  const data = require("./component-list-links");
  _componentListLinks = function () {
    return data;
  };
  return data;
}
function _coreAspectsLinks() {
  const data = require("./core-aspects-links");
  _coreAspectsLinks = function () {
    return data;
  };
  return data;
}
function _nestedDepsInNmLinks() {
  const data = require("./nested-deps-in-nm-links");
  _nestedDepsInNmLinks = function () {
    return data;
  };
  return data;
}
function _rewireRow() {
  const data = require("./rewire-row");
  _rewireRow = function () {
    return data;
  };
  return data;
}
function _linkToDir() {
  const data = require("./link-to-dir");
  _linkToDir = function () {
    return data;
  };
  return data;
}
class LinkCommand {
  constructor(install,
  /**
   * workspace extension.
   */
  workspace,
  /**
   * logger extension.
   */
  logger, docsDomain) {
    this.install = install;
    this.workspace = workspace;
    this.logger = logger;
    this.docsDomain = docsDomain;
    (0, _defineProperty2().default)(this, "name", 'link [component-names...]');
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "description", 'create links in the node_modules directory, to core aspects and to components in the workspace');
    (0, _defineProperty2().default)(this, "extendedDescription", void 0);
    (0, _defineProperty2().default)(this, "group", 'development');
    (0, _defineProperty2().default)(this, "private", false);
    (0, _defineProperty2().default)(this, "arguments", [{
      name: 'component-names...',
      description: 'names or IDs of the components to link'
    }]);
    (0, _defineProperty2().default)(this, "options", [['j', 'json', 'return the output as JSON'], ['', 'verbose', 'verbose output'], ['r', 'rewire', 'Replace relative paths with module paths in code (e.g. "../foo" => "@bit/foo")'], ['', 'target <dir>', 'EXPERIMENTAL. link to an external directory (similar to npm-link) so other projects could use these components'], ['', 'skip-fetching-objects', 'skip fetch missing objects from remotes before linking']]);
    this.extendedDescription = `https://${this.docsDomain}/workspace/component-links`;
  }
  async report([ids], opts) {
    var _linkResults$legacyLi;
    const startTime = Date.now();
    const linkResults = await this.json([ids], opts);
    const endTime = Date.now();
    const numOfComponents = (_linkResults$legacyLi = linkResults.legacyLinkResults) === null || _linkResults$legacyLi === void 0 ? void 0 : _linkResults$legacyLi.length;
    const timeDiff = (0, _toolboxTime().timeFormat)(endTime - startTime);
    const coreAspectsLinksWithMainAspect = linkResults.coreAspectsLinks || [];
    if (linkResults.teambitBitLink) {
      coreAspectsLinksWithMainAspect.unshift(linkResults.teambitBitLink);
    }
    const numOfCoreAspects = coreAspectsLinksWithMainAspect.length;
    const title = `Linked ${numOfComponents} components and ${numOfCoreAspects} core aspects to node_modules for workspace: ${this.workspace.name}`;
    const coreLinks = (0, _coreAspectsLinks().CoreAspectsLinks)({
      coreAspectsLinks: coreAspectsLinksWithMainAspect,
      verbose: opts.verbose
    });
    const compsLinks = (0, _componentListLinks().ComponentListLinks)({
      componentListLinks: linkResults.legacyLinkResults,
      verbose: opts.verbose
    });
    const rewireRow = (0, _rewireRow().RewireRow)({
      legacyCodemodResults: linkResults.legacyLinkCodemodResults
    });
    const nestedLinks = (0, _nestedDepsInNmLinks().NestedComponentLinksLinks)({
      nestedDepsInNmLinks: linkResults.nestedDepsInNmLinks,
      verbose: opts.verbose
    });
    const targetLinks = (0, _linkToDir().linkToDir)(linkResults.linkToDirResults);
    const footer = `Finished. ${timeDiff}`;
    return `${title}\n${coreLinks}\n${compsLinks}\n${rewireRow}${nestedLinks}${targetLinks}${footer}`;
  }

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  async json([ids], opts) {
    this.logger.console(`Linking components and core aspects to node_modules for workspaces: '${_chalk().default.cyan(this.workspace.name)}'`);
    const linkOpts = {
      legacyLink: true,
      rewire: opts.rewire,
      linkCoreAspects: true,
      linkTeambitBit: true,
      linkToDir: opts.target,
      fetchObject: !opts.skipFetchingObjects
    };
    const linkResults = await this.install.link(linkOpts);
    return linkResults;
  }
}
exports.LinkCommand = LinkCommand;

//# sourceMappingURL=link.cmd.js.map