"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _exceptions() {
  const data = require("@teambit/legacy/dist/consumer/exceptions");
  _exceptions = function () {
    return data;
  };
  return data;
}
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
class InstallCmd {
  constructor(install,
  /**
   * workspace extension.
   */
  workspace,
  /**
   * logger extension.
   */
  logger) {
    this.install = install;
    this.workspace = workspace;
    this.logger = logger;
    (0, _defineProperty2().default)(this, "name", 'install [packages...]');
    (0, _defineProperty2().default)(this, "description", 'installs workspace dependencies');
    (0, _defineProperty2().default)(this, "extendedDescription", 'when no package is specified, all workspace dependencies are installed and all workspace components are imported.');
    (0, _defineProperty2().default)(this, "arguments", [{
      name: 'packages...',
      description: 'a list of packages to install (separated by spaces)'
    }]);
    (0, _defineProperty2().default)(this, "alias", 'in');
    (0, _defineProperty2().default)(this, "group", 'development');
    (0, _defineProperty2().default)(this, "options", [['v', 'variants <variants>', 'add packages to specific variants'], ['t', 'type [lifecycleType]', '"runtime" (default) or "peer" (dev is not a valid option)'], ['u', 'update-existing [updateExisting]', 'update existing dependencies version and types'], ['', 'save-prefix [savePrefix]', 'set the prefix to use when adding dependency to workspace.jsonc'], ['', 'skip-dedupe [skipDedupe]', 'do not dedupe dependencies on installation'], ['', 'skip-import [skipImport]', 'do not import bit objects post installation'], ['', 'add-missing-peers [addMissingPeers]', 'install all missing peer dependencies']]);
  }
  async report([packages = []], options) {
    const startTime = Date.now();
    if (!this.workspace) throw new (_exceptions().ConsumerNotFound)();
    this.logger.console(`Resolving component dependencies for workspace: '${_chalk().default.cyan(this.workspace.name)}'`);
    const installOpts = {
      variants: options.variants,
      lifecycleType: options.addMissingPeers ? 'peer' : options.type,
      dedupe: !options.skipDedupe,
      import: !options.skipImport,
      updateExisting: options.updateExisting,
      savePrefix: options.savePrefix,
      addMissingPeers: options.addMissingPeers
    };
    const components = await this.install.install(packages, installOpts);
    const endTime = Date.now();
    const executionTime = calculateTime(startTime, endTime);
    return `Successfully resolved dependencies for ${_chalk().default.cyan(components.toArray().length.toString())} component(s) in ${_chalk().default.cyan(executionTime.toString())} seconds`;
  }
}
exports.default = InstallCmd;
function calculateTime(startTime, endTime) {
  const diff = endTime - startTime;
  return diff / 1000;
}

//# sourceMappingURL=install.cmd.js.map