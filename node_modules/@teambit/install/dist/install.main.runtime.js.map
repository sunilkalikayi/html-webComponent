{"version":3,"names":["InstallMain","constructor","dependencyResolver","logger","workspace","variants","importer","compiler","install","packages","options","length","_addPackages","addMissingPeers","compDirMap","getComponentsDirectory","mergedRootPolicy","getWorkspacePolicy","depsFilterFn","generateFilterFnForDepsFromLocalRemote","pmInstallOptions","dedupe","copyPeerToRuntimeOnRoot","copyPeerToRuntimeOnComponents","dependencyFilterFn","overrides","config","packageImportMethod","missingPeers","getMissingPeerDependencies","path","missingPeerPackages","Object","entries","map","peerName","range","console","import","setStatusLine","importObjects","consoleSuccess","_installModules","lifecycleType","DependencyTypeNotSupportedInPolicy","debug","join","resolver","getVersionResolver","resolvedPackagesP","packageName","resolveRemoteVersion","rootDir","resolvedPackages","Promise","all","newWorkspacePolicyEntries","forEach","resolvedPackage","version","versionWithPrefix","getVersionWithSavePrefix","savePrefix","push","dependencyId","value","addToRootPolicy","updateExisting","persistConfig","chalk","cyan","getPackageManagerName","hasRootComponents","rootComponents","installer","getInstaller","current","_getComponentsManifests","prev","link","linkTeambitBit","legacyLink","linkCoreAspects","linkDepsResolvedFromEnv","linkNestedDepsInNM","linkOpts","isLegacy","consumer","componentLoader","clearComponentsCache","clearCache","installComponents","manifests","componentDirectoryMap","installTeambitBit","linkCoreAspectsAndLegacy","compileOnWorkspace","initiator","CompilationInitiator","Install","isEqual","dependencyInstaller","rootPolicy","installOptions","getComponentManifests","updateDependencies","componentConfigFiles","componentPoliciesById","_getComponentsWithDependencyPolicies","variantPatterns","raw","variantPoliciesByPatterns","_variantPatternsToDepPolicesDict","components","list","outdatedPkgs","getOutdatedPkgsFromPolicies","outdatedPkgsToUpdate","off","pickOutdatedPkgs","on","updatedVariants","updatedComponents","applyUpdates","_updateVariantsPolicies","updatedComponentConfigFiles","values","pick","_saveManyComponentConfigFiles","_reloadConsumer","addDuplicateComponentAndPackageIssue","workspacePolicy","component","pkgName","componentIdToPackageName","state","_consumer","found","find","issues","getOrCreate","IssuesClasses","DuplicateComponentAndPackage","data","allComponentIds","listIds","componentId","componentConfigFile","index","depResolverConfig","aspects","get","DependencyResolverAspect","id","toString","policy","variantPattern","extensions","updateVariantPolicies","setExtension","overrideExisting","Array","from","write","override","uninstallDependencies","removeFromRootPolicy","linker","getLinker","linkingOptions","compIds","res","fetchObject","importOptions","ids","objectsOnly","installNpmPackages","err","NothingToImport","remotes","scope","_legacyRemotes","reg","getRegistries","packageScopes","keys","scopes","dependencyList","filtered","filter","dep","ComponentDependency","isHub","some","startsWith","getMany","ComponentMap","as","componentDir","provider","loggerExt","cli","community","createLogger","installExt","ManyComponentsWriter","registerExternalInstaller","installOpts","undefined","registerAddComponentsIssues","bind","commands","InstallCmd","UninstallCmd","UpdateCmd","LinkCommand","getDocsDomain","register","WorkspaceAspect","LoggerAspect","VariantsAspect","CLIAspect","CommunityAspect","ImporterAspect","CompilerAspect","IssuesAspect","MainRuntime","InstallAspect","addRuntime"],"sources":["install.main.runtime.ts"],"sourcesContent":["import { CommunityMain, CommunityAspect } from '@teambit/community';\nimport { CompilerMain, CompilerAspect, CompilationInitiator } from '@teambit/compiler';\nimport ManyComponentsWriter from '@teambit/legacy/dist/consumer/component-ops/many-components-writer';\nimport { CLIMain, CommandList, CLIAspect, MainRuntime } from '@teambit/cli';\nimport chalk from 'chalk';\nimport { WorkspaceAspect, Workspace, ComponentConfigFile } from '@teambit/workspace';\nimport { pick, isEqual } from 'lodash';\nimport { ProjectManifest } from '@pnpm/types';\nimport { NothingToImport } from '@teambit/legacy/dist/consumer/exceptions';\nimport componentIdToPackageName from '@teambit/legacy/dist/utils/bit/component-id-to-package-name';\nimport { VariantsMain, Patterns, VariantsAspect } from '@teambit/variants';\nimport { Component, ComponentID, ComponentMap } from '@teambit/component';\nimport { IssuesClasses } from '@teambit/component-issues';\nimport {\n  WorkspaceDependencyLifecycleType,\n  DependencyResolverMain,\n  DependencyInstaller,\n  DependencyResolverAspect,\n  PackageManagerInstallOptions,\n  ComponentDependency,\n  VariantPolicyConfigObject,\n  WorkspacePolicyEntry,\n  LinkingOptions,\n  LinkResults,\n  DependencyList,\n  OutdatedPkg,\n  WorkspacePolicy,\n} from '@teambit/dependency-resolver';\nimport { ImporterAspect, ImporterMain, ImportOptions } from '@teambit/importer';\nimport { Logger, LoggerAspect, LoggerMain } from '@teambit/logger';\nimport { IssuesAspect, IssuesMain } from '@teambit/issues';\nimport { DependencyTypeNotSupportedInPolicy } from './exceptions';\nimport { InstallAspect } from './install.aspect';\nimport { pickOutdatedPkgs } from './pick-outdated-pkgs';\nimport { LinkCommand } from './link';\nimport InstallCmd from './install.cmd';\nimport UninstallCmd from './uninstall.cmd';\nimport UpdateCmd from './update.cmd';\n\nexport type WorkspaceLinkOptions = LinkingOptions;\n\nexport type WorkspaceInstallOptions = {\n  addMissingPeers?: boolean;\n  variants?: string;\n  lifecycleType?: WorkspaceDependencyLifecycleType;\n  dedupe: boolean;\n  import: boolean;\n  copyPeerToRuntimeOnRoot?: boolean;\n  copyPeerToRuntimeOnComponents?: boolean;\n  updateExisting: boolean;\n  savePrefix?: string;\n};\n\nexport type ModulesInstallOptions = Omit<WorkspaceInstallOptions, 'updateExisting' | 'lifecycleType' | 'import'>;\n\nexport class InstallMain {\n  constructor(\n    private dependencyResolver: DependencyResolverMain,\n\n    private logger: Logger,\n\n    private workspace: Workspace,\n\n    private variants: VariantsMain,\n\n    private importer: ImporterMain,\n\n    private compiler: CompilerMain\n  ) {}\n  /**\n   * Install dependencies for all components in the workspace\n   *\n   * @returns\n   * @memberof Workspace\n   */\n  async install(packages?: string[], options?: WorkspaceInstallOptions): Promise<ComponentMap<string>> {\n    if (packages && packages.length) {\n      await this._addPackages(packages, options);\n    }\n    if (options?.addMissingPeers) {\n      const compDirMap = await this.getComponentsDirectory([]);\n      const mergedRootPolicy = this.dependencyResolver.getWorkspacePolicy();\n      const depsFilterFn = await this.generateFilterFnForDepsFromLocalRemote();\n      const pmInstallOptions: PackageManagerInstallOptions = {\n        dedupe: options?.dedupe,\n        copyPeerToRuntimeOnRoot: options?.copyPeerToRuntimeOnRoot ?? true,\n        copyPeerToRuntimeOnComponents: options?.copyPeerToRuntimeOnComponents ?? false,\n        dependencyFilterFn: depsFilterFn,\n        overrides: this.dependencyResolver.config.overrides,\n        packageImportMethod: this.dependencyResolver.config.packageImportMethod,\n      };\n      const missingPeers = await this.dependencyResolver.getMissingPeerDependencies(\n        this.workspace.path,\n        mergedRootPolicy,\n        compDirMap,\n        pmInstallOptions\n      );\n      if (missingPeers) {\n        const missingPeerPackages = Object.entries(missingPeers).map(([peerName, range]) => `${peerName}@${range}`);\n        await this._addPackages(missingPeerPackages, options);\n      } else {\n        this.logger.console('No missing peer dependencies found.');\n      }\n    }\n    if (options?.import) {\n      this.logger.setStatusLine('importing missing objects');\n      await this.importObjects();\n      this.logger.consoleSuccess();\n    }\n    return this._installModules(options);\n  }\n\n  private async _addPackages(packages: string[], options?: WorkspaceInstallOptions) {\n    if (!options?.variants && (options?.lifecycleType as string) === 'dev') {\n      throw new DependencyTypeNotSupportedInPolicy(options?.lifecycleType as string);\n    }\n    this.logger.debug(`installing the following packages: ${packages.join()}`);\n    const resolver = await this.dependencyResolver.getVersionResolver();\n    const resolvedPackagesP = packages.map((packageName) =>\n      resolver.resolveRemoteVersion(packageName, {\n        rootDir: this.workspace.path,\n      })\n    );\n    const resolvedPackages = await Promise.all(resolvedPackagesP);\n    const newWorkspacePolicyEntries: WorkspacePolicyEntry[] = [];\n    resolvedPackages.forEach((resolvedPackage) => {\n      if (resolvedPackage.version) {\n        const versionWithPrefix = this.dependencyResolver.getVersionWithSavePrefix(\n          resolvedPackage.version,\n          options?.savePrefix\n        );\n        newWorkspacePolicyEntries.push({\n          dependencyId: resolvedPackage.packageName,\n          value: {\n            version: versionWithPrefix,\n          },\n          lifecycleType: options?.lifecycleType || 'runtime',\n        });\n      }\n    });\n    if (!options?.variants) {\n      this.dependencyResolver.addToRootPolicy(newWorkspacePolicyEntries, {\n        updateExisting: options?.updateExisting ?? false,\n      });\n    } else {\n      // TODO: implement\n    }\n    await this.dependencyResolver.persistConfig(this.workspace.path);\n  }\n\n  private async _installModules(options?: ModulesInstallOptions): Promise<ComponentMap<string>> {\n    this.logger.console(\n      `installing dependencies in workspace using ${chalk.cyan(this.dependencyResolver.getPackageManagerName())}`\n    );\n    this.logger.debug(`installing dependencies in workspace with options`, options);\n    const mergedRootPolicy = this.dependencyResolver.getWorkspacePolicy();\n    const depsFilterFn = await this.generateFilterFnForDepsFromLocalRemote();\n    const hasRootComponents = this.dependencyResolver.hasRootComponents();\n    const pmInstallOptions: PackageManagerInstallOptions = {\n      dedupe: !hasRootComponents && options?.dedupe,\n      copyPeerToRuntimeOnRoot: options?.copyPeerToRuntimeOnRoot ?? true,\n      copyPeerToRuntimeOnComponents: options?.copyPeerToRuntimeOnComponents ?? false,\n      dependencyFilterFn: depsFilterFn,\n      overrides: this.dependencyResolver.config.overrides,\n      packageImportMethod: this.dependencyResolver.config.packageImportMethod,\n      rootComponents: hasRootComponents,\n    };\n    // TODO: pass get install options\n    const installer = this.dependencyResolver.getInstaller({});\n    let current = await this._getComponentsManifests(installer, mergedRootPolicy, pmInstallOptions);\n    let prev: typeof current;\n    // TODO: this make duplicate\n    // this.logger.consoleSuccess();\n    // TODO: add the links results to the output\n    await this.link({\n      linkTeambitBit: true,\n      legacyLink: true,\n      linkCoreAspects: this.dependencyResolver.linkCoreAspects(),\n      linkDepsResolvedFromEnv: !hasRootComponents,\n      linkNestedDepsInNM: false,\n    });\n    const linkOpts = {\n      linkTeambitBit: false,\n      legacyLink: true,\n      linkCoreAspects: false,\n      linkDepsResolvedFromEnv: !hasRootComponents,\n      linkNestedDepsInNM: !this.workspace.isLegacy && !hasRootComponents,\n    };\n    /* eslint-disable no-await-in-loop */\n    do {\n      this.workspace.consumer.componentLoader.clearComponentsCache();\n      this.workspace.clearCache();\n      await installer.installComponents(\n        this.workspace.path,\n        current.manifests,\n        mergedRootPolicy,\n        current.componentDirectoryMap,\n        { installTeambitBit: false },\n        pmInstallOptions\n      );\n      // Core aspects should be relinked after installation because Yarn removes all symlinks created not by Yarn.\n      // If we don't link the core aspects immediately, the components will fail during load.\n      await this.linkCoreAspectsAndLegacy({\n        linkTeambitBit: false,\n        linkCoreAspects: this.dependencyResolver.linkCoreAspects(),\n      });\n      await this.compiler.compileOnWorkspace([], { initiator: CompilationInitiator.Install });\n      await this.link(linkOpts);\n      prev = current;\n      current = await this._getComponentsManifests(installer, mergedRootPolicy, pmInstallOptions);\n    } while (!isEqual(prev.manifests, current.manifests));\n    /* eslint-enable no-await-in-loop */\n    return current.componentDirectoryMap;\n  }\n\n  private async _getComponentsManifests(\n    dependencyInstaller: DependencyInstaller,\n    rootPolicy: WorkspacePolicy,\n    installOptions: Pick<\n      PackageManagerInstallOptions,\n      'dedupe' | 'dependencyFilterFn' | 'copyPeerToRuntimeOnComponents'\n    >\n  ): Promise<{\n    componentDirectoryMap: ComponentMap<string>;\n    manifests: Record<string, ProjectManifest>;\n  }> {\n    const componentDirectoryMap = await this.getComponentsDirectory([]);\n    const manifests = await dependencyInstaller.getComponentManifests({\n      ...installOptions,\n      componentDirectoryMap,\n      rootPolicy,\n      rootDir: this.workspace.path,\n    });\n    return {\n      componentDirectoryMap,\n      manifests,\n    };\n  }\n\n  /**\n   * Updates out-of-date dependencies in the workspace.\n   *\n   * @param options.all {Boolean} updates all outdated dependencies without showing a prompt.\n   */\n  async updateDependencies(options: { all: boolean }) {\n    const { componentConfigFiles, componentPoliciesById } = await this._getComponentsWithDependencyPolicies();\n    const variantPatterns = this.variants.raw();\n    const variantPoliciesByPatterns = this._variantPatternsToDepPolicesDict(variantPatterns);\n    const components = await this.workspace.list();\n    const outdatedPkgs = await this.dependencyResolver.getOutdatedPkgsFromPolicies({\n      rootDir: this.workspace.path,\n      variantPoliciesByPatterns,\n      componentPoliciesById,\n      components,\n    });\n    let outdatedPkgsToUpdate!: OutdatedPkg[];\n    if (options.all) {\n      outdatedPkgsToUpdate = outdatedPkgs;\n    } else {\n      this.logger.off();\n      outdatedPkgsToUpdate = await pickOutdatedPkgs(outdatedPkgs);\n      this.logger.on();\n    }\n    const { updatedVariants, updatedComponents } = this.dependencyResolver.applyUpdates(outdatedPkgsToUpdate, {\n      variantPoliciesByPatterns,\n      componentPoliciesById,\n    });\n    await this._updateVariantsPolicies(variantPatterns, updatedVariants);\n    const updatedComponentConfigFiles = Object.values(pick(componentConfigFiles, updatedComponents));\n    await this._saveManyComponentConfigFiles(updatedComponentConfigFiles);\n    await this.workspace._reloadConsumer();\n    return this._installModules({ dedupe: true });\n  }\n\n  async addDuplicateComponentAndPackageIssue(components: Component[]) {\n    const workspacePolicy = this.dependencyResolver.getWorkspacePolicy();\n    components.forEach((component) => {\n      const pkgName = componentIdToPackageName(component.state._consumer);\n      const found = workspacePolicy.find(pkgName);\n      if (found) {\n        component.state.issues.getOrCreate(IssuesClasses.DuplicateComponentAndPackage).data = found.dependencyId;\n      }\n    });\n  }\n\n  private async _getComponentsWithDependencyPolicies() {\n    const allComponentIds = await this.workspace.listIds();\n    const componentConfigFiles: Record<string, ComponentConfigFile> = {};\n    const componentPoliciesById: Record<string, any> = {};\n    (\n      await Promise.all<ComponentConfigFile | undefined>(\n        allComponentIds.map((componentId) => this.workspace.componentConfigFile(componentId))\n      )\n    ).forEach((componentConfigFile, index) => {\n      if (!componentConfigFile) return;\n      const depResolverConfig = componentConfigFile.aspects.get(DependencyResolverAspect.id);\n      if (!depResolverConfig) return;\n      const componentId = allComponentIds[index].toString();\n      componentConfigFiles[componentId] = componentConfigFile;\n      componentPoliciesById[componentId] = depResolverConfig.config.policy;\n    });\n    return {\n      componentConfigFiles,\n      componentPoliciesById,\n    };\n  }\n\n  private _variantPatternsToDepPolicesDict(variantPatterns: Patterns): Record<string, VariantPolicyConfigObject> {\n    const variantPoliciesByPatterns: Record<string, VariantPolicyConfigObject> = {};\n    for (const [variantPattern, extensions] of Object.entries(variantPatterns)) {\n      if (extensions[DependencyResolverAspect.id]?.policy) {\n        variantPoliciesByPatterns[variantPattern] = extensions[DependencyResolverAspect.id]?.policy;\n      }\n    }\n    return variantPoliciesByPatterns;\n  }\n\n  private _updateVariantsPolicies(variantPatterns: Record<string, any>, updateVariantPolicies: string[]) {\n    for (const variantPattern of updateVariantPolicies) {\n      this.variants.setExtension(\n        variantPattern,\n        DependencyResolverAspect.id,\n        variantPatterns[variantPattern][DependencyResolverAspect.id],\n        { overrideExisting: true }\n      );\n    }\n    return this.dependencyResolver.persistConfig(this.workspace.path);\n  }\n\n  private async _saveManyComponentConfigFiles(componentConfigFiles: ComponentConfigFile[]) {\n    await Promise.all(\n      Array.from(componentConfigFiles).map(async (componentConfigFile) => {\n        await componentConfigFile.write({ override: true });\n      })\n    );\n  }\n\n  /**\n   * Uninstall the specified packages from dependencies.\n   *\n   * @param {string[]} the list of packages that should be removed from dependencies.\n   */\n  async uninstallDependencies(packages: string[]) {\n    this.dependencyResolver.removeFromRootPolicy(packages);\n    await this.dependencyResolver.persistConfig(this.workspace.path);\n    return this._installModules({ dedupe: true });\n  }\n\n  async linkCoreAspectsAndLegacy(options: WorkspaceLinkOptions = {}) {\n    const linker = this.dependencyResolver.getLinker({\n      rootDir: this.workspace.path,\n      linkingOptions: options,\n    });\n    const compIds = await this.workspace.listIds();\n    const res = await linker.linkCoreAspectsAndLegacy(this.workspace.path, compIds, options);\n    return res;\n  }\n\n  async link(options: WorkspaceLinkOptions = {}): Promise<LinkResults> {\n    if (options.fetchObject) {\n      await this.importObjects();\n    }\n    options.consumer = this.workspace.consumer;\n    const compDirMap = await this.getComponentsDirectory([]);\n    const mergedRootPolicy = this.dependencyResolver.getWorkspacePolicy();\n    const linker = this.dependencyResolver.getLinker({\n      rootDir: this.workspace.path,\n      linkingOptions: options,\n    });\n    const res = await linker.link(this.workspace.path, mergedRootPolicy, compDirMap, options);\n    return res;\n  }\n\n  private async importObjects() {\n    const importOptions: ImportOptions = {\n      ids: [],\n      objectsOnly: true,\n      installNpmPackages: false,\n    };\n    try {\n      await this.importer.import(importOptions, []);\n    } catch (err: any) {\n      // TODO: this is a hack since the legacy throw an error, we should provide a way to not throw this error from the legacy\n      if (err instanceof NothingToImport) {\n        // Do not write nothing to import warning\n        return;\n      }\n      throw err;\n    }\n  }\n\n  /**\n   * Generate a filter to pass to the installer\n   * This will filter deps which are come from remotes which defined in scope.json\n   * those components comes from local remotes, usually doesn't have a package in a registry\n   * so no reason to try to install them (it will fail)\n   */\n  private async generateFilterFnForDepsFromLocalRemote() {\n    // TODO: once scope create a new API for this, replace it with the new one\n    const remotes = await this.workspace.scope._legacyRemotes();\n    const reg = await this.dependencyResolver.getRegistries();\n    const packageScopes = Object.keys(reg.scopes);\n    return (dependencyList: DependencyList): DependencyList => {\n      const filtered = dependencyList.filter((dep) => {\n        if (!(dep instanceof ComponentDependency)) {\n          return true;\n        }\n        if (remotes.isHub(dep.componentId.scope)) {\n          return true;\n        }\n        if (packageScopes.some((scope) => dep.packageName.startsWith(`@${scope}/`))) {\n          return true;\n        }\n        return false;\n      });\n      return filtered;\n    };\n  }\n\n  private async getComponentsDirectory(ids: ComponentID[]): Promise<ComponentMap<string>> {\n    const components = ids.length ? await this.workspace.getMany(ids) : await this.workspace.list();\n    return ComponentMap.as<string>(components, (component) => this.workspace.componentDir(component.id));\n  }\n\n  static slots = [];\n  static dependencies = [\n    DependencyResolverAspect,\n    WorkspaceAspect,\n    LoggerAspect,\n    VariantsAspect,\n    CLIAspect,\n    CommunityAspect,\n    ImporterAspect,\n    CompilerAspect,\n    IssuesAspect,\n  ];\n\n  static runtime = MainRuntime;\n\n  static async provider([\n    dependencyResolver,\n    workspace,\n    loggerExt,\n    variants,\n    cli,\n    community,\n    importer,\n    compiler,\n    issues,\n  ]: [\n    DependencyResolverMain,\n    Workspace,\n    LoggerMain,\n    VariantsMain,\n    CLIMain,\n    CommunityMain,\n    ImporterMain,\n    CompilerMain,\n    IssuesMain\n  ]) {\n    const logger = loggerExt.createLogger('teambit.bit/install');\n    const installExt = new InstallMain(dependencyResolver, logger, workspace, variants, importer, compiler);\n    ManyComponentsWriter.registerExternalInstaller({\n      install: async () => {\n        // TODO: think how we should pass this options\n        const installOpts: WorkspaceInstallOptions = {\n          dedupe: true,\n          updateExisting: false,\n          import: false,\n        };\n        return installExt.install(undefined, installOpts);\n      },\n    });\n    if (issues) {\n      issues.registerAddComponentsIssues(installExt.addDuplicateComponentAndPackageIssue.bind(installExt));\n    }\n    const commands: CommandList = [\n      new InstallCmd(installExt, workspace, logger),\n      new UninstallCmd(installExt),\n      new UpdateCmd(installExt),\n      new LinkCommand(installExt, workspace, logger, community.getDocsDomain()),\n    ];\n    cli.register(...commands);\n    return installExt;\n  }\n}\n\nInstallAspect.addRuntime(InstallMain);\n\nexport default InstallMain;\n"],"mappings":"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"}