"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ResumeExportCmd = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
class ResumeExportCmd {
  constructor(scope) {
    this.scope = scope;
    (0, _defineProperty2().default)(this, "name", 'resume-export <export-id> <remotes...>');
    (0, _defineProperty2().default)(this, "description", 'EXPERIMENTAL. resume failed export');
    (0, _defineProperty2().default)(this, "extendedDescription", `resume failed export to persist the pending objects on the given remotes.
the export-id is the id the client got in the error message during the failure.
alternatively, exporting to any one of the failed scopes, throws server-is-busy error with the export-id`);
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "options", []);
    (0, _defineProperty2().default)(this, "loader", true);
    (0, _defineProperty2().default)(this, "migration", true);
    (0, _defineProperty2().default)(this, "group", 'collaborate');
    (0, _defineProperty2().default)(this, "private", true);
    (0, _defineProperty2().default)(this, "remoteOp", true);
  }
  async report([exportId, remotes]) {
    const exportedIds = await this.scope.resumeExport(exportId, remotes);
    if (!exportedIds.length) return _chalk().default.yellow('no components were left to persist for this export-id');
    return `the following components were persisted successfully:
${exportedIds.join('\n')}`;
  }
}
exports.ResumeExportCmd = ResumeExportCmd;

//# sourceMappingURL=resume-export-cmd.js.map