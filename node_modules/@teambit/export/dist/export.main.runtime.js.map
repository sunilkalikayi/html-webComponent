{"version":3,"names":["HooksManagerInstance","HooksManager","getInstance","ExportMain","constructor","workspace","remove","depResolver","export","params","triggerHook","PRE_EXPORT_HOOK","updatedIds","nonExistOnBitMap","missingScope","exported","removedIds","exportedLanes","exportComponents","ejectResults","eject","ejectExportedComponents","exportResults","componentsIds","POST_EXPORT_HOOK","Scope","onPostExport","catch","err","logger","error","exportObjectList","manyObjectsPerRemote","scopeRemotes","centralHubOptions","http","Http","connect","CENTRAL_BIT_HUB_URL","CENTRAL_BIT_HUB_NAME","shouldPushToCentralHub","objectList","transformToOneObjectListWithScopeData","pushToCentralHub","pushToRemotesCarefully","ids","includeNonStaged","originDirectly","ConsumerNotFound","consumer","idsToExport","idsWithFutureScope","laneObject","getComponentsToExport","R","isEmpty","BitIds","newIdsOnRemote","readmeComponent","_throwForUnsnappedLaneReadme","isOnMain","updatedLocally","exportMany","scope","updateLanesAfterExport","getRemovedStagedBitIds","_updateIdsOnBitMap","bitMap","removeFromStagedConfig","linkComponents","Analytics","setExtraData","length","onDestroy","filter","id","hasWithoutVersion","allVersions","resumeExportId","ignoreMissingArtifacts","debugAndAddBreadCrumb","toString","getScopeRemotes","idsGroupedByScope","toGroupByScopeName","validateTargetScopeForLanes","newIds","fromArray","hasScope","newIdsGrouped","mapSeries","Object","keys","scopeName","remote","resolve","list","listIds","map","listItem","forEach","hasWithoutScopeAndVersion","Error","addMainHeadIfPossible","allHashes","modelComponent","head","find","h","hash","objects","has","push","getVersionsToExport","lane","localTagsOrHashes","getLocalTagsOrHashes","stopAt","remoteLanes","getRefsFromAllLanesOnScope","toBitId","laneHeadRemote","getAllVersionHashes","repo","switchHashesWithTagsIfExist","groupedByScopeString","join","debug","exportVersions","populateExportMetadata","getHeadRegardlessOfLane","versions","getUpdatedObjectsToExport","remoteNameStr","bitIds","throwForDuplicationIgnoreVersion","idsToChangeLocally","componentsAndObjects","ObjectList","objectListPerName","processModelComponent","versionToExport","clearStateData","objectItems","collectVersionsObjects","objectsList","toBitObjects","componentAndObject","component","getAll","convertToCorrectScopeHarmony","remoteObj","url","host","name","date","Date","now","addScopeListItem","componentBuffer","compress","componentData","ref","buffer","type","getType","objectsBuffer","Promise","all","obj","allObjectsData","addIfNotExist","modelComponents","getModelComponent","clearCache","components","c","idWithFutureScope","searchWithoutScopeAndVersion","changeScope","laneData","getExportMetadata","exportMetadata","ExportMetadata","exportMetadataObj","exportMetadataItem","pushAllToCentralHub","pushResults","failedScopes","successIds","errors","PersistFailed","exportedBitIds","BitId","parse","exportedIds","objectPerRemote","idsPerScope","updateLocalObjects","objectsPerRemote","removeComponentVersions","refsToRemove","sources","getRefsForComponentRemoval","removeManyObjects","flat","createSymlink","componentObject","put","add","syncWithLaneObject","remoteLaneId","LaneId","from","DEFAULT_LANE","loadRemoteLane","addEntry","getHead","persist","idsWithRemoteScope","changeVersion","undefined","idsWithRemoteScopeUniq","uniqFromArray","remotes","o","validateRemotes","persistRemotes","loader","start","results","flatten","r","objPerRemote","addScopeName","mergeObjectList","clientId","pushRemotesPendingDir","Boolean","pushOptions","pushedRemotes","count","pushMany","warnAndAddBreadCrumb","removePendingDirs","hubRemotes","m","isHub","BitError","componentsObjects","remoteScope","exportingIds","shouldFork","versionsObjects","object","Version","haveVersionsChanged","objectVersion","didDependencyChange","changeDependencyScope","changeExtensionsScope","updateDepsOnLegacyExport","getIdWithUpdatedScope","bind","shouldChangeScope","hasComponentChanged","some","x","version","hasChanged","getAllDependencies","dependency","updatedScope","isEqual","flattenedDependencies","needsChange","getBitIdsWithUpdatedScope","extensions","ext","extensionId","dependencyId","depId","ModelComponent","fromBitId","dependencyObject","loadSync","Symlink","realScope","currentlyExportedDep","componentIds","resolveMultipleComponentIds","stagedConfig","getStagedConfig","compId","removeComponentConfig","write","componentsList","ComponentsList","idsHaveWildcard","hasWildcard","filterNonScopeIfNeeded","getIdsWithFutureScope","partition","isUserTryingToExportLanes","GeneralError","componentsToExport","getLaneCompIdsToExport","loaderMsg","BEFORE_EXPORTS","BEFORE_EXPORT","filtered","BEFORE_LOADING_COMPONENTS","exportPendingComponents","listNonNewComponentsIds","listExportPendingComponentsIds","filterComponentsByWildcard","parsedIds","getParsedId","statuses","getManyComponentsStatuses","status","nested","idsArrayP","componentId","resolveComponentId","finalScope","componentDefaultScope","idsArray","currentLaneId","getCurrentLaneId","loadLane","componentsToExportWithoutRemoved","removedStagedBitIds","removedStaged","getRemovedStaged","_legacy","provider","cli","exportMain","register","ResumeExportCmd","ExportCmd","MainRuntime","CLIAspect","ScopeAspect","WorkspaceAspect","RemoveAspect","DependencyResolverAspect","ExportAspect","addRuntime","componentsId","resultId","updateComponentId","hasVersion","parsedId","loadComponentFromModel","nodeModuleLinker","NodeModuleLinker","link","loadConsumer","ejectComponents","EjectComponents","ejectErr","msg","isValid","getComponent","getComponentHead","currentLane","isCurrentLane","setCurrentLane","toLaneId","scopeJson","removeLaneFromNew","isNew","isOnLane"],"sources":["export.main.runtime.ts"],"sourcesContent":["import { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport ScopeAspect, { ScopeMain } from '@teambit/scope';\nimport R from 'ramda';\nimport { BitError } from '@teambit/bit-error';\nimport { Analytics } from '@teambit/legacy/dist/analytics/analytics';\nimport { BitId, BitIds } from '@teambit/legacy/dist/bit-id';\nimport loader from '@teambit/legacy/dist/cli/loader';\nimport {\n  BEFORE_EXPORT,\n  BEFORE_EXPORTS,\n  BEFORE_LOADING_COMPONENTS,\n} from '@teambit/legacy/dist/cli/loader/loader-messages';\nimport {\n  CENTRAL_BIT_HUB_NAME,\n  CENTRAL_BIT_HUB_URL,\n  POST_EXPORT_HOOK,\n  PRE_EXPORT_HOOK,\n} from '@teambit/legacy/dist/constants';\nimport { Consumer, loadConsumer } from '@teambit/legacy/dist/consumer';\nimport BitMap from '@teambit/legacy/dist/consumer/bit-map/bit-map';\nimport EjectComponents, { EjectResults } from '@teambit/legacy/dist/consumer/component-ops/eject-components';\nimport ComponentsList from '@teambit/legacy/dist/consumer/component/components-list';\nimport GeneralError from '@teambit/legacy/dist/error/general-error';\nimport HooksManager from '@teambit/legacy/dist/hooks';\nimport { RemoveAspect, RemoveMain } from '@teambit/remove';\nimport { NodeModuleLinker } from '@teambit/legacy/dist/links';\nimport logger from '@teambit/legacy/dist/logger/logger';\nimport { Lane, ModelComponent, Symlink, Version, ExportMetadata } from '@teambit/legacy/dist/scope/models';\nimport hasWildcard from '@teambit/legacy/dist/utils/string/has-wildcard';\nimport { Scope } from '@teambit/legacy/dist/scope';\nimport WorkspaceAspect, { Workspace } from '@teambit/workspace';\nimport { ConsumerNotFound } from '@teambit/legacy/dist/consumer/exceptions';\nimport { LaneReadmeComponent } from '@teambit/legacy/dist/scope/models/lane';\nimport { Http } from '@teambit/legacy/dist/scope/network/http';\nimport { ObjectList, ObjectItem } from '@teambit/legacy/dist/scope/objects/object-list';\nimport mapSeries from 'p-map-series';\nimport { LaneId, DEFAULT_LANE } from '@teambit/lane-id';\nimport { Remote, Remotes } from '@teambit/legacy/dist/remotes';\nimport { getScopeRemotes } from '@teambit/legacy/dist/scope/scope-remotes';\nimport { DependencyResolverAspect, DependencyResolverMain } from '@teambit/dependency-resolver';\nimport { ExportVersions } from '@teambit/legacy/dist/scope/models/export-metadata';\nimport {\n  persistRemotes,\n  validateRemotes,\n  removePendingDirs,\n} from '@teambit/legacy/dist/scope/component-ops/export-scope-components';\nimport { BitObject, Ref } from '@teambit/legacy/dist/scope/objects';\nimport { PersistFailed } from '@teambit/legacy/dist/scope/exceptions/persist-failed';\nimport { getAllVersionHashes } from '@teambit/legacy/dist/scope/component-ops/traverse-versions';\nimport { ExportAspect } from './export.aspect';\nimport { ExportCmd } from './export-cmd';\nimport { ResumeExportCmd } from './resume-export-cmd';\n\nconst HooksManagerInstance = HooksManager.getInstance();\n\nexport type OnExportIdTransformer = (id: BitId) => BitId;\n\ntype ModelComponentAndObjects = { component: ModelComponent; objects: BitObject[] };\ntype ObjectListPerName = { [name: string]: ObjectList };\ntype ObjectsPerRemote = {\n  remote: Remote;\n  objectList: ObjectList;\n  exportedIds?: string[];\n};\ntype ObjectsPerRemoteExtended = ObjectsPerRemote & {\n  objectListPerName: ObjectListPerName;\n  idsToChangeLocally: BitIds;\n  componentsAndObjects: ModelComponentAndObjects[];\n};\n\ntype ExportParams = {\n  ids: string[];\n  eject: boolean;\n  allVersions: boolean;\n  originDirectly: boolean;\n  includeNonStaged: boolean;\n  resumeExportId: string | undefined;\n  ignoreMissingArtifacts: boolean;\n};\n\nexport class ExportMain {\n  constructor(private workspace: Workspace, private remove: RemoveMain, private depResolver: DependencyResolverMain) {}\n\n  async export(params: ExportParams) {\n    HooksManagerInstance.triggerHook(PRE_EXPORT_HOOK, params);\n    const { updatedIds, nonExistOnBitMap, missingScope, exported, removedIds, exportedLanes } =\n      await this.exportComponents(params);\n    let ejectResults;\n    if (params.eject) ejectResults = await ejectExportedComponents(updatedIds);\n    const exportResults = {\n      componentsIds: exported,\n      nonExistOnBitMap,\n      removedIds,\n      missingScope,\n      ejectResults,\n      exportedLanes,\n    };\n    HooksManagerInstance.triggerHook(POST_EXPORT_HOOK, exportResults);\n    if (Scope.onPostExport) {\n      await Scope.onPostExport(exported, exportedLanes).catch((err) => {\n        logger.error('fatal: onPostExport encountered an error (this error does not stop the process)', err);\n      });\n    }\n    return exportResults;\n  }\n\n  async exportObjectList(\n    manyObjectsPerRemote: ObjectsPerRemote[],\n    scopeRemotes: Remotes,\n    centralHubOptions?: Record<string, any>\n  ) {\n    const http = await Http.connect(CENTRAL_BIT_HUB_URL, CENTRAL_BIT_HUB_NAME);\n    if (this.shouldPushToCentralHub(manyObjectsPerRemote, scopeRemotes)) {\n      const objectList = this.transformToOneObjectListWithScopeData(manyObjectsPerRemote);\n      await http.pushToCentralHub(objectList, centralHubOptions);\n    } else {\n      await this.pushToRemotesCarefully(manyObjectsPerRemote);\n    }\n  }\n\n  private async exportComponents({ ids, includeNonStaged, originDirectly, ...params }: ExportParams): Promise<{\n    updatedIds: BitId[];\n    nonExistOnBitMap: BitId[];\n    removedIds: BitIds;\n    missingScope: BitId[];\n    exported: BitId[];\n    exportedLanes: Lane[];\n    newIdsOnRemote: BitId[];\n  }> {\n    if (!this.workspace) throw new ConsumerNotFound();\n    const consumer: Consumer = this.workspace.consumer;\n    const { idsToExport, missingScope, idsWithFutureScope, laneObject } = await this.getComponentsToExport(\n      ids,\n      includeNonStaged\n    );\n\n    if (R.isEmpty(idsToExport)) {\n      return {\n        updatedIds: [],\n        nonExistOnBitMap: [],\n        removedIds: new BitIds(),\n        missingScope,\n        exported: [],\n        newIdsOnRemote: [],\n        exportedLanes: [],\n      };\n    }\n\n    // validate lane readme component and ensure it has been snapped\n    if (laneObject?.readmeComponent) {\n      _throwForUnsnappedLaneReadme(laneObject);\n    }\n    const isOnMain = consumer.isOnMain();\n    const { exported, updatedLocally, newIdsOnRemote } = await this.exportMany({\n      ...params,\n      scope: consumer.scope,\n      ids: idsToExport,\n      laneObject,\n      originDirectly,\n      idsWithFutureScope,\n      isOnMain,\n    });\n    if (laneObject) await updateLanesAfterExport(consumer, laneObject);\n    const removedIds = await this.getRemovedStagedBitIds();\n    const { updatedIds, nonExistOnBitMap } = _updateIdsOnBitMap(consumer.bitMap, updatedLocally);\n    await this.removeFromStagedConfig([...updatedIds, ...nonExistOnBitMap]);\n    await linkComponents(updatedIds, consumer);\n    Analytics.setExtraData('num_components', exported.length);\n    // it is important to have consumer.onDestroy() before running the eject operation, we want the\n    // export and eject operations to function independently. we don't want to lose the changes to\n    // .bitmap file done by the export action in case the eject action has failed.\n    await consumer.onDestroy();\n    return {\n      updatedIds,\n      nonExistOnBitMap: nonExistOnBitMap.filter((id) => !removedIds.hasWithoutVersion(id)),\n      removedIds,\n      missingScope,\n      exported,\n      newIdsOnRemote,\n      exportedLanes: laneObject ? [laneObject] : [],\n    };\n  }\n\n  /**\n   * the export process uses four steps. read more about it here: https://github.com/teambit/bit/pull/3371\n   */\n  async exportMany({\n    scope,\n    ids, // when exporting a lane, the ids are the lane component ids\n    laneObject,\n    allVersions,\n    originDirectly,\n    idsWithFutureScope,\n    resumeExportId,\n    ignoreMissingArtifacts,\n    isOnMain = true,\n  }: {\n    scope: Scope;\n    ids: BitIds;\n    laneObject?: Lane;\n    allVersions: boolean;\n    originDirectly?: boolean;\n    idsWithFutureScope: BitIds;\n    resumeExportId?: string | undefined;\n    ignoreMissingArtifacts?: boolean;\n    isOnMain?: boolean;\n  }): Promise<{ exported: BitIds; updatedLocally: BitIds; newIdsOnRemote: BitId[] }> {\n    logger.debugAndAddBreadCrumb('scope.exportMany', 'ids: {ids}', { ids: ids.toString() });\n    const scopeRemotes: Remotes = await getScopeRemotes(scope);\n    const idsGroupedByScope = ids.toGroupByScopeName(idsWithFutureScope);\n\n    /**\n     * when a component is exported for the first time, and the lane-scope is not the same as the component-scope, it's\n     * important to validate that there is no such component in the original scope. otherwise, later, it'll be impossible\n     * to merge the lane because these two components don't have any snap in common.\n     */\n    const validateTargetScopeForLanes = async () => {\n      if (!laneObject) {\n        return;\n      }\n      const newIds = BitIds.fromArray(ids.filter((id) => !id.hasScope()));\n      const newIdsGrouped = newIds.toGroupByScopeName(idsWithFutureScope);\n      await mapSeries(Object.keys(newIdsGrouped), async (scopeName) => {\n        if (scopeName === laneObject.scope) {\n          // this validation is redundant if the lane-component is in the same scope as the lane-object\n          return;\n        }\n        // by getting the remote we also validate that this scope actually exists.\n        const remote = await scopeRemotes.resolve(scopeName, scope);\n        const list = await remote.list();\n        const listIds = BitIds.fromArray(list.map((listItem) => listItem.id));\n        newIdsGrouped[scopeName].forEach((id) => {\n          if (listIds.hasWithoutScopeAndVersion(id)) {\n            throw new Error(`unable to export a lane with a new component \"${id.toString()}\", which has the default-scope \"${scopeName}\".\n  this scope already has a component with the same name. as such, it'll be impossible to merge the lane later because these two components are different`);\n          }\n        });\n      });\n    };\n\n    /**\n     * by default, when exporting a lane, it traverse from the Lane's head and therefore it may skip the main head.\n     * later, if for some reason the original component was deleted in its scope, the head object will be missing.\n     */\n    const addMainHeadIfPossible = async (allHashes: Ref[], modelComponent: ModelComponent) => {\n      const head = modelComponent.head;\n      if (!head) return;\n      if (allHashes.find((h) => h.hash === head.hash)) return; // head is already in the list\n      if (!(await scope.objects.has(head))) return; // it should not happen. but if it does, we don't want to block the export\n      allHashes.push(head);\n    };\n\n    const getVersionsToExport = async (modelComponent: ModelComponent, lane?: Lane): Promise<string[]> => {\n      const localTagsOrHashes = await modelComponent.getLocalTagsOrHashes(scope.objects);\n      if (!allVersions && !lane) {\n        return localTagsOrHashes;\n      }\n      let stopAt: Ref[] | undefined;\n      if (lane && !allVersions) {\n        // if lane is exported, components from other remotes may be part of this lane. we need their history.\n        // because their history could already exist on the remote from previous exports, we search this id in all\n        // remote-refs files of this lane-scope. while traversing the local history, stop when finding one of the remotes.\n        stopAt = await scope.objects.remoteLanes.getRefsFromAllLanesOnScope(lane.scope, modelComponent.toBitId());\n        if (modelComponent.laneHeadRemote) stopAt.push(modelComponent.laneHeadRemote);\n      }\n      const allHashes = await getAllVersionHashes({ modelComponent, repo: scope.objects, stopAt });\n      await addMainHeadIfPossible(allHashes, modelComponent);\n      return modelComponent.switchHashesWithTagsIfExist(allHashes);\n    };\n\n    await validateTargetScopeForLanes();\n    const groupedByScopeString = Object.keys(idsGroupedByScope)\n      .map((scopeName) => `scope \"${scopeName}\": ${idsGroupedByScope[scopeName].toString()}`)\n      .join(', ');\n    logger.debug(`export-scope-components, export to the following scopes ${groupedByScopeString}`);\n    const exportVersions: ExportVersions[] = [];\n\n    const populateExportMetadata = async (modelComponent: ModelComponent) => {\n      const localTagsOrHashes = await modelComponent.getLocalTagsOrHashes(scope.objects);\n      const head = modelComponent.getHeadRegardlessOfLane();\n      if (!head) {\n        throw new Error(`unable to export ${modelComponent.id()}, head is missing`);\n      }\n      exportVersions.push({\n        id: modelComponent.toBitId(),\n        versions: localTagsOrHashes,\n        head,\n      });\n    };\n\n    const getUpdatedObjectsToExport = async (\n      remoteNameStr: string,\n      bitIds: BitIds,\n      lane?: Lane\n    ): Promise<ObjectsPerRemoteExtended> => {\n      bitIds.throwForDuplicationIgnoreVersion();\n      const remote: Remote = await scopeRemotes.resolve(remoteNameStr, scope);\n      const idsToChangeLocally = BitIds.fromArray(bitIds.filter((id) => !id.scope || id.scope === remoteNameStr));\n      const componentsAndObjects: ModelComponentAndObjects[] = [];\n      const objectList = new ObjectList();\n      const objectListPerName: ObjectListPerName = {};\n      const processModelComponent = async (modelComponent: ModelComponent) => {\n        const versionToExport = await getVersionsToExport(modelComponent, lane);\n        modelComponent.clearStateData();\n        const objectItems = await modelComponent.collectVersionsObjects(\n          scope.objects,\n          versionToExport,\n          ignoreMissingArtifacts\n        );\n        const objectsList = await new ObjectList(objectItems).toBitObjects();\n        const componentAndObject = { component: modelComponent, objects: objectsList.getAll() };\n        await this.convertToCorrectScopeHarmony(scope, componentAndObject, remoteNameStr, bitIds, idsWithFutureScope);\n        await populateExportMetadata(modelComponent);\n        const remoteObj = { url: remote.host, name: remote.name, date: Date.now().toString() };\n        modelComponent.addScopeListItem(remoteObj);\n        componentsAndObjects.push(componentAndObject);\n        const componentBuffer = await modelComponent.compress();\n        const componentData = { ref: modelComponent.hash(), buffer: componentBuffer, type: modelComponent.getType() };\n        const objectsBuffer = await Promise.all(\n          componentAndObject.objects.map(async (obj) => ({\n            ref: obj.hash(),\n            buffer: await obj.compress(),\n            type: obj.getType(),\n          }))\n        );\n        const allObjectsData = [componentData, ...objectsBuffer];\n        objectListPerName[modelComponent.name] = new ObjectList(allObjectsData);\n        objectList.addIfNotExist(allObjectsData);\n      };\n\n      const modelComponents = await mapSeries(bitIds, (id) => scope.getModelComponent(id));\n      // super important! otherwise, the processModelComponent() changes objects in memory, while the key remains the same\n      scope.objects.clearCache();\n      // don't use Promise.all, otherwise, it'll throw \"JavaScript heap out of memory\" on a large set of data\n      await mapSeries(modelComponents, processModelComponent);\n      if (lane) {\n        lane.components.forEach((c) => {\n          const idWithFutureScope = idsWithFutureScope.searchWithoutScopeAndVersion(c.id);\n          c.id = c.id.hasScope() ? c.id : c.id.changeScope(idWithFutureScope?.scope || lane.scope);\n        });\n        if (lane.readmeComponent) {\n          lane.readmeComponent.id = lane.readmeComponent.id.hasScope()\n            ? lane.readmeComponent.id\n            : lane.readmeComponent.id.changeScope(lane.scope);\n        }\n        const laneData = { ref: lane.hash(), buffer: await lane.compress() };\n        objectList.addIfNotExist([laneData]);\n      }\n\n      return { remote, objectList, objectListPerName, idsToChangeLocally, componentsAndObjects };\n    };\n\n    const manyObjectsPerRemote = laneObject\n      ? [await getUpdatedObjectsToExport(laneObject.scope, ids, laneObject)]\n      : await mapSeries(Object.keys(idsGroupedByScope), (scopeName) =>\n          getUpdatedObjectsToExport(scopeName, idsGroupedByScope[scopeName], laneObject)\n        );\n\n    const getExportMetadata = async (): Promise<ObjectItem> => {\n      const exportMetadata = new ExportMetadata({ exportVersions });\n      const exportMetadataObj = await exportMetadata.compress();\n      const exportMetadataItem: ObjectItem = {\n        ref: exportMetadata.hash(),\n        buffer: exportMetadataObj,\n        type: ExportMetadata.name,\n      };\n      return exportMetadataItem;\n    };\n\n    const pushAllToCentralHub = async () => {\n      const objectList = this.transformToOneObjectListWithScopeData(manyObjectsPerRemote);\n      objectList.addIfNotExist([await getExportMetadata()]);\n      const http = await Http.connect(CENTRAL_BIT_HUB_URL, CENTRAL_BIT_HUB_NAME);\n      const pushResults = await http.pushToCentralHub(objectList);\n      const { failedScopes, successIds, errors } = pushResults;\n      if (failedScopes.length) {\n        throw new PersistFailed(failedScopes, errors);\n      }\n      const exportedBitIds = successIds.map((id) => BitId.parse(id, true));\n      if (manyObjectsPerRemote.length === 1) {\n        // when on a lane, it's always exported to the lane. and the ids can be from different scopes, so having the\n        // filter below, will remove these components from the output of bit-export at the end.\n        manyObjectsPerRemote[0].exportedIds = exportedBitIds.map((id) => id.toString());\n      } else {\n        manyObjectsPerRemote.forEach((objectPerRemote) => {\n          const idsPerScope = exportedBitIds.filter((id) => id.scope === objectPerRemote.remote.name);\n          // it's possible that idsPerScope is an empty array, in case the objects were exported already before\n          objectPerRemote.exportedIds = idsPerScope.map((id) => id.toString());\n        });\n      }\n    };\n\n    const updateLocalObjects = async (\n      lane?: Lane\n    ): Promise<Array<{ exported: BitIds; updatedLocally: BitIds; newIdsOnRemote: BitId[] }>> => {\n      return mapSeries(manyObjectsPerRemote, async (objectsPerRemote: ObjectsPerRemoteExtended) => {\n        const { remote, idsToChangeLocally, componentsAndObjects, exportedIds } = objectsPerRemote;\n        const remoteNameStr = remote.name;\n        // on Harmony, version hashes don't change, the new versions will replace the old ones.\n        // on the legacy, even when the hash changed, it's fine to have the old objects laying around.\n        // (could be removed in the future by some garbage collection).\n        const removeComponentVersions = false;\n        const refsToRemove = await Promise.all(\n          idsToChangeLocally.map((id) => scope.sources.getRefsForComponentRemoval(id, removeComponentVersions))\n        );\n        scope.objects.removeManyObjects(refsToRemove.flat());\n        // @ts-ignore\n        idsToChangeLocally.forEach((id) => {\n          scope.createSymlink(id, idsWithFutureScope.searchWithoutScopeAndVersion(id)?.scope || remoteNameStr);\n        });\n        componentsAndObjects.forEach((componentObject) => scope.sources.put(componentObject));\n\n        // update lanes\n        if (lane) {\n          if (idsToChangeLocally.length) {\n            // otherwise, we don't want to update scope-name of components in the lane object\n            scope.objects.add(lane);\n          }\n          await scope.objects.remoteLanes.syncWithLaneObject(remoteNameStr, lane);\n        }\n\n        if (isOnMain && !lane) {\n          // all exported from main\n          const remoteLaneId = LaneId.from(DEFAULT_LANE, remoteNameStr);\n          await scope.objects.remoteLanes.loadRemoteLane(remoteLaneId);\n          await Promise.all(\n            componentsAndObjects.map(async ({ component }) => {\n              await scope.objects.remoteLanes.addEntry(remoteLaneId, component.toBitId(), component.getHead());\n            })\n          );\n        }\n\n        await scope.objects.persist();\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const newIdsOnRemote = exportedIds!.map((id) => BitId.parse(id, true));\n        // remove version. exported component might have multiple versions exported\n        const idsWithRemoteScope: BitId[] = newIdsOnRemote.map((id) => id.changeVersion(undefined));\n        const idsWithRemoteScopeUniq = BitIds.uniqFromArray(idsWithRemoteScope);\n        return {\n          newIdsOnRemote,\n          exported: idsWithRemoteScopeUniq,\n          updatedLocally: BitIds.fromArray(\n            idsWithRemoteScopeUniq.filter((id) => idsToChangeLocally.hasWithoutScopeAndVersion(id))\n          ),\n        };\n      });\n    };\n\n    if (resumeExportId) {\n      const remotes = manyObjectsPerRemote.map((o) => o.remote);\n      await validateRemotes(remotes, resumeExportId);\n      await persistRemotes(manyObjectsPerRemote, resumeExportId);\n    } else if (this.shouldPushToCentralHub(manyObjectsPerRemote, scopeRemotes, originDirectly)) {\n      await pushAllToCentralHub();\n    } else {\n      // await pushToRemotes();\n      await this.pushToRemotesCarefully(manyObjectsPerRemote, resumeExportId);\n    }\n\n    loader.start('updating data locally...');\n    const results = await updateLocalObjects(laneObject);\n    return {\n      newIdsOnRemote: R.flatten(results.map((r) => r.newIdsOnRemote)),\n      exported: BitIds.uniqFromArray(R.flatten(results.map((r) => r.exported))),\n      updatedLocally: BitIds.uniqFromArray(R.flatten(results.map((r) => r.updatedLocally))),\n    };\n  }\n\n  private transformToOneObjectListWithScopeData(objectsPerRemote: ObjectsPerRemote[]): ObjectList {\n    const objectList = new ObjectList();\n    objectsPerRemote.forEach((objPerRemote) => {\n      objPerRemote.objectList.addScopeName(objPerRemote.remote.name);\n      objectList.mergeObjectList(objPerRemote.objectList);\n    });\n    return objectList;\n  }\n\n  private async pushToRemotesCarefully(manyObjectsPerRemote: ObjectsPerRemote[], resumeExportId?: string) {\n    const remotes = manyObjectsPerRemote.map((o) => o.remote);\n    const clientId = resumeExportId || Date.now().toString();\n    await this.pushRemotesPendingDir(clientId, manyObjectsPerRemote, resumeExportId);\n    await validateRemotes(remotes, clientId, Boolean(resumeExportId));\n    await persistRemotes(manyObjectsPerRemote, clientId);\n  }\n\n  private async pushRemotesPendingDir(\n    clientId: string,\n    manyObjectsPerRemote: ObjectsPerRemote[],\n    resumeExportId?: string\n  ): Promise<void> {\n    if (resumeExportId) {\n      logger.debug('pushRemotesPendingDir - skip as the resumeExportId was passed');\n      // no need to transfer the objects, they're already on the server. also, since this clientId\n      // exists already on the remote pending-dir, it'll cause a collision.\n      return;\n    }\n    const pushOptions = { clientId };\n    const pushedRemotes: Remote[] = [];\n    await mapSeries(manyObjectsPerRemote, async (objectsPerRemote: ObjectsPerRemote) => {\n      const { remote, objectList } = objectsPerRemote;\n      loader.start(`transferring ${objectList.count()} objects to the remote \"${remote.name}\"...`);\n      try {\n        await remote.pushMany(objectList, pushOptions, {});\n        logger.debugAndAddBreadCrumb(\n          'export-scope-components.pushRemotesPendingDir',\n          'successfully pushed all objects to the pending-dir directory on the remote'\n        );\n        pushedRemotes.push(remote);\n      } catch (err: any) {\n        logger.warnAndAddBreadCrumb('exportMany', 'failed pushing objects to the remote');\n        await removePendingDirs(pushedRemotes, clientId);\n        throw err;\n      }\n    });\n  }\n\n  private shouldPushToCentralHub(\n    manyObjectsPerRemote: ObjectsPerRemote[],\n    scopeRemotes: Remotes,\n    originDirectly = false\n  ): boolean {\n    if (originDirectly) return false;\n    const hubRemotes = manyObjectsPerRemote.filter((m) => scopeRemotes.isHub(m.remote.name));\n    if (!hubRemotes.length) return false;\n    if (hubRemotes.length === manyObjectsPerRemote.length) return true; // all are hub\n    // @todo: maybe create a flag \"no-central\" to support this workflow\n    throw new BitError(\n      `some of your components are configured to be exported to a local scope and some to the bit.cloud hub. this is not supported`\n    );\n  }\n\n  /**\n   * Component and dependencies id changes:\n   * When exporting components with dependencies to a bare-scope, some of the dependencies may be created locally and as\n   * a result their scope-name is null. Before the bare-scope gets the components, convert these scope names\n   * to the bare-scope name.\n   *\n   * This is the Harmony version of \"convertToCorrectScope\". No more codemod and no more hash changes.\n   */\n  private async convertToCorrectScopeHarmony(\n    scope: Scope,\n    componentsObjects: ModelComponentAndObjects,\n    remoteScope: string,\n    exportingIds: BitIds,\n    idsWithFutureScope: BitIds,\n    shouldFork = false // not in used currently, but might be needed soon\n  ): Promise<boolean> {\n    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!\n    const versionsObjects: Version[] = componentsObjects.objects.filter((object) => object instanceof Version);\n    const haveVersionsChanged = await Promise.all(\n      versionsObjects.map(async (objectVersion: Version) => {\n        const didDependencyChange = changeDependencyScope(objectVersion);\n        changeExtensionsScope(objectVersion);\n        this.depResolver.updateDepsOnLegacyExport(objectVersion, getIdWithUpdatedScope.bind(this));\n\n        return didDependencyChange;\n      })\n    );\n    const shouldChangeScope = shouldFork\n      ? remoteScope !== componentsObjects.component.scope\n      : !componentsObjects.component.scope;\n    const hasComponentChanged = shouldChangeScope;\n    if (shouldChangeScope) {\n      const idWithFutureScope = idsWithFutureScope.searchWithoutScopeAndVersion(componentsObjects.component.toBitId());\n      componentsObjects.component.scope = idWithFutureScope?.scope || remoteScope;\n    }\n\n    // return true if one of the versions has changed or the component itself\n    return haveVersionsChanged.some((x) => x) || hasComponentChanged;\n\n    function changeDependencyScope(version: Version): boolean {\n      let hasChanged = false;\n      version.getAllDependencies().forEach((dependency) => {\n        const updatedScope = getIdWithUpdatedScope(dependency.id);\n        if (!updatedScope.isEqual(dependency.id)) {\n          hasChanged = true;\n          dependency.id = updatedScope;\n        }\n      });\n      const ids: BitIds = version.flattenedDependencies;\n      const needsChange = ids.some((id) => id.scope !== remoteScope);\n      if (needsChange) {\n        version.flattenedDependencies = getBitIdsWithUpdatedScope(ids);\n        hasChanged = true;\n      }\n      return hasChanged;\n    }\n\n    function changeExtensionsScope(version: Version): boolean {\n      let hasChanged = false;\n      version.extensions.forEach((ext) => {\n        if (ext.extensionId) {\n          const updatedScope = getIdWithUpdatedScope(ext.extensionId);\n          if (!updatedScope.isEqual(ext.extensionId)) {\n            hasChanged = true;\n            ext.extensionId = updatedScope;\n          }\n        }\n      });\n      return hasChanged;\n    }\n\n    function getIdWithUpdatedScope(dependencyId: BitId): BitId {\n      if (dependencyId.scope === remoteScope) {\n        return dependencyId; // nothing has changed\n      }\n      // either, dependencyId is new, or this dependency is among the components to export (in case of fork)\n      if (!dependencyId.scope || exportingIds.hasWithoutVersion(dependencyId)) {\n        const depId = ModelComponent.fromBitId(dependencyId);\n        // todo: use 'load' for async and switch the foreach with map.\n        const dependencyObject = scope.objects.loadSync(depId.hash());\n        if (dependencyObject instanceof Symlink) {\n          return dependencyId.changeScope(dependencyObject.realScope);\n        }\n        const currentlyExportedDep = idsWithFutureScope.searchWithoutScopeAndVersion(dependencyId);\n        if (currentlyExportedDep && currentlyExportedDep.scope) {\n          // it's possible that a dependency has a different defaultScope settings.\n          return dependencyId.changeScope(currentlyExportedDep.scope);\n        }\n        return dependencyId.changeScope(remoteScope);\n      }\n      return dependencyId;\n    }\n    function getBitIdsWithUpdatedScope(bitIds: BitIds): BitIds {\n      const updatedIds = bitIds.map((id) => getIdWithUpdatedScope(id));\n      return BitIds.fromArray(updatedIds);\n    }\n  }\n\n  private async removeFromStagedConfig(ids: BitId[]) {\n    const componentIds = await this.workspace.resolveMultipleComponentIds(ids);\n    const stagedConfig = await this.workspace.scope.getStagedConfig();\n    componentIds.map((compId) => stagedConfig.removeComponentConfig(compId));\n    await stagedConfig.write();\n  }\n\n  private async getComponentsToExport(\n    ids: string[],\n    includeNonStaged: boolean\n  ): Promise<{ idsToExport: BitIds; missingScope: BitId[]; idsWithFutureScope: BitIds; laneObject?: Lane }> {\n    const consumer = this.workspace.consumer;\n    const componentsList = new ComponentsList(consumer);\n    const idsHaveWildcard = hasWildcard(ids);\n    const filterNonScopeIfNeeded = async (\n      bitIds: BitIds\n    ): Promise<{ idsToExport: BitIds; missingScope: BitId[]; idsWithFutureScope: BitIds }> => {\n      const idsWithFutureScope = await this.getIdsWithFutureScope(bitIds);\n      const [idsToExport, missingScope] = R.partition((id) => {\n        const idWithFutureScope = idsWithFutureScope.searchWithoutScopeAndVersion(id);\n        if (!idWithFutureScope) throw new Error(`idsWithFutureScope is missing ${id.toString()}`);\n        return idWithFutureScope.hasScope();\n      }, bitIds);\n      return { idsToExport: BitIds.fromArray(idsToExport), missingScope, idsWithFutureScope };\n    };\n    if (isUserTryingToExportLanes(consumer)) {\n      if (ids.length) {\n        throw new GeneralError(`when checked out to a lane, all its components are exported. please omit the ids`);\n      }\n      const { componentsToExport, laneObject } = await this.getLaneCompIdsToExport(consumer, includeNonStaged);\n      const loaderMsg = componentsToExport.length > 1 ? BEFORE_EXPORTS : BEFORE_EXPORT;\n      loader.start(loaderMsg);\n      const filtered = await filterNonScopeIfNeeded(componentsToExport);\n      return { ...filtered, laneObject };\n    }\n    if (!ids.length || idsHaveWildcard) {\n      loader.start(BEFORE_LOADING_COMPONENTS);\n      const exportPendingComponents: BitIds = includeNonStaged\n        ? await componentsList.listNonNewComponentsIds()\n        : await componentsList.listExportPendingComponentsIds();\n      const componentsToExport = idsHaveWildcard\n        ? ComponentsList.filterComponentsByWildcard(exportPendingComponents, ids)\n        : exportPendingComponents;\n      const loaderMsg = componentsToExport.length > 1 ? BEFORE_EXPORTS : BEFORE_EXPORT;\n      loader.start(loaderMsg);\n      return filterNonScopeIfNeeded(componentsToExport);\n    }\n    loader.start(BEFORE_EXPORT); // show single export\n    const parsedIds = await Promise.all(ids.map((id) => getParsedId(consumer, id)));\n    const statuses = await consumer.getManyComponentsStatuses(parsedIds);\n    statuses.forEach(({ id, status }) => {\n      if (status.nested) {\n        throw new GeneralError(\n          `unable to export \"${id.toString()}\", the component is not fully available. please use \"bit import\" first`\n        );\n      }\n    });\n    return filterNonScopeIfNeeded(BitIds.fromArray(parsedIds));\n  }\n\n  private async getIdsWithFutureScope(ids: BitIds): Promise<BitIds> {\n    const idsArrayP = ids.map(async (id) => {\n      if (id.hasScope()) return id;\n      const componentId = await this.workspace.resolveComponentId(id);\n      const finalScope = await this.workspace.componentDefaultScope(componentId);\n      if (finalScope) {\n        return id.changeScope(finalScope);\n      }\n      return id;\n    });\n    const idsArray = await Promise.all(idsArrayP);\n    return BitIds.fromArray(idsArray);\n  }\n\n  private async getLaneCompIdsToExport(\n    consumer: Consumer,\n    includeNonStaged: boolean\n  ): Promise<{ componentsToExport: BitIds; laneObject: Lane }> {\n    const currentLaneId = consumer.getCurrentLaneId();\n    const laneObject = await consumer.scope.loadLane(currentLaneId);\n    if (!laneObject) {\n      throw new Error(`fatal: unable to load the current lane object (${currentLaneId.toString()})`);\n    }\n    loader.start(BEFORE_LOADING_COMPONENTS);\n    const componentsList = new ComponentsList(consumer);\n    const componentsToExportWithoutRemoved = includeNonStaged\n      ? await componentsList.listNonNewComponentsIds()\n      : await componentsList.listExportPendingComponentsIds(laneObject);\n    const removedStagedBitIds = await this.getRemovedStagedBitIds();\n    const componentsToExport = BitIds.uniqFromArray([...componentsToExportWithoutRemoved, ...removedStagedBitIds]);\n    return { componentsToExport, laneObject };\n  }\n\n  private async getRemovedStagedBitIds(): Promise<BitIds> {\n    const removedStaged = await this.remove.getRemovedStaged();\n    return BitIds.fromArray(removedStaged.map((r) => r._legacy).map((id) => id.changeVersion(undefined)));\n  }\n\n  static runtime = MainRuntime;\n  static dependencies = [CLIAspect, ScopeAspect, WorkspaceAspect, RemoveAspect, DependencyResolverAspect];\n  static async provider([cli, scope, workspace, remove, depResolver]: [\n    CLIMain,\n    ScopeMain,\n    Workspace,\n    RemoveMain,\n    DependencyResolverMain\n  ]) {\n    const exportMain = new ExportMain(workspace, remove, depResolver);\n    cli.register(new ResumeExportCmd(scope), new ExportCmd(exportMain));\n    return exportMain;\n  }\n}\n\nExportAspect.addRuntime(ExportMain);\n\nfunction _updateIdsOnBitMap(bitMap: BitMap, componentsIds: BitIds): { updatedIds: BitId[]; nonExistOnBitMap: BitIds } {\n  const updatedIds = [];\n  const nonExistOnBitMap = new BitIds();\n  componentsIds.forEach((componentsId) => {\n    const resultId = bitMap.updateComponentId(componentsId, true);\n    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!\n    if (resultId.hasVersion()) updatedIds.push(resultId);\n    else nonExistOnBitMap.push(resultId);\n  });\n  return { updatedIds, nonExistOnBitMap };\n}\n\nasync function getParsedId(consumer: Consumer, id: string): Promise<BitId> {\n  // reason why not calling `consumer.getParsedId()` first is because a component might not be on\n  // .bitmap and only in the scope. we support this case and enable to export\n  const parsedId: BitId = await consumer.scope.getParsedId(id);\n  if (parsedId.hasScope()) return parsedId;\n  // parsing id from the scope, doesn't provide the scope-name in case it's missing, in this case\n  // get the id including the scope from the consumer.\n  try {\n    return consumer.getParsedId(id);\n  } catch (err: any) {\n    // not in the consumer, just return the one parsed without the scope name\n    return parsedId;\n  }\n}\n\nasync function linkComponents(ids: BitId[], consumer: Consumer): Promise<void> {\n  // we don't have much of a choice here, we have to load all the exported components in order to link them\n  // some of the components might be authored, some might be imported.\n  // when a component has dists, we need the consumer-component object to retrieve the dists info.\n  const components = await Promise.all(ids.map((id) => consumer.loadComponentFromModel(id)));\n  const nodeModuleLinker = new NodeModuleLinker(components, consumer, consumer.bitMap);\n  await nodeModuleLinker.link();\n}\n\nasync function ejectExportedComponents(componentsIds): Promise<EjectResults> {\n  const consumer: Consumer = await loadConsumer(undefined, true);\n  let ejectResults: EjectResults;\n  try {\n    const ejectComponents = new EjectComponents(consumer, componentsIds);\n    ejectResults = await ejectComponents.eject();\n  } catch (err: any) {\n    const ejectErr = `The components ${componentsIds.map((c) => c.toString()).join(', ')} were exported successfully.\n    However, the eject operation has failed due to an error: ${err.msg || err}`;\n    logger.error(ejectErr, err);\n    throw new Error(ejectErr);\n  }\n  // run the consumer.onDestroy() again, to write the changes done by the eject action to .bitmap\n  await consumer.onDestroy();\n  return ejectResults;\n}\n\nfunction _throwForUnsnappedLaneReadme(lane: Lane) {\n  const readmeComponent = lane.readmeComponent as LaneReadmeComponent;\n\n  const isValid =\n    readmeComponent?.head &&\n    lane.getComponent(readmeComponent.id) &&\n    lane.getComponentHead(readmeComponent.id)?.isEqual(readmeComponent?.head);\n\n  if (!isValid) {\n    throw new BitError(\n      `${lane?.name} has a readme component ${readmeComponent.id} that hasn't been snapped on the lane.\n      Please run either snap -a or snap ${readmeComponent.id} to snap the component on the lane before exporting it.`\n    );\n  }\n}\n\nasync function updateLanesAfterExport(consumer: Consumer, lane: Lane) {\n  const currentLane = consumer.getCurrentLaneId();\n  const isCurrentLane = lane.name === currentLane.name;\n  if (!isCurrentLane) {\n    throw new Error(\n      `updateLanesAfterExport should get called only with current lane, got ${lane.name}, current ${currentLane.name}`\n    );\n  }\n  consumer.setCurrentLane(lane.toLaneId(), true);\n  consumer.scope.scopeJson.removeLaneFromNew(lane.name);\n  lane.isNew = false;\n}\n\nexport function isUserTryingToExportLanes(consumer: Consumer) {\n  return consumer.isOnLane();\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAKA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAMA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAMA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA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"}