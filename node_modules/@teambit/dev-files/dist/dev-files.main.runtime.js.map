{"version":3,"names":["DevFilesMain","constructor","envs","devPatternSlot","config","computeDevPatterns","component","entry","state","aspects","get","DevFilesAspect","id","configuredPatterns","devFilePatterns","envDef","calculateEnv","envPatterns","env","getDevPatterns","getPatterns","devPatterns","isFunction","patternSlot","toArray","fromSlot","reduce","acc","current","aspectId","patterns","concat","Object","assign","data","flatten","values","isDevFile","filePath","devFiles","computeDevFiles","includes","registerDevPattern","pattern","register","getDevFiles","rawDevFiles","DevFiles","keys","filesystem","byGlob","map","file","relative","provider","workspace","componentAspect","graphql","registerShowFragments","DevFilesFragment","onComponentLoad","toObject","DependencyResolver","consumerComponent","componentId","resolveComponentId","Error","toString","computedDevFiles","list","devFilesSchema","Slot","withType","MainRuntime","EnvsAspect","WorkspaceAspect","ComponentAspect","GraphqlAspect","addRuntime"],"sources":["dev-files.main.runtime.ts"],"sourcesContent":["import { MainRuntime } from '@teambit/cli';\nimport { flatten, isFunction } from 'lodash';\nimport { SlotRegistry, Slot } from '@teambit/harmony';\nimport WorkspaceAspect, { Workspace } from '@teambit/workspace';\nimport { EnvsAspect, EnvsMain } from '@teambit/envs';\nimport LegacyComponent from '@teambit/legacy/dist/consumer/component';\nimport { DependencyResolver } from '@teambit/legacy/dist/consumer/component/dependencies/dependency-resolver';\nimport { Component, ComponentMain, ComponentAspect } from '@teambit/component';\nimport { GraphqlAspect, GraphqlMain } from '@teambit/graphql';\nimport { DevFilesAspect } from './dev-files.aspect';\nimport { DevFiles } from './dev-files';\nimport { DevFilesFragment } from './dev-files.fragment';\nimport { devFilesSchema } from './dev-files.graphql';\n\n/**\n * dev pattern is a list of strings or a function that returns a list of strings. an example to a pattern can be \"[*.spec.ts]\"\n */\nexport type DevPatterns = ((component: Component) => string[]) | string[];\n\n/**\n * slot for dev file patterns.\n */\nexport type DevPatternSlot = SlotRegistry<DevPatterns>;\n\nexport type DevFilesConfig = {\n  patterns: string[];\n};\n\nexport class DevFilesMain {\n  constructor(\n    private envs: EnvsMain,\n\n    private devPatternSlot: DevPatternSlot,\n\n    /**\n     * configuration loaded into the dev files aspect.\n     */\n    readonly config: DevFilesConfig\n  ) {}\n\n  /**\n   * compute all dev patterns on a component.\n   * computing of dev patterns is a merge of the configuration, the env (env.getDevPatterns(component)) and\n   * the registering aspects (through registerDevPattern()).\n   */\n  computeDevPatterns(component: Component) {\n    const entry = component.state.aspects.get(DevFilesAspect.id);\n    const configuredPatterns = entry?.config.devFilePatterns || [];\n    const envDef = this.envs.calculateEnv(component);\n    const envPatterns: string[] = envDef.env?.getDevPatterns ? envDef.env.getDevPatterns(component) : [];\n\n    const getPatterns = (devPatterns: DevPatterns) => {\n      if (isFunction(devPatterns)) {\n        return devPatterns(component);\n      }\n      return devPatterns;\n    };\n    const patternSlot = this.devPatternSlot.toArray();\n    const fromSlot: { [id: string]: any } = patternSlot.reduce((acc, current) => {\n      const [aspectId, patterns] = current;\n      if (!acc[aspectId]) acc[aspectId] = [];\n      // if (component.state.aspects.get(aspectId)) acc[aspectId] = acc[aspectId].concat(patterns);\n      acc[aspectId] = acc[aspectId].concat(getPatterns(patterns));\n      return acc;\n    }, {});\n\n    return Object.assign(\n      {\n        [envDef.id]: envPatterns,\n        config: configuredPatterns,\n      },\n      fromSlot\n    );\n  }\n\n  /**\n   * get all dev files configured on a component.\n   */\n  getDevPatterns(component: Component, aspectId?: string): string[] {\n    const entry = component.state.aspects.get(DevFilesAspect.id);\n    const devPatterns = entry?.data.devPatterns || {};\n    return aspectId ? devPatterns[aspectId] : flatten(Object.values(devPatterns));\n  }\n\n  /**\n   * determine whether a file of a component is a dev file.\n   */\n  isDevFile(component: Component, filePath: string): boolean {\n    const devFiles = this.computeDevFiles(component);\n    return devFiles.includes(filePath);\n  }\n\n  /**\n   * register a new dev pattern.\n   * @param regex dev pattern\n   */\n  registerDevPattern(pattern: DevPatterns) {\n    return this.devPatternSlot.register(pattern);\n  }\n\n  /**\n   * get all dev patterns registered.\n   * If you want to use this during onLoad event you might need to use computeDevFiles instead, since the component might not include this data yet\n   */\n  getDevFiles(component: Component): DevFiles {\n    const entry = component.state.aspects.get(DevFilesAspect.id);\n    const rawDevFiles = entry?.data.devFiles || {};\n    return new DevFiles(rawDevFiles);\n  }\n\n  /**\n   * compute all dev files of a component.\n   */\n  computeDevFiles(component: Component): DevFiles {\n    const devPatterns = this.computeDevPatterns(component);\n    const rawDevFiles = Object.keys(devPatterns).reduce((acc, aspectId) => {\n      if (!acc[aspectId]) acc[aspectId] = [];\n      const patterns = devPatterns[aspectId];\n      acc[aspectId] = component.state.filesystem.byGlob(patterns).map((file) => file.relative);\n      return acc;\n    }, {});\n\n    return new DevFiles(rawDevFiles);\n  }\n\n  static slots = [Slot.withType<DevPatterns>()];\n\n  static defaultConfig = {\n    patterns: [],\n  };\n\n  static runtime = MainRuntime;\n\n  static dependencies = [EnvsAspect, WorkspaceAspect, ComponentAspect, GraphqlAspect];\n\n  static async provider(\n    [envs, workspace, componentAspect, graphql]: [EnvsMain, Workspace, ComponentMain, GraphqlMain],\n    config: DevFilesConfig,\n    [devPatternSlot]: [DevPatternSlot]\n  ) {\n    const devFiles = new DevFilesMain(envs, devPatternSlot, config);\n    componentAspect.registerShowFragments([new DevFilesFragment(devFiles)]);\n\n    if (workspace) {\n      workspace.onComponentLoad(async (component) => {\n        return {\n          devPatterns: devFiles.computeDevPatterns(component),\n          devFiles: devFiles.computeDevFiles(component).toObject(),\n        };\n      });\n\n      DependencyResolver.getDevFiles = async (consumerComponent: LegacyComponent): Promise<string[]> => {\n        const componentId = await workspace.resolveComponentId(consumerComponent.id);\n        // Do not change the storeInCache=false arg. if you think you need to change it, please talk to Gilad first\n        const component = await workspace.get(componentId, consumerComponent, true, false);\n        if (!component) throw Error(`failed to transform component ${consumerComponent.id.toString()} in harmony`);\n        const computedDevFiles = devFiles.computeDevFiles(component);\n        return computedDevFiles.list();\n      };\n    }\n\n    graphql.register(devFilesSchema(devFiles));\n    return devFiles;\n  }\n}\n\nDevFilesAspect.addRuntime(DevFilesMain);\n"],"mappings":"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"}