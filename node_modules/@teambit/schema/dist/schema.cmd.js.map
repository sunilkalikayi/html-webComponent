{"version":3,"names":["SchemaCommand","constructor","schema","component","logger","PATTERN_HELP","report","pattern","schemas","getSchemas","map","toStringPerType","join","json","toObject","host","getHost","ids","idsByPattern","components","getMany","longRunningLog","createLongProcessLogger","length","results","pMapSeries","logProgress","id","toString","getSchema","end"],"sources":["schema.cmd.ts"],"sourcesContent":["import { Command, CommandOptions } from '@teambit/cli';\nimport { ComponentMain } from '@teambit/component';\nimport pMapSeries from 'p-map-series';\nimport { Logger } from '@teambit/logger';\nimport { APISchema } from '@teambit/semantics.entities.semantic-schema';\nimport { PATTERN_HELP } from '@teambit/legacy/dist/constants';\nimport type { SchemaMain } from './schema.main.runtime';\n\nexport class SchemaCommand implements Command {\n  name = 'schema <pattern>';\n  description = 'shows the API schema of a certain component.';\n  extendedDescription = `${PATTERN_HELP('schema')}`;\n  group = 'development';\n  options = [['j', 'json', 'return the component data in json format']] as CommandOptions;\n\n  constructor(private schema: SchemaMain, private component: ComponentMain, private logger: Logger) {}\n\n  async report([pattern]) {\n    const schemas = await this.getSchemas([pattern]);\n    return schemas.map((schema) => schema.toStringPerType()).join('\\n\\n\\n');\n  }\n\n  async json([pattern]) {\n    const schemas = await this.getSchemas([pattern]);\n    return schemas.map((schema) => schema.toObject());\n  }\n\n  private async getSchemas([pattern]): Promise<APISchema[]> {\n    const host = this.component.getHost();\n    const ids = await host.idsByPattern(pattern, true);\n    const components = await host.getMany(ids);\n    const longRunningLog = this.logger.createLongProcessLogger('generating schema', ids.length);\n    const results = await pMapSeries(components, (component) => {\n      longRunningLog.logProgress(component.id.toString());\n      return this.schema.getSchema(component);\n    });\n    longRunningLog.end();\n    return results;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAGA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAGO,MAAMA,aAAa,CAAoB;EAO5CC,WAAW,CAASC,MAAkB,EAAUC,SAAwB,EAAUC,MAAc,EAAE;IAAA,KAA9EF,MAAkB,GAAlBA,MAAkB;IAAA,KAAUC,SAAwB,GAAxBA,SAAwB;IAAA,KAAUC,MAAc,GAAdA,MAAc;IAAA,8CANzF,kBAAkB;IAAA,qDACX,8CAA8C;IAAA,6DACrC,GAAE,IAAAC,yBAAY,EAAC,QAAQ,CAAE,EAAC;IAAA,+CACzC,aAAa;IAAA,iDACX,CAAC,CAAC,GAAG,EAAE,MAAM,EAAE,0CAA0C,CAAC,CAAC;EAE8B;EAEnG,MAAMC,MAAM,CAAC,CAACC,OAAO,CAAC,EAAE;IACtB,MAAMC,OAAO,GAAG,MAAM,IAAI,CAACC,UAAU,CAAC,CAACF,OAAO,CAAC,CAAC;IAChD,OAAOC,OAAO,CAACE,GAAG,CAAER,MAAM,IAAKA,MAAM,CAACS,eAAe,EAAE,CAAC,CAACC,IAAI,CAAC,QAAQ,CAAC;EACzE;EAEA,MAAMC,IAAI,CAAC,CAACN,OAAO,CAAC,EAAE;IACpB,MAAMC,OAAO,GAAG,MAAM,IAAI,CAACC,UAAU,CAAC,CAACF,OAAO,CAAC,CAAC;IAChD,OAAOC,OAAO,CAACE,GAAG,CAAER,MAAM,IAAKA,MAAM,CAACY,QAAQ,EAAE,CAAC;EACnD;EAEA,MAAcL,UAAU,CAAC,CAACF,OAAO,CAAC,EAAwB;IACxD,MAAMQ,IAAI,GAAG,IAAI,CAACZ,SAAS,CAACa,OAAO,EAAE;IACrC,MAAMC,GAAG,GAAG,MAAMF,IAAI,CAACG,YAAY,CAACX,OAAO,EAAE,IAAI,CAAC;IAClD,MAAMY,UAAU,GAAG,MAAMJ,IAAI,CAACK,OAAO,CAACH,GAAG,CAAC;IAC1C,MAAMI,cAAc,GAAG,IAAI,CAACjB,MAAM,CAACkB,uBAAuB,CAAC,mBAAmB,EAAEL,GAAG,CAACM,MAAM,CAAC;IAC3F,MAAMC,OAAO,GAAG,MAAM,IAAAC,qBAAU,EAACN,UAAU,EAAGhB,SAAS,IAAK;MAC1DkB,cAAc,CAACK,WAAW,CAACvB,SAAS,CAACwB,EAAE,CAACC,QAAQ,EAAE,CAAC;MACnD,OAAO,IAAI,CAAC1B,MAAM,CAAC2B,SAAS,CAAC1B,SAAS,CAAC;IACzC,CAAC,CAAC;IACFkB,cAAc,CAACS,GAAG,EAAE;IACpB,OAAON,OAAO;EAChB;AACF;AAAC"}