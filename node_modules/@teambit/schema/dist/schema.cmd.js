"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SchemaCommand = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _pMapSeries() {
  const data = _interopRequireDefault(require("p-map-series"));
  _pMapSeries = function () {
    return data;
  };
  return data;
}
function _constants() {
  const data = require("@teambit/legacy/dist/constants");
  _constants = function () {
    return data;
  };
  return data;
}
class SchemaCommand {
  constructor(schema, component, logger) {
    this.schema = schema;
    this.component = component;
    this.logger = logger;
    (0, _defineProperty2().default)(this, "name", 'schema <pattern>');
    (0, _defineProperty2().default)(this, "description", 'shows the API schema of a certain component.');
    (0, _defineProperty2().default)(this, "extendedDescription", `${(0, _constants().PATTERN_HELP)('schema')}`);
    (0, _defineProperty2().default)(this, "group", 'development');
    (0, _defineProperty2().default)(this, "options", [['j', 'json', 'return the component data in json format']]);
  }
  async report([pattern]) {
    const schemas = await this.getSchemas([pattern]);
    return schemas.map(schema => schema.toStringPerType()).join('\n\n\n');
  }
  async json([pattern]) {
    const schemas = await this.getSchemas([pattern]);
    return schemas.map(schema => schema.toObject());
  }
  async getSchemas([pattern]) {
    const host = this.component.getHost();
    const ids = await host.idsByPattern(pattern, true);
    const components = await host.getMany(ids);
    const longRunningLog = this.logger.createLongProcessLogger('generating schema', ids.length);
    const results = await (0, _pMapSeries().default)(components, component => {
      longRunningLog.logProgress(component.id.toString());
      return this.schema.getSchema(component);
    });
    longRunningLog.end();
    return results;
  }
}
exports.SchemaCommand = SchemaCommand;

//# sourceMappingURL=schema.cmd.js.map