{"version":3,"names":["SchemaMain","constructor","parserSlot","envs","config","logger","getDefaultParser","get","defaultParser","parseModule","path","parsers","toArray","maybeParser","find","parser","match","extension","getSchemaExtractor","component","env","getEnv","Error","name","getSchema","debug","id","toString","schemaExtractor","extract","getSchemaFromObject","obj","APISchema","fromObject","registerParser","register","provider","cli","graphql","loggerMain","createLogger","SchemaAspect","schema","SchemaCommand","schemaSchema","MainRuntime","EnvsAspect","CLIAspect","ComponentAspect","GraphqlAspect","LoggerAspect","Slot","withType","addRuntime"],"sources":["schema.main.runtime.ts"],"sourcesContent":["import { MainRuntime, CLIMain, CLIAspect } from '@teambit/cli';\nimport ComponentAspect, { Component, ComponentMain } from '@teambit/component';\nimport { Slot, SlotRegistry } from '@teambit/harmony';\nimport GraphqlAspect, { GraphqlMain } from '@teambit/graphql';\nimport { EnvsAspect, EnvsMain } from '@teambit/envs';\nimport { Logger, LoggerAspect, LoggerMain } from '@teambit/logger';\nimport { APISchema, Export } from '@teambit/semantics.entities.semantic-schema';\nimport { Parser } from './parser';\nimport { SchemaAspect } from './schema.aspect';\nimport { SchemaExtractor } from './schema-extractor';\nimport { SchemaCommand } from './schema.cmd';\nimport { schemaSchema } from './schema.graphql';\n\nexport type ParserSlot = SlotRegistry<Parser>;\n\nexport type SchemaConfig = {\n  /**\n   * default parser\n   */\n  defaultParser: string;\n};\n\n/**\n * extension for extracting component schemas.\n */\nexport class SchemaMain {\n  constructor(\n    /**\n     * parsers slot.\n     */\n    private parserSlot: ParserSlot,\n\n    private envs: EnvsMain,\n\n    private config: SchemaConfig,\n\n    private logger: Logger\n  ) {}\n\n  /**\n   * get the default parser.\n   */\n  getDefaultParser(): Parser {\n    return this.parserSlot.get(this.config.defaultParser) as Parser;\n  }\n\n  /**\n   * parse a module into a component schema.\n   */\n  parseModule(path: string): Export[] {\n    const parsers = this.parserSlot.toArray();\n    let maybeParser = parsers.find(([, parser]) => {\n      const match = path.match(parser.extension);\n      return match;\n    });\n\n    if (!maybeParser) {\n      maybeParser = [this.config.defaultParser, this.getDefaultParser()];\n    }\n\n    const [, parser] = maybeParser;\n    return parser.parseModule(path);\n  }\n\n  getSchemaExtractor(component: Component) {\n    const env = this.envs.getEnv(component).env;\n    if (typeof env.getSchemaExtractor === 'undefined') {\n      throw new Error(`No SchemaExtractor defined for ${env.name}`);\n    }\n\n    return env.getSchemaExtractor();\n  }\n\n  /**\n   * get a schema of a component.\n   * @param component target component.\n   */\n  async getSchema(component: Component): Promise<APISchema> {\n    this.logger.debug(`getSchema of ${component.id.toString()}`);\n    const env = this.envs.getEnv(component).env;\n    if (typeof env.getSchemaExtractor === 'undefined') {\n      throw new Error(`No SchemaExtractor defined for ${env.name}`);\n    }\n    const schemaExtractor: SchemaExtractor = env.getSchemaExtractor();\n    return schemaExtractor.extract(component);\n  }\n\n  getSchemaFromObject(obj: Record<string, any>): APISchema {\n    return APISchema.fromObject(obj);\n  }\n\n  /**\n   * register a new parser.\n   */\n  registerParser(parser: Parser): SchemaMain {\n    this.parserSlot.register(parser);\n    return this;\n  }\n\n  static runtime = MainRuntime;\n  static dependencies = [EnvsAspect, CLIAspect, ComponentAspect, GraphqlAspect, LoggerAspect];\n  static slots = [Slot.withType<Parser>()];\n\n  static defaultConfig = {\n    defaultParser: 'teambit.typescript/typescript',\n  };\n\n  static async provider(\n    [envs, cli, component, graphql, loggerMain]: [EnvsMain, CLIMain, ComponentMain, GraphqlMain, LoggerMain],\n    config: SchemaConfig,\n    [parserSlot]: [ParserSlot]\n  ) {\n    const logger = loggerMain.createLogger(SchemaAspect.id);\n    const schema = new SchemaMain(parserSlot, envs, config, logger);\n    cli.register(new SchemaCommand(schema, component, logger));\n    graphql.register(schemaSchema(schema));\n\n    // workspace.onComponentLoad(async (component) => {\n    //   const apiSchema = await schema.getSchema(component);\n    //   return {};\n    // });\n\n    return schema;\n  }\n}\n\nSchemaAspect.addRuntime(SchemaMain);\n\nexport default SchemaMain;\n"],"mappings":"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"}