{"version":3,"names":[],"sources":["dev-server-context.ts"],"sourcesContent":["import { ExecutionContext } from '@teambit/envs';\n\nexport interface DevServerContext extends ExecutionContext {\n  /**\n   * array of files to include.\n   */\n  entry: string[];\n\n  /**\n   * public path.\n   */\n  publicPath: string;\n\n  /**\n   * root path of the workspace.\n   */\n  rootPath: string;\n\n  /**\n   * title of the page.\n   */\n  title?: string;\n\n  /**\n   * favicon of the page.\n   */\n  favicon?: string;\n\n  /**\n   * A path for the host root dir\n   * Host root dir is usually the env root dir\n   * This can be used in different bundle options which run require.resolve\n   * for example when configuring webpack aliases or webpack expose loader on the peers deps\n   */\n  hostRootDir?: string;\n\n  /**\n   * Array of host dependencies, they are used later in case you use one of the following:\n   *\n   */\n  hostDependencies?: string[];\n\n  /**\n   * Make the hostDependencies externals. externals (from webpack docs):\n   * The externals configuration option provides a way of excluding dependencies from the output bundles.\n   * Instead, the created bundle relies on that dependency to be present in the consumer's (any end-user application) environment.\n   */\n  externalizeHostDependencies?: boolean;\n\n  /**\n   * Make aliases for the hostDependencies.\n   * the path of each one will be resolved by [hostRootDir, process.cwd(), __dirname]\n   * this will usually replace the instance of import one of the host dependencies by the instance of the env provided it\n   */\n  aliasHostDependencies?: boolean;\n}\n"],"mappings":""}