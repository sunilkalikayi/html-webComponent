{"version":3,"names":["DevServerService","constructor","pubsub","dependencyResolver","runtimeSlot","render","env","context","descriptor","getDescriptor","id","displayName","version","highlight","config","language","ignoreIllegals","environment","getDevServer","undefined","mergedContext","buildContext","devServer","icon","displayConfig","runOnce","contexts","dedicatedEnvDevServers","groupedEnvs","dedupEnvs","servers","Promise","all","Object","entries","map","contextList","mainContext","find","envDefinition","additionalContexts","filter","devServerContext","envRuntime","ComponentServer","mergeContext","getComponentsFromContexts","flatten","components","relatedContexts","ctx","concat","peers","getPeerDependenciesListFromEnv","hostRootDir","envAspectDefinition","aspectPath","assign","entry","getEntry","rootPath","publicPath","sep","hostDependencies","aliasHostDependencies"],"sources":["dev-server.service.tsx"],"sourcesContent":["import { EnvService, ExecutionContext, EnvDefinition } from '@teambit/envs';\nimport { PubsubMain } from '@teambit/pubsub';\nimport { flatten } from 'lodash';\nimport React from 'react';\nimport { Text, Newline } from 'ink';\nimport { DependencyResolverMain } from '@teambit/dependency-resolver';\nimport highlight from 'cli-highlight';\nimport { sep } from 'path';\nimport { BrowserRuntimeSlot } from './bundler.main.runtime';\nimport { ComponentServer } from './component-server';\nimport { dedupEnvs } from './dedup-envs';\nimport { DevServer } from './dev-server';\nimport { DevServerContext } from './dev-server-context';\nimport { getEntry } from './get-entry';\n\nexport type DevServerServiceOptions = { dedicatedEnvDevServers?: string[] };\n\nexport type DevServerDescriptor = {\n  /**\n   * id of the dev server (e.g. jest/mocha)\n   */\n  id: string;\n\n  /**\n   * display name of the dev server (e.g. Jest / Mocha)\n   */\n  displayName: string;\n\n  /**\n   * icon of the configured dev server.\n   */\n  icon: string;\n\n  /**\n   * string containing the config for display.\n   */\n  config: string;\n\n  version?: string;\n};\n\nexport class DevServerService implements EnvService<ComponentServer, DevServerDescriptor> {\n  name = 'dev server';\n\n  constructor(\n    /**\n     * browser runtime slot\n     */\n    private pubsub: PubsubMain,\n\n    private dependencyResolver: DependencyResolverMain,\n\n    /**\n     * browser runtime slot\n     */\n    private runtimeSlot: BrowserRuntimeSlot\n  ) {}\n\n  async render(env: EnvDefinition, context: ExecutionContext[]) {\n    const descriptor = await this.getDescriptor(env, context);\n    return (\n      <Text key={descriptor?.id}>\n        <Text color=\"cyan\">configured dev server: </Text>\n        <Text>\n          {descriptor?.id} ({descriptor?.displayName} @ {descriptor?.version})\n        </Text>\n        <Newline />\n        <Text underline color=\"cyan\">\n          dev server config:\n        </Text>\n        <Newline />\n        <Text>\n          {/* refactor a separate component which highlights for cli */}\n          {highlight(descriptor?.config || '', { language: 'javascript', ignoreIllegals: true })}\n        </Text>\n        <Newline />\n      </Text>\n    );\n  }\n\n  async getDescriptor(\n    environment: EnvDefinition,\n    context?: ExecutionContext[]\n  ): Promise<DevServerDescriptor | undefined> {\n    if (!environment.env.getDevServer || !context) return undefined;\n    const mergedContext = await this.buildContext(context[0], []);\n    const devServer: DevServer = environment.env.getDevServer(mergedContext);\n\n    return {\n      id: devServer.id || '',\n      displayName: devServer.displayName || '',\n      icon: devServer.icon || '',\n      config: devServer.displayConfig ? devServer.displayConfig() : '',\n      version: devServer.version ? devServer.version() : '?',\n    };\n  }\n\n  // async run(context: ExecutionContext): Promise<ComponentServer[]> {\n  //   const devServerContext = await this.buildContext(context);\n  //   const devServer: DevServer = context.env.getDevServer(devServerContext);\n  //   const port = await selectPort();\n  //   // TODO: refactor to replace with a component server instance.\n  //   return new ComponentServer(this.pubsub, context, port, devServer);\n  // }\n\n  async runOnce(\n    contexts: ExecutionContext[],\n    { dedicatedEnvDevServers }: DevServerServiceOptions\n  ): Promise<ComponentServer[]> {\n    const groupedEnvs = await dedupEnvs(contexts, this.dependencyResolver, dedicatedEnvDevServers);\n\n    const servers = await Promise.all(\n      Object.entries(groupedEnvs).map(async ([id, contextList]) => {\n        const mainContext = contextList.find((context) => context.envDefinition.id === id) || contextList[0];\n        const additionalContexts = contextList.filter((context) => context.envDefinition.id !== id);\n\n        const devServerContext = await this.buildContext(mainContext, additionalContexts);\n        const devServer: DevServer = await devServerContext.envRuntime.env.getDevServer(devServerContext);\n\n        return new ComponentServer(this.pubsub, devServerContext, [3300, 3400], devServer);\n      })\n    );\n\n    return servers;\n  }\n\n  mergeContext() {}\n\n  private getComponentsFromContexts(contexts: ExecutionContext[]) {\n    return flatten(\n      contexts.map((context) => {\n        return context.components;\n      })\n    );\n  }\n\n  /**\n   * builds the execution context for the dev server.\n   */\n  private async buildContext(\n    context: ExecutionContext,\n    additionalContexts: ExecutionContext[] = []\n  ): Promise<DevServerContext> {\n    context.relatedContexts = additionalContexts.map((ctx) => ctx.envDefinition.id);\n    context.components = context.components.concat(this.getComponentsFromContexts(additionalContexts));\n    const peers = await this.dependencyResolver.getPeerDependenciesListFromEnv(context.env);\n    const hostRootDir = context.envRuntime.envAspectDefinition?.aspectPath;\n\n    return Object.assign(context, {\n      entry: await getEntry(context, this.runtimeSlot),\n      // don't start with a leading \"/\" because it generates errors on Windows\n      rootPath: `preview/${context.envRuntime.id}`,\n      publicPath: `${sep}public`,\n      hostRootDir,\n      hostDependencies: peers,\n      aliasHostDependencies: true,\n    });\n  }\n}\n"],"mappings":"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"}