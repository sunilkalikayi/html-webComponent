"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ComponentServer = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _envs() {
  const data = require("@teambit/envs");
  _envs = function () {
    return data;
  };
  return data;
}
function _devServer() {
  const data = require("./dev-server");
  _devServer = function () {
    return data;
  };
  return data;
}
function _exceptions() {
  const data = require("./exceptions");
  _exceptions = function () {
    return data;
  };
  return data;
}
function _events() {
  const data = require("./events");
  _events = function () {
    return data;
  };
  return data;
}
function _bundler() {
  const data = require("./bundler.aspect");
  _bundler = function () {
    return data;
  };
  return data;
}
function _selectPort() {
  const data = require("./select-port");
  _selectPort = function () {
    return data;
  };
  return data;
}
class ComponentServer {
  // why is this here

  constructor(
  /**
   * browser runtime slot
   */
  pubsub,
  /**
   * components contained in the existing component server.
   */
  context,
  /**
   * port range of the component server.
   */
  portRange,
  /**
   * env dev server.
   */
  devServer) {
    this.pubsub = pubsub;
    this.context = context;
    this.portRange = portRange;
    this.devServer = devServer;
    (0, _defineProperty2().default)(this, "errors", void 0);
    (0, _defineProperty2().default)(this, "hostname", void 0);
    (0, _defineProperty2().default)(this, "_port", void 0);
    (0, _defineProperty2().default)(this, "createComponentsServerStartedEvent", (componentsServer, context, hostname, port) => {
      return new (_events().ComponentsServerStartedEvent)(Date.now(), componentsServer, context, hostname, port);
    });
  }
  /**
   * determine whether component server contains a component.
   */
  hasComponent(component) {
    return this.context.components.find(contextComponent => contextComponent.equals(component));
  }
  get port() {
    return this._port;
  }
  async listen() {
    const port = await (0, _selectPort().selectPort)(this.portRange);
    this._port = port;
    const server = await this.devServer.listen(port);
    const address = server.address();
    const hostname = this.getHostname(address);
    if (!address) throw new (_exceptions().BindError)();
    this.hostname = hostname;
    this.pubsub.pub(_bundler().BundlerAspect.id, this.createComponentsServerStartedEvent(server, this.context, hostname, port));
  }
  getHostname(address) {
    if (address === null) throw new (_exceptions().BindError)();
    if (typeof address === 'string') return address;
    let hostname = address.address;
    if (hostname === '::') {
      hostname = 'localhost';
    }
    return hostname;
  }
  onChange() {}
  /**
   * get the url of the component server.
   */
  get url() {
    // tailing `/` is required!
    return `/preview/${this.context.envRuntime.id}/`;
  }
}
exports.ComponentServer = ComponentServer;

//# sourceMappingURL=component-server.js.map