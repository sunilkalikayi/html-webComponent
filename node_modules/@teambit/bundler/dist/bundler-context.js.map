{"version":3,"names":[],"sources":["bundler-context.ts"],"sourcesContent":["import { Component } from '@teambit/component';\nimport { BuildContext } from '@teambit/builder';\n\nexport type LibraryOptions = {\n  /**\n   * Specify a name for the library\n   */\n  name: string;\n  // TODO: decide which exact types we want to support and their exact names\n  /**\n   * Configure how the library will be exposed\n   * could be values like: 'umd', 'umd2', 'amd', 'commonjs',\n   */\n  type?: string;\n};\n\nexport type Entry = {\n  /**\n   * Specifies the name of each output file on disk\n   */\n  filename: string;\n  /**\n   * Module(s) that are loaded upon startup\n   */\n  import: string | string[];\n\n  /**\n   * Specify library options to bundle a library from current entry\n   */\n  library?: LibraryOptions;\n};\n\nexport type EntryMap = {\n  [entryName: string]: Entry;\n};\n\nexport type Target = {\n  /**\n   * entries of the target.\n   */\n  entries: string[] | EntryMap;\n\n  /**\n   * array of components included in the target.\n   */\n  components: Component[];\n\n  /**\n   * output path of the target\n   */\n  outputPath: string;\n\n  /**\n   * This option determines the name of each output bundle\n   */\n  filename?: string;\n\n  /**\n   * This option determines the name of non-initial chunk files\n   */\n  chunkFilename?: string;\n\n  /**\n   * Whether to run compression by the bundler\n   */\n  compress?: boolean;\n\n  /**\n   * List of peer dependencies\n   */\n  peers?: string[];\n\n  /**\n   * config for html generation\n   */\n  html?: HtmlConfig[];\n\n  /**\n   * module targets to expose.\n   */\n  modules?: ModuleTarget[];\n\n  /**\n   * Name for the runtime chunk\n   */\n  runtimeChunkName?: string;\n\n  /**\n   * Different configuration related to chunking\n   */\n  chunking?: Chunking;\n\n  /**\n   * A path for the host root dir\n   * Host root dir is usually the env root dir\n   * This can be used in different bundle options which run require.resolve\n   * for example when configuring webpack aliases or webpack expose loader on the peers deps\n   */\n  hostRootDir?: string;\n\n  /**\n   * Array of host dependencies, they are used later in case you use one of the following:\n   *\n   */\n  hostDependencies?: string[];\n\n  /**\n   * Make the hostDependencies externals. externals (from webpack docs):\n   * The externals configuration option provides a way of excluding dependencies from the output bundles.\n   * Instead, the created bundle relies on that dependency to be present in the consumer's (any end-user application) environment.\n   */\n  externalizeHostDependencies?: boolean;\n\n  /**\n   * Make aliases for the hostDependencies.\n   * the path of each one will be resolved by [hostRootDir, process.cwd(), __dirname]\n   * this will usually replace the instance of import one of the host dependencies by the instance of the env provided it\n   */\n  aliasHostDependencies?: boolean;\n};\n\nexport type ModuleTarget = {\n  /**\n   * name of the module.\n   */\n  name: string;\n\n  /**\n   * module exposes.\n   */\n  exposes: {\n    [internalPath: string]: string;\n  };\n\n  shared: {\n    [key: string]: any;\n  };\n};\n\nexport type HtmlConfig = {\n  /**\n   * The title to use for the generated HTML document\n   */\n  title: string;\n  /**\n   * The file to write the HTML to. Defaults to index.html\n   */\n  filename?: string;\n  /**\n   * Allows you to add only some chunks (e.g only the unit-test chunk)\n   */\n  chunks?: string[];\n  /**\n   * Load chunks according to their order in the `chunks` array\n   * @default auto\n   */\n  chunkOrder?: 'auto' | 'manual';\n  /**\n   * provide an inline template\n   */\n  templateContent: string;\n  /**\n   * Controls if and in what ways the output should be minified\n   */\n  minify?: boolean;\n\n  /**\n   * The favicon for the html page\n   */\n  favicon?: string;\n\n  // TODO: consider add chunksSortMode if there are more needs\n};\n\nexport type Chunking = {\n  /**\n   * include all types of chunks (async / non-async) in splitting\n   */\n  splitChunks: boolean;\n};\n\nexport type MetaData = {\n  /**\n   * Who initiate the bundling process\n   */\n  initiator?: string;\n  /**\n   * Env id (used usually to calculate the config)\n   */\n  envId?: string;\n};\nexport interface BundlerContext extends BuildContext {\n  /**\n   * targets for bundling.\n   */\n  targets: Target[];\n\n  /**\n   * determines whether it is a production build, default is `true`.\n   * in development, expect the bundler to favour debugging on the expanse of optimization.\n   */\n  development?: boolean;\n\n  /**\n   * public path output of the bundle.\n   */\n  publicPath?: string;\n\n  /**\n   * root path\n   */\n  rootPath?: string;\n\n  /**\n   * Whether to run compression by the bundler\n   */\n  compress?: boolean;\n\n  /**\n   * config for html generation for all targets\n   */\n  html?: HtmlConfig[];\n\n  /**\n   * modules for bundle to expose. used by module federation at webpack, or with different methods applied by various bundlers.\n   */\n  modules?: {\n    name: string;\n    fileName: string;\n    exposes: { [key: string]: string };\n  };\n\n  /**\n   * Additional info that can be used by the bundler for different stuff like logging info\n   */\n  metaData?: MetaData;\n}\n"],"mappings":""}