"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BundlerMain = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _pubsub() {
  const data = _interopRequireDefault(require("@teambit/pubsub"));
  _pubsub = function () {
    return data;
  };
  return data;
}
function _cli() {
  const data = require("@teambit/cli");
  _cli = function () {
    return data;
  };
  return data;
}
function _component() {
  const data = require("@teambit/component");
  _component = function () {
    return data;
  };
  return data;
}
function _dependencyResolver() {
  const data = require("@teambit/dependency-resolver");
  _dependencyResolver = function () {
    return data;
  };
  return data;
}
function _envs() {
  const data = require("@teambit/envs");
  _envs = function () {
    return data;
  };
  return data;
}
function _graphql() {
  const data = require("@teambit/graphql");
  _graphql = function () {
    return data;
  };
  return data;
}
function _harmony() {
  const data = require("@teambit/harmony");
  _harmony = function () {
    return data;
  };
  return data;
}
function _bundler() {
  const data = require("./bundler.aspect");
  _bundler = function () {
    return data;
  };
  return data;
}
function _devServer() {
  const data = require("./dev-server.graphql");
  _devServer = function () {
    return data;
  };
  return data;
}
function _devServer2() {
  const data = require("./dev-server.service");
  _devServer2 = function () {
    return data;
  };
  return data;
}
/**
 * bundler extension.
 */
class BundlerMain {
  constructor(config,
  /**
   * Pubsub extension.
   */
  pubsub,
  /**
   * environments extension.
   */
  envs,
  /**
   * dev server service.
   */
  devService,
  /**
   * browser runtime slot.
   */
  runtimeSlot) {
    this.config = config;
    this.pubsub = pubsub;
    this.envs = envs;
    this.devService = devService;
    this.runtimeSlot = runtimeSlot;
    (0, _defineProperty2().default)(this, "_componentServers", void 0);
  }

  /**
   * load all given components in corresponding dev servers.
   * @param components defaults to all components in the workspace.
   */
  async devServer(components) {
    const envRuntime = await this.envs.createEnvironment(components);
    // TODO: this must be refactored away from here. this logic should be in the Preview.
    const servers = await envRuntime.runOnce(this.devService, {
      dedicatedEnvDevServers: this.config.dedicatedEnvDevServers
    });
    this._componentServers = servers;
    this.indexByComponent();
    return this._componentServers;
  }

  /**
   * get a dev server instance containing a component.
   * @param component
   */
  getComponentServer(component) {
    if (!this._componentServers) return undefined;
    const envId = this.envs.getEnvId(component);
    const server = this._componentServers.find(componentServer => componentServer.context.relatedContexts.includes(envId) || componentServer.context.id === envId);
    return server;
  }

  /**
   * compute entry files for bundling components in a given execution context.
   */
  async computeEntries(context) {
    const slotEntries = await Promise.all(this.runtimeSlot.values().map(async browserRuntime => browserRuntime.entry(context)));
    const slotPaths = slotEntries.reduce((acc, current) => {
      acc = acc.concat(current);
      return acc;
    });
    return slotPaths;
  }

  /**
   * register a new browser runtime environment.
   * @param browserRuntime
   */
  registerTarget(browserRuntime) {
    browserRuntime.map(runtime => {
      return this.runtimeSlot.register(runtime);
    });
    return this;
  }

  /**
   * component servers.
   */

  indexByComponent() {}
  static async provider([pubsub, envs, graphql, dependencyResolver], config, [runtimeSlot]) {
    const devServerService = new (_devServer2().DevServerService)(pubsub, dependencyResolver, runtimeSlot);
    const bundler = new BundlerMain(config, pubsub, envs, devServerService, runtimeSlot);
    envs.registerService(devServerService);
    graphql.register((0, _devServer().devServerSchema)(bundler));
    return bundler;
  }
}
exports.BundlerMain = BundlerMain;
(0, _defineProperty2().default)(BundlerMain, "slots", [_harmony().Slot.withType()]);
(0, _defineProperty2().default)(BundlerMain, "runtime", _cli().MainRuntime);
(0, _defineProperty2().default)(BundlerMain, "dependencies", [_pubsub().default, _envs().EnvsAspect, _graphql().GraphqlAspect, _dependencyResolver().DependencyResolverAspect, _component().ComponentAspect]);
(0, _defineProperty2().default)(BundlerMain, "defaultConfig", {
  dedicatedEnvDevServers: []
});
_bundler().BundlerAspect.addRuntime(BundlerMain);

//# sourceMappingURL=bundler.main.runtime.js.map