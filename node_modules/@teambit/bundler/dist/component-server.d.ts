import { Component } from '@teambit/component';
import { ExecutionContext } from '@teambit/envs';
import { PubsubMain } from '@teambit/pubsub';
import { DevServer } from './dev-server';
export declare class ComponentServer {
    /**
     * browser runtime slot
     */
    private pubsub;
    /**
     * components contained in the existing component server.
     */
    readonly context: ExecutionContext;
    /**
     * port range of the component server.
     */
    readonly portRange: number[];
    /**
     * env dev server.
     */
    readonly devServer: DevServer;
    errors?: Error[];
    constructor(
    /**
     * browser runtime slot
     */
    pubsub: PubsubMain, 
    /**
     * components contained in the existing component server.
     */
    context: ExecutionContext, 
    /**
     * port range of the component server.
     */
    portRange: number[], 
    /**
     * env dev server.
     */
    devServer: DevServer);
    hostname: string | undefined;
    /**
     * determine whether component server contains a component.
     */
    hasComponent(component: Component): Component | undefined;
    get port(): number;
    _port: number;
    listen(): Promise<void>;
    private getHostname;
    private onChange;
    private createComponentsServerStartedEvent;
    /**
     * get the url of the component server.
     */
    get url(): string;
}
