/// <reference types="react" />
import { EnvService, ExecutionContext, EnvDefinition } from '@teambit/envs';
import { PubsubMain } from '@teambit/pubsub';
import { DependencyResolverMain } from '@teambit/dependency-resolver';
import { BrowserRuntimeSlot } from './bundler.main.runtime';
import { ComponentServer } from './component-server';
export declare type DevServerServiceOptions = {
    dedicatedEnvDevServers?: string[];
};
export declare type DevServerDescriptor = {
    /**
     * id of the dev server (e.g. jest/mocha)
     */
    id: string;
    /**
     * display name of the dev server (e.g. Jest / Mocha)
     */
    displayName: string;
    /**
     * icon of the configured dev server.
     */
    icon: string;
    /**
     * string containing the config for display.
     */
    config: string;
    version?: string;
};
export declare class DevServerService implements EnvService<ComponentServer, DevServerDescriptor> {
    /**
     * browser runtime slot
     */
    private pubsub;
    private dependencyResolver;
    /**
     * browser runtime slot
     */
    private runtimeSlot;
    name: string;
    constructor(
    /**
     * browser runtime slot
     */
    pubsub: PubsubMain, dependencyResolver: DependencyResolverMain, 
    /**
     * browser runtime slot
     */
    runtimeSlot: BrowserRuntimeSlot);
    render(env: EnvDefinition, context: ExecutionContext[]): Promise<JSX.Element>;
    getDescriptor(environment: EnvDefinition, context?: ExecutionContext[]): Promise<DevServerDescriptor | undefined>;
    runOnce(contexts: ExecutionContext[], { dedicatedEnvDevServers }: DevServerServiceOptions): Promise<ComponentServer[]>;
    mergeContext(): void;
    private getComponentsFromContexts;
    /**
     * builds the execution context for the dev server.
     */
    private buildContext;
}
