"use strict";

require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
require("core-js/modules/es.regexp.exec.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dedupEnvs = dedupEnvs;
/**
 * de-duping dev servers by the amount of type the dev server configuration was overridden by envs.
 * This will split the dev server to groups of dev server that share the same webpack config, and same peer dependencies
 * @param contexts
 * @param dependencyResolver
 * @param dedicatedEnvDevServers
 */
async function dedupEnvs(contexts, dependencyResolver, dedicatedEnvDevServers) {
  const idsGroups = groupByEnvId(contexts, dedicatedEnvDevServers);
  const finalGroups = await splitByPeers(idsGroups, dependencyResolver);
  return finalGroups;
}
function groupByEnvId(contexts, dedicatedEnvDevServers) {
  const groupedEnvs = {};
  contexts.forEach(context => {
    const envId = getEnvId(context, dedicatedEnvDevServers);
    if (!envId) return;
    if (!(envId in groupedEnvs)) groupedEnvs[envId] = [];
    groupedEnvs[envId].push(context);
  });
  return groupedEnvs;
}
async function splitByPeers(idsGroups, dependencyResolver) {
  const newGroupedEnvs = {};
  const promises = Object.values(idsGroups).map(async contexts => {
    const peersGroups = await groupByPeersHash(contexts, dependencyResolver);
    Object.assign(newGroupedEnvs, peersGroups);
  });
  await Promise.all(promises);
  return newGroupedEnvs;
}
function getEnvId(context, dedicatedServers) {
  var _context$env;
  const id = context.id.split('@')[0];
  if (dedicatedServers !== null && dedicatedServers !== void 0 && dedicatedServers.includes(id)) {
    return context.id;
  }
  return (_context$env = context.env) === null || _context$env === void 0 ? void 0 : _context$env.getDevEnvId(context);
}
async function groupByPeersHash(contexts, dependencyResolver) {
  const peerGroups = {};
  await Promise.all(contexts.map(async context => {
    const env = context.env;
    const policy = await dependencyResolver.getComponentEnvPolicyFromEnv(env);
    const autoDetectPeersHash = policy.peersAutoDetectPolicy.hashNameVersion();
    const regularPeersHash = policy.variantPolicy.byLifecycleType('peer').hashNameVersion();
    const combinedHash = `${autoDetectPeersHash}:${regularPeersHash}`;
    if (!peerGroups[combinedHash]) {
      peerGroups[combinedHash] = [];
    }
    peerGroups[combinedHash].push(context);
  }));
  return indexPeerGroupsById(peerGroups);
}
function indexPeerGroupsById(peerGroups) {
  const result = Object.values(peerGroups).reduce((acc, contexts) => {
    const firstId = contexts[0].id;
    acc[firstId] = contexts;
    return acc;
  }, {});
  return result;
}

//# sourceMappingURL=dedup-envs.js.map