{"version":3,"names":["getEntry","context","runtimeSlot","slotEntries","Promise","all","values","map","browserRuntime","entry","slotPaths","reduce","acc","current","concat"],"sources":["get-entry.ts"],"sourcesContent":["import { ComponentID } from '@teambit/component';\nimport { ExecutionContext } from '@teambit/envs';\nimport { GetBitMapComponentOptions } from '@teambit/legacy/dist/consumer/bit-map/bit-map';\nimport { PathOsBased } from '@teambit/legacy/dist/utils/path';\n\nimport { BrowserRuntimeSlot } from './bundler.main.runtime';\n\nexport type ComponentDir = {\n  componentDir?: (\n    componentId: ComponentID,\n    bitMapOptions?: GetBitMapComponentOptions,\n    options?: { relative: boolean }\n  ) => PathOsBased | undefined;\n};\n\n/**\n * computes the bundler entry.\n */\nexport async function getEntry(context: ExecutionContext, runtimeSlot: BrowserRuntimeSlot): Promise<string[]> {\n  // TODO: refactor this away from here and use computePaths instead\n  const slotEntries = await Promise.all(\n    runtimeSlot.values().map(async (browserRuntime) => browserRuntime.entry(context))\n  );\n\n  const slotPaths = slotEntries.reduce((acc, current) => {\n    acc = acc.concat(current);\n    return acc;\n  });\n\n  return slotPaths;\n}\n"],"mappings":";;;;;;;;AAeA;AACA;AACA;AACO,eAAeA,QAAQ,CAACC,OAAyB,EAAEC,WAA+B,EAAqB;EAC5G;EACA,MAAMC,WAAW,GAAG,MAAMC,OAAO,CAACC,GAAG,CACnCH,WAAW,CAACI,MAAM,EAAE,CAACC,GAAG,CAAC,MAAOC,cAAc,IAAKA,cAAc,CAACC,KAAK,CAACR,OAAO,CAAC,CAAC,CAClF;EAED,MAAMS,SAAS,GAAGP,WAAW,CAACQ,MAAM,CAAC,CAACC,GAAG,EAAEC,OAAO,KAAK;IACrDD,GAAG,GAAGA,GAAG,CAACE,MAAM,CAACD,OAAO,CAAC;IACzB,OAAOD,GAAG;EACZ,CAAC,CAAC;EAEF,OAAOF,SAAS;AAClB"}