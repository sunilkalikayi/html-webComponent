import { PubsubMain } from '@teambit/pubsub';
import { Component } from '@teambit/component';
import { DependencyResolverMain } from '@teambit/dependency-resolver';
import { EnvsMain } from '@teambit/envs';
import { GraphqlMain } from '@teambit/graphql';
import { SlotRegistry } from '@teambit/harmony';
import { BrowserRuntime } from './browser-runtime';
import { ComponentServer } from './component-server';
import { BundlerContext } from './bundler-context';
import { DevServerService } from './dev-server.service';
export declare type BrowserRuntimeSlot = SlotRegistry<BrowserRuntime>;
export declare type BundlerConfig = {
    dedicatedEnvDevServers: string[];
};
/**
 * bundler extension.
 */
export declare class BundlerMain {
    readonly config: BundlerConfig;
    /**
     * Pubsub extension.
     */
    private pubsub;
    /**
     * environments extension.
     */
    private envs;
    /**
     * dev server service.
     */
    private devService;
    /**
     * browser runtime slot.
     */
    private runtimeSlot;
    constructor(config: BundlerConfig, 
    /**
     * Pubsub extension.
     */
    pubsub: PubsubMain, 
    /**
     * environments extension.
     */
    envs: EnvsMain, 
    /**
     * dev server service.
     */
    devService: DevServerService, 
    /**
     * browser runtime slot.
     */
    runtimeSlot: BrowserRuntimeSlot);
    /**
     * load all given components in corresponding dev servers.
     * @param components defaults to all components in the workspace.
     */
    devServer(components: Component[]): Promise<ComponentServer[]>;
    /**
     * get a dev server instance containing a component.
     * @param component
     */
    getComponentServer(component: Component): undefined | ComponentServer;
    /**
     * compute entry files for bundling components in a given execution context.
     */
    computeEntries(context: BundlerContext): Promise<string[]>;
    /**
     * register a new browser runtime environment.
     * @param browserRuntime
     */
    registerTarget(browserRuntime: BrowserRuntime[]): this;
    /**
     * component servers.
     */
    private _componentServers;
    private indexByComponent;
    static slots: ((registerFn: () => string) => SlotRegistry<BrowserRuntime>)[];
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static dependencies: import("@teambit/harmony").Aspect[];
    static defaultConfig: {
        dedicatedEnvDevServers: never[];
    };
    static provider([pubsub, envs, graphql, dependencyResolver]: [PubsubMain, EnvsMain, GraphqlMain, DependencyResolverMain], config: any, [runtimeSlot]: [BrowserRuntimeSlot]): Promise<BundlerMain>;
}
