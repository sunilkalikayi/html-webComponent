"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.devServerSchema = devServerSchema;
function _client() {
  const data = require("@apollo/client");
  _client = function () {
    return data;
  };
  return data;
}
// TODO: this has to be refactored to the Preview aspect. with the entire preview logic here.
function devServerSchema(bundler) {
  return {
    typeDefs: (0, _client().gql)`
      extend type Component {
        server: ComponentServer
      }

      type ComponentServer {
        env: String
        url: String
      }
    `,
    resolvers: {
      Component: {
        server: (component, args, context) => {
          // This is a bit of a hack to get the requested id. it assumes the variable name of
          // the gotHost.get query is "id".
          // see it in scopes/component/component/component.graphql.ts
          const requestedId = context.body.variables.id;
          // if we ask for specific id with specific version it means we want to fetch if from scope
          // so don't return the server url
          // see https://github.com/teambit/bit/issues/5328
          if (requestedId && requestedId.includes('@')) {
            return {};
          }
          const componentServer = bundler.getComponentServer(component);
          if (!componentServer) return {};
          return {
            env: componentServer.context.envRuntime.id,
            url: componentServer.url
          };
        }
      }
    }
  };
}

//# sourceMappingURL=dev-server.graphql.js.map