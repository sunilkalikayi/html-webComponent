{"version":3,"names":["dedupEnvs","contexts","dependencyResolver","dedicatedEnvDevServers","idsGroups","groupByEnvId","finalGroups","splitByPeers","groupedEnvs","forEach","context","envId","getEnvId","push","newGroupedEnvs","promises","Object","values","map","peersGroups","groupByPeersHash","assign","Promise","all","dedicatedServers","id","split","includes","env","getDevEnvId","peerGroups","policy","getComponentEnvPolicyFromEnv","autoDetectPeersHash","peersAutoDetectPolicy","hashNameVersion","regularPeersHash","variantPolicy","byLifecycleType","combinedHash","indexPeerGroupsById","result","reduce","acc","firstId"],"sources":["dedup-envs.ts"],"sourcesContent":["import { DependencyResolverMain } from '@teambit/dependency-resolver';\nimport type { ExecutionContext } from '@teambit/envs';\n\ntype GroupIdContextMap = Record<string, ExecutionContext[]>;\n\n/**\n * de-duping dev servers by the amount of type the dev server configuration was overridden by envs.\n * This will split the dev server to groups of dev server that share the same webpack config, and same peer dependencies\n * @param contexts\n * @param dependencyResolver\n * @param dedicatedEnvDevServers\n */\nexport async function dedupEnvs(\n  contexts: ExecutionContext[],\n  dependencyResolver: DependencyResolverMain,\n  dedicatedEnvDevServers?: string[]\n) {\n  const idsGroups = groupByEnvId(contexts, dedicatedEnvDevServers);\n  const finalGroups = await splitByPeers(idsGroups, dependencyResolver);\n  return finalGroups;\n}\n\nfunction groupByEnvId(contexts: ExecutionContext[], dedicatedEnvDevServers?: string[]) {\n  const groupedEnvs: GroupIdContextMap = {};\n\n  contexts.forEach((context) => {\n    const envId = getEnvId(context, dedicatedEnvDevServers);\n    if (!envId) return;\n    if (!(envId in groupedEnvs)) groupedEnvs[envId] = [];\n\n    groupedEnvs[envId].push(context);\n  });\n\n  return groupedEnvs;\n}\n\nasync function splitByPeers(idsGroups: GroupIdContextMap, dependencyResolver: DependencyResolverMain) {\n  const newGroupedEnvs: GroupIdContextMap = {};\n  const promises = Object.values(idsGroups).map(async (contexts) => {\n    const peersGroups = await groupByPeersHash(contexts, dependencyResolver);\n    Object.assign(newGroupedEnvs, peersGroups);\n  });\n  await Promise.all(promises);\n  return newGroupedEnvs;\n}\n\nfunction getEnvId(context: ExecutionContext, dedicatedServers?: string[]): string | undefined {\n  const id = context.id.split('@')[0];\n\n  if (dedicatedServers?.includes(id)) {\n    return context.id;\n  }\n\n  return context.env?.getDevEnvId(context);\n}\n\nasync function groupByPeersHash(contexts: ExecutionContext[], dependencyResolver: DependencyResolverMain) {\n  const peerGroups: GroupIdContextMap = {};\n\n  await Promise.all(\n    contexts.map(async (context) => {\n      const env = context.env;\n      const policy = await dependencyResolver.getComponentEnvPolicyFromEnv(env);\n      const autoDetectPeersHash = policy.peersAutoDetectPolicy.hashNameVersion();\n      const regularPeersHash = policy.variantPolicy.byLifecycleType('peer').hashNameVersion();\n      const combinedHash = `${autoDetectPeersHash}:${regularPeersHash}`;\n      if (!peerGroups[combinedHash]) {\n        peerGroups[combinedHash] = [];\n      }\n      peerGroups[combinedHash].push(context);\n    })\n  );\n  return indexPeerGroupsById(peerGroups);\n}\n\nfunction indexPeerGroupsById(peerGroups: GroupIdContextMap) {\n  const result: GroupIdContextMap = Object.values(peerGroups).reduce((acc, contexts) => {\n    const firstId = contexts[0].id;\n    acc[firstId] = contexts;\n    return acc;\n  }, {});\n  return result;\n}\n"],"mappings":"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"}