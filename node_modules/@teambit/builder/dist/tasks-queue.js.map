{"version":3,"names":["TasksQueue","Array","toString","map","env","task","id","BuildTaskHelper","serializeId","join","validate","forEach","validateTaskName","validateDuplications","name","InvalidTask","aspectId","regexWord","isValid","test","uniqueTasks","uniqTask","filter","u","length"],"sources":["tasks-queue.ts"],"sourcesContent":["import { EnvDefinition } from '@teambit/envs';\nimport { BuildTask, BuildTaskHelper } from './build-task';\nimport { InvalidTask } from './exceptions';\n\ntype EnvTask = { env: EnvDefinition; task: BuildTask };\n\nexport class TasksQueue extends Array<EnvTask> {\n  toString() {\n    return this.map(({ env, task }) => `env ${env.id}, task ${BuildTaskHelper.serializeId(task)}`).join('\\n');\n  }\n  /**\n   * make sure tasks names are valid and there are no duplications\n   */\n  validate() {\n    this.forEach(({ task }) => {\n      this.validateTaskName(task);\n    });\n    this.validateDuplications();\n  }\n\n  private validateTaskName(task: BuildTask) {\n    if (!task.name) throw new InvalidTask(task.aspectId, 'name is missing');\n    const regexWord = /^\\w+$/; // match any word: a-zA-Z0-9 and underscore.\n    const isValid = regexWord.test(task.name);\n    if (!isValid)\n      throw new InvalidTask(task.aspectId, `name \"${task.name}\" is invalid, only alphanumeric characters are allowed`);\n  }\n\n  private validateDuplications() {\n    const uniqueTasks = this.map(({ env, task }) => `${env.id} ${task.aspectId}:${task.name}`);\n    uniqueTasks.forEach((uniqTask) => {\n      if (uniqueTasks.filter((u) => u === uniqTask).length > 1) {\n        throw new InvalidTask(\n          uniqTask,\n          'there are two or more tasks with the same name and aspectId in the same environment'\n        );\n      }\n    });\n  }\n}\n"],"mappings":";;;;;;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAIO,MAAMA,UAAU,SAASC,KAAK,CAAU;EAC7CC,QAAQ,GAAG;IACT,OAAO,IAAI,CAACC,GAAG,CAAC,CAAC;MAAEC,GAAG;MAAEC;IAAK,CAAC,KAAM,OAAMD,GAAG,CAACE,EAAG,UAASC,4BAAe,CAACC,WAAW,CAACH,IAAI,CAAE,EAAC,CAAC,CAACI,IAAI,CAAC,IAAI,CAAC;EAC3G;EACA;AACF;AACA;EACEC,QAAQ,GAAG;IACT,IAAI,CAACC,OAAO,CAAC,CAAC;MAAEN;IAAK,CAAC,KAAK;MACzB,IAAI,CAACO,gBAAgB,CAACP,IAAI,CAAC;IAC7B,CAAC,CAAC;IACF,IAAI,CAACQ,oBAAoB,EAAE;EAC7B;EAEQD,gBAAgB,CAACP,IAAe,EAAE;IACxC,IAAI,CAACA,IAAI,CAACS,IAAI,EAAE,MAAM,KAAIC,yBAAW,EAACV,IAAI,CAACW,QAAQ,EAAE,iBAAiB,CAAC;IACvE,MAAMC,SAAS,GAAG,OAAO,CAAC,CAAC;IAC3B,MAAMC,OAAO,GAAGD,SAAS,CAACE,IAAI,CAACd,IAAI,CAACS,IAAI,CAAC;IACzC,IAAI,CAACI,OAAO,EACV,MAAM,KAAIH,yBAAW,EAACV,IAAI,CAACW,QAAQ,EAAG,SAAQX,IAAI,CAACS,IAAK,wDAAuD,CAAC;EACpH;EAEQD,oBAAoB,GAAG;IAC7B,MAAMO,WAAW,GAAG,IAAI,CAACjB,GAAG,CAAC,CAAC;MAAEC,GAAG;MAAEC;IAAK,CAAC,KAAM,GAAED,GAAG,CAACE,EAAG,IAAGD,IAAI,CAACW,QAAS,IAAGX,IAAI,CAACS,IAAK,EAAC,CAAC;IAC1FM,WAAW,CAACT,OAAO,CAAEU,QAAQ,IAAK;MAChC,IAAID,WAAW,CAACE,MAAM,CAAEC,CAAC,IAAKA,CAAC,KAAKF,QAAQ,CAAC,CAACG,MAAM,GAAG,CAAC,EAAE;QACxD,MAAM,KAAIT,yBAAW,EACnBM,QAAQ,EACR,qFAAqF,CACtF;MACH;IACF,CAAC,CAAC;EACJ;AACF;AAAC"}