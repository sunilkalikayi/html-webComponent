"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TasksQueue = void 0;
function _buildTask() {
  const data = require("./build-task");
  _buildTask = function () {
    return data;
  };
  return data;
}
function _exceptions() {
  const data = require("./exceptions");
  _exceptions = function () {
    return data;
  };
  return data;
}
class TasksQueue extends Array {
  toString() {
    return this.map(({
      env,
      task
    }) => `env ${env.id}, task ${_buildTask().BuildTaskHelper.serializeId(task)}`).join('\n');
  }
  /**
   * make sure tasks names are valid and there are no duplications
   */
  validate() {
    this.forEach(({
      task
    }) => {
      this.validateTaskName(task);
    });
    this.validateDuplications();
  }
  validateTaskName(task) {
    if (!task.name) throw new (_exceptions().InvalidTask)(task.aspectId, 'name is missing');
    const regexWord = /^\w+$/; // match any word: a-zA-Z0-9 and underscore.
    const isValid = regexWord.test(task.name);
    if (!isValid) throw new (_exceptions().InvalidTask)(task.aspectId, `name "${task.name}" is invalid, only alphanumeric characters are allowed`);
  }
  validateDuplications() {
    const uniqueTasks = this.map(({
      env,
      task
    }) => `${env.id} ${task.aspectId}:${task.name}`);
    uniqueTasks.forEach(uniqTask => {
      if (uniqueTasks.filter(u => u === uniqTask).length > 1) {
        throw new (_exceptions().InvalidTask)(uniqTask, 'there are two or more tasks with the same name and aspectId in the same environment');
      }
    });
  }
}
exports.TasksQueue = TasksQueue;

//# sourceMappingURL=tasks-queue.js.map