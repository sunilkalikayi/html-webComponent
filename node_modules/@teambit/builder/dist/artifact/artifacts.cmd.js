"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ArtifactsCmd = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
function _constants() {
  const data = require("@teambit/legacy/dist/constants");
  _constants = function () {
    return data;
  };
  return data;
}
function _bitError() {
  const data = require("@teambit/bit-error");
  _bitError = function () {
    return data;
  };
  return data;
}
function _artifactExtractor() {
  const data = require("./artifact-extractor");
  _artifactExtractor = function () {
    return data;
  };
  return data;
}
const INDENT_TITLE = ' '.repeat(2);
const INDENT_SUB_TITLE = ' '.repeat(4);
const INDENT_FILES = ' '.repeat(6);
class ArtifactsCmd {
  constructor(builder, scope) {
    this.builder = builder;
    this.scope = scope;
    (0, _defineProperty2().default)(this, "name", 'artifacts <component-pattern>');
    (0, _defineProperty2().default)(this, "description", 'EXPERIMENTAL. list and download components artifacts');
    (0, _defineProperty2().default)(this, "extendedDescription", `artifacts are created on isolated capsules during tag or snap commands.
example of artifacts are dists files generated by a compiler, a JUnit.xml file generated by a tester
and a package.tgz file generated by pkg aspect.
`);
    (0, _defineProperty2().default)(this, "arguments", [{
      name: 'component-pattern',
      description: _constants().COMPONENT_PATTERN_HELP
    }]);
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "group", 'development');
    (0, _defineProperty2().default)(this, "options", [['', 'aspect <aspect-id>', 'show/download only artifacts generated by this aspect-id'], ['', 'task <task-id>', 'show/download only artifacts generated by this task-id'], ['', 'files <glob>', 'show/download only artifacts matching the given files or the glob pattern (wrap glob patterns in quotes)'], ['', 'out-dir <string>', 'download the files to the specified dir']]);
  }
  async report([componentPattern], artifactsOpts) {
    if (!this.scope) throw new (_bitError().BitError)(`unable to run "bit artifacts" outside of a workspace or a scope`);
    const artifactExtractor = new (_artifactExtractor().ArtifactExtractor)(this.scope, this.builder, componentPattern, artifactsOpts);
    const list = await artifactExtractor.list();
    const grouped = artifactExtractor.groupResultsByAspect(list);
    const outputArtifacts = (aspectId, artifactData) => {
      const title = _chalk().default.green(aspectId);
      const artifactDataStr = artifactData.map(artifact => {
        const subTitle = _chalk().default.white(`${artifact.taskName} (${artifact.artifactName})`);
        const files = artifact.files.map(f => INDENT_FILES + _chalk().default.dim(f)).join('\n');
        return `${INDENT_SUB_TITLE}${subTitle}\n${files}`;
      }).join('\n');
      return `${INDENT_TITLE}${title}\n${artifactDataStr}`;
    };
    const outputResult = result => {
      const idStr = _chalk().default.cyan(result.id.toString());
      const artifacts = Object.keys(result.artifacts).map(aspectId => outputArtifacts(aspectId, result.artifacts[aspectId])).join('\n\n');
      return `${idStr}\n${artifacts}`;
    };
    const footer = artifactsOpts.outDir ? _chalk().default.green('\n\nThe above files were saved successfully to the file system') : '';
    return grouped.map(outputResult).join('\n\n') + footer;
  }
}
exports.ArtifactsCmd = ArtifactsCmd;

//# sourceMappingURL=artifacts.cmd.js.map