import { Component } from '@teambit/component';
import type { ArtifactObject } from '@teambit/legacy/dist/consumer/component/sources/artifact-files';
import { BitId } from '@teambit/legacy/dist/bit-id';
import { Scope } from '@teambit/legacy/dist/scope';
import { ArtifactVinyl } from '@teambit/legacy/dist/consumer/component/sources/artifact';
import { Artifact } from './artifact';
export declare type ResolverMap<T extends Artifact> = {
    [key: string]: T[];
};
export declare class ArtifactList<T extends Artifact> extends Array<T> {
    byAspectNameAndName(aspectName?: string, name?: string): ArtifactList<T>;
    byAspectNameAndTaskName(aspectName?: string, name?: string): ArtifactList<T>;
    isEmpty(): boolean;
    /**
     * group artifacts by the storage resolver.
     */
    groupByResolver(): ResolverMap<T>;
    toObject(): ArtifactObject[];
    groupByTaskId(): {
        [key: string]: T;
    };
    getVinylsAndImportIfMissing(id: BitId, scope: Scope): Promise<ArtifactVinyl[]>;
    /**
     * store all artifacts using the configured storage resolvers.
     */
    store(component: Component): Promise<void[]>;
    private storeArtifact;
    /**
     * Send the entire artifact to the resolver then get back the result for all files from the resolver
     * @param storageResolver
     * @param artifact
     * @param component
     */
    private storeWholeArtifactByResolver;
    /**
     * Go over the artifact files and send them to the resolver one by one
     * @param storageResolver
     * @param artifact
     * @param component
     */
    private storeArtifactFilesByResolver;
    static fromArtifactObjects(artifactObjects: ArtifactObject[]): ArtifactList<Artifact>;
    static fromArray<T extends Artifact>(artifacts: T[]): ArtifactList<T>;
}
