import { Component, ComponentMap } from '@teambit/component';
import { ArtifactDefinition } from './artifact-definition';
import { ArtifactList } from './artifact-list';
import type { BuildContext, BuildTask } from '../build-task';
import { FsArtifact } from './fs-artifact';
export declare const DEFAULT_CONTEXT = "component";
export declare type ArtifactMap = ComponentMap<ArtifactList<FsArtifact>>;
export declare class ArtifactFactory {
    resolvePaths(root: string, def: ArtifactDefinition): string[];
    private getArtifactContextPath;
    private getArtifactContext;
    createFromComponent(context: BuildContext, component: Component, def: ArtifactDefinition, task: BuildTask): FsArtifact | undefined;
    private getStorageResolver;
    private toComponentMap;
    getRootDir(rootDir: string, def: ArtifactDefinition): string;
    /**
     * generate artifacts from a build context according to the spec defined in the artifact definitions.
     */
    generate(context: BuildContext, defs: ArtifactDefinition[], task: BuildTask): ComponentMap<ArtifactList<FsArtifact>>;
}
