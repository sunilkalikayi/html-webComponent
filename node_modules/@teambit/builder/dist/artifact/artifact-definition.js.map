{"version":3,"names":[],"sources":["artifact-definition.ts"],"sourcesContent":["import { ArtifactStorageResolver } from '..';\n\nexport type ArtifactDefinition = {\n  /**\n   * name of the artifact.\n   * e.g. a project might utilize two different artifacts for the same typescript compiler, one\n   * that generates ES5 files and another for ES6, this prop helps to distinguish between the two.\n   */\n  name: string;\n\n  /**\n   * aspect id that created the artifact. sometimes it's not the same as the task.id.\n   * e.g. teambit.compilation/compiler executes teambit.typescript/typescript code that generates dists artifacts\n   * the generatedBy in this case is the teambit.typescript/typescript while the task.id is\n   * teambit.compilation/compiler\n   */\n  generatedBy?: string;\n\n  /**\n   * description of the artifact.\n   */\n  description?: string;\n\n  /**\n   * glob patterns of files to include upon artifact creation. minimatch is used to match the patterns.\n   * e.g. ['*.ts', '!foo.ts'] matches all ts files but ignores foo.ts.\n   */\n  globPatterns?: string[];\n\n  /**\n   * directories of files to include upon artifact creation. minimatch is used to match the patterns.\n   * e.g. ['/tmp'] will include all files from tmp dir\n   */\n  directories?: string[];\n\n  /**\n   * define the root directory for reading the artifacts from the capsule file system.\n   * the rootDir must be unique per artifacts, otherwise we risk overriding data between artifacts.\n   */\n  rootDir?: string;\n\n  /**\n   * adds a directory prefix for all artifact files.\n   */\n  dirPrefix?: string;\n\n  /**\n   * determine the context of the artifact.\n   * default artifact context is `component`.\n   * \"env\" is useful when the same file is generated for all components, for example, \"preview\"\n   * task may create the same webpack file for all components of that env.\n   */\n  context?: 'component' | 'env';\n\n  /**\n   * storage resolver. can be used to replace where artifacts are stored.\n   * default resolver persists artifacts on scope. (not recommended for large files!)\n   */\n  storageResolver?: ArtifactStorageResolver;\n};\n\nexport type ArtifactModelDefinition = Omit<ArtifactDefinition, 'storageResolver'> & {\n  storageResolver?: string;\n};\n"],"mappings":""}