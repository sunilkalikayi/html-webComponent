{"version":3,"names":["ArtifactList","Array","byAspectNameAndName","aspectName","name","filtered","filter","artifact","cond","task","aspectId","fromArray","byAspectNameAndTaskName","isEmpty","every","files","groupByResolver","resolverMap","forEach","storageResolver","resolverArray","length","push","toObject","map","groupByTaskId","reduce","acc","taskId","getVinylsAndImportIfMissing","id","scope","vinyls","Promise","all","flat","store","component","byResolvers","promises","Object","keys","key","artifacts","artifactList","artifactPromises","storeArtifact","defaultResolver","DefaultResolver","storeWholeArtifactByResolver","storeArtifactFilesByResolver","results","file","url","relative","storeFile","fromArtifactObjects","artifactObjects","object","Artifact","fromArtifactObject"],"sources":["artifact-list.ts"],"sourcesContent":["import { Component } from '@teambit/component';\nimport type { ArtifactObject } from '@teambit/legacy/dist/consumer/component/sources/artifact-files';\nimport { BitId } from '@teambit/legacy/dist/bit-id';\nimport { Scope } from '@teambit/legacy/dist/scope';\nimport { ArtifactVinyl } from '@teambit/legacy/dist/consumer/component/sources/artifact';\nimport { FsArtifact } from './fs-artifact';\nimport { Artifact } from './artifact';\nimport {\n  ArtifactStorageResolver,\n  FileStorageResolver,\n  WholeArtifactStorageResolver,\n  DefaultResolver,\n} from '../storage';\n\nexport type ResolverMap<T extends Artifact> = { [key: string]: T[] };\n\nexport class ArtifactList<T extends Artifact> extends Array<T> {\n  byAspectNameAndName(aspectName?: string, name?: string): ArtifactList<T> {\n    const filtered = this.filter((artifact) => {\n      let cond = true;\n      if (aspectName) {\n        cond = cond && artifact.task.aspectId === aspectName;\n      }\n      if (name) {\n        cond = cond && artifact.name === name;\n      }\n      return cond;\n    });\n    return ArtifactList.fromArray(filtered);\n  }\n\n  byAspectNameAndTaskName(aspectName?: string, name?: string): ArtifactList<T> {\n    const filtered = this.filter((artifact) => {\n      let cond = true;\n      if (aspectName) {\n        cond = cond && artifact.task.aspectId === aspectName;\n      }\n      if (name) {\n        cond = cond && artifact.task.name === name;\n      }\n      return cond;\n    });\n    return ArtifactList.fromArray(filtered);\n  }\n\n  isEmpty(): boolean {\n    return this.every((artifact) => artifact.files.isEmpty());\n  }\n\n  /**\n   * group artifacts by the storage resolver.\n   */\n  groupByResolver(): ResolverMap<T> {\n    const resolverMap: ResolverMap<T> = {};\n    this.forEach((artifact) => {\n      const storageResolver = artifact.storageResolver;\n      const resolverArray = resolverMap[storageResolver.name];\n      if (!resolverArray) {\n        resolverMap[storageResolver.name] = [artifact];\n        return;\n      }\n      if (resolverArray.length) {\n        resolverMap[storageResolver.name].push(artifact);\n      }\n    });\n\n    return resolverMap;\n  }\n\n  toObject(): ArtifactObject[] {\n    return this.map((artifact) => artifact.toObject());\n  }\n\n  groupByTaskId() {\n    return this.reduce((acc: { [key: string]: T }, artifact) => {\n      const taskId = artifact.task.aspectId;\n      acc[taskId] = artifact;\n      return acc;\n    }, {});\n  }\n\n  async getVinylsAndImportIfMissing(id: BitId, scope: Scope): Promise<ArtifactVinyl[]> {\n    if (this.isEmpty()) return [];\n    const vinyls = await Promise.all(this.map((artifact) => artifact.files.getVinylsAndImportIfMissing(id, scope)));\n    return vinyls.flat();\n  }\n\n  /**\n   * store all artifacts using the configured storage resolvers.\n   */\n  async store(component: Component) {\n    const byResolvers = this.groupByResolver();\n    const promises = Object.keys(byResolvers).map(async (key) => {\n      const artifacts = byResolvers[key];\n      if (!artifacts.length) return;\n      const storageResolver = artifacts[0].storageResolver;\n      const artifactList = ArtifactList.fromArray(artifacts);\n      const artifactPromises = artifactList.map(async (artifact) => {\n        return this.storeArtifact(storageResolver, artifact, component);\n      });\n      await Promise.all(artifactPromises);\n    });\n\n    return Promise.all(promises);\n  }\n\n  private async storeArtifact(storageResolver: ArtifactStorageResolver, artifact: Artifact, component: Component) {\n    // For now we are always storing also using the default resolver\n    if (storageResolver.name !== 'default') {\n      const defaultResolver = new DefaultResolver();\n      await defaultResolver.store(component, artifact as FsArtifact);\n    }\n    // @ts-ignore\n    if (storageResolver.store && typeof storageResolver.store === 'function') {\n      return this.storeWholeArtifactByResolver(storageResolver as WholeArtifactStorageResolver, artifact, component);\n    }\n    return this.storeArtifactFilesByResolver(storageResolver as FileStorageResolver, artifact, component);\n  }\n\n  /**\n   * Send the entire artifact to the resolver then get back the result for all files from the resolver\n   * @param storageResolver\n   * @param artifact\n   * @param component\n   */\n  private async storeWholeArtifactByResolver(\n    storageResolver: WholeArtifactStorageResolver,\n    artifact: Artifact,\n    component: Component\n  ) {\n    const results = await storageResolver.store(component, artifact as FsArtifact);\n    if (!results) return;\n    artifact.files.vinyls.map(async (file) => {\n      const url = results[file.relative];\n      if (url) {\n        file.url = url;\n      }\n    });\n  }\n\n  /**\n   * Go over the artifact files and send them to the resolver one by one\n   * @param storageResolver\n   * @param artifact\n   * @param component\n   */\n  private storeArtifactFilesByResolver(storageResolver: FileStorageResolver, artifact: Artifact, component: Component) {\n    const promises = artifact.files.vinyls.map(async (file) => {\n      const url = await storageResolver.storeFile(component, artifact as FsArtifact, file);\n      if (url) {\n        file.url = url;\n      }\n    });\n    return Promise.all(promises);\n  }\n\n  static fromArtifactObjects(artifactObjects: ArtifactObject[]): ArtifactList<Artifact> {\n    const artifacts = artifactObjects.map((object) => Artifact.fromArtifactObject(object));\n    return ArtifactList.fromArray(artifacts);\n  }\n\n  static fromArray<T extends Artifact>(artifacts: T[]) {\n    return new ArtifactList(...artifacts);\n  }\n}\n"],"mappings":"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"}