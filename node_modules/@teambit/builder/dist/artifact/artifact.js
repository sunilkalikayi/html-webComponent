"use strict";

require("core-js/modules/es.symbol.description.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Artifact = void 0;
function _defaultResolver() {
  const data = require("../storage/default-resolver");
  _defaultResolver = function () {
    return data;
  };
  return data;
}
class Artifact {
  constructor(
  /**
   * definition of the artifact.
   */
  def, files,
  /**
   * the declaring task.
   */
  task,
  /**
   * timestamp of the artifact creation.
   */
  timestamp = Date.now()) {
    this.def = def;
    this.files = files;
    this.task = task;
    this.timestamp = timestamp;
  }
  get storage() {
    return this.storageResolver.name;
  }
  get storageResolver() {
    return this.def.storageResolver || new (_defaultResolver().DefaultResolver)();
  }

  /**
   * name of the artifact.
   */
  get name() {
    return this.def.name;
  }

  /**
   * description of the artifact.
   */
  get description() {
    return this.def.description;
  }

  /**
   * aspect id (string) that generated the artifact
   */
  get generatedBy() {
    return this.def.generatedBy || this.task.aspectId;
  }
  isEmpty() {
    return this.files.isEmpty();
  }

  /**
   * archive all artifact files into a tar.
   */
  tar() {}
  toObject() {
    return {
      name: this.name,
      description: this.description,
      generatedBy: this.generatedBy,
      storage: this.storageResolver.name,
      task: {
        id: this.task.aspectId,
        name: this.task.name
      },
      files: this.files
    };
  }
  static fromArtifactObject(object) {
    const artifactDef = {
      name: object.name,
      generatedBy: object.generatedBy,
      description: object.description
    };
    const task = {
      aspectId: object.task.id,
      name: object.task.name
    };
    return new Artifact(artifactDef, object.files, task);
  }
}
exports.Artifact = Artifact;

//# sourceMappingURL=artifact.js.map