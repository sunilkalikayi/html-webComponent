{"version":3,"names":["FILE_PATH_PARAM_DELIM","BuilderMain","constructor","envs","workspace","buildService","tagService","snapService","scope","isolator","aspectLoader","componentAspect","buildTaskSlot","tagTaskSlot","snapTaskSlot","storeArtifacts","tasksResults","artifacts","flatMap","t","storeP","map","artifactMap","Promise","all","toArray","component","artifactList","store","err","ArtifactStorageError","pipelineResultsToBuilderData","components","buildPipelineResults","buildPipelineResultList","BuildPipelineResultList","ComponentMap","as","aspectsData","getDataOfComponent","id","pipelineReport","getPipelineReportOfComponent","getArtifactsDataOfComponent","pipeline","bitVersion","getHarmonyVersion","tagListener","options","isolateOptions","pipeResults","throwOnError","forceDeploy","disableTagAndSnapPipelines","isSnap","envsExecutionResults","build","emptyRootDir","skipTests","throwErrorsIfExist","allTasksResults","push","hasErrors","deployEnvsExecutionResults","runSnapTasks","runTagTasks","builderDataMap","validateBuilderDataMap","forEach","buildData","taskSerializedIds","BuildTaskHelper","serializeId","aspectId","taskId","name","taskName","duplications","findDuplications","length","Error","toString","join","getArtifactsVinylByAspect","aspectName","getArtifactsByAspect","vinyls","getVinylsAndImportIfMissing","_legacy","legacyScope","getArtifactsVinylByAspectAndName","getArtifactsByAspectAndName","getArtifactsVinylByAspectAndTaskName","getArtifactsbyAspectAndTaskName","getArtifactsByName","getArtifacts","byAspectNameAndName","undefined","byAspectNameAndTaskName","getDataByAspect","getBuilderData","data","find","aspectData","ArtifactList","fromArray","get","BuilderAspect","clonedData","cloneDeep","artifactFiles","artifact","files","ArtifactFiles","fromObject","Artifact","Object","assign","fromArtifactObject","builderOptions","ids","c","network","isolateComponents","createEnvironment","graphCapsules","getAllComponents","builderServiceOptions","seedersOnly","originalSeeders","buildResult","runOnce","previousTasksResults","listTasks","compEnv","getEnv","buildTasks","getCurrentPipeTasks","tagTasks","snapTasks","envId","registerBuildTasks","tasks","register","registerDeployTasks","registerTagTasks","registerSnapTasks","getDownloadUrlForArtifact","componentId","path","provider","cli","loggerExt","graphql","generator","config","artifactFactory","ArtifactFactory","logger","createLogger","BuilderService","registerService","builder","registerRoute","BuilderRoute","builderSchema","registerComponentTemplate","buildTaskTemplate","commands","BuilderCmd","ArtifactsCmd","Slot","withType","MainRuntime","CLIAspect","EnvsAspect","WorkspaceAspect","ScopeAspect","IsolatorAspect","LoggerAspect","AspectLoaderAspect","GraphqlAspect","GeneratorAspect","ComponentAspect","addRuntime"],"sources":["builder.main.runtime.ts"],"sourcesContent":["import { cloneDeep } from 'lodash';\nimport { ArtifactVinyl } from '@teambit/legacy/dist/consumer/component/sources/artifact';\nimport { ArtifactFiles, ArtifactObject } from '@teambit/legacy/dist/consumer/component/sources/artifact-files';\nimport { AspectLoaderAspect, AspectLoaderMain } from '@teambit/aspect-loader';\nimport { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport { Component, ComponentMap, IComponent, ComponentAspect, ComponentMain, ComponentID } from '@teambit/component';\nimport { EnvsAspect, EnvsMain } from '@teambit/envs';\nimport { GraphqlAspect, GraphqlMain } from '@teambit/graphql';\nimport { Slot, SlotRegistry } from '@teambit/harmony';\nimport { LoggerAspect, LoggerMain } from '@teambit/logger';\nimport { ScopeAspect, ScopeMain } from '@teambit/scope';\nimport { Workspace, WorkspaceAspect } from '@teambit/workspace';\nimport { IsolateComponentsOptions, IsolatorAspect, IsolatorMain } from '@teambit/isolator';\nimport { getHarmonyVersion } from '@teambit/legacy/dist/bootstrap';\nimport findDuplications from '@teambit/legacy/dist/utils/array/find-duplications';\nimport { GeneratorAspect, GeneratorMain } from '@teambit/generator';\nimport { Artifact, ArtifactList, FsArtifact } from './artifact';\nimport { ArtifactFactory } from './artifact/artifact-factory'; // it gets undefined when importing it from './artifact'\nimport { BuilderAspect } from './builder.aspect';\nimport { builderSchema } from './builder.graphql';\nimport { BuilderService, BuilderServiceOptions } from './builder.service';\nimport { BuilderCmd } from './build.cmd';\nimport { BuildTask, BuildTaskHelper } from './build-task';\nimport { TaskResults } from './build-pipe';\nimport { TaskResultsList } from './task-results-list';\nimport { ArtifactStorageError } from './exceptions';\nimport { BuildPipelineResultList, AspectData, PipelineReport } from './build-pipeline-result-list';\nimport { Serializable } from './types';\nimport { ArtifactsCmd } from './artifact/artifacts.cmd';\nimport { buildTaskTemplate } from './templates/build-task';\nimport { BuilderRoute } from './builder.route';\n\nexport type TaskSlot = SlotRegistry<BuildTask[]>;\nexport type OnTagResults = { builderDataMap: ComponentMap<RawBuilderData>; pipeResults: TaskResultsList[] };\nexport type OnTagOpts = {\n  disableTagAndSnapPipelines?: boolean;\n  throwOnError?: boolean; // on the CI it helps to save the results on failure so this is set to false\n  forceDeploy?: boolean; // whether run the deploy-pipeline although the build-pipeline has failed\n  skipTests?: boolean;\n  isSnap?: boolean;\n};\nexport const FILE_PATH_PARAM_DELIM = '~';\n\n/**\n * builder data format for the bit object store\n */\nexport type RawBuilderData = {\n  pipeline: PipelineReport[];\n  artifacts?: ArtifactObject[];\n  aspectsData: AspectData[];\n  bitVersion?: string;\n};\n/**\n * builder data mapped to an ArtifactList instance\n */\nexport type BuilderData = Omit<RawBuilderData, 'artifacts'> & {\n  artifacts: ArtifactList<Artifact>;\n};\n\nexport class BuilderMain {\n  constructor(\n    private envs: EnvsMain,\n    private workspace: Workspace,\n    private buildService: BuilderService,\n    private tagService: BuilderService,\n    private snapService: BuilderService,\n    private scope: ScopeMain,\n    private isolator: IsolatorMain,\n    private aspectLoader: AspectLoaderMain,\n    private componentAspect: ComponentMain,\n    private buildTaskSlot: TaskSlot,\n    private tagTaskSlot: TaskSlot,\n    private snapTaskSlot: TaskSlot\n  ) {}\n\n  private async storeArtifacts(tasksResults: TaskResults[]) {\n    const artifacts = tasksResults.flatMap((t) => (t.artifacts ? [t.artifacts] : []));\n    const storeP = artifacts.map(async (artifactMap: ComponentMap<ArtifactList<FsArtifact>>) => {\n      return Promise.all(\n        artifactMap.toArray().map(async ([component, artifactList]) => {\n          try {\n            return await artifactList.store(component);\n          } catch (err: any) {\n            throw new ArtifactStorageError(err, component);\n          }\n        })\n      );\n    });\n    await Promise.all(storeP);\n  }\n\n  private pipelineResultsToBuilderData(\n    components: Component[],\n    buildPipelineResults: TaskResults[]\n  ): ComponentMap<RawBuilderData> {\n    const buildPipelineResultList = new BuildPipelineResultList(buildPipelineResults, components);\n    return ComponentMap.as<RawBuilderData>(components, (component) => {\n      const aspectsData = buildPipelineResultList.getDataOfComponent(component.id);\n      const pipelineReport = buildPipelineResultList.getPipelineReportOfComponent(component.id);\n      const artifacts = buildPipelineResultList.getArtifactsDataOfComponent(component.id);\n      return { pipeline: pipelineReport, artifacts, aspectsData, bitVersion: getHarmonyVersion(true) };\n    });\n  }\n\n  async tagListener(\n    components: Component[],\n    options: OnTagOpts = {},\n    isolateOptions: IsolateComponentsOptions = {}\n  ): Promise<OnTagResults> {\n    const pipeResults: TaskResultsList[] = [];\n    const { throwOnError, forceDeploy, disableTagAndSnapPipelines, isSnap } = options;\n    const envsExecutionResults = await this.build(\n      components,\n      { emptyRootDir: true, ...isolateOptions },\n      { skipTests: options.skipTests }\n    );\n    if (throwOnError && !forceDeploy) envsExecutionResults.throwErrorsIfExist();\n    const allTasksResults = [...envsExecutionResults.tasksResults];\n    pipeResults.push(envsExecutionResults);\n    if (forceDeploy || (!disableTagAndSnapPipelines && !envsExecutionResults.hasErrors())) {\n      const deployEnvsExecutionResults = isSnap\n        ? await this.runSnapTasks(components, isolateOptions, envsExecutionResults.tasksResults)\n        : await this.runTagTasks(components, isolateOptions, envsExecutionResults.tasksResults);\n      if (throwOnError && !forceDeploy) deployEnvsExecutionResults.throwErrorsIfExist();\n      allTasksResults.push(...deployEnvsExecutionResults.tasksResults);\n      pipeResults.push(deployEnvsExecutionResults);\n    }\n    await this.storeArtifacts(allTasksResults);\n    const builderDataMap = this.pipelineResultsToBuilderData(components, allTasksResults);\n    this.validateBuilderDataMap(builderDataMap);\n    return { builderDataMap, pipeResults };\n  }\n\n  private validateBuilderDataMap(builderDataMap: ComponentMap<RawBuilderData>) {\n    builderDataMap.forEach((buildData: RawBuilderData, component) => {\n      const taskSerializedIds = buildData.pipeline.map((t) =>\n        BuildTaskHelper.serializeId({ aspectId: t.taskId, name: t.taskName })\n      );\n      const duplications = findDuplications(taskSerializedIds);\n      if (duplications.length) {\n        throw new Error(\n          `build-task-results validation has failed. the following task(s) of \"${component.id.toString()}\" are duplicated: ${duplications.join(\n            ', '\n          )}`\n        );\n      }\n    });\n  }\n\n  // TODO: merge with getArtifactsVinylByExtensionAndName by getting aspect name and name as object with optional props\n  async getArtifactsVinylByAspect(component: Component, aspectName: string): Promise<ArtifactVinyl[]> {\n    const artifacts = this.getArtifactsByAspect(component, aspectName);\n    const vinyls = await artifacts.getVinylsAndImportIfMissing(component.id._legacy, this.scope.legacyScope);\n    return vinyls;\n  }\n\n  async getArtifactsVinylByAspectAndName(\n    component: Component,\n    aspectName: string,\n    name: string\n  ): Promise<ArtifactVinyl[]> {\n    const artifacts = this.getArtifactsByAspectAndName(component, aspectName, name);\n    const vinyls = await artifacts.getVinylsAndImportIfMissing(component.id._legacy, this.scope.legacyScope);\n    return vinyls;\n  }\n\n  async getArtifactsVinylByAspectAndTaskName(\n    component: Component,\n    aspectName: string,\n    name: string\n  ): Promise<ArtifactVinyl[]> {\n    const artifacts = this.getArtifactsbyAspectAndTaskName(component, aspectName, name);\n    const vinyls = await artifacts.getVinylsAndImportIfMissing(component.id._legacy, this.scope.legacyScope);\n    return vinyls;\n  }\n\n  getArtifactsByName(component: Component, name: string): ArtifactList<Artifact> {\n    const artifacts = this.getArtifacts(component).byAspectNameAndName(undefined, name);\n    return artifacts;\n  }\n\n  getArtifactsByAspect(component: Component, aspectName: string): ArtifactList<Artifact> {\n    const artifacts = this.getArtifacts(component).byAspectNameAndName(aspectName);\n    return artifacts;\n  }\n\n  getArtifactsByAspectAndName(component: Component, aspectName: string, name: string): ArtifactList<Artifact> {\n    const artifacts = this.getArtifacts(component).byAspectNameAndName(aspectName, name);\n    return artifacts;\n  }\n\n  getArtifactsbyAspectAndTaskName(component: Component, aspectName: string, taskName: string): ArtifactList<Artifact> {\n    const artifacts = this.getArtifacts(component).byAspectNameAndTaskName(aspectName, taskName);\n    return artifacts;\n  }\n\n  getDataByAspect(component: IComponent, aspectName: string): Serializable | undefined {\n    const aspectsData = this.getBuilderData(component)?.aspectsData;\n    const data = aspectsData?.find((aspectData) => aspectData.aspectId === aspectName);\n    return data?.data;\n  }\n\n  getArtifacts(component: Component): ArtifactList<Artifact> {\n    const artifacts = this.getBuilderData(component)?.artifacts || ArtifactList.fromArray([]);\n    return artifacts;\n  }\n\n  getBuilderData(component: IComponent): BuilderData | undefined {\n    const data = component.get(BuilderAspect.id)?.data;\n    if (!data) return undefined;\n    const clonedData = cloneDeep(data) as BuilderData;\n    let artifactFiles: ArtifactFiles;\n    clonedData.artifacts?.forEach((artifact) => {\n      if (!(artifact.files instanceof ArtifactFiles)) {\n        artifactFiles = ArtifactFiles.fromObject(artifact.files);\n      } else {\n        artifactFiles = artifact.files;\n      }\n      if (!(artifact instanceof Artifact)) {\n        Object.assign(artifact, { files: artifactFiles });\n        Object.assign(artifact, Artifact.fromArtifactObject(artifact));\n      }\n    });\n    clonedData.artifacts = ArtifactList.fromArray(clonedData.artifacts || []);\n    return clonedData;\n  }\n\n  /**\n   * build given components for release.\n   * for each one of the envs it runs a series of tasks.\n   * in case of an error in a task, it stops the execution of that env and continue to the next\n   * env. at the end, the results contain the data and errors per env.\n   */\n  async build(\n    components: Component[],\n    isolateOptions?: IsolateComponentsOptions,\n    builderOptions?: BuilderServiceOptions\n  ): Promise<TaskResultsList> {\n    const ids = components.map((c) => c.id);\n    const network = await this.isolator.isolateComponents(ids, isolateOptions, this.scope.legacyScope);\n    const envs = await this.envs.createEnvironment(network.graphCapsules.getAllComponents());\n    const builderServiceOptions = {\n      seedersOnly: isolateOptions?.seedersOnly,\n      originalSeeders: ids,\n      ...(builderOptions || {}),\n    };\n    const buildResult = await envs.runOnce(this.buildService, builderServiceOptions);\n    return buildResult;\n  }\n\n  async runTagTasks(\n    components: Component[],\n    isolateOptions?: IsolateComponentsOptions,\n    previousTasksResults?: TaskResults[]\n  ): Promise<TaskResultsList> {\n    const envs = await this.envs.createEnvironment(components);\n    const buildResult = await envs.runOnce(this.tagService, {\n      seedersOnly: isolateOptions?.seedersOnly,\n      previousTasksResults,\n    });\n\n    return buildResult;\n  }\n\n  async runSnapTasks(\n    components: Component[],\n    isolateOptions?: IsolateComponentsOptions,\n    previousTasksResults?: TaskResults[]\n  ): Promise<TaskResultsList> {\n    const envs = await this.envs.createEnvironment(components);\n    const buildResult = await envs.runOnce(this.snapService, {\n      seedersOnly: isolateOptions?.seedersOnly,\n      previousTasksResults,\n    });\n\n    return buildResult;\n  }\n\n  listTasks(component: Component) {\n    const compEnv = this.envs.getEnv(component);\n    const buildTasks = this.buildService.getCurrentPipeTasks(compEnv);\n    const tagTasks = this.tagService.getCurrentPipeTasks(compEnv);\n    const snapTasks = this.snapService.getCurrentPipeTasks(compEnv);\n    return { id: component.id, envId: compEnv.id, buildTasks, tagTasks, snapTasks };\n  }\n\n  /**\n   * register a build task to apply on all component build pipelines.\n   * build happens on `bit build` and as part of `bit tag --persist`.\n   */\n  registerBuildTasks(tasks: BuildTask[]) {\n    this.buildTaskSlot.register(tasks);\n    return this;\n  }\n\n  /**\n   * @deprecated use registerTagTasks or registerSnapTasks\n   */\n  registerDeployTasks(tasks: BuildTask[]) {\n    this.tagTaskSlot.register(tasks);\n    return this;\n  }\n\n  /**\n   * tag tasks that don't get executed on `bit build`, only on `bit tag'.\n   * this pipeline is running once the build-pipeline has completed.\n   */\n  registerTagTasks(tasks: BuildTask[]) {\n    this.tagTaskSlot.register(tasks);\n    return this;\n  }\n\n  /**\n   * tag tasks that don't get executed on `bit build`, only on `bit snap'.\n   * this pipeline is running once the build-pipeline has completed.\n   */\n  registerSnapTasks(tasks: BuildTask[]) {\n    this.snapTaskSlot.register(tasks);\n    return this;\n  }\n\n  getDownloadUrlForArtifact(componentId: ComponentID, taskId: string, path?: string) {\n    return `/api/${componentId}/~aspect/builder/${taskId}/${path ? `${FILE_PATH_PARAM_DELIM}${path}` : ''}`;\n  }\n\n  static slots = [Slot.withType<BuildTask>(), Slot.withType<BuildTask>(), Slot.withType<BuildTask>()];\n\n  static runtime = MainRuntime;\n  static dependencies = [\n    CLIAspect,\n    EnvsAspect,\n    WorkspaceAspect,\n    ScopeAspect,\n    IsolatorAspect,\n    LoggerAspect,\n    AspectLoaderAspect,\n    GraphqlAspect,\n    GeneratorAspect,\n    ComponentAspect,\n  ];\n\n  static async provider(\n    [cli, envs, workspace, scope, isolator, loggerExt, aspectLoader, graphql, generator, component]: [\n      CLIMain,\n      EnvsMain,\n      Workspace,\n      ScopeMain,\n      IsolatorMain,\n      LoggerMain,\n      AspectLoaderMain,\n      GraphqlMain,\n      GeneratorMain,\n      ComponentMain\n    ],\n    config,\n    [buildTaskSlot, tagTaskSlot, snapTaskSlot]: [TaskSlot, TaskSlot, TaskSlot]\n  ) {\n    const artifactFactory = new ArtifactFactory();\n    const logger = loggerExt.createLogger(BuilderAspect.id);\n    const buildService = new BuilderService(\n      isolator,\n      logger,\n      buildTaskSlot,\n      'getBuildPipe',\n      'build',\n      artifactFactory,\n      scope\n    );\n    envs.registerService(buildService);\n    const tagService = new BuilderService(isolator, logger, tagTaskSlot, 'getTagPipe', 'tag', artifactFactory, scope);\n    const snapService = new BuilderService(\n      isolator,\n      logger,\n      snapTaskSlot,\n      'getSnapPipe',\n      'snap',\n      artifactFactory,\n      scope\n    );\n    const builder = new BuilderMain(\n      envs,\n      workspace,\n      buildService,\n      tagService,\n      snapService,\n      scope,\n      isolator,\n      aspectLoader,\n      component,\n      buildTaskSlot,\n      tagTaskSlot,\n      snapTaskSlot\n    );\n    component.registerRoute([new BuilderRoute(builder, scope, logger)]);\n    graphql.register(builderSchema(builder));\n    generator.registerComponentTemplate([buildTaskTemplate]);\n    const commands = [new BuilderCmd(builder, workspace, logger), new ArtifactsCmd(builder, scope)];\n    cli.register(...commands);\n\n    return builder;\n  }\n}\n\nBuilderAspect.addRuntime(BuilderMain);\n"],"mappings":"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"}