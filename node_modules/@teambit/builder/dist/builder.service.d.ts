/// <reference types="react" />
import { EnvDefinition, EnvService, ExecutionContext } from '@teambit/envs';
import { ScopeMain } from '@teambit/scope';
import { Logger } from '@teambit/logger';
import { IsolatorMain } from '@teambit/isolator';
import { Component, ComponentID } from '@teambit/component';
import { TaskResults } from './build-pipe';
import { TaskResultsList } from './task-results-list';
import { TaskSlot } from './builder.main.runtime';
import { BuildContext } from './build-task';
import { ArtifactFactory } from './artifact';
export declare type BuildServiceResults = {
    id: string;
    buildResults: TaskResultsList;
    components: Component[];
    errors?: [];
};
export declare type BuilderServiceOptions = {
    seedersOnly?: boolean;
    originalSeeders?: ComponentID[];
    tasks?: string[];
    skipTests?: boolean;
    previousTasksResults?: TaskResults[];
    dev?: boolean;
};
export declare type EnvsBuildContext = {
    [envId: string]: BuildContext;
};
declare const pipeNames: {
    getBuildPipe: string;
    getTagPipe: string;
    getSnapPipe: string;
};
export declare type PipeName = 'build' | 'tag' | 'snap';
export declare type BuilderDescriptor = Array<{
    pipeName: PipeName;
    tasks: string[];
}>;
declare type PipeFunctionNames = keyof typeof pipeNames;
export declare class BuilderService implements EnvService<BuildServiceResults, BuilderDescriptor> {
    /**
     * isolator extension.
     */
    private isolator;
    /**
     * logger extension.
     */
    private logger;
    /**
     * task slot (e.g tasks registered by other extensions.).
     */
    private taskSlot;
    /**
     * a method with such name should be implemented on the env in order to run the pipe tasks.
     */
    private pipeNameOnEnv;
    /**
     * pipe name to display on the console during the execution
     */
    private displayPipeName;
    private artifactFactory;
    private scope;
    name: string;
    constructor(
    /**
     * isolator extension.
     */
    isolator: IsolatorMain, 
    /**
     * logger extension.
     */
    logger: Logger, 
    /**
     * task slot (e.g tasks registered by other extensions.).
     */
    taskSlot: TaskSlot, 
    /**
     * a method with such name should be implemented on the env in order to run the pipe tasks.
     */
    pipeNameOnEnv: PipeFunctionNames, 
    /**
     * pipe name to display on the console during the execution
     */
    displayPipeName: PipeName, artifactFactory: ArtifactFactory, scope: ScopeMain);
    /**
     * runs all tasks for all envs
     */
    runOnce(envsExecutionContext: ExecutionContext[], options: BuilderServiceOptions): Promise<TaskResultsList>;
    render(env: EnvDefinition): JSX.Element;
    private renderOnePipe;
    getDescriptor(env: EnvDefinition): BuilderDescriptor;
    private getTasksNamesByPipeFunc;
    getCurrentPipeTasks(env: EnvDefinition): string[];
}
export {};
