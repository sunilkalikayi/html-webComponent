{"version":3,"names":["taskFile","namePascalCase"],"sources":["task-file.ts"],"sourcesContent":["import { ComponentContext } from '@teambit/generator';\n\nexport function taskFile({ namePascalCase }: ComponentContext) {\n  return `import {\n  BuildTask,\n  BuildContext,\n  BuiltTaskResult,\n  ComponentResult,\n} from '@teambit/builder';\nimport path from 'path';\nimport fs from 'fs';\n\nexport class ${namePascalCase} implements BuildTask {\n  constructor(readonly aspectId: string) {}\n  readonly name = '${namePascalCase}';\n\n  async execute(context: BuildContext): Promise<BuiltTaskResult> {\n    // Prepare the component results array which will be used to report back the components processed\n    // as well as any additional data regarding this build task execution\n    const componentsResults: ComponentResult[] = [];\n    // The 'seeder capsules' are capsules for components that are built for their own sake - \n    // not for the sake of other components that have them as their dependencies\n    const capsules = context.capsuleNetwork.seedersCapsules;\n    capsules.forEach((capsule) => {\n      // Prepare an 'errors' array to report back of any errors during execution (this will be part of the 'Component Results' data)\n      const errors: Error[] = [];\n      // Each 'capsule' provides data regarding the component as well as the capsule itself\n      const componentName = capsule.component.id.name;\n      const capsuleDir = capsule.path;\n\n      const artifactContent = \\`The component name is \\${componentName}\\`\n\n      try {\n        // Generate the artifact inside the capsule's directory\n        fs.writeFileSync(\n          path.join(capsuleDir, 'output.my-artifact.txt'),\n          artifactContent\n        );\n      } catch (err: any) {\n        errors.push(err);\n      }\n      componentsResults.push({ component: capsule.component, errors });\n    });\n\n    return {\n      artifacts: [\n        {\n          generatedBy: this.aspectId,\n          name: this.name,\n          // The glob pattern for artifacts to include in the component version\n          globPatterns: ['**/*.my-artifact.txt'],\n        },\n      ],\n      componentsResults,\n    };\n  }\n}`;\n}\n"],"mappings":";;;;;;AAEO,SAASA,QAAQ,CAAC;EAAEC;AAAiC,CAAC,EAAE;EAC7D,OAAQ;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeA,cAAe;AAC9B;AACA,qBAAqBA,cAAe;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF"}