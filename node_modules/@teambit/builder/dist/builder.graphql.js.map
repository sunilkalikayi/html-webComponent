{"version":3,"names":["builderSchema","builder","typeDefs","gql","resolvers","Component","pipelineReport","component","taskId","builderData","getBuilderData","pipeline","artifacts","getArtifactsByAspect","getArtifacts","artifactsWithVinyl","Promise","all","map","artifact","id","task","aspectId","name","artifactFiles","getArtifactsVinylByAspectAndTaskName","vinyl","basename","path","contents","isBinary","isBinaryPath","content","toString","undefined","downloadUrl","encodeURI","getDownloadUrlForArtifact","externalUrl","url","artifactObj","files","result","find","data","taskName","TaskReport","taskReport","description","taskDescription","errors","e","warnings","pathFilter","filter","file"],"sources":["builder.graphql.ts"],"sourcesContent":["import { Component, ComponentID } from '@teambit/component';\nimport gql from 'graphql-tag';\nimport isBinaryPath from 'is-binary-path';\nimport { BuilderMain } from './builder.main.runtime';\nimport { PipelineReport } from './build-pipeline-result-list';\n\ntype ArtifactGQLFile = {\n  /**\n   * same as the path - used for GQL caching\n   */\n  id: string;\n  /**\n   * name of the artifact file\n   */\n  name: string;\n  /**\n   * path of the artifact file\n   */\n  path: string;\n  /**\n   * artifact file content (only for text files). Use /api/<component-id>/~aspect/builder/<extension-id>/~<path> to fetch binary file data\n   */\n  content?: string;\n  /**\n   * REST endpoint to fetch artifact data from. /api/<component-id>/~aspect/builder/<extension-id>/~<pat\n   */\n  downloadUrl?: string;\n  /**\n   * Remote storage url to resolve artifact file from\n   */\n  externalUrl?: string;\n};\n\ntype ArtifactGQLData = {\n  name: string;\n  description?: string;\n  storage?: string;\n  generatedBy: string;\n  files: ArtifactGQLFile[];\n};\ntype TaskReport = PipelineReport & {\n  artifact?: ArtifactGQLData;\n  componentId: ComponentID;\n};\n\nexport function builderSchema(builder: BuilderMain) {\n  return {\n    typeDefs: gql`\n      type TaskReport {\n        # for GQL caching - taskId + taskName\n        id: String!\n        taskId: String!\n        taskName: String!\n        description: String\n        startTime: String\n        endTime: String\n        errors: [String!]\n        warnings: [String!]\n        artifact(path: String): Artifact\n      }\n\n      type ArtifactFile {\n        # for GQL caching - same as the path\n        id: String!\n        # name of the artifact file\n        name: String\n        # path of the artifact file\n        path: String!\n        # artifact file content (only for text files). Use /api/<component-id>/~aspect/builder/<extension-id>/~<path> to fetch binary file data\n        content: String\n        # REST endpoint to fetch artifact data from. /api/<component-id>/~aspect/builder/<extension-id>/~<pat\n        downloadUrl: String\n        # Remote storage url to resolve artifact file from\n        externalUrl: String\n      }\n\n      type Artifact {\n        # for GQL caching -  PipelineId + Artifact Name\n        id: String!\n        # artifact name\n        name: String!\n        description: String\n        storage: String\n        generatedBy: String\n        files: [ArtifactFile!]!\n      }\n\n      extend type Component {\n        pipelineReport(taskId: String): [TaskReport!]!\n      }\n    `,\n\n    resolvers: {\n      Component: {\n        pipelineReport: async (component: Component, { taskId }: { taskId?: string }) => {\n          const builderData = builder.getBuilderData(component);\n          const pipeline = builderData?.pipeline || [];\n          const artifacts = taskId ? builder.getArtifactsByAspect(component, taskId) : builder.getArtifacts(component);\n\n          const artifactsWithVinyl = await Promise.all(\n            artifacts.map(async (artifact) => {\n              const id = artifact.task.aspectId;\n              const name = artifact.task.name as string;\n              const artifactFiles = (await builder.getArtifactsVinylByAspectAndTaskName(component, id, name)).map(\n                (vinyl) => {\n                  const { basename, path, contents } = vinyl || {};\n                  const isBinary = path && isBinaryPath(path);\n                  const content = !isBinary ? contents?.toString('utf-8') : undefined;\n                  const downloadUrl = encodeURI(\n                    builder.getDownloadUrlForArtifact(component.id, artifact.task.aspectId, path)\n                  );\n                  const externalUrl = vinyl.url;\n                  return { id: path, name: basename, path, content, downloadUrl, externalUrl };\n                }\n              );\n              const artifactObj = { ...artifact, files: artifactFiles };\n              return artifactObj;\n            })\n          );\n\n          const result = pipeline.map((task) => ({\n            ...task,\n            artifact: artifactsWithVinyl.find(\n              (data) => data.task.aspectId === task.taskId && data.task.name === task.taskName\n            ),\n          }));\n\n          return result;\n        },\n      },\n      TaskReport: {\n        id: (taskReport: TaskReport) => `${taskReport.taskId}-${taskReport.taskName}`,\n        description: (taskReport: TaskReport) => taskReport.taskDescription,\n        errors: (taskReport: TaskReport) => taskReport.errors?.map((e) => e.toString()) || [],\n        warnings: (taskReport: TaskReport) => taskReport.warnings || [],\n        artifact: async (taskReport: TaskReport, { path: pathFilter }: { path?: string }) => {\n          if (!taskReport.artifact) return undefined;\n          return {\n            id: `${taskReport.taskId}-${taskReport.taskName}-${taskReport.artifact?.name}`,\n            ...taskReport.artifact,\n            files: taskReport.artifact.files.filter((file) => !pathFilter || file.path === pathFilter),\n          };\n        },\n      },\n    },\n  };\n}\n"],"mappings":"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"}