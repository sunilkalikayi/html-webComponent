import { Component, ComponentID } from '@teambit/component';
import { BuilderMain } from './builder.main.runtime';
import { PipelineReport } from './build-pipeline-result-list';
declare type ArtifactGQLFile = {
    /**
     * same as the path - used for GQL caching
     */
    id: string;
    /**
     * name of the artifact file
     */
    name: string;
    /**
     * path of the artifact file
     */
    path: string;
    /**
     * artifact file content (only for text files). Use /api/<component-id>/~aspect/builder/<extension-id>/~<path> to fetch binary file data
     */
    content?: string;
    /**
     * REST endpoint to fetch artifact data from. /api/<component-id>/~aspect/builder/<extension-id>/~<pat
     */
    downloadUrl?: string;
    /**
     * Remote storage url to resolve artifact file from
     */
    externalUrl?: string;
};
declare type ArtifactGQLData = {
    name: string;
    description?: string;
    storage?: string;
    generatedBy: string;
    files: ArtifactGQLFile[];
};
declare type TaskReport = PipelineReport & {
    artifact?: ArtifactGQLData;
    componentId: ComponentID;
};
export declare function builderSchema(builder: BuilderMain): {
    typeDefs: import("graphql").DocumentNode;
    resolvers: {
        Component: {
            pipelineReport: (component: Component, { taskId }: {
                taskId?: string | undefined;
            }) => Promise<{
                artifact: {
                    files: {
                        id: string;
                        name: string;
                        path: string;
                        content: string | undefined;
                        downloadUrl: string;
                        externalUrl: string | undefined;
                    }[];
                    def: import("./artifact").ArtifactDefinition;
                    task: import("./build-task").TaskDescriptor;
                    timestamp: number;
                } | undefined;
                taskId: string;
                taskName: string;
                taskDescription?: string | undefined;
                startTime?: number | undefined;
                endTime?: number | undefined;
                errors?: (string | Error)[] | undefined;
                warnings?: string[] | undefined;
            }[]>;
        };
        TaskReport: {
            id: (taskReport: TaskReport) => string;
            description: (taskReport: TaskReport) => string | undefined;
            errors: (taskReport: TaskReport) => string[];
            warnings: (taskReport: TaskReport) => string[];
            artifact: (taskReport: TaskReport, { path: pathFilter }: {
                path?: string;
            }) => Promise<{
                files: ArtifactGQLFile[];
                name: string;
                description?: string | undefined;
                storage?: string | undefined;
                generatedBy: string;
                id: string;
            } | undefined>;
        };
    };
};
export {};
