"use strict";

require("core-js/modules/es.regexp.exec.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TaskIdDelimiter = exports.CAPSULE_ARTIFACTS_DIR = exports.BuildTaskHelper = void 0;
/**
 * delimiter between task.aspectId and task.name
 */
const TaskIdDelimiter = ':';

/**
 * A folder to write artifacts generated during a build task
 * This folder is used in the core envs and excluded by default from the package tar file (the core envs is writing this into the npmignore file)
 */
exports.TaskIdDelimiter = TaskIdDelimiter;
const CAPSULE_ARTIFACTS_DIR = 'artifacts';
exports.CAPSULE_ARTIFACTS_DIR = CAPSULE_ARTIFACTS_DIR;
class BuildTaskHelper {
  static serializeId({
    aspectId,
    name
  }) {
    return aspectId + TaskIdDelimiter + name;
  }
  static deserializeId(id) {
    const split = id.split(TaskIdDelimiter);
    if (split.length === 0) throw new Error(`deserializeId, ${id} is empty`);
    if (split.length === 1) throw new Error(`deserializeId, ${id} has only aspect-id without name`);
    if (split.length === 2) return {
      aspectId: split[0],
      name: split[1]
    };
    throw new Error(`deserializeId, id ${id} has more than one ${TaskIdDelimiter}`);
  }
  /**
   * don't throw an error when the id includes only the aspect-id without the task name.
   * useful for task dependencies, when it's allowed to specify the aspect-id only.
   */
  static deserializeIdAllowEmptyName(id) {
    return id.includes(TaskIdDelimiter) ? BuildTaskHelper.deserializeId(id) : {
      aspectId: id,
      name: undefined
    };
  }
}
exports.BuildTaskHelper = BuildTaskHelper;

//# sourceMappingURL=build-task.js.map