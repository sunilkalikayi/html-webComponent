import { ComponentID, Component } from '@teambit/component';
import type { ArtifactObject } from '@teambit/legacy/dist/consumer/component/sources/artifact-files';
import { TaskResults } from './build-pipe';
import { Serializable, TaskMetadata } from './types';
export declare type PipelineReport = {
    taskId: string;
    taskName: string;
    taskDescription?: string;
    startTime?: number;
    endTime?: number;
    errors?: Array<Error | string>;
    warnings?: string[];
};
export declare type AspectData = {
    aspectId: string;
    data: Serializable;
};
/**
 * Helper to get the data and artifacts from the TasksResultsList before saving during the tag
 */
export declare class BuildPipelineResultList {
    private tasksResults;
    private components;
    private artifactListsMap;
    constructor(tasksResults: TaskResults[], components: Component[]);
    private getFlattenedArtifactListsMapFromAllTasks;
    getMetadataFromTaskResults(componentId: ComponentID): {
        [taskId: string]: TaskMetadata;
    };
    getPipelineReportOfComponent(componentId: ComponentID): PipelineReport[];
    getDataOfComponent(componentId: ComponentID): AspectData[];
    getArtifactsDataOfComponent(componentId: ComponentID): ArtifactObject[] | undefined;
    private mergeDataIfPossible;
}
