{"version":3,"names":["routePath","defaultExtension","BuilderRoute","constructor","builder","scope","logger","req","res","component","params","aspectIdStr","filePath","split","aspectId","replace","artifacts","getArtifactsByAspect","getArtifacts","status","jsonp","error","id","extensionsWithArtifacts","Promise","all","map","artifact","files","getVinylsAndImportIfMissing","_legacy","legacyScope","extensionId","task","filter","file","path","artifactFilesCount","reduce","accum","next","length","extensionWithArtifact","find","e","fileName","fileContent","contents","fileExt","extname","contentType","mime","getType","set","send","archive","archiver","gzip","on","warn","message","err","forEach","extensionWithArtifacts","append","name","pipe","finalize","attachment","toString"],"sources":["builder.route.ts"],"sourcesContent":["import { Request, Response, Route } from '@teambit/express';\nimport { Component } from '@teambit/component';\nimport archiver from 'archiver';\nimport { Logger } from '@teambit/logger';\nimport { ScopeMain } from '@teambit/scope';\nimport mime from 'mime';\nimport { BuilderMain } from './builder.main.runtime';\n\nexport const routePath = `builder`;\n\nexport type BuilderUrlParams = {\n  aspectId?: string;\n  filePath?: string;\n};\nexport const defaultExtension = '.tgz';\nexport class BuilderRoute implements Route {\n  constructor(private builder: BuilderMain, private scope: ScopeMain, private logger: Logger) {}\n  route = `/${routePath}/*`;\n  method = 'get';\n\n  middlewares = [\n    async (req: Request<BuilderUrlParams>, res: Response) => {\n      // @ts-ignore TODO: @guy please fix.\n      const component = req.component as Component;\n      const { params } = req;\n      const [aspectIdStr, filePath] = params[1].split('~');\n      // remove trailing slash\n      const aspectId = aspectIdStr.replace(/\\/$/, '');\n      const artifacts = aspectId\n        ? this.builder.getArtifactsByAspect(component, aspectId)\n        : this.builder.getArtifacts(component);\n      if (!artifacts)\n        return res\n          .status(404)\n          .jsonp({ error: `no artifacts found for component ${component.id} by aspect ${aspectId}` });\n      const extensionsWithArtifacts = await Promise.all(\n        artifacts.map(async (artifact) => {\n          const files = await artifact.files.getVinylsAndImportIfMissing(component.id._legacy, this.scope.legacyScope);\n          if (!filePath) return { extensionId: artifact.task.aspectId, files };\n          return { extensionId: artifact.task.aspectId, files: files.filter((file) => file.path === filePath) };\n        })\n      );\n\n      const artifactFilesCount = extensionsWithArtifacts.reduce((accum, next) => accum + next.files.length, 0);\n\n      if (artifactFilesCount === 0)\n        return res\n          .status(404)\n          .jsonp({ error: `no artifacts found for component ${component.id} by aspect ${aspectId}` });\n\n      if (artifactFilesCount === 1) {\n        const extensionWithArtifact = extensionsWithArtifacts.find((e) => e.files.length > 0);\n        const fileName = `${extensionWithArtifact?.extensionId}_${extensionWithArtifact?.files[0].path}`;\n        const fileContent = extensionWithArtifact?.files[0].contents;\n        const fileExt = extensionWithArtifact?.files[0].extname || defaultExtension;\n        const contentType = mime.getType(fileExt);\n        res.set('Content-disposition', `attachment; filename=${fileName}`);\n        if (contentType) res.set('Content-Type', contentType);\n        return res.send(fileContent);\n      }\n\n      /**\n       * if more than 1 file requested, zip them before sending\n       */\n      const archive = archiver('tar', { gzip: true });\n\n      archive.on('warning', (warn) => {\n        this.logger.warn(warn.message);\n      });\n\n      archive.on('error', (err) => {\n        this.logger.error(err.message);\n      });\n\n      extensionsWithArtifacts.forEach((extensionWithArtifacts) => {\n        extensionWithArtifacts.files.forEach((artifact) => {\n          archive.append(artifact.contents, { name: `${extensionWithArtifacts.extensionId}_${artifact.path}` });\n        });\n      });\n\n      try {\n        archive.pipe(res);\n        /**\n         *  promise that is returned from the await zip.finalize(); is resolved before the archive is actually finalized\n         *  resolving it results in setting the headers before the stream is finished\n         */\n        // eslint-disable-next-line no-void\n        void archive.finalize();\n        return res.attachment(`${aspectId.replace('/', '_')}.tar`);\n      } catch (e: any) {\n        return res.send({ error: e.toString() });\n      }\n    },\n  ];\n}\n"],"mappings":"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"}