{"version":3,"names":["BuildPipe","constructor","tasksQueue","envsBuildContext","logger","artifactFactory","previousTaskResults","allTasksResults","taskResults","execute","addSignalListener","executePreBuild","longProcessLogger","createLongProcessLogger","length","mapSeries","task","env","executeTask","end","tasksResultsList","TaskResultsList","executePostBuild","process","on","exit","setStatusLine","preBuild","getBuildContext","id","consoleSuccess","taskId","BuildTaskHelper","serializeId","taskName","description","logProgress","updateFailedDependencyTask","shouldSkipTask","startTask","hrtime","taskStartTime","Date","now","buildContext","buildTaskResult","err","consoleFailure","endTime","compsWithErrors","componentsResults","filter","c","errors","artifacts","failedTasks","push","duration","prettyTime","defs","generate","startTime","tasksResults","postBuild","failedDependencyTask","dependencies","forEach","dependency","aspectId","name","deserializeIdAllowEmptyName","find","failedTask","envId","failedTaskId","consoleWarning","Error","previousTasksResults"],"sources":["build-pipe.ts"],"sourcesContent":["import { EnvDefinition } from '@teambit/envs';\nimport { ComponentMap } from '@teambit/component';\nimport { Logger, LongProcessLogger } from '@teambit/logger';\nimport mapSeries from 'p-map-series';\nimport prettyTime from 'pretty-time';\nimport { ArtifactFactory, ArtifactList, FsArtifact } from './artifact';\nimport { BuildContext, BuildTask, BuildTaskHelper, BuiltTaskResult } from './build-task';\nimport { ComponentResult } from './types';\nimport { TasksQueue } from './tasks-queue';\nimport { EnvsBuildContext } from './builder.service';\nimport { TaskResultsList } from './task-results-list';\n\nexport type TaskResults = {\n  /**\n   * task itself. useful for getting its id/description later on.\n   */\n  task: BuildTask;\n\n  /**\n   * environment were the task was running\n   */\n  env: EnvDefinition;\n\n  /**\n   * component build results.\n   */\n  componentsResults: ComponentResult[];\n\n  /**\n   * artifacts generated by the build pipeline.\n   * in case the task finished with errors, this prop is undefined.\n   */\n  artifacts: ComponentMap<ArtifactList<FsArtifact>> | undefined;\n\n  /**\n   * timestamp of start initiation.\n   */\n  startTime: number;\n\n  /**\n   * timestamp of task completion.\n   */\n  endTime: number;\n};\n\nexport class BuildPipe {\n  private failedTasks: BuildTask[] = [];\n  private failedDependencyTask: BuildTask | undefined;\n  private longProcessLogger: LongProcessLogger;\n  private taskResults: TaskResults[] = [];\n  constructor(\n    /**\n     * array of services to apply on the components.\n     */\n    readonly tasksQueue: TasksQueue,\n    readonly envsBuildContext: EnvsBuildContext,\n    readonly logger: Logger,\n    readonly artifactFactory: ArtifactFactory,\n    private previousTaskResults?: TaskResults[]\n  ) {}\n\n  get allTasksResults(): TaskResults[] {\n    return [...(this.previousTaskResults || []), ...(this.taskResults || [])];\n  }\n\n  /**\n   * execute a pipeline of build tasks.\n   */\n  async execute(): Promise<TaskResultsList> {\n    this.addSignalListener();\n    await this.executePreBuild();\n    this.longProcessLogger = this.logger.createLongProcessLogger('running tasks', this.tasksQueue.length);\n    await mapSeries(this.tasksQueue, async ({ task, env }) => this.executeTask(task, env));\n    this.longProcessLogger.end();\n    const tasksResultsList = new TaskResultsList(this.tasksQueue, this.taskResults);\n    await this.executePostBuild(tasksResultsList);\n\n    return tasksResultsList;\n  }\n\n  /**\n   * for some reason, some tasks (such as typescript compilation) ignore ctrl+C. this fixes it.\n   */\n  private addSignalListener() {\n    process.on('SIGTERM', () => {\n      process.exit();\n    });\n\n    process.on('SIGINT', () => {\n      process.exit();\n    });\n  }\n\n  private async executePreBuild() {\n    this.logger.setStatusLine('executing pre-build for all tasks');\n    await mapSeries(this.tasksQueue, async ({ task, env }) => {\n      if (!task.preBuild) return;\n      await task.preBuild(this.getBuildContext(env.id));\n    });\n    this.logger.consoleSuccess();\n  }\n\n  private async executeTask(task: BuildTask, env: EnvDefinition): Promise<void> {\n    const taskId = BuildTaskHelper.serializeId(task);\n    const taskName = `${taskId}${task.description ? ` (${task.description})` : ''}`;\n    this.longProcessLogger.logProgress(`env \"${env.id}\", task \"${taskName}\"`);\n    this.updateFailedDependencyTask(task);\n    if (this.shouldSkipTask(taskId, env.id)) {\n      return;\n    }\n    const startTask = process.hrtime();\n    const taskStartTime = Date.now();\n    const buildContext = this.getBuildContext(env.id);\n    let buildTaskResult: BuiltTaskResult;\n    try {\n      buildTaskResult = await task.execute(buildContext);\n    } catch (err) {\n      this.logger.consoleFailure(`env: ${env.id}, task \"${taskId}\" threw an error`);\n      throw err;\n    }\n\n    const endTime = Date.now();\n    const compsWithErrors = buildTaskResult.componentsResults.filter((c) => c.errors?.length);\n    let artifacts: ComponentMap<ArtifactList<FsArtifact>> | undefined;\n    if (compsWithErrors.length) {\n      this.logger.consoleFailure(`env: ${env.id}, task \"${taskId}\" has failed`);\n      this.failedTasks.push(task);\n    } else {\n      const duration = prettyTime(process.hrtime(startTask));\n      this.logger.consoleSuccess(`env \"${env.id}\", task \"${taskName}\" has completed successfully in ${duration}`);\n      const defs = buildTaskResult.artifacts || [];\n      artifacts = this.artifactFactory.generate(buildContext, defs, task);\n    }\n\n    const taskResults: TaskResults = {\n      task,\n      env,\n      componentsResults: buildTaskResult.componentsResults,\n      artifacts,\n      startTime: taskStartTime,\n      endTime,\n    };\n\n    this.taskResults.push(taskResults);\n  }\n\n  private async executePostBuild(tasksResults: TaskResultsList) {\n    this.logger.setStatusLine('executing post-build for all tasks');\n    await mapSeries(this.tasksQueue, async ({ task, env }) => {\n      if (!task.postBuild) return;\n      await task.postBuild(this.getBuildContext(env.id), tasksResults);\n    });\n    this.logger.consoleSuccess();\n  }\n\n  private updateFailedDependencyTask(task: BuildTask) {\n    if (!this.failedDependencyTask && this.failedTasks.length && task.dependencies) {\n      task.dependencies.forEach((dependency) => {\n        const { aspectId, name } = BuildTaskHelper.deserializeIdAllowEmptyName(dependency);\n        this.failedDependencyTask = this.failedTasks.find((failedTask) => {\n          if (name && name !== failedTask.name) return false;\n          return aspectId === failedTask.aspectId;\n        });\n      });\n    }\n  }\n\n  private shouldSkipTask(taskId: string, envId: string): boolean {\n    if (!this.failedDependencyTask) return false;\n    const failedTaskId = BuildTaskHelper.serializeId(this.failedDependencyTask);\n    this.logger.consoleWarning(`env: ${envId}, task \"${taskId}\" has skipped due to \"${failedTaskId}\" failure`);\n    return true;\n  }\n\n  private getBuildContext(envId: string): BuildContext {\n    const buildContext = this.envsBuildContext[envId];\n    if (!buildContext) throw new Error(`unable to find buildContext for ${envId}`);\n    buildContext.previousTasksResults = this.allTasksResults;\n    return buildContext;\n  }\n}\n"],"mappings":"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"}