{"version":3,"names":["TaskResultsList","constructor","tasksQueue","tasksResults","hasErrors","some","taskResult","componentsResults","find","c","errors","length","throwErrorsIfExist","errorMessage","getErrorMessageFormatted","BitError","tasksErrors","totalErrors","forEach","compsWithErrors","filter","title","chalk","bold","BuildTaskHelper","serializeId","task","env","id","errorsStr","map","compWithErrors","aggregateTaskErrorsToOneString","join","taskErrors","reduce","acc","current","summery","push","totalTasks","totalFailed","totalSucceed","totalSkipped","componentResult","rawErrors","e","toString","component"],"sources":["task-results-list.ts"],"sourcesContent":["import chalk from 'chalk';\nimport { BitError } from '@teambit/bit-error';\nimport { BuildTaskHelper } from './build-task';\nimport { TasksQueue } from './tasks-queue';\nimport { TaskResults } from './build-pipe';\nimport { ComponentResult } from './types';\n\nexport class TaskResultsList {\n  constructor(\n    public tasksQueue: TasksQueue,\n    /**\n     * results of all tasks executed in the build pipeline.\n     */\n    public tasksResults: TaskResults[]\n  ) {}\n\n  hasErrors(): boolean {\n    return this.tasksResults.some((taskResult) => taskResult.componentsResults.find((c) => c.errors?.length));\n  }\n\n  throwErrorsIfExist() {\n    const errorMessage = this.getErrorMessageFormatted();\n    if (errorMessage) {\n      throw new BitError(errorMessage);\n    }\n  }\n\n  /**\n   * group errors from all tasks and show them nicely to the user\n   */\n  public getErrorMessageFormatted(): string | null {\n    const tasksErrors: string[] = [];\n    let totalErrors = 0;\n    this.tasksResults.forEach((taskResult) => {\n      const compsWithErrors = taskResult.componentsResults.filter((c) => c.errors?.length);\n      if (!compsWithErrors.length) return;\n      const title = chalk.bold(\n        `Failed task ${tasksErrors.length + 1}: \"${BuildTaskHelper.serializeId(taskResult.task)}\" of env \"${\n          taskResult.env.id\n        }\"\\n`\n      );\n      const errorsStr = compsWithErrors\n        .map((compWithErrors) => this.aggregateTaskErrorsToOneString(compWithErrors))\n        .join('\\n\\n');\n      const taskErrors = compsWithErrors.reduce((acc, current) => acc + (current.errors || []).length, 0);\n      const summery = `\\n\\nFound ${taskErrors} errors in ${compsWithErrors.length} components`;\n      totalErrors += taskErrors;\n      tasksErrors.push(title + errorsStr + summery);\n    });\n    if (!tasksErrors.length) return null;\n    const title = `\\nThe following errors were found while running the build pipeline\\n`;\n    const errorsStr = tasksErrors.join('\\n\\n');\n    const totalTasks = this.tasksQueue.length;\n    const totalFailed = tasksErrors.length;\n    const totalSucceed = this.tasksResults.length - totalFailed;\n    const totalSkipped = totalTasks - this.tasksResults.length;\n    const summery = `\\n\\n\\nâœ– Total ${totalTasks} tasks. ${totalSucceed} succeeded. ${totalFailed} failed. ${totalSkipped} skipped. Total errors: ${totalErrors}.`;\n    return title + errorsStr + summery;\n  }\n\n  private aggregateTaskErrorsToOneString(componentResult: ComponentResult) {\n    const rawErrors = componentResult.errors || [];\n    const errors = rawErrors.map((e) => (typeof e === 'string' ? e : e.toString()));\n    return `component: ${componentResult.component.id.toString()}\\n${errors.join('\\n')}`;\n  }\n}\n"],"mappings":"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"}