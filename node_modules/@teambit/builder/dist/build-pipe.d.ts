import { EnvDefinition } from '@teambit/envs';
import { ComponentMap } from '@teambit/component';
import { Logger } from '@teambit/logger';
import { ArtifactFactory, ArtifactList, FsArtifact } from './artifact';
import { BuildTask } from './build-task';
import { ComponentResult } from './types';
import { TasksQueue } from './tasks-queue';
import { EnvsBuildContext } from './builder.service';
import { TaskResultsList } from './task-results-list';
export declare type TaskResults = {
    /**
     * task itself. useful for getting its id/description later on.
     */
    task: BuildTask;
    /**
     * environment were the task was running
     */
    env: EnvDefinition;
    /**
     * component build results.
     */
    componentsResults: ComponentResult[];
    /**
     * artifacts generated by the build pipeline.
     * in case the task finished with errors, this prop is undefined.
     */
    artifacts: ComponentMap<ArtifactList<FsArtifact>> | undefined;
    /**
     * timestamp of start initiation.
     */
    startTime: number;
    /**
     * timestamp of task completion.
     */
    endTime: number;
};
export declare class BuildPipe {
    /**
     * array of services to apply on the components.
     */
    readonly tasksQueue: TasksQueue;
    readonly envsBuildContext: EnvsBuildContext;
    readonly logger: Logger;
    readonly artifactFactory: ArtifactFactory;
    private previousTaskResults?;
    private failedTasks;
    private failedDependencyTask;
    private longProcessLogger;
    private taskResults;
    constructor(
    /**
     * array of services to apply on the components.
     */
    tasksQueue: TasksQueue, envsBuildContext: EnvsBuildContext, logger: Logger, artifactFactory: ArtifactFactory, previousTaskResults?: TaskResults[] | undefined);
    get allTasksResults(): TaskResults[];
    /**
     * execute a pipeline of build tasks.
     */
    execute(): Promise<TaskResultsList>;
    /**
     * for some reason, some tasks (such as typescript compilation) ignore ctrl+C. this fixes it.
     */
    private addSignalListener;
    private executePreBuild;
    private executeTask;
    private executePostBuild;
    private updateFailedDependencyTask;
    private shouldSkipTask;
    private getBuildContext;
}
