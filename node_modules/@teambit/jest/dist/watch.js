"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
class Watch {
  constructor({
    stdin,
    stdout,
    config
  }) {
    (0, _defineProperty2().default)(this, "_stdin", void 0);
    (0, _defineProperty2().default)(this, "_stdout", void 0);
    (0, _defineProperty2().default)(this, "_prompt", void 0);
    (0, _defineProperty2().default)(this, "_testResults", void 0);
    (0, _defineProperty2().default)(this, "_usageInfo", void 0);
    (0, _defineProperty2().default)(this, "_specFiles", void 0);
    (0, _defineProperty2().default)(this, "_onComplete", void 0);
    this._stdin = stdin;
    this._stdout = stdout;
    this._specFiles = config.specFiles;
    this._onComplete = config.onComplete;
  }
  findComponent(specFile) {
    const component = this._specFiles.toArray().find(([, specs]) => {
      const paths = specs.map(spec => spec.path);
      if (paths.includes(specFile)) return true;
      return false;
    });
    return component === null || component === void 0 ? void 0 : component[0];
  }
  apply(jestHooks) {
    // jestHooks.shouldRunTestSuite(async (testSuite) => {
    //   const component = this.findComponent(testSuite.testPath);
    //   if ((await component?.isModified()) || (await component?.isNew())) return true;
    //   return false;
    // });

    jestHooks.onTestRunComplete(results => {
      this._onComplete(results);
    });
  }
}
module.exports = Watch;

//# sourceMappingURL=watch.js.map