{"version":3,"names":["JestTester","constructor","id","jestConfig","jestModulePath","jestWorker","logger","opts","jestModule","require","displayConfig","readFileSync","version","getVersion","attachTestsToComponent","testerContext","testResult","ComponentMap","as","components","component","componentPatternValue","patterns","get","undefined","currComponent","patternEntry","resolvedPatterns","resolveComponentPattern","filter","test","resolvedPattern","minimatch","testFilePath","length","buildTestsObj","aggregatedResult","config","testsSuiteResult","toArray","map","testsFiles","errors","getErrors","tests","file","AbstractVinyl","path","contents","testResults","error","formatResultsErrors","noStackTrace","isFailure","status","TestResult","ancestorTitles","title","duration","filePath","basename","getError","testExecError","watch","JestError","failureMessage","message","stack","TestsFiles","numPassingTests","numFailingTests","numPendingTests","perfStats","runtime","slow","componentId","results","TestsResult","success","startTime","compact","reduce","code","type","push","onTestRunComplete","callback","_callback","context","rootDir","rootPath","roots","console","warn","debug","runInBand","coverage","watchAll","noCache","jestConfigWithSpecs","Object","assign","testMatch","patternsToArray","withEnv","testsOutPut","runCLI","componentsWithTests","componentTestResults","Tests","Promise","resolve","workerApi","initiate","ui","stdout","stderr","stdin","envRootDir","envRuntime","envAspectDefinition","aspectPath","cbFn","proxy","globalErrors","watchTestResults","loading","onTestComplete","err","calculateModuleNameMapper","env","additionalHostDependencies","peerDepsConfig","getDependencies","peersAutoDetectPolicy","PeersAutoDetectPolicy","peers","keys","peerDependencies","concat","names","depsToMap","mappedValues","moduleNameMapper","acc","peerName","keyName","internalPathKeyName","flatten","resolveSpecPaths","customPatterns","isEmpty","customPattern","rootDirs","componentDir","resolvePattern","paths","p","pattern","dir"],"sources":["jest.tester.ts"],"sourcesContent":["import { resolve } from 'path';\nimport { readFileSync } from 'fs-extra';\nimport minimatch from 'minimatch';\nimport { compact, flatten, isEmpty } from 'lodash';\nimport { proxy } from 'comlink';\nimport { Logger } from '@teambit/logger';\nimport { HarmonyWorker } from '@teambit/worker';\nimport { Tester, CallbackFn, TesterContext, Tests, ComponentsResults, ComponentPatternsEntry } from '@teambit/tester';\nimport { TestsFiles, TestResult, TestsResult } from '@teambit/tests-results';\nimport { TestResult as JestTestResult, AggregatedResult } from '@jest/test-result';\nimport { formatResultsErrors } from 'jest-message-util';\nimport { Component, ComponentMap } from '@teambit/component';\nimport { AbstractVinyl } from '@teambit/legacy/dist/consumer/component/sources';\nimport { Environment } from '@teambit/envs';\nimport { EnvPolicyConfigObject, PeersAutoDetectPolicy } from '@teambit/dependency-resolver';\nimport type jest from 'jest';\nimport { JestError } from './error';\nimport type { JestWorker } from './jest.worker';\n\nexport type JestTesterOptions = {\n  /**\n   * array of patterns to test. (override the patterns provided by the context)\n   */\n  patterns?: string[];\n\n  /**\n   * add more root paths to look for tests.\n   */\n  roots?: string[];\n\n  /**\n   * A function that knows to resolve the paths of the spec files.\n   * This usually used when you want only subset of your spec files to be used\n   * (usually when you use multi tester with different specs files for each tester instance).\n   */\n  resolveSpecPaths?: (component: Component, context: TesterContext) => string[];\n};\n\nexport class JestTester implements Tester {\n  private readonly jestModule: typeof jest;\n\n  constructor(\n    readonly id: string,\n    readonly jestConfig: any,\n    private jestModulePath: string,\n    private jestWorker: HarmonyWorker<JestWorker>,\n    private logger: Logger,\n    private opts: JestTesterOptions = {}\n  ) {\n    // eslint-disable-next-line global-require,import/no-dynamic-require\n    this.jestModule = require(jestModulePath);\n  }\n\n  configPath = this.jestConfig;\n\n  displayName = 'Jest';\n\n  _callback: CallbackFn | undefined;\n\n  displayConfig() {\n    return readFileSync(this.jestConfig, 'utf8');\n  }\n\n  version() {\n    return this.jestModule.getVersion();\n  }\n\n  private attachTestsToComponent(testerContext: TesterContext, testResult: JestTestResult[]) {\n    return ComponentMap.as(testerContext.components, (component) => {\n      const componentPatternValue = testerContext.patterns.get(component);\n      if (!componentPatternValue) return undefined;\n      const [currComponent, patternEntry] = componentPatternValue;\n      const resolvedPatterns = this.resolveComponentPattern(currComponent, patternEntry, testerContext);\n      return testResult.filter((test) => {\n        return resolvedPatterns.filter((resolvedPattern) => minimatch(test.testFilePath, resolvedPattern)).length > 0;\n      });\n    });\n  }\n\n  private buildTestsObj(\n    aggregatedResult: AggregatedResult,\n    components: ComponentMap<JestTestResult[] | undefined>,\n    testerContext: TesterContext,\n    config?: any\n  ): ComponentsResults[] {\n    const testsSuiteResult = components.toArray().map(([component, testsFiles]) => {\n      if (!testsFiles) return undefined;\n      if (testsFiles?.length === 0) return undefined;\n      const errors = this.getErrors(testsFiles);\n      const tests = testsFiles.map((test) => {\n        const file = new AbstractVinyl({ path: test.testFilePath, contents: readFileSync(test.testFilePath) });\n        const testResults = test.testResults.map((testResult) => {\n          const error = formatResultsErrors([testResult], config, { noStackTrace: true }) || undefined;\n          const isFailure = testResult.status === 'failed';\n          return new TestResult(\n            testResult.ancestorTitles,\n            testResult.title,\n            testResult.status,\n            testResult.duration,\n            isFailure ? undefined : error,\n            isFailure ? error : undefined\n          );\n        });\n        const filePath = file?.basename || test.testFilePath;\n        const getError = () => {\n          if (!test.testExecError) return undefined;\n          if (testerContext.watch) {\n            // for some reason, during watch ('bit start'), if a file has an error, the `test.testExecError` is `{}`\n            // (an empty object). the failureMessage contains the stringified error.\n            // @todo: consider to always use the failureMessage, regardless the context.watch.\n            return new JestError(test.failureMessage as string);\n          }\n          return new JestError(test.testExecError?.message, test.testExecError?.stack);\n        };\n        const error = getError();\n        return new TestsFiles(\n          filePath,\n          testResults,\n          test.numPassingTests,\n          test.numFailingTests,\n          test.numPendingTests,\n          test.perfStats.runtime,\n          test.perfStats.slow,\n          error\n        );\n      });\n      return {\n        componentId: component.id,\n        results: new TestsResult(tests, aggregatedResult.success, aggregatedResult.startTime),\n        errors,\n      };\n    });\n\n    return compact(testsSuiteResult);\n  }\n\n  private getErrors(testResult: JestTestResult[]): JestError[] {\n    return testResult.reduce((errors: JestError[], test) => {\n      if (test.testExecError) {\n        const { message, stack, code, type } = test.testExecError;\n        errors.push(new JestError(message, stack, code, type));\n      } else if (test.failureMessage) {\n        errors.push(new JestError(test.failureMessage));\n      }\n      return errors;\n    }, []);\n  }\n\n  async onTestRunComplete(callback: CallbackFn) {\n    this._callback = callback;\n  }\n\n  async test(context: TesterContext): Promise<Tests> {\n    // const envRootDir = context.envRuntime.envAspectDefinition.aspectPath;\n\n    const config: any = {\n      // Setting the rootDir to the env root dir to make sure we can resolve all the jest presets/plugins\n      // from the env context\n      // rootDir: envRootDir,\n      // TODO: set it to envRootDir and make sure we can make the --coverage to work\n      // with the current value as context.rootPath it will probably won't work correctly when using rootComponents:true (maybe even won't work at all)\n      // TODO: when changing to envRootDir we have some issues with the react-native tests. so once changed again, it needs to be validated.\n      rootDir: context.rootPath,\n      // Setting the roots (where to search for spec files) to the root path (either workspace or capsule root)\n      // TODO: consider change this to be an array of the components running dir.\n      // TODO: aka: in the workspace it will be something like <ws>/node_modules/<comp-package-name>/node_modules/<comp-package-name>\n      // TODO: see dependencyResolver.getRuntimeModulePath (this will make sure the peer deps resolved correctly)\n      // TODO: (@GiladShoham - when trying to set it to this paths, jest ignores it probably because the paths contains \"node_modules\"\n      // TODO: trying to set the https://jestjs.io/docs/27.x/configuration#testpathignorepatterns-arraystring to something else (as it contain node_modules by default)\n      // TODO: didn't help)\n      roots: [context.rootPath],\n    };\n\n    // eslint-disable-next-line no-console\n    console.warn = (message: string) => {\n      this.logger.warn(message);\n    };\n\n    if (context.debug) {\n      config.debug = true;\n      config.runInBand = true;\n    }\n    if (context.coverage) config.coverage = true;\n    config.runInBand = true;\n\n    if (context.watch) {\n      config.watchAll = true;\n      config.noCache = true;\n    }\n    // eslint-disable-next-line global-require,import/no-dynamic-require\n    const jestConfig = require(this.jestConfig);\n\n    // TODO: rollback this for now, as it makes issues.\n    // TODO: it's mostly relevant for when the root components feature is enabled.\n    // TODO: we might want to enable it only on that case (along with setting the env root dir as the root dir, above)\n    // const moduleNameMapper = await this.calculateModuleNameMapper(\n    //   context.env,\n    //   context.rootPath,\n    //   context.additionalHostDependencies\n    // );\n    // jestConfig.moduleNameMapper = Object.assign({}, jestConfig.moduleNameMapper || {}, moduleNameMapper);\n\n    const jestConfigWithSpecs = Object.assign(jestConfig, {\n      testMatch: this.patternsToArray(context),\n    });\n\n    const withEnv = Object.assign(jestConfigWithSpecs, config);\n\n    const testsOutPut = await this.jestModule.runCLI(withEnv, [this.jestConfig]);\n    const testResults = testsOutPut.results.testResults;\n    const componentsWithTests = this.attachTestsToComponent(context, testResults);\n    const componentTestResults = this.buildTestsObj(\n      testsOutPut.results,\n      componentsWithTests,\n      context,\n      jestConfigWithSpecs\n    );\n    return new Tests(componentTestResults);\n  }\n\n  async watch(context: TesterContext): Promise<Tests> {\n    // eslint-disable-next-line\n    return new Promise(async (resolve) => {\n      const workerApi = this.jestWorker.initiate(\n        context.ui ? { stdout: true, stderr: true, stdin: true } : { stdout: false, stderr: false, stdin: false }\n      );\n\n      // eslint-disable-next-line\n      const jestConfig = require(this.jestConfig);\n\n      const envRootDir = context.envRuntime.envAspectDefinition?.aspectPath;\n      if (!envRootDir) {\n        this.logger.warn(`jest tester, envRootDir is not defined, for env ${context.envRuntime.id}`);\n      }\n\n      const jestConfigWithSpecs = Object.assign(jestConfig, {\n        testMatch: this.patternsToArray(context),\n      });\n\n      try {\n        const cbFn = proxy((results) => {\n          if (!this._callback) return;\n          const testResults = results.testResults;\n          const componentsWithTests = this.attachTestsToComponent(context, testResults);\n          const componentTestResults = this.buildTestsObj(results, componentsWithTests, context, jestConfigWithSpecs);\n          const globalErrors = this.getErrors(testResults);\n          const watchTestResults = {\n            loading: false,\n            errors: globalErrors,\n            components: componentTestResults,\n          };\n          this._callback(watchTestResults);\n          resolve(watchTestResults);\n        });\n\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        await workerApi.onTestComplete(cbFn);\n\n        await workerApi.watch(\n          this.jestConfig,\n          this.patternsToArray(context),\n          context.rootPath,\n          this.jestModulePath,\n          envRootDir\n        );\n      } catch (err: any) {\n        this.logger.error('jest.tester.watch() caught an error', err);\n      }\n    });\n  }\n\n  private async calculateModuleNameMapper(\n    env: Environment,\n    rootPath: string,\n    additionalHostDependencies?: string[]\n  ): Promise<Record<string, Array<string>>> {\n    const peerDepsConfig: EnvPolicyConfigObject = await env.getDependencies();\n    const peersAutoDetectPolicy = new PeersAutoDetectPolicy(peerDepsConfig.peers || []);\n    const peers = Object.keys(peerDepsConfig.peerDependencies || {}).concat(peersAutoDetectPolicy?.names);\n    const depsToMap = peers.concat(additionalHostDependencies || []);\n\n    /**\n     * Try to resolve the dependency from the rootDir (the env dir) or from the root path (workspace/capsule root)\n     */\n    const mappedValues = ['<rootDir>/node_modules/$1', `${rootPath}/node_modules/$1`];\n\n    const moduleNameMapper = depsToMap.reduce((acc, peerName) => {\n      const keyName = `^(${peerName})$`;\n      acc[keyName] = mappedValues;\n      const internalPathKeyName = `^(${peerName}/.*)$`;\n      acc[internalPathKeyName] = mappedValues;\n      return acc;\n    }, {});\n\n    return moduleNameMapper;\n  }\n\n  private patternsToArray(context: TesterContext): string[] {\n    return flatten(\n      context.patterns.toArray().map(([component, patternEntry]) => {\n        return this.resolveComponentPattern(component, patternEntry, context);\n      })\n    );\n  }\n\n  private resolveComponentPattern(\n    component: Component,\n    patternEntry: ComponentPatternsEntry,\n    context: TesterContext\n  ): string[] {\n    if (this.opts.resolveSpecPaths) {\n      return this.opts.resolveSpecPaths(component, context);\n    }\n    const customPatterns = this.opts.patterns;\n    // If pattern were provided to the specific instance of the tester, use them\n    if (customPatterns && !isEmpty(customPatterns)) {\n      customPatterns.map((customPattern) => {\n        const rootDirs = this.opts.roots || [patternEntry.componentDir];\n        return this.resolvePattern(customPattern, rootDirs);\n      });\n    }\n    return patternEntry.paths.map((p) => p.path);\n  }\n\n  private resolvePattern(pattern: string, rootDirs: string[]) {\n    return rootDirs.map((dir) => resolve(dir, pattern));\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAGA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAsBO,MAAMA,UAAU,CAAmB;EAGxCC,WAAW,CACAC,EAAU,EACVC,UAAe,EAChBC,cAAsB,EACtBC,UAAqC,EACrCC,MAAc,EACdC,IAAuB,GAAG,CAAC,CAAC,EACpC;IAAA,KANSL,EAAU,GAAVA,EAAU;IAAA,KACVC,UAAe,GAAfA,UAAe;IAAA,KAChBC,cAAsB,GAAtBA,cAAsB;IAAA,KACtBC,UAAqC,GAArCA,UAAqC;IAAA,KACrCC,MAAc,GAAdA,MAAc;IAAA,KACdC,IAAuB,GAAvBA,IAAuB;IAAA;IAAA,oDAMpB,IAAI,CAACJ,UAAU;IAAA,qDAEd,MAAM;IAAA;IANlB;IACA,IAAI,CAACK,UAAU,GAAGC,OAAO,CAACL,cAAc,CAAC;EAC3C;EAQAM,aAAa,GAAG;IACd,OAAO,IAAAC,uBAAY,EAAC,IAAI,CAACR,UAAU,EAAE,MAAM,CAAC;EAC9C;EAEAS,OAAO,GAAG;IACR,OAAO,IAAI,CAACJ,UAAU,CAACK,UAAU,EAAE;EACrC;EAEQC,sBAAsB,CAACC,aAA4B,EAAEC,UAA4B,EAAE;IACzF,OAAOC,yBAAY,CAACC,EAAE,CAACH,aAAa,CAACI,UAAU,EAAGC,SAAS,IAAK;MAC9D,MAAMC,qBAAqB,GAAGN,aAAa,CAACO,QAAQ,CAACC,GAAG,CAACH,SAAS,CAAC;MACnE,IAAI,CAACC,qBAAqB,EAAE,OAAOG,SAAS;MAC5C,MAAM,CAACC,aAAa,EAAEC,YAAY,CAAC,GAAGL,qBAAqB;MAC3D,MAAMM,gBAAgB,GAAG,IAAI,CAACC,uBAAuB,CAACH,aAAa,EAAEC,YAAY,EAAEX,aAAa,CAAC;MACjG,OAAOC,UAAU,CAACa,MAAM,CAAEC,IAAI,IAAK;QACjC,OAAOH,gBAAgB,CAACE,MAAM,CAAEE,eAAe,IAAK,IAAAC,oBAAS,EAACF,IAAI,CAACG,YAAY,EAAEF,eAAe,CAAC,CAAC,CAACG,MAAM,GAAG,CAAC;MAC/G,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEQC,aAAa,CACnBC,gBAAkC,EAClCjB,UAAsD,EACtDJ,aAA4B,EAC5BsB,MAAY,EACS;IACrB,MAAMC,gBAAgB,GAAGnB,UAAU,CAACoB,OAAO,EAAE,CAACC,GAAG,CAAC,CAAC,CAACpB,SAAS,EAAEqB,UAAU,CAAC,KAAK;MAC7E,IAAI,CAACA,UAAU,EAAE,OAAOjB,SAAS;MACjC,IAAI,CAAAiB,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEP,MAAM,MAAK,CAAC,EAAE,OAAOV,SAAS;MAC9C,MAAMkB,MAAM,GAAG,IAAI,CAACC,SAAS,CAACF,UAAU,CAAC;MACzC,MAAMG,KAAK,GAAGH,UAAU,CAACD,GAAG,CAAEV,IAAI,IAAK;QACrC,MAAMe,IAAI,GAAG,KAAIC,wBAAa,EAAC;UAAEC,IAAI,EAAEjB,IAAI,CAACG,YAAY;UAAEe,QAAQ,EAAE,IAAArC,uBAAY,EAACmB,IAAI,CAACG,YAAY;QAAE,CAAC,CAAC;QACtG,MAAMgB,WAAW,GAAGnB,IAAI,CAACmB,WAAW,CAACT,GAAG,CAAExB,UAAU,IAAK;UACvD,MAAMkC,KAAK,GAAG,IAAAC,sCAAmB,EAAC,CAACnC,UAAU,CAAC,EAAEqB,MAAM,EAAE;YAAEe,YAAY,EAAE;UAAK,CAAC,CAAC,IAAI5B,SAAS;UAC5F,MAAM6B,SAAS,GAAGrC,UAAU,CAACsC,MAAM,KAAK,QAAQ;UAChD,OAAO,KAAIC,0BAAU,EACnBvC,UAAU,CAACwC,cAAc,EACzBxC,UAAU,CAACyC,KAAK,EAChBzC,UAAU,CAACsC,MAAM,EACjBtC,UAAU,CAAC0C,QAAQ,EACnBL,SAAS,GAAG7B,SAAS,GAAG0B,KAAK,EAC7BG,SAAS,GAAGH,KAAK,GAAG1B,SAAS,CAC9B;QACH,CAAC,CAAC;QACF,MAAMmC,QAAQ,GAAG,CAAAd,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEe,QAAQ,KAAI9B,IAAI,CAACG,YAAY;QACpD,MAAM4B,QAAQ,GAAG,MAAM;UAAA;UACrB,IAAI,CAAC/B,IAAI,CAACgC,aAAa,EAAE,OAAOtC,SAAS;UACzC,IAAIT,aAAa,CAACgD,KAAK,EAAE;YACvB;YACA;YACA;YACA,OAAO,KAAIC,kBAAS,EAAClC,IAAI,CAACmC,cAAc,CAAW;UACrD;UACA,OAAO,KAAID,kBAAS,yBAAClC,IAAI,CAACgC,aAAa,wDAAlB,oBAAoBI,OAAO,0BAAEpC,IAAI,CAACgC,aAAa,yDAAlB,qBAAoBK,KAAK,CAAC;QAC9E,CAAC;QACD,MAAMjB,KAAK,GAAGW,QAAQ,EAAE;QACxB,OAAO,KAAIO,0BAAU,EACnBT,QAAQ,EACRV,WAAW,EACXnB,IAAI,CAACuC,eAAe,EACpBvC,IAAI,CAACwC,eAAe,EACpBxC,IAAI,CAACyC,eAAe,EACpBzC,IAAI,CAAC0C,SAAS,CAACC,OAAO,EACtB3C,IAAI,CAAC0C,SAAS,CAACE,IAAI,EACnBxB,KAAK,CACN;MACH,CAAC,CAAC;MACF,OAAO;QACLyB,WAAW,EAAEvD,SAAS,CAAClB,EAAE;QACzB0E,OAAO,EAAE,KAAIC,2BAAW,EAACjC,KAAK,EAAER,gBAAgB,CAAC0C,OAAO,EAAE1C,gBAAgB,CAAC2C,SAAS,CAAC;QACrFrC;MACF,CAAC;IACH,CAAC,CAAC;IAEF,OAAO,IAAAsC,iBAAO,EAAC1C,gBAAgB,CAAC;EAClC;EAEQK,SAAS,CAAC3B,UAA4B,EAAe;IAC3D,OAAOA,UAAU,CAACiE,MAAM,CAAC,CAACvC,MAAmB,EAAEZ,IAAI,KAAK;MACtD,IAAIA,IAAI,CAACgC,aAAa,EAAE;QACtB,MAAM;UAAEI,OAAO;UAAEC,KAAK;UAAEe,IAAI;UAAEC;QAAK,CAAC,GAAGrD,IAAI,CAACgC,aAAa;QACzDpB,MAAM,CAAC0C,IAAI,CAAC,KAAIpB,kBAAS,EAACE,OAAO,EAAEC,KAAK,EAAEe,IAAI,EAAEC,IAAI,CAAC,CAAC;MACxD,CAAC,MAAM,IAAIrD,IAAI,CAACmC,cAAc,EAAE;QAC9BvB,MAAM,CAAC0C,IAAI,CAAC,KAAIpB,kBAAS,EAAClC,IAAI,CAACmC,cAAc,CAAC,CAAC;MACjD;MACA,OAAOvB,MAAM;IACf,CAAC,EAAE,EAAE,CAAC;EACR;EAEA,MAAM2C,iBAAiB,CAACC,QAAoB,EAAE;IAC5C,IAAI,CAACC,SAAS,GAAGD,QAAQ;EAC3B;EAEA,MAAMxD,IAAI,CAAC0D,OAAsB,EAAkB;IACjD;;IAEA,MAAMnD,MAAW,GAAG;MAClB;MACA;MACA;MACA;MACA;MACA;MACAoD,OAAO,EAAED,OAAO,CAACE,QAAQ;MACzB;MACA;MACA;MACA;MACA;MACA;MACA;MACAC,KAAK,EAAE,CAACH,OAAO,CAACE,QAAQ;IAC1B,CAAC;;IAED;IACAE,OAAO,CAACC,IAAI,GAAI3B,OAAe,IAAK;MAClC,IAAI,CAAC5D,MAAM,CAACuF,IAAI,CAAC3B,OAAO,CAAC;IAC3B,CAAC;IAED,IAAIsB,OAAO,CAACM,KAAK,EAAE;MACjBzD,MAAM,CAACyD,KAAK,GAAG,IAAI;MACnBzD,MAAM,CAAC0D,SAAS,GAAG,IAAI;IACzB;IACA,IAAIP,OAAO,CAACQ,QAAQ,EAAE3D,MAAM,CAAC2D,QAAQ,GAAG,IAAI;IAC5C3D,MAAM,CAAC0D,SAAS,GAAG,IAAI;IAEvB,IAAIP,OAAO,CAACzB,KAAK,EAAE;MACjB1B,MAAM,CAAC4D,QAAQ,GAAG,IAAI;MACtB5D,MAAM,CAAC6D,OAAO,GAAG,IAAI;IACvB;IACA;IACA,MAAM/F,UAAU,GAAGM,OAAO,CAAC,IAAI,CAACN,UAAU,CAAC;;IAE3C;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA,MAAMgG,mBAAmB,GAAGC,MAAM,CAACC,MAAM,CAAClG,UAAU,EAAE;MACpDmG,SAAS,EAAE,IAAI,CAACC,eAAe,CAACf,OAAO;IACzC,CAAC,CAAC;IAEF,MAAMgB,OAAO,GAAGJ,MAAM,CAACC,MAAM,CAACF,mBAAmB,EAAE9D,MAAM,CAAC;IAE1D,MAAMoE,WAAW,GAAG,MAAM,IAAI,CAACjG,UAAU,CAACkG,MAAM,CAACF,OAAO,EAAE,CAAC,IAAI,CAACrG,UAAU,CAAC,CAAC;IAC5E,MAAM8C,WAAW,GAAGwD,WAAW,CAAC7B,OAAO,CAAC3B,WAAW;IACnD,MAAM0D,mBAAmB,GAAG,IAAI,CAAC7F,sBAAsB,CAAC0E,OAAO,EAAEvC,WAAW,CAAC;IAC7E,MAAM2D,oBAAoB,GAAG,IAAI,CAACzE,aAAa,CAC7CsE,WAAW,CAAC7B,OAAO,EACnB+B,mBAAmB,EACnBnB,OAAO,EACPW,mBAAmB,CACpB;IACD,OAAO,KAAIU,eAAK,EAACD,oBAAoB,CAAC;EACxC;EAEA,MAAM7C,KAAK,CAACyB,OAAsB,EAAkB;IAClD;IACA,OAAO,IAAIsB,OAAO,CAAC,MAAOC,OAAO,IAAK;MAAA;MACpC,MAAMC,SAAS,GAAG,IAAI,CAAC3G,UAAU,CAAC4G,QAAQ,CACxCzB,OAAO,CAAC0B,EAAE,GAAG;QAAEC,MAAM,EAAE,IAAI;QAAEC,MAAM,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAK,CAAC,GAAG;QAAEF,MAAM,EAAE,KAAK;QAAEC,MAAM,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAM,CAAC,CAC1G;;MAED;MACA,MAAMlH,UAAU,GAAGM,OAAO,CAAC,IAAI,CAACN,UAAU,CAAC;MAE3C,MAAMmH,UAAU,4BAAG9B,OAAO,CAAC+B,UAAU,CAACC,mBAAmB,0DAAtC,sBAAwCC,UAAU;MACrE,IAAI,CAACH,UAAU,EAAE;QACf,IAAI,CAAChH,MAAM,CAACuF,IAAI,CAAE,mDAAkDL,OAAO,CAAC+B,UAAU,CAACrH,EAAG,EAAC,CAAC;MAC9F;MAEA,MAAMiG,mBAAmB,GAAGC,MAAM,CAACC,MAAM,CAAClG,UAAU,EAAE;QACpDmG,SAAS,EAAE,IAAI,CAACC,eAAe,CAACf,OAAO;MACzC,CAAC,CAAC;MAEF,IAAI;QACF,MAAMkC,IAAI,GAAG,IAAAC,gBAAK,EAAE/C,OAAO,IAAK;UAC9B,IAAI,CAAC,IAAI,CAACW,SAAS,EAAE;UACrB,MAAMtC,WAAW,GAAG2B,OAAO,CAAC3B,WAAW;UACvC,MAAM0D,mBAAmB,GAAG,IAAI,CAAC7F,sBAAsB,CAAC0E,OAAO,EAAEvC,WAAW,CAAC;UAC7E,MAAM2D,oBAAoB,GAAG,IAAI,CAACzE,aAAa,CAACyC,OAAO,EAAE+B,mBAAmB,EAAEnB,OAAO,EAAEW,mBAAmB,CAAC;UAC3G,MAAMyB,YAAY,GAAG,IAAI,CAACjF,SAAS,CAACM,WAAW,CAAC;UAChD,MAAM4E,gBAAgB,GAAG;YACvBC,OAAO,EAAE,KAAK;YACdpF,MAAM,EAAEkF,YAAY;YACpBzG,UAAU,EAAEyF;UACd,CAAC;UACD,IAAI,CAACrB,SAAS,CAACsC,gBAAgB,CAAC;UAChCd,OAAO,CAACc,gBAAgB,CAAC;QAC3B,CAAC,CAAC;;QAEF;QACA,MAAMb,SAAS,CAACe,cAAc,CAACL,IAAI,CAAC;QAEpC,MAAMV,SAAS,CAACjD,KAAK,CACnB,IAAI,CAAC5D,UAAU,EACf,IAAI,CAACoG,eAAe,CAACf,OAAO,CAAC,EAC7BA,OAAO,CAACE,QAAQ,EAChB,IAAI,CAACtF,cAAc,EACnBkH,UAAU,CACX;MACH,CAAC,CAAC,OAAOU,GAAQ,EAAE;QACjB,IAAI,CAAC1H,MAAM,CAAC4C,KAAK,CAAC,qCAAqC,EAAE8E,GAAG,CAAC;MAC/D;IACF,CAAC,CAAC;EACJ;EAEA,MAAcC,yBAAyB,CACrCC,GAAgB,EAChBxC,QAAgB,EAChByC,0BAAqC,EACG;IACxC,MAAMC,cAAqC,GAAG,MAAMF,GAAG,CAACG,eAAe,EAAE;IACzE,MAAMC,qBAAqB,GAAG,KAAIC,2CAAqB,EAACH,cAAc,CAACI,KAAK,IAAI,EAAE,CAAC;IACnF,MAAMA,KAAK,GAAGpC,MAAM,CAACqC,IAAI,CAACL,cAAc,CAACM,gBAAgB,IAAI,CAAC,CAAC,CAAC,CAACC,MAAM,CAACL,qBAAqB,aAArBA,qBAAqB,uBAArBA,qBAAqB,CAAEM,KAAK,CAAC;IACrG,MAAMC,SAAS,GAAGL,KAAK,CAACG,MAAM,CAACR,0BAA0B,IAAI,EAAE,CAAC;;IAEhE;AACJ;AACA;IACI,MAAMW,YAAY,GAAG,CAAC,2BAA2B,EAAG,GAAEpD,QAAS,kBAAiB,CAAC;IAEjF,MAAMqD,gBAAgB,GAAGF,SAAS,CAAC5D,MAAM,CAAC,CAAC+D,GAAG,EAAEC,QAAQ,KAAK;MAC3D,MAAMC,OAAO,GAAI,KAAID,QAAS,IAAG;MACjCD,GAAG,CAACE,OAAO,CAAC,GAAGJ,YAAY;MAC3B,MAAMK,mBAAmB,GAAI,KAAIF,QAAS,OAAM;MAChDD,GAAG,CAACG,mBAAmB,CAAC,GAAGL,YAAY;MACvC,OAAOE,GAAG;IACZ,CAAC,EAAE,CAAC,CAAC,CAAC;IAEN,OAAOD,gBAAgB;EACzB;EAEQxC,eAAe,CAACf,OAAsB,EAAY;IACxD,OAAO,IAAA4D,iBAAO,EACZ5D,OAAO,CAAClE,QAAQ,CAACiB,OAAO,EAAE,CAACC,GAAG,CAAC,CAAC,CAACpB,SAAS,EAAEM,YAAY,CAAC,KAAK;MAC5D,OAAO,IAAI,CAACE,uBAAuB,CAACR,SAAS,EAAEM,YAAY,EAAE8D,OAAO,CAAC;IACvE,CAAC,CAAC,CACH;EACH;EAEQ5D,uBAAuB,CAC7BR,SAAoB,EACpBM,YAAoC,EACpC8D,OAAsB,EACZ;IACV,IAAI,IAAI,CAACjF,IAAI,CAAC8I,gBAAgB,EAAE;MAC9B,OAAO,IAAI,CAAC9I,IAAI,CAAC8I,gBAAgB,CAACjI,SAAS,EAAEoE,OAAO,CAAC;IACvD;IACA,MAAM8D,cAAc,GAAG,IAAI,CAAC/I,IAAI,CAACe,QAAQ;IACzC;IACA,IAAIgI,cAAc,IAAI,CAAC,IAAAC,iBAAO,EAACD,cAAc,CAAC,EAAE;MAC9CA,cAAc,CAAC9G,GAAG,CAAEgH,aAAa,IAAK;QACpC,MAAMC,QAAQ,GAAG,IAAI,CAAClJ,IAAI,CAACoF,KAAK,IAAI,CAACjE,YAAY,CAACgI,YAAY,CAAC;QAC/D,OAAO,IAAI,CAACC,cAAc,CAACH,aAAa,EAAEC,QAAQ,CAAC;MACrD,CAAC,CAAC;IACJ;IACA,OAAO/H,YAAY,CAACkI,KAAK,CAACpH,GAAG,CAAEqH,CAAC,IAAKA,CAAC,CAAC9G,IAAI,CAAC;EAC9C;EAEQ4G,cAAc,CAACG,OAAe,EAAEL,QAAkB,EAAE;IAC1D,OAAOA,QAAQ,CAACjH,GAAG,CAAEuH,GAAG,IAAK,IAAAhD,eAAO,EAACgD,GAAG,EAAED,OAAO,CAAC,CAAC;EACrD;AACF;AAAC"}