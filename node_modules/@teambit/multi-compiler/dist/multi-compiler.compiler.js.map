{"version":3,"names":["MultiCompiler","constructor","id","compilers","compilerOptions","options","shouldCopyNonSupportedFiles","getDistDir","distDir","getArtifactDefinition","generatedBy","name","artifactName","globPatterns","distGlobPatterns","getOptions","defaultOpts","targetExtension","Object","assign","displayConfig","map","compiler","displayName","join","transpileFile","fileContent","outputs","reduce","files","flatMap","file","isFileSupported","outputPath","params","filePath","compiledContent","outputText","transpileComponent","Promise","all","build","context","builds","pMapSeries","buildResult","componentsResults","mergeComponentResults","artifacts","preBuild","postBuild","taskResults","firstMatchedCompiler","find","getPreviewComponentRootPath","component","matchedCompiler","getDistPathBySrcPath","srcPath","version"],"sources":["multi-compiler.compiler.ts"],"sourcesContent":["import { join } from 'path';\nimport pMapSeries from 'p-map-series';\nimport {\n  Compiler,\n  CompilerOptions,\n  TranspileComponentParams,\n  TranspileFileOutput,\n  TranspileFileParams,\n} from '@teambit/compiler';\nimport { BuiltTaskResult, BuildContext, TaskResultsList } from '@teambit/builder';\nimport { mergeComponentResults } from '@teambit/pipelines.modules.merge-component-results';\nimport { Component } from '@teambit/component';\n\nexport type MultiCompilerOptions = {\n  targetExtension?: string;\n};\n\nexport class MultiCompiler implements Compiler {\n  displayName = 'Multi compiler';\n\n  shouldCopyNonSupportedFiles =\n    typeof this.compilerOptions.shouldCopyNonSupportedFiles === 'boolean'\n      ? this.compilerOptions.shouldCopyNonSupportedFiles\n      : true;\n  distDir = 'dist';\n\n  constructor(\n    readonly id: string,\n    readonly compilers: Compiler[],\n    readonly compilerOptions: Partial<CompilerOptions> = {},\n    readonly options: MultiCompilerOptions = {}\n  ) {}\n\n  getDistDir() {\n    return this.distDir;\n  }\n\n  getArtifactDefinition() {\n    return [\n      {\n        generatedBy: this.id,\n        name: this.compilerOptions.artifactName || 'dist',\n        globPatterns: this.compilerOptions.distGlobPatterns || [\n          `${this.distDir}/**`,\n          `!${this.distDir}/tsconfig.tsbuildinfo`,\n        ],\n      },\n    ];\n  }\n\n  private getOptions() {\n    const defaultOpts = {\n      targetExtension: '.js',\n    };\n\n    return Object.assign(defaultOpts, this.options);\n  }\n\n  displayConfig() {\n    return this.compilers\n      .map((compiler) => {\n        return `${compiler.displayName}\\n${compiler.displayConfig}\\n`;\n      })\n      .join('\\n');\n  }\n\n  /**\n   * the multi-compiler applies all applicable defined compilers on given content.\n   */\n  transpileFile(fileContent: string, options: TranspileFileParams): TranspileFileOutput {\n    const outputs = this.compilers.reduce<any>(\n      (files, compiler) => {\n        if (!compiler.transpileFile) {\n          return files;\n        }\n        return files?.flatMap((file) => {\n          if (!compiler.isFileSupported(file?.outputPath)) return [file];\n          const params = Object.assign({}, options, {\n            filePath: file.outputPath,\n          });\n          const compiledContent = compiler.transpileFile?.(file.outputText, params);\n          if (!compiledContent) return null;\n\n          return compiledContent;\n        });\n      },\n      [{ outputText: fileContent, outputPath: options.filePath }]\n    );\n\n    return outputs;\n  }\n\n  async transpileComponent(params: TranspileComponentParams): Promise<void> {\n    await Promise.all(\n      this.compilers.map((compiler) => {\n        return compiler.transpileComponent?.(params);\n      })\n    );\n  }\n\n  async build(context: BuildContext): Promise<BuiltTaskResult> {\n    const builds = await pMapSeries(this.compilers, async (compiler) => {\n      const buildResult = await compiler.build(context);\n      return buildResult.componentsResults;\n    });\n\n    return {\n      componentsResults: mergeComponentResults(builds),\n      artifacts: this.getArtifactDefinition(),\n    };\n  }\n\n  async preBuild(context: BuildContext) {\n    await Promise.all(\n      this.compilers.map(async (compiler) => {\n        if (!compiler.preBuild) return;\n        await compiler.preBuild(context);\n      })\n    );\n  }\n\n  async postBuild(context: BuildContext, taskResults: TaskResultsList) {\n    await Promise.all(\n      this.compilers.map(async (compiler) => {\n        if (!compiler.postBuild) return;\n        await compiler.postBuild(context, taskResults);\n      })\n    );\n  }\n\n  private firstMatchedCompiler(filePath: string): Compiler | undefined {\n    return this.compilers.find((compiler) => compiler.isFileSupported(filePath));\n  }\n\n  getPreviewComponentRootPath(component: Component): string {\n    const matchedCompiler = this.compilers.find(\n      (compiler) => typeof compiler.getPreviewComponentRootPath !== 'undefined'\n    );\n    if (!matchedCompiler) {\n      return '';\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return matchedCompiler.getPreviewComponentRootPath!(component);\n  }\n\n  /**\n   * given a source file, return its parallel in the dists. e.g. \"index.ts\" => \"dist/index.js\"\n   * both, the return path and the given path are relative paths.\n   */\n  getDistPathBySrcPath(srcPath: string): string {\n    const matchedCompiler = this.firstMatchedCompiler(srcPath);\n    if (!matchedCompiler) {\n      return join(this.distDir, srcPath);\n    }\n\n    return matchedCompiler.getDistPathBySrcPath(srcPath);\n  }\n\n  /**\n   * only supported files matching get compiled. others, are copied to the dist dir.\n   */\n  isFileSupported(filePath: string): boolean {\n    return !!this.firstMatchedCompiler(filePath);\n  }\n\n  /**\n   * returns the version of the current compiler instance (e.g. '4.0.1').\n   */\n  version(): string {\n    return this.compilers\n      .map((compiler) => {\n        return `${compiler.displayName}@${compiler.version()}`;\n      })\n      .join('\\n');\n  }\n}\n"],"mappings":"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"}