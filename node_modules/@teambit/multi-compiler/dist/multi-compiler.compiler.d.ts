import { Compiler, CompilerOptions, TranspileComponentParams, TranspileFileOutput, TranspileFileParams } from '@teambit/compiler';
import { BuiltTaskResult, BuildContext, TaskResultsList } from '@teambit/builder';
import { Component } from '@teambit/component';
export declare type MultiCompilerOptions = {
    targetExtension?: string;
};
export declare class MultiCompiler implements Compiler {
    readonly id: string;
    readonly compilers: Compiler[];
    readonly compilerOptions: Partial<CompilerOptions>;
    readonly options: MultiCompilerOptions;
    displayName: string;
    shouldCopyNonSupportedFiles: boolean;
    distDir: string;
    constructor(id: string, compilers: Compiler[], compilerOptions?: Partial<CompilerOptions>, options?: MultiCompilerOptions);
    getDistDir(): string;
    getArtifactDefinition(): {
        generatedBy: string;
        name: string;
        globPatterns: string[];
    }[];
    private getOptions;
    displayConfig(): string;
    /**
     * the multi-compiler applies all applicable defined compilers on given content.
     */
    transpileFile(fileContent: string, options: TranspileFileParams): TranspileFileOutput;
    transpileComponent(params: TranspileComponentParams): Promise<void>;
    build(context: BuildContext): Promise<BuiltTaskResult>;
    preBuild(context: BuildContext): Promise<void>;
    postBuild(context: BuildContext, taskResults: TaskResultsList): Promise<void>;
    private firstMatchedCompiler;
    getPreviewComponentRootPath(component: Component): string;
    /**
     * given a source file, return its parallel in the dists. e.g. "index.ts" => "dist/index.js"
     * both, the return path and the given path are relative paths.
     */
    getDistPathBySrcPath(srcPath: string): string;
    /**
     * only supported files matching get compiled. others, are copied to the dist dir.
     */
    isFileSupported(filePath: string): boolean;
    /**
     * returns the version of the current compiler instance (e.g. '4.0.1').
     */
    version(): string;
}
