"use strict";

require("core-js/modules/es.array.sort.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.serializeByLifecycle = serializeByLifecycle;
function _lodash() {
  const data = require("lodash");
  _lodash = function () {
    return data;
  };
  return data;
}
function serializeByLifecycle(deps, lifecycle) {
  const filteredByLifecycle = deps.filter(dep => dep.lifecycle === lifecycle).sort();
  const longestLength = getLongestDepName(filteredByLifecycle);
  const paddedNames = filteredByLifecycle.dependencies.map(dep => {
    const paddedName = getNameWithVersion(dep).padEnd(longestLength + 1, '-');
    return `${paddedName} (${dep.type})`;
  });
  return paddedNames.join('\n');
}
function getLongestDepName(deps) {
  const longestDep = (0, _lodash().maxBy)(deps.dependencies, dep => getNameWithVersion(dep).length);
  if (!longestDep) return 50;
  return getNameWithVersion(longestDep).length;
}
function getNameWithVersion(dep) {
  var _dep$getPackageName, _dep$getPackageName2;
  const nameWithVersion = (_dep$getPackageName = dep.getPackageName) !== null && _dep$getPackageName !== void 0 && _dep$getPackageName.call(dep) ? `${(_dep$getPackageName2 = dep.getPackageName) === null || _dep$getPackageName2 === void 0 ? void 0 : _dep$getPackageName2.call(dep)}@${dep.version}` : `${dep.id}@${dep.version}`;
  return nameWithVersion;
}

//# sourceMappingURL=serialize-by-lifecycle.js.map