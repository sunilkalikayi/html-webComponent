{"version":3,"names":["describe","it","outdatedPkgs","getAllPolicyPkgs","rootPolicy","WorkspacePolicy","variantPoliciesByPatterns","comp","dependencies","foo","version","resolveFromEnv","devDependencies","peerDependencies","componentPoliciesById","componentModelVersions","expect","toStrictEqual","currentRange","name","source","targetField","variantPattern","dependencyId","lifecycleType","value","componentId"],"sources":["get-all-policy-pkgs.spec.ts"],"sourcesContent":["import { getAllPolicyPkgs } from './get-all-policy-pkgs';\nimport { WorkspacePolicy } from './policy';\n\ndescribe('getAllPolicyPkgs()', () => {\n  it('should read the version from a version object', () => {\n    const outdatedPkgs = getAllPolicyPkgs({\n      rootPolicy: new WorkspacePolicy([]),\n      variantPoliciesByPatterns: {\n        comp: {\n          dependencies: {\n            foo: {\n              version: '1',\n              resolveFromEnv: true,\n            },\n          },\n          devDependencies: {},\n          peerDependencies: {},\n        },\n      },\n      componentPoliciesById: {},\n      componentModelVersions: [],\n    });\n    // @ts-ignore\n    expect(outdatedPkgs).toStrictEqual([\n      {\n        currentRange: '1',\n        name: 'foo',\n        source: 'variants',\n        targetField: 'dependencies',\n        variantPattern: 'comp',\n      },\n    ]);\n  });\n  it('should deduplicate dependencies that are present in root policies', () => {\n    const outdatedPkgs = getAllPolicyPkgs({\n      rootPolicy: new WorkspacePolicy([\n        {\n          dependencyId: 'foo',\n          lifecycleType: 'runtime',\n          value: { version: '1' },\n        },\n      ]),\n      variantPoliciesByPatterns: {},\n      componentPoliciesById: {},\n      componentModelVersions: [\n        {\n          name: 'foo',\n          version: '2',\n          lifecycleType: 'runtime',\n          componentId: 'comp1',\n        },\n        {\n          name: 'bar',\n          version: '2',\n          lifecycleType: 'runtime',\n          componentId: 'comp1',\n        },\n      ],\n    });\n    // @ts-ignore\n    expect(outdatedPkgs).toStrictEqual([\n      {\n        currentRange: '1',\n        name: 'foo',\n        source: 'rootPolicy',\n        targetField: 'dependencies',\n        variantPattern: null,\n      },\n      {\n        componentId: 'comp1',\n        currentRange: '2',\n        name: 'bar',\n        source: 'component-model',\n        targetField: 'dependencies',\n      },\n    ]);\n  });\n});\n"],"mappings":";;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEAA,QAAQ,CAAC,oBAAoB,EAAE,MAAM;EACnCC,EAAE,CAAC,+CAA+C,EAAE,MAAM;IACxD,MAAMC,YAAY,GAAG,IAAAC,oCAAgB,EAAC;MACpCC,UAAU,EAAE,KAAIC,yBAAe,EAAC,EAAE,CAAC;MACnCC,yBAAyB,EAAE;QACzBC,IAAI,EAAE;UACJC,YAAY,EAAE;YACZC,GAAG,EAAE;cACHC,OAAO,EAAE,GAAG;cACZC,cAAc,EAAE;YAClB;UACF,CAAC;UACDC,eAAe,EAAE,CAAC,CAAC;UACnBC,gBAAgB,EAAE,CAAC;QACrB;MACF,CAAC;MACDC,qBAAqB,EAAE,CAAC,CAAC;MACzBC,sBAAsB,EAAE;IAC1B,CAAC,CAAC;IACF;IACAC,MAAM,CAACd,YAAY,CAAC,CAACe,aAAa,CAAC,CACjC;MACEC,YAAY,EAAE,GAAG;MACjBC,IAAI,EAAE,KAAK;MACXC,MAAM,EAAE,UAAU;MAClBC,WAAW,EAAE,cAAc;MAC3BC,cAAc,EAAE;IAClB,CAAC,CACF,CAAC;EACJ,CAAC,CAAC;EACFrB,EAAE,CAAC,mEAAmE,EAAE,MAAM;IAC5E,MAAMC,YAAY,GAAG,IAAAC,oCAAgB,EAAC;MACpCC,UAAU,EAAE,KAAIC,yBAAe,EAAC,CAC9B;QACEkB,YAAY,EAAE,KAAK;QACnBC,aAAa,EAAE,SAAS;QACxBC,KAAK,EAAE;UAAEf,OAAO,EAAE;QAAI;MACxB,CAAC,CACF,CAAC;MACFJ,yBAAyB,EAAE,CAAC,CAAC;MAC7BQ,qBAAqB,EAAE,CAAC,CAAC;MACzBC,sBAAsB,EAAE,CACtB;QACEI,IAAI,EAAE,KAAK;QACXT,OAAO,EAAE,GAAG;QACZc,aAAa,EAAE,SAAS;QACxBE,WAAW,EAAE;MACf,CAAC,EACD;QACEP,IAAI,EAAE,KAAK;QACXT,OAAO,EAAE,GAAG;QACZc,aAAa,EAAE,SAAS;QACxBE,WAAW,EAAE;MACf,CAAC;IAEL,CAAC,CAAC;IACF;IACAV,MAAM,CAACd,YAAY,CAAC,CAACe,aAAa,CAAC,CACjC;MACEC,YAAY,EAAE,GAAG;MACjBC,IAAI,EAAE,KAAK;MACXC,MAAM,EAAE,YAAY;MACpBC,WAAW,EAAE,cAAc;MAC3BC,cAAc,EAAE;IAClB,CAAC,EACD;MACEI,WAAW,EAAE,OAAO;MACpBR,YAAY,EAAE,GAAG;MACjBC,IAAI,EAAE,KAAK;MACXC,MAAM,EAAE,iBAAiB;MACzBC,WAAW,EAAE;IACf,CAAC,CACF,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC"}