"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.flat.js");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.array.unscopables.flat.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAllPolicyPkgs = getAllPolicyPkgs;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _dependencies() {
  const data = require("./dependencies");
  _dependencies = function () {
    return data;
  };
  return data;
}
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
/**
 * Get packages from root policy, variants, and component config files (component.json files).
 */
function getAllPolicyPkgs({
  rootPolicy,
  variantPoliciesByPatterns,
  componentPoliciesById,
  componentModelVersions
}) {
  const pkgsFromPolicies = getPkgsFromRootPolicy(rootPolicy);
  const pkgsNamesFromPolicies = new Set(pkgsFromPolicies.map(({
    name
  }) => name));
  return [...pkgsFromPolicies, ...getPkgsFromVariants(variantPoliciesByPatterns), ...getPkgsFromComponents(componentPoliciesById), ...componentModelVersions.filter(({
    name
  }) => !pkgsNamesFromPolicies.has(name)).map(componentDep => ({
    name: componentDep.name,
    currentRange: componentDep.version,
    source: 'component-model',
    componentId: componentDep.componentId,
    targetField: _dependencies().KEY_NAME_BY_LIFECYCLE_TYPE[componentDep.lifecycleType]
  }))];
}
function getPkgsFromRootPolicy(rootPolicy) {
  return rootPolicy.entries.map(entry => ({
    name: entry.dependencyId,
    currentRange: entry.value.version,
    source: 'rootPolicy',
    variantPattern: null,
    targetField: _dependencies().KEY_NAME_BY_LIFECYCLE_TYPE[entry.lifecycleType]
  }));
}
function getPkgsFromVariants(variantPoliciesByPatterns) {
  return Object.entries(variantPoliciesByPatterns).filter(([, variant]) => variant != null).map(([variantPattern, variant]) => {
    return readAllDependenciesFromPolicyObject({
      source: 'variants',
      variantPattern
    }, variant);
  }).flat();
}
function getPkgsFromComponents(componentPoliciesById) {
  return Object.entries(componentPoliciesById).map(([componentId, policy]) => {
    return readAllDependenciesFromPolicyObject({
      source: 'component',
      componentId
    }, policy);
  }).flat();
}
function readAllDependenciesFromPolicyObject(context, policy) {
  const pkgs = [];
  for (const targetField of ['dependencies', 'devDependencies', 'peerDependencies']) {
    for (const [name, currentRange] of Object.entries((_policy$targetField = policy[targetField]) !== null && _policy$targetField !== void 0 ? _policy$targetField : {})) {
      var _policy$targetField;
      if (currentRange !== '-') {
        pkgs.push(_objectSpread(_objectSpread({}, context), {}, {
          name,
          currentRange: typeof currentRange === 'string' ? currentRange : currentRange.version,
          targetField
        }));
      }
    }
  }
  return pkgs;
}

//# sourceMappingURL=get-all-policy-pkgs.js.map