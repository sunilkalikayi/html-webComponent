{"version":3,"names":["DEFAULT_PM_INSTALL_OPTIONS","dedupe","copyPeerToRuntimeOnRoot","copyPeerToRuntimeOnComponents","installPeersFromEnvs","DEFAULT_INSTALL_OPTIONS","installTeambitBit","DependencyInstaller","constructor","packageManager","aspectLoader","logger","dependencyResolver","rootDir","cacheRootDir","preInstallSubscriberList","postInstallSubscriberList","nodeLinker","packageImportMethod","sideEffectsCache","nodeVersion","engineStrict","peerDependencyRules","install","rootPolicy","componentDirectoryMap","options","packageManagerOptions","finalRootDir","RootDirNotDefined","manifests","getComponentManifests","installComponents","args","runPrePostSubscribers","mainAspect","calculatedPmOpts","packageManagerConfigRootDir","version","packageName","MainAspectNotInstallable","add","dependencyId","lifecycleType","value","rootComponents","keepExistingModulesDir","cleanCompsNodeModules","dependencyFilterFn","filterComponentsFromManifests","createManifestForComponentsWithoutDependencies","workspaceManifest","getWorkspaceManifest","undefined","components","toArray","reduce","acc","component","dir","getPackageName","manifest","componentsManifestsMap","get","toJson","copyPeerToRuntime","defaultPeerDependencies","fromPairs","envPolicy","peersAutoDetectPolicy","entries","map","name","promises","nmDir","path","join","fs","remove","Promise","all","subscribers","type","message","setStatusLine","mapSeries","subscriber","consoleSuccess"],"sources":["dependency-installer.ts"],"sourcesContent":["import mapSeries from 'p-map-series';\nimport path from 'path';\nimport fs from 'fs-extra';\nimport { MainAspect, AspectLoaderMain } from '@teambit/aspect-loader';\nimport { ComponentMap } from '@teambit/component';\nimport { CreateFromComponentsOptions, DependencyResolverMain } from '@teambit/dependency-resolver';\nimport { Logger } from '@teambit/logger';\nimport { PathAbsolute } from '@teambit/legacy/dist/utils/path';\nimport { PeerDependencyRules, ProjectManifest } from '@pnpm/types';\nimport { fromPairs } from 'lodash';\nimport { MainAspectNotInstallable, RootDirNotDefined } from './exceptions';\nimport { PackageManager, PackageManagerInstallOptions, PackageImportMethod } from './package-manager';\nimport { WorkspacePolicy } from './policy';\n\nconst DEFAULT_PM_INSTALL_OPTIONS: PackageManagerInstallOptions = {\n  dedupe: true,\n  copyPeerToRuntimeOnRoot: true,\n  copyPeerToRuntimeOnComponents: false,\n  installPeersFromEnvs: false,\n};\n\nconst DEFAULT_INSTALL_OPTIONS: InstallOptions = {\n  installTeambitBit: false,\n};\n\nexport type InstallArgs = {\n  rootDir: string | undefined;\n  rootPolicy: WorkspacePolicy;\n  componentDirectoryMap: ComponentMap<string>;\n  options: InstallOptions;\n  packageManagerOptions: PackageManagerInstallOptions;\n};\n\nexport type InstallOptions = {\n  installTeambitBit: boolean;\n  packageManagerConfigRootDir?: string;\n};\n\nexport type GetComponentManifestsOptions = {\n  componentDirectoryMap: ComponentMap<string>;\n  rootPolicy: WorkspacePolicy;\n  rootDir: string;\n} & Pick<\n  PackageManagerInstallOptions,\n  'dedupe' | 'dependencyFilterFn' | 'copyPeerToRuntimeOnComponents' | 'copyPeerToRuntimeOnRoot' | 'installPeersFromEnvs'\n>;\n\nexport type PreInstallSubscriber = (installer: DependencyInstaller, installArgs: InstallArgs) => Promise<void>;\nexport type PreInstallSubscriberList = Array<PreInstallSubscriber>;\n\nexport type PostInstallSubscriber = (installer: DependencyInstaller, installArgs: InstallArgs) => Promise<void>;\nexport type PostInstallSubscriberList = Array<PostInstallSubscriber>;\n\nexport class DependencyInstaller {\n  constructor(\n    /**\n     * package manager instance.\n     */\n    private packageManager: PackageManager,\n\n    private aspectLoader: AspectLoaderMain,\n\n    private logger: Logger,\n\n    private dependencyResolver: DependencyResolverMain,\n\n    private rootDir?: string | PathAbsolute,\n\n    private cacheRootDir?: string | PathAbsolute,\n\n    private preInstallSubscriberList?: PreInstallSubscriberList,\n\n    private postInstallSubscriberList?: PostInstallSubscriberList,\n\n    private nodeLinker?: 'hoisted' | 'isolated',\n\n    private packageImportMethod?: PackageImportMethod,\n\n    private sideEffectsCache?: boolean,\n\n    private nodeVersion?: string,\n\n    private engineStrict?: boolean,\n\n    private peerDependencyRules?: PeerDependencyRules\n  ) {}\n\n  async install(\n    rootDir: string | undefined,\n    rootPolicy: WorkspacePolicy,\n    componentDirectoryMap: ComponentMap<string>,\n    options: InstallOptions = DEFAULT_INSTALL_OPTIONS,\n    packageManagerOptions: PackageManagerInstallOptions = DEFAULT_PM_INSTALL_OPTIONS\n  ) {\n    const finalRootDir = rootDir ?? this.rootDir;\n    if (!finalRootDir) {\n      throw new RootDirNotDefined();\n    }\n    const manifests = await this.getComponentManifests({\n      ...packageManagerOptions,\n      componentDirectoryMap,\n      rootPolicy,\n      rootDir: finalRootDir,\n    });\n    return this.installComponents(\n      finalRootDir,\n      manifests,\n      rootPolicy,\n      componentDirectoryMap,\n      options,\n      packageManagerOptions\n    );\n  }\n\n  async installComponents(\n    rootDir: string | undefined,\n    manifests: Record<string, ProjectManifest>,\n    rootPolicy: WorkspacePolicy,\n    componentDirectoryMap: ComponentMap<string>,\n    options: InstallOptions = DEFAULT_INSTALL_OPTIONS,\n    packageManagerOptions: PackageManagerInstallOptions = DEFAULT_PM_INSTALL_OPTIONS\n  ) {\n    const args = {\n      componentDirectoryMap,\n      options,\n      packageManagerOptions,\n      rootDir,\n      rootPolicy,\n    };\n    await this.runPrePostSubscribers(this.preInstallSubscriberList, 'pre', args);\n    const mainAspect: MainAspect = this.aspectLoader.mainAspect;\n    const finalRootDir = rootDir || this.rootDir;\n    if (!finalRootDir) {\n      throw new RootDirNotDefined();\n    }\n    // Make sure to take other default if passed options with only one option\n    const calculatedPmOpts = {\n      ...DEFAULT_PM_INSTALL_OPTIONS,\n      cacheRootDir: this.cacheRootDir,\n      nodeLinker: this.nodeLinker,\n      packageImportMethod: this.packageImportMethod,\n      sideEffectsCache: this.sideEffectsCache,\n      nodeVersion: this.nodeVersion,\n      engineStrict: this.engineStrict,\n      packageManagerConfigRootDir: options.packageManagerConfigRootDir,\n      peerDependencyRules: this.peerDependencyRules,\n      ...packageManagerOptions,\n    };\n    if (options.installTeambitBit) {\n      if (!mainAspect.version || !mainAspect.packageName) {\n        throw new MainAspectNotInstallable();\n      }\n      const version = mainAspect.version;\n      rootPolicy.add({\n        dependencyId: mainAspect.packageName,\n        lifecycleType: 'runtime',\n        value: {\n          version,\n        },\n      });\n    }\n\n    if (!packageManagerOptions.rootComponents && !packageManagerOptions.keepExistingModulesDir) {\n      // Remove node modules dir for all components dirs, since it might contain left overs from previous install.\n      //\n      // This is not needed when \"rootComponents\" are used, as in that case the package manager handles the node_modules\n      // and it never leaves node_modules in a broken state.\n      // Removing node_modules in that case would delete useful state information that is used by Yarn or pnpm.\n      await this.cleanCompsNodeModules(componentDirectoryMap);\n    }\n\n    // TODO: the cache should be probably passed to the package manager constructor not to the install function\n    await this.packageManager.install(\n      {\n        rootDir: finalRootDir,\n        manifests,\n        componentDirectoryMap,\n      },\n      calculatedPmOpts\n    );\n    await this.runPrePostSubscribers(this.postInstallSubscriberList, 'post', args);\n    return componentDirectoryMap;\n  }\n\n  /**\n   * Compute all the component manifests (a.k.a. package.json files) that should be passed to the package manager\n   * in order to install the dependencies.\n   */\n  public async getComponentManifests({\n    componentDirectoryMap,\n    rootPolicy,\n    rootDir,\n    dedupe,\n    dependencyFilterFn,\n    copyPeerToRuntimeOnComponents,\n    copyPeerToRuntimeOnRoot,\n    installPeersFromEnvs,\n  }: GetComponentManifestsOptions) {\n    const options: CreateFromComponentsOptions = {\n      filterComponentsFromManifests: true,\n      createManifestForComponentsWithoutDependencies: true,\n      dedupe,\n      dependencyFilterFn,\n    };\n    const workspaceManifest = await this.dependencyResolver.getWorkspaceManifest(\n      undefined,\n      undefined,\n      rootPolicy,\n      rootDir,\n      componentDirectoryMap.components,\n      options\n    );\n    const manifests: Record<string, ProjectManifest> = componentDirectoryMap\n      .toArray()\n      .reduce((acc, [component, dir]) => {\n        const packageName = this.dependencyResolver.getPackageName(component);\n        const manifest = workspaceManifest.componentsManifestsMap.get(packageName);\n        if (manifest) {\n          acc[dir] = manifest.toJson({ copyPeerToRuntime: copyPeerToRuntimeOnComponents });\n          acc[dir].defaultPeerDependencies = fromPairs(\n            manifest.envPolicy.peersAutoDetectPolicy.entries.map(({ name, version }) => [name, version])\n          );\n        }\n        return acc;\n      }, {});\n    if (!manifests[rootDir]) {\n      manifests[rootDir] = workspaceManifest.toJson({\n        copyPeerToRuntime: copyPeerToRuntimeOnRoot,\n        installPeersFromEnvs,\n      });\n    }\n    return manifests;\n  }\n\n  private async cleanCompsNodeModules(componentDirectoryMap: ComponentMap<string>) {\n    const promises = componentDirectoryMap.toArray().map(([, dir]) => {\n      const nmDir = path.join(dir, 'node_modules');\n      return fs.remove(nmDir);\n    });\n    return Promise.all(promises);\n  }\n\n  private async runPrePostSubscribers(\n    subscribers: PreInstallSubscriberList | PostInstallSubscriberList = [],\n    type: 'pre' | 'post',\n    args: InstallArgs\n  ): Promise<void> {\n    let message = 'running pre install subscribers';\n    if (type === 'post') {\n      message = 'running post install subscribers';\n    }\n    this.logger.setStatusLine(message);\n    await mapSeries(subscribers, async (subscriber) => {\n      return subscriber(this, args);\n    });\n    this.logger.consoleSuccess(message);\n  }\n}\n"],"mappings":"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"}