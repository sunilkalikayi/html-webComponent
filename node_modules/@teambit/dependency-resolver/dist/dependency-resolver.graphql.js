"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dependencyResolverSchema = dependencyResolverSchema;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _graphqlTag() {
  const data = _interopRequireDefault(require("graphql-tag"));
  _graphqlTag = function () {
    return data;
  };
  return data;
}
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var DependencyTypes;
(function (DependencyTypes) {
  DependencyTypes["component"] = "ComponentDependency";
  DependencyTypes["package"] = "PackageDependency";
})(DependencyTypes || (DependencyTypes = {}));
function dependencyResolverSchema(dependencyResolver) {
  return {
    typeDefs: (0, _graphqlTag().default)`
      interface Dependency {
        id: String!
        version: String!
        lifecycle: String!
        type: String!
        packageName: String # TODO - remove this after resolving the issue with apollo client when packages dont get packageName
      }
      # union Dependency = PackageDependency | ComponentDependency

      type ComponentIdObject {
        scope: String!
        name: String!
        version: String!
      }

      type PackageDependency implements Dependency {
        id: String!
        version: String!
        lifecycle: String!
        type: String!
        packageName: String # TODO - remove this after resolving the issue with apollo client when packages dont get packageName
      }

      type ComponentDependency implements Dependency {
        id: String!
        version: String!
        lifecycle: String!
        isExtension: Boolean!
        packageName: String!
        type: String!
      }

      type PolicyValue {
        version: String!
        resolveFromEnv: Boolean
      }

      type Policy {
        dependencyId: String!
        lifecycleType: String!
        value: PolicyValue!
      }

      extend type Component {
        dependencies: [Dependency]
        componentPolicy: [Policy]
      }
    `,
    resolvers: {
      Component: {
        componentPolicy: async component => {
          const variantPolicy = await dependencyResolver.getPolicy(component);
          return variantPolicy.serialize();
        },
        dependencies: async component => {
          const dependenciesList = await dependencyResolver.getDependencies(component);
          const serialized = dependenciesList.serialize();
          return serialized.map(serialize => {
            const type = DependencyTypes[serialize.__type];
            // @ts-ignore
            serialize.type = serialize.__type;
            // @ts-ignore
            delete serialize.__type;
            return _objectSpread({
              __typename: type
            }, serialize);
          });
        },
        Dependency: {
          __resolveType: dependency => {
            return DependencyTypes[dependency.type];
          }
        }
      }
    }
  };
}

//# sourceMappingURL=dependency-resolver.graphql.js.map