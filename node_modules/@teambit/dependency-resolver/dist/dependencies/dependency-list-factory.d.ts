import LegacyComponent from '@teambit/legacy/dist/consumer/component';
import { DependencyFactory } from './dependency-factory';
import { SerializedDependency } from './dependency';
import { DependencyList } from './dependency-list';
export declare class DependencyListFactory {
    private factories;
    constructor(factories: Record<string, DependencyFactory>);
    fromSerializedDependencies(serializedDependencies: SerializedDependency[]): Promise<DependencyList>;
    fromLegacyComponent(legacyComponent: LegacyComponent): Promise<DependencyList>;
    /**
     * Some time after importing component (for example), there are required dependencies which are not installed yet, they will consider as missing.
     * since the installer it self used the calculated deps for installing we need them to be listed as well.
     * what we do here, is to add deps from the model in case they considered as missing deps in the fs
     * we don't want just to add all of them since some of them might be removed by the user in the fs (in the source code).
     * by intersect the missing deps (deps which are still required in source code) with the deps from model we have a list of deps with all the required
     * data of them
     * @param legacyComponent
     */
    private getMissingDependenciesByComponentFromModel;
    /**
     * Get dependencies based on the component from model attached to the legacy (consumer component)
     * @param legacyComponent
     */
    private getDependenciesFromLegacyModelComponent;
}
