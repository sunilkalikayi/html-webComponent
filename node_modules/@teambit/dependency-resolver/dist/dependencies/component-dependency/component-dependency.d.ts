import type { ComponentID } from '@teambit/component-id';
import type { BitIdProps } from '@teambit/legacy-bit-id';
import { SerializedDependency, DependencyLifecycleType, DependencyManifest } from '../dependency';
import { BaseDependency } from '../base-dependency';
import { DependencySource } from '../../policy/variant-policy/variant-policy';
export declare const TYPE = "component";
export interface SerializedComponentDependency extends SerializedDependency {
    componentId: BitIdProps;
    isExtension: boolean;
    packageName: string;
}
export declare class ComponentDependency extends BaseDependency {
    private _componentId;
    private _isExtension;
    private _packageName;
    constructor(_componentId: ComponentID, _isExtension: boolean, _packageName: string, id: string, version: string, lifecycle: DependencyLifecycleType, source?: DependencySource);
    get componentId(): ComponentID;
    get isExtension(): boolean;
    get packageName(): string;
    getPackageName(): string;
    setVersion(newVersion: string): void;
    serialize<SerializedComponentDependency>(): SerializedComponentDependency;
    toManifest(): DependencyManifest;
}
