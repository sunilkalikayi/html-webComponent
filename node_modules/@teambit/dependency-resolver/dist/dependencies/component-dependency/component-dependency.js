"use strict";

require("core-js/modules/es.regexp.exec.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TYPE = exports.ComponentDependency = void 0;
function _baseDependency() {
  const data = require("../base-dependency");
  _baseDependency = function () {
    return data;
  };
  return data;
}
const TYPE = 'component';
exports.TYPE = TYPE;
// TODO: think about where is the right place to put this
class ComponentDependency extends _baseDependency().BaseDependency {
  constructor(_componentId, _isExtension, _packageName, id, version, lifecycle, source) {
    super(id, version, lifecycle, source);
    this._componentId = _componentId;
    this._isExtension = _isExtension;
    this._packageName = _packageName;
    this._type = TYPE;
  }
  get componentId() {
    return this._componentId;
  }
  get isExtension() {
    return this._isExtension;
  }
  get packageName() {
    return this._packageName;
  }
  getPackageName() {
    return this.packageName;
  }
  setVersion(newVersion) {
    super.setVersion(newVersion);
    const newComponentId = this.componentId.changeVersion(newVersion);
    this._componentId = newComponentId;
    const splittedId = this.id.split('@');
    if (splittedId.length === 2) {
      const newId = `${splittedId[0]}@${newVersion}`;
      this.id = newId;
    }
  }

  // eslint-disable-next-line @typescript-eslint/no-shadow
  serialize() {
    const serialized = Object.assign({}, super.serialize(), {
      componentId: this.componentId._legacy.serialize(),
      isExtension: this.isExtension,
      packageName: this.packageName
    });
    return serialized;
  }
  toManifest() {
    var _this$getPackageName;
    const packageName = (_this$getPackageName = this.getPackageName) === null || _this$getPackageName === void 0 ? void 0 : _this$getPackageName.call(this);
    const version = this.version;
    return {
      packageName,
      version
    };
  }
}
exports.ComponentDependency = ComponentDependency;

//# sourceMappingURL=component-dependency.js.map