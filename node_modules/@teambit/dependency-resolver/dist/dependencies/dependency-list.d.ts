import { Dependency, DependencyLifecycleType, SerializedDependency, SemverVersion, PackageName } from './dependency';
import { ComponentDependency } from './component-dependency';
export declare type LifecycleDependenciesManifest = Record<PackageName, SemverVersion>;
export interface DependenciesManifest {
    dependencies?: LifecycleDependenciesManifest;
    devDependencies?: LifecycleDependenciesManifest;
    peerDependencies?: LifecycleDependenciesManifest;
}
export declare type FindDependencyOptions = {
    ignoreVersion?: boolean;
};
export declare class DependencyList {
    private _dependencies;
    constructor(_dependencies: Array<Dependency>);
    get dependencies(): Dependency[];
    sort(): DependencyList;
    /**
     * @param componentIdStr complete string include the scope and the version
     */
    findDependency(componentIdStr: string, opts?: FindDependencyOptions): Dependency | undefined;
    findByPkgNameOrCompId(id: string, version?: string): Dependency | undefined;
    forEach(predicate: (dep: Dependency, index?: number) => void): void;
    map(predicate: (dep: Dependency, index?: number) => any): any[];
    filter(predicate: (dep: Dependency, index?: number) => boolean): DependencyList;
    toTypeArray<T extends Dependency>(typeName: string): T[];
    byTypeName(typeName: string): DependencyList;
    byLifecycle(lifecycle: DependencyLifecycleType): DependencyList;
    serialize(): SerializedDependency[];
    getComponentDependencies(): ComponentDependency[];
    toDependenciesManifest(): Required<DependenciesManifest>;
    static merge(lists: DependencyList[]): DependencyList;
    static fromArray(dependencies: Array<Dependency>): DependencyList;
}
