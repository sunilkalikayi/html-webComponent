{"version":3,"names":["BIT_DEV_REGISTRY","BIT_CLOUD_REGISTRY","NPM_REGISTRY","defaultLinkingOptions","legacyLink","linkTeambitBit","linkCoreAspects","defaultCreateFromComponentsOptions","filterComponentsFromManifests","createManifestForComponentsWithoutDependencies","DependencyResolverMain","constructor","config","rootPolicyRegistry","policiesRegistry","envs","logger","configAspect","aspectLoader","globalConfig","componentAspect","packageManagerSlot","dependencyFactorySlot","preInstallSlot","postInstallSlot","supportsDedupingOnExistingRoot","packageManager","get","hasRootComponents","Boolean","rootComponents","defaultConfig","registerPackageManager","register","registerDependencyFactories","factories","registerPreInstallSubscribers","subscribers","registerPostInstallSubscribers","getSavePrefix","savePrefix","getVersionWithSavePrefix","version","overridePrefix","prefix","versionWithPrefix","semver","validRange","InvalidVersionWithPrefix","getPolicy","component","entry","state","aspects","DependencyResolverAspect","id","factory","VariantPolicyFactory","getEmpty","serializedPolicy","parse","extractDepsFromLegacy","policy","componentPolicy","legacyComponent","_consumer","listFactory","getDependencyListFactory","dependencyList","fromLegacyComponent","forEach","dep","found","find","source","values","flat","factoriesMap","reduce","acc","type","DependencyListFactory","getDependencies","DependencyList","fromArray","serializedDependencies","data","dependencies","getDependenciesFromSerializedDependencies","length","deps","fromSerializedDependencies","getWorkspacePolicy","policyFromConfig","getWorkspacePolicyFromConfig","externalPolicies","toArray","map","mergeWorkspacePolices","WorkspacePolicyFactory","fromConfigObject","getWorkspacePolicyFromPackageJson","packageJson","fromPackageJson","polices","WorkspacePolicy","mergePolices","getWorkspaceManifest","name","ROOT_NAME","SemVer","rootPolicy","rootDir","components","options","setStatusLine","concreteOpts","workspaceManifestFactory","WorkspaceManifestFactory","res","createFromComponents","consoleSuccess","getPackageName","componentIdToPackageName","getRuntimeModulePath","modulePath","getModulePath","pkgName","join","relativePath","getInstaller","packageManagerName","cacheRootDir","cacheRootDirectory","getSync","CFG_PACKAGE_MANAGER_CACHE","PackageManagerNotFound","fs","pathExistsSync","debug","ensureDirSync","preInstallSubscribers","getPreInstallSubscribers","postInstallSubscribers","getPostInstallSubscribers","DependencyInstaller","nodeLinker","packageImportMethod","sideEffectsCache","nodeVersion","engineStrict","peerDependencyRules","getLinker","linkingOptions","Object","assign","DependencyLinker","getPackageManagerName","getVersionResolver","networkConcurrency","getNetworkConfig","DependencyVersionResolver","getSystemPackageManager","defaultPm","Error","getProxyConfig","proxyConfigFromDepResolverConfig","getProxyConfigFromDepResolverConfig","httpProxy","httpsProxy","proxyConfigFromPackageManager","getProxyConfigFromPackageManager","proxyConfigFromGlobalConfig","getProxyConfigFromGlobalConfig","proxy","noProxy","networkConfig","getNetworkConfigFromGlobalConfig","getNetworkConfigFromPackageManager","getNetworkConfigFromDepResolverConfig","JSON","stringify","key","globalNetworkConfig","Http","ca","cafile","readCAFileSync","pick","strictSsl","strictSSL","toLowerCase","networkConfigFromPackageManager","systemPm","getMissingPeerDependencies","componentDirectoryMap","peerDependencyIssues","installer","manifests","getComponentManifests","getPeerDependencyIssues","intersections","getRegistries","registries","bitScope","scopes","bit","getDefaultBitRegistry","bitRegistry","uri","bitOriginalAuthType","bitAuthHeaderValue","bitOriginalAuthValue","getBitAuthConfig","alwaysAuth","undefined","bitDefaultRegistry","Registry","installFromBitDevRegistry","defaultRegistry","startsWith","setDefaultRegistry","updateScopedRegistry","addAuthToScopedBitRegistries","bitScopeRegistry","updatedRegistries","entries","registry","authHeaderValue","includes","registryWithAuth","bitGlobalConfigToken","CFG_USER_TOKEN_KEY","originalAuthType","originalAuthValue","addToRootPolicy","workspacePolicy","add","updateConfigPolicy","removeFromRootPolicy","dependencyIds","workspacePolicyUpdated","remove","workspacePolicyObject","toConfigObject","setExtension","overrideExisting","ignoreVersion","persistConfig","workspaceDir","workspaceConfig","write","dir","registerDependenciesPolicies","registerRootPolicy","getComponentEnvPolicyFromExtension","configuredExtensions","env","calculateEnvFromExtensions","getComponentEnvPolicyFromEnv","getEnvPolicyFromEnvLegacyId","envDef","getEnvDefinitionByLegacyId","getComponentEnvPolicy","getEnv","policiesFromEnvConfig","allPoliciesFromEnv","EnvPolicyFactory","getPeerDependenciesListFromEnv","envPolicy","peers","uniq","peersAutoDetectPolicy","names","concat","variantPolicy","byLifecycleType","additionalHostDeps","getAdditionalHostDependencies","mergeVariantPolicies","variantPolicyFactory","policiesFromSlots","policiesFromConfig","policiesFromEnv","configuredIds","ids","policiesTuples","extId","policyTupleToApply","policyRegistrar","currentPolicy","VariantPolicy","currentExtension","findExtension","currentConfig","result","updateDepsOnLegacyTag","idTransformer","extensions","findCoreExtension","__type","COMPONENT_DEP_TYPE","depId","BitId","componentId","newDepId","serialize","toString","updateDepsOnLegacyExport","registerDetector","detector","DetectorHook","hooks","push","onLoadRequireableExtensionSubscriber","requireableExtension","manifest","parentComponent","resolveRequireableExtensionManifestDepsVersionsRecursively","resolvedParentComponent","resolvedParentDeps","updateDirectDepsVersions","mapSeries","isCoreAspect","parentComponentId","getHost","resolveComponentId","error","resolvedDep","findDependency","cloneManifest","_runtimes","runtime","getOutdatedPkgsFromPolicies","variantPoliciesByPatterns","componentPoliciesById","componentModelVersions","Promise","all","depList","filter","lifecycle","lifecycleType","allPkgs","getAllPolicyPkgs","getOutdatedPkgs","pkgs","resolver","resolve","spec","resolveRemoteVersion","outdatedPkgs","pkg","latestVersion","latestRange","repeatPrefix","currentRange","applyUpdates","updatedVariants","updatedComponents","updatedWorkspacePolicyEntries","updateExisting","provider","loggerExt","configMain","graphql","createLogger","dependencyResolver","registerShowFragments","DependenciesFragment","DevDependenciesFragment","PeerDependenciesFragment","ComponentDependencyFactory","DependencyResolver","getDepResolverAspectName","LegacyComponent","registerOnComponentOverridesLoading","toLegacyDepsOverrides","registerWorkspacePolicyGetter","toManifest","registerHarmonyEnvPeersPolicyForComponentGetter","toNameSupportedRangeMap","registerHarmonyEnvPeersPolicyForEnvItselfGetter","toVersionManifest","registerOnLoadRequireableExtensionSlot","bind","dependencyResolverSchema","registerService","DependenciesService","getEmptyDepsObject","devDependencies","peerDependencies","getInjectedDirs","componentDir","packageName","MainRuntime","EnvsAspect","LoggerAspect","ConfigAspect","AspectLoaderAspect","ComponentAspect","GraphqlAspect","GlobalConfigAspect","Slot","withType","addRuntime","originalSpec","newVersion"],"sources":["dependency-resolver.main.runtime.ts"],"sourcesContent":["import mapSeries from 'p-map-series';\nimport { MainRuntime } from '@teambit/cli';\nimport ComponentAspect, { Component, ComponentMap, ComponentMain, IComponent } from '@teambit/component';\nimport type { ConfigMain } from '@teambit/config';\nimport { join } from 'path';\nimport { get, pick, uniq } from 'lodash';\nimport { ConfigAspect } from '@teambit/config';\nimport { DependenciesEnv, EnvsAspect, EnvsMain } from '@teambit/envs';\nimport { Slot, SlotRegistry, ExtensionManifest, Aspect, RuntimeManifest } from '@teambit/harmony';\nimport { RequireableComponent } from '@teambit/harmony.modules.requireable-component';\nimport type { LoggerMain } from '@teambit/logger';\nimport { GraphqlAspect, GraphqlMain } from '@teambit/graphql';\nimport { Logger, LoggerAspect } from '@teambit/logger';\nimport { CFG_PACKAGE_MANAGER_CACHE, CFG_USER_TOKEN_KEY } from '@teambit/legacy/dist/constants';\n// TODO: it's weird we take it from here.. think about it../workspace/utils\nimport { DependencyResolver } from '@teambit/legacy/dist/consumer/component/dependencies/dependency-resolver';\nimport { ExtensionDataList } from '@teambit/legacy/dist/consumer/config/extension-data';\nimport componentIdToPackageName from '@teambit/legacy/dist/utils/bit/component-id-to-package-name';\nimport { DetectorHook } from '@teambit/legacy/dist/consumer/component/dependencies/files-dependency-builder/detector-hook';\nimport { Http, ProxyConfig, NetworkConfig } from '@teambit/legacy/dist/scope/network/http';\nimport { onTagIdTransformer } from '@teambit/snapping';\nimport { Version as VersionModel } from '@teambit/legacy/dist/scope/models';\nimport LegacyComponent from '@teambit/legacy/dist/consumer/component';\nimport fs from 'fs-extra';\nimport { BitId } from '@teambit/legacy-bit-id';\nimport { readCAFileSync } from '@pnpm/network.ca-file';\nimport { PeerDependencyRules } from '@pnpm/types';\nimport semver, { SemVer } from 'semver';\nimport AspectLoaderAspect, { AspectLoaderMain } from '@teambit/aspect-loader';\nimport GlobalConfigAspect, { GlobalConfigMain } from '@teambit/global-config';\nimport { Registries, Registry } from './registry';\nimport { applyUpdates } from './apply-updates';\nimport { ROOT_NAME } from './dependencies/constants';\nimport { DependencyInstaller, PreInstallSubscriberList, PostInstallSubscriberList } from './dependency-installer';\nimport { DependencyResolverAspect } from './dependency-resolver.aspect';\nimport { DependencyVersionResolver } from './dependency-version-resolver';\nimport { DependencyLinker, LinkingOptions } from './dependency-linker';\nimport { ComponentModelVersion, getAllPolicyPkgs, OutdatedPkg } from './get-all-policy-pkgs';\nimport { InvalidVersionWithPrefix, PackageManagerNotFound } from './exceptions';\nimport {\n  CreateFromComponentsOptions,\n  WorkspaceManifest,\n  WorkspaceManifestFactory,\n  ManifestDependenciesObject,\n} from './manifest';\nimport {\n  WorkspacePolicyConfigObject,\n  VariantPolicyConfigObject,\n  WorkspacePolicy,\n  WorkspacePolicyFactory,\n  VariantPolicy,\n  VariantPolicyFactory,\n  WorkspacePolicyAddEntryOptions,\n  WorkspacePolicyEntry,\n  SerializedVariantPolicy,\n} from './policy';\nimport {\n  PackageImportMethod,\n  PackageManager,\n  PeerDependencyIssuesByProjects,\n  PackageManagerGetPeerDependencyIssuesOptions,\n} from './package-manager';\n\nimport {\n  SerializedDependency,\n  DependencyListFactory,\n  DependencyFactory,\n  ComponentDependencyFactory,\n  COMPONENT_DEP_TYPE,\n  DependencyList,\n} from './dependencies';\nimport { DependenciesFragment, DevDependenciesFragment, PeerDependenciesFragment } from './show-fragments';\nimport { dependencyResolverSchema } from './dependency-resolver.graphql';\nimport { DependencyDetector } from './dependency-detector';\nimport { DependenciesService } from './dependencies.service';\nimport { EnvPolicy, EnvPolicyFactory } from './policy/env-policy';\n\n/**\n * @deprecated use BIT_CLOUD_REGISTRY instead\n */\nexport const BIT_DEV_REGISTRY = 'https://node.bit.dev/';\nexport const BIT_CLOUD_REGISTRY = 'https://node.bit.cloud/';\nexport const NPM_REGISTRY = 'https://registry.npmjs.org/';\n\nexport { ProxyConfig, NetworkConfig } from '@teambit/legacy/dist/scope/network/http';\n\nexport interface DependencyResolverWorkspaceConfig {\n  policy: WorkspacePolicyConfigObject;\n  /**\n   * choose the package manager for Bit to use. you can choose between 'npm', 'yarn', 'pnpm'\n   * and 'librarian'. our recommendation is use 'librarian' which reduces package duplicates\n   * and totally removes the need of a 'node_modules' directory in your project.\n   */\n  packageManager: string;\n\n  /**\n   * A proxy server for out going network requests by the package manager\n   * Used for both http and https requests (unless the httpsProxy is defined)\n   */\n  proxy?: string;\n\n  /**\n   * A proxy server for outgoing https requests by the package manager (fallback to proxy server if not defined)\n   * Use this in case you want different proxy for http and https requests.\n   */\n  httpsProxy?: string;\n\n  /**\n   * A path to a file containing one or multiple Certificate Authority signing certificates.\n   * allows for multiple CA's, as well as for the CA information to be stored in a file on disk.\n   */\n  ca?: string;\n\n  /**\n   * Whether or not to do SSL key validation when making requests to the registry via https\n   */\n  strictSsl?: string;\n\n  /**\n   * A client certificate to pass when accessing the registry. Values should be in PEM format (Windows calls it \"Base-64 encoded X.509 (.CER)\") with newlines replaced by the string \"\\n\". For example:\n   * cert=\"-----BEGIN CERTIFICATE-----\\nXXXX\\nXXXX\\n-----END CERTIFICATE-----\"\n   * It is not the path to a certificate file (and there is no \"certfile\" option).\n   */\n  cert?: string;\n\n  /**\n   * A client key to pass when accessing the registry. Values should be in PEM format with newlines replaced by the string \"\\n\". For example:\n   * key=\"-----BEGIN PRIVATE KEY-----\\nXXXX\\nXXXX\\n-----END PRIVATE KEY-----\"\n   * It is not the path to a key file (and there is no \"keyfile\" option).\n   */\n  key?: string;\n\n  /**\n   * A comma-separated string of domain extensions that a proxy should not be used for.\n   */\n  noProxy?: string;\n\n  /**\n   * The IP address of the local interface to use when making connections to the npm registry.\n   */\n  localAddress?: string;\n\n  /**\n   * How many times to retry if Bit fails to fetch from the registry.\n   */\n  fetchRetries?: number;\n\n  /*\n   * The exponential factor for retry backoff.\n   */\n  fetchRetryFactor?: number;\n\n  /*\n   * The minimum (base) timeout for retrying requests.\n   */\n  fetchRetryMintimeout?: number;\n\n  /*\n   * The maximum fallback timeout to ensure the retry factor does not make requests too long.\n   */\n  fetchRetryMaxtimeout?: number;\n\n  /*\n   * The maximum amount of time (in milliseconds) to wait for HTTP requests to complete.\n   */\n  fetchTimeout?: number;\n\n  /*\n   * The maximum number of connections to use per origin (protocol/host/port combination).\n   */\n  maxSockets?: number;\n\n  /*\n   * Controls the maximum number of HTTP(S) requests to process simultaneously.\n   */\n  networkConcurrency?: number;\n\n  /*\n   * Set the prefix to use when adding dependency to workspace.jsonc via bit install\n   * to lock version to exact version you can use empty string (default)\n   */\n  savePrefix?: string;\n\n  /*\n   * in case you want to disable this proxy set this config to false\n   *\n   */\n  installFromBitDevRegistry?: boolean;\n\n  /*\n   * map of extra arguments to pass to the configured package manager upon the installation\n   * of dependencies.\n   */\n  packageManagerArgs?: string[];\n\n  /*\n   * This field allows to instruct the package manager to override any dependency in the dependency graph.\n   * This is useful to enforce all your packages to use a single version of a dependency, backport a fix,\n   * or replace a dependency with a fork.\n   */\n  overrides?: Record<string, string>;\n\n  /**\n   * This is similar to overrides, but will only affect installation in capsules.\n   * In case overrides is configured and this not, the regular overrides will affect capsules as well.\n   * in case both configured, capsulesOverrides will be used for capsules, and overrides will affect the workspace.\n   */\n  capsulesOverrides?: Record<string, string>;\n\n  /*\n   * Defines what linker should be used for installing Node.js packages.\n   * Supported values are hoisted and isolated.\n   */\n  nodeLinker?: 'hoisted' | 'isolated';\n\n  /*\n   * Controls the way packages are imported from the store.\n   */\n  packageImportMethod?: PackageImportMethod;\n\n  /*\n   * Use and cache the results of (pre/post)install hooks.\n   */\n  sideEffectsCache?: boolean;\n\n  /*\n   * The list of components that should be installed in isolation from the workspace.\n   * The component's package names should be used in this list, not their component IDs.\n   */\n  rootComponents?: boolean;\n\n  /*\n   * The node version to use when checking a package's engines setting.\n   */\n  nodeVersion?: string;\n\n  /*\n   * Refuse to install any package that claims to not be compatible with the current Node.js version.\n   */\n  engineStrict?: boolean;\n\n  /*\n   * Rules to mute specific peer dependeny warnings.\n   */\n  peerDependencyRules?: PeerDependencyRules;\n\n  /*\n   * This setting is \"true\" by default and tells bit to link core aspects to the node_modules of the workspace.\n   * It only makes sense to set this to \"false\" in a workspace in which core aspects are actually developed.\n   */\n  linkCoreAspects?: boolean;\n}\n\nexport interface DependencyResolverVariantConfig {\n  policy: VariantPolicyConfigObject;\n}\n\nexport type RootPolicyRegistry = SlotRegistry<WorkspacePolicy>;\nexport type PoliciesRegistry = SlotRegistry<VariantPolicyConfigObject>;\nexport type PackageManagerSlot = SlotRegistry<PackageManager>;\nexport type DependencyFactorySlot = SlotRegistry<DependencyFactory[]>;\nexport type PreInstallSlot = SlotRegistry<PreInstallSubscriberList>;\nexport type PostInstallSlot = SlotRegistry<PostInstallSubscriberList>;\n\nexport type MergeDependenciesFunc = (configuredExtensions: ExtensionDataList) => Promise<VariantPolicyConfigObject>;\n\nexport type GetInstallerOptions = {\n  rootDir?: string;\n  packageManager?: string;\n  cacheRootDirectory?: string;\n};\n\nexport type GetLinkerOptions = {\n  rootDir?: string;\n  linkingOptions?: LinkingOptions;\n};\n\nexport type GetVersionResolverOptions = {\n  cacheRootDirectory?: string;\n};\n\ntype OnExportIdTransformer = (id: BitId) => BitId;\n\nconst defaultLinkingOptions: LinkingOptions = {\n  legacyLink: true,\n  linkTeambitBit: true,\n  linkCoreAspects: true,\n};\n\nconst defaultCreateFromComponentsOptions: CreateFromComponentsOptions = {\n  filterComponentsFromManifests: true,\n  createManifestForComponentsWithoutDependencies: true,\n};\n\nexport class DependencyResolverMain {\n  constructor(\n    /**\n     * Dependency resolver  extension configuration.\n     */\n    readonly config: DependencyResolverWorkspaceConfig,\n\n    /**\n     * Registry for changes by other extensions.\n     */\n    private rootPolicyRegistry: RootPolicyRegistry,\n\n    /**\n     * Registry for changes by other extensions.\n     */\n    private policiesRegistry: PoliciesRegistry,\n\n    /**\n     * envs extension.\n     */\n    private envs: EnvsMain,\n\n    private logger: Logger,\n\n    private configAspect: ConfigMain,\n\n    private aspectLoader: AspectLoaderMain,\n\n    private globalConfig: GlobalConfigMain,\n\n    /**\n     * component aspect.\n     */\n    readonly componentAspect: ComponentMain,\n\n    private packageManagerSlot: PackageManagerSlot,\n\n    private dependencyFactorySlot: DependencyFactorySlot,\n\n    private preInstallSlot: PreInstallSlot,\n\n    private postInstallSlot: PostInstallSlot\n  ) {}\n\n  /**\n   * This function is a temporary workaround for installation in capsules with pnpm.\n   * Currently pnpm breaks the root node_modules inside the capsule because it removes deps from it.\n   * Install runs several times in the same capsule and pnpm removes deps from the previous runs.\n   *\n   * This workaround unfortunately also breaks pnpm on angular projects. Because dedupe doesn't work properly.\n   * To fix this issue we'll either have to switch to root components or try to change pnpm code.\n   *\n   * Here is the PR where initially dedupe was turned off for pnpm: https://github.com/teambit/bit/pull/5410\n   */\n  supportsDedupingOnExistingRoot(): boolean {\n    const packageManager = this.packageManagerSlot.get(this.config.packageManager);\n    return packageManager?.supportsDedupingOnExistingRoot?.() === true && !this.hasRootComponents();\n  }\n\n  hasRootComponents(): boolean {\n    return Boolean(this.config.rootComponents);\n  }\n\n  linkCoreAspects(): boolean {\n    return this.config.linkCoreAspects ?? DependencyResolverMain.defaultConfig.linkCoreAspects;\n  }\n\n  /**\n   * register a new package manager to the dependency resolver.\n   */\n  registerPackageManager(packageManager: PackageManager) {\n    this.packageManagerSlot.register(packageManager);\n  }\n\n  registerDependencyFactories(factories: DependencyFactory[]) {\n    this.dependencyFactorySlot.register(factories);\n  }\n\n  registerPreInstallSubscribers(subscribers: PreInstallSubscriberList) {\n    this.preInstallSlot.register(subscribers);\n  }\n\n  registerPostInstallSubscribers(subscribers: PreInstallSubscriberList) {\n    this.postInstallSlot.register(subscribers);\n  }\n\n  getSavePrefix(): string {\n    return this.config.savePrefix || '';\n  }\n\n  getVersionWithSavePrefix(version: string, overridePrefix?: string): string {\n    const prefix = overridePrefix || this.getSavePrefix();\n    const versionWithPrefix = `${prefix}${version}`;\n    if (!semver.validRange(versionWithPrefix)) {\n      throw new InvalidVersionWithPrefix(versionWithPrefix);\n    }\n    return versionWithPrefix;\n  }\n\n  async getPolicy(component: Component): Promise<VariantPolicy> {\n    const entry = component.state.aspects.get(DependencyResolverAspect.id);\n    const factory = new VariantPolicyFactory();\n    if (!entry) {\n      return factory.getEmpty();\n    }\n    const serializedPolicy: SerializedVariantPolicy = get(entry, ['data', 'policy'], []);\n    return factory.parse(serializedPolicy);\n  }\n\n  /**\n   * This function called on component load in order to calculate the dependencies based on the legacy (consumer) component\n   * and write them to the dependencyResolver data.\n   * Do not use this function for other purpose.\n   * If you want to get the component dependencies call getDependencies (which will give you the dependencies from the data itself)\n   * TODO: once we switch deps resolver <> workspace relation we should make it private\n   * TODO: once we switch deps resolver <> workspace relation we should remove the resolveId func here\n   * @param component\n   */\n  async extractDepsFromLegacy(component: Component, policy?: VariantPolicy): Promise<DependencyList> {\n    const componentPolicy = policy || (await this.getPolicy(component));\n    const legacyComponent: LegacyComponent = component.state._consumer;\n    const listFactory = this.getDependencyListFactory();\n    const dependencyList = await listFactory.fromLegacyComponent(legacyComponent);\n    dependencyList.forEach((dep) => {\n      const found = componentPolicy.find(dep.id);\n      // if no policy found, the dependency was auto-resolved from the source code\n      dep.source = found?.source || 'auto';\n    });\n    return dependencyList;\n  }\n\n  private getDependencyListFactory(): DependencyListFactory {\n    const factories = this.dependencyFactorySlot.values().flat();\n    const factoriesMap = factories.reduce((acc, factory) => {\n      acc[factory.type] = factory;\n      return acc;\n    }, {});\n    const listFactory = new DependencyListFactory(factoriesMap);\n    return listFactory;\n  }\n\n  /**\n   * Main function to get the dependency list of a given component\n   * @param component\n   */\n  async getDependencies(component: IComponent): Promise<DependencyList> {\n    const entry = component.get(DependencyResolverAspect.id);\n    if (!entry) {\n      return DependencyList.fromArray([]);\n    }\n    const serializedDependencies: SerializedDependency[] = entry?.data?.dependencies || [];\n    return this.getDependenciesFromSerializedDependencies(serializedDependencies);\n  }\n\n  private async getDependenciesFromSerializedDependencies(\n    dependencies: SerializedDependency[]\n  ): Promise<DependencyList> {\n    if (!dependencies.length) {\n      return DependencyList.fromArray([]);\n    }\n    const listFactory = this.getDependencyListFactory();\n    const deps = await listFactory.fromSerializedDependencies(dependencies);\n    return deps;\n  }\n\n  /**\n   * Getting the merged workspace policy (from dep resolver config and others like root package.json)\n   * @returns\n   */\n  getWorkspacePolicy(): WorkspacePolicy {\n    const policyFromConfig = this.getWorkspacePolicyFromConfig();\n    const externalPolicies = this.rootPolicyRegistry.toArray().map(([, policy]) => policy);\n    return this.mergeWorkspacePolices([policyFromConfig, ...externalPolicies]);\n  }\n\n  /**\n   * Getting the workspace policy as defined in the workspace.jsonc in the dependencyResolver aspect\n   * This will not take into account packages that defined in the package.json of the root for example\n   * in most cases you should use getWorkspacePolicy\n   * @returns\n   */\n  getWorkspacePolicyFromConfig(): WorkspacePolicy {\n    const factory = new WorkspacePolicyFactory();\n    return factory.fromConfigObject(this.config.policy);\n  }\n\n  getWorkspacePolicyFromPackageJson(packageJson: Record<string, any>): WorkspacePolicy {\n    const factory = new WorkspacePolicyFactory();\n    return factory.fromPackageJson(packageJson);\n  }\n\n  mergeWorkspacePolices(polices: WorkspacePolicy[]): WorkspacePolicy {\n    return WorkspacePolicy.mergePolices(polices);\n  }\n\n  /**\n   * Create a workspace manifest\n   * The term workspace here is not the same as \"bit workspace\" but a workspace that represent a shared root\n   * for installation of many components (sometime it might point to the workspace path)\n   * in other case it can be for example the capsules root dir\n   *\n   * @param {string} [name=ROOT_NAME]\n   * @param {SemVer} [version=new SemVer('1.0.0')]\n   * @param {ManifestDependenciesObject} dependencies\n   * @param {string} rootDir\n   * @param {Component[]} components\n   * @param {CreateFromComponentsOptions} [options={\n   *       filterComponentsFromManifests: true,\n   *       createManifestForComponentsWithoutDependencies: true,\n   *     }]\n   * @returns {WorkspaceManifest}\n   * @memberof DependencyResolverMain\n   */\n  async getWorkspaceManifest(\n    name: string = ROOT_NAME,\n    version: SemVer = new SemVer('1.0.0'),\n    rootPolicy: WorkspacePolicy,\n    rootDir: string,\n    components: Component[],\n    options: CreateFromComponentsOptions = defaultCreateFromComponentsOptions\n  ): Promise<WorkspaceManifest> {\n    this.logger.setStatusLine('deduping dependencies for installation');\n    const concreteOpts = {\n      ...defaultCreateFromComponentsOptions,\n      ...options,\n    };\n    const workspaceManifestFactory = new WorkspaceManifestFactory(this, this.aspectLoader);\n    const res = await workspaceManifestFactory.createFromComponents(\n      name,\n      version,\n      rootPolicy,\n      rootDir,\n      components,\n      concreteOpts\n    );\n    this.logger.consoleSuccess();\n    return res;\n  }\n\n  /**\n   * get the package name of a component.\n   */\n  getPackageName(component: Component) {\n    return componentIdToPackageName(component.state._consumer);\n  }\n\n  /*\n   * Returns the location where the component is installed with its peer dependencies\n   * This is used in cases you want to actually run the components and make sure all the dependencies (especially peers) are resolved correctly\n   */\n  getRuntimeModulePath(component: Component) {\n    const modulePath = this.getModulePath(component);\n    if (!this.hasRootComponents()) {\n      return modulePath;\n    }\n    const pkgName = this.getPackageName(component);\n    return join(modulePath, 'node_modules', pkgName);\n  }\n\n  /**\n   * returns the package path in the /node_modules/ folder\n   * In case you call this in order to run the code from the path, please refer to the `getRuntimeModulePath` API\n   */\n  getModulePath(component: Component) {\n    const pkgName = this.getPackageName(component);\n    const relativePath = join('node_modules', pkgName);\n    return relativePath;\n  }\n\n  /**\n   * get a component dependency installer.\n   */\n  getInstaller(options: GetInstallerOptions = {}) {\n    const packageManagerName = options.packageManager || this.config.packageManager;\n    const packageManager = this.packageManagerSlot.get(packageManagerName);\n    const cacheRootDir = options.cacheRootDirectory || this.globalConfig.getSync(CFG_PACKAGE_MANAGER_CACHE);\n\n    if (!packageManager) {\n      throw new PackageManagerNotFound(this.config.packageManager);\n    }\n\n    if (cacheRootDir && !fs.pathExistsSync(cacheRootDir)) {\n      this.logger.debug(`creating package manager cache dir at ${cacheRootDir}`);\n      fs.ensureDirSync(cacheRootDir);\n    }\n    const preInstallSubscribers = this.getPreInstallSubscribers();\n    const postInstallSubscribers = this.getPostInstallSubscribers();\n    // TODO: we should somehow pass the cache root dir to the package manager constructor\n    return new DependencyInstaller(\n      packageManager,\n      this.aspectLoader,\n      this.logger,\n      this,\n      options.rootDir,\n      cacheRootDir,\n      preInstallSubscribers,\n      postInstallSubscribers,\n      this.config.nodeLinker,\n      this.config.packageImportMethod,\n      this.config.sideEffectsCache,\n      this.config.nodeVersion,\n      this.config.engineStrict,\n      this.config.peerDependencyRules\n    );\n  }\n\n  private getPreInstallSubscribers(): PreInstallSubscriberList {\n    return this.preInstallSlot.values().flat();\n  }\n\n  private getPostInstallSubscribers(): PostInstallSubscriberList {\n    return this.postInstallSlot.values().flat();\n  }\n\n  /**\n   * get a component dependency linker.\n   */\n  getLinker(options: GetLinkerOptions = {}) {\n    const linkingOptions = Object.assign({}, defaultLinkingOptions, options?.linkingOptions || {});\n    // TODO: we should somehow pass the cache root dir to the package manager constructor\n    return new DependencyLinker(\n      this,\n      this.aspectLoader,\n      this.componentAspect,\n      this.envs,\n      this.logger,\n      options.rootDir,\n      linkingOptions\n    );\n  }\n\n  getPackageManagerName() {\n    return this.config.packageManager;\n  }\n\n  async getVersionResolver(options: GetVersionResolverOptions = {}) {\n    const packageManager = this.packageManagerSlot.get(this.config.packageManager);\n    const cacheRootDir = options.cacheRootDirectory || this.globalConfig.getSync(CFG_PACKAGE_MANAGER_CACHE);\n\n    if (!packageManager) {\n      throw new PackageManagerNotFound(this.config.packageManager);\n    }\n\n    if (cacheRootDir && !fs.pathExistsSync(cacheRootDir)) {\n      this.logger.debug(`creating package manager cache dir at ${cacheRootDir}`);\n      fs.ensureDirSync(cacheRootDir);\n    }\n    const { networkConcurrency } = await this.getNetworkConfig();\n    // TODO: we should somehow pass the cache root dir to the package manager constructor\n    return new DependencyVersionResolver(packageManager, cacheRootDir, networkConcurrency);\n  }\n\n  /**\n   * return the system configured package manager. by default pnpm.\n   */\n  getSystemPackageManager(): PackageManager {\n    const defaultPm = 'teambit.dependencies/pnpm';\n    const packageManager = this.packageManagerSlot.get(defaultPm);\n    if (!packageManager) throw new Error(`default package manager: ${defaultPm} was not found`);\n    return packageManager;\n  }\n\n  async getProxyConfig(): Promise<ProxyConfig> {\n    const proxyConfigFromDepResolverConfig = this.getProxyConfigFromDepResolverConfig();\n    let httpProxy = proxyConfigFromDepResolverConfig.httpProxy;\n    let httpsProxy = proxyConfigFromDepResolverConfig.httpsProxy;\n\n    // Take config from the aspect config if defined\n    if (httpProxy || httpsProxy) {\n      this.logger.debug(\n        `proxy config taken from the dep resolver config. proxy: ${httpProxy} httpsProxy: ${httpsProxy}`\n      );\n      return proxyConfigFromDepResolverConfig;\n    }\n\n    // Take config from the package manager (npmrc) config if defined\n    const proxyConfigFromPackageManager = await this.getProxyConfigFromPackageManager();\n    if (proxyConfigFromPackageManager?.httpProxy || proxyConfigFromPackageManager?.httpsProxy) {\n      this.logger.debug(\n        `proxy config taken from the package manager config (npmrc). proxy: ${proxyConfigFromPackageManager.httpProxy} httpsProxy: ${proxyConfigFromPackageManager.httpsProxy}`\n      );\n      return proxyConfigFromPackageManager;\n    }\n\n    // Take config from global bit config\n    const proxyConfigFromGlobalConfig = await this.getProxyConfigFromGlobalConfig();\n    httpProxy = proxyConfigFromGlobalConfig.httpProxy;\n    httpsProxy = proxyConfigFromGlobalConfig.httpsProxy;\n    if (httpProxy || httpsProxy) {\n      this.logger.debug(`proxy config taken from the global bit config. proxy: ${httpProxy} httpsProxy: ${httpsProxy}`);\n      return proxyConfigFromGlobalConfig;\n    }\n    return {};\n  }\n\n  private getProxyConfigFromDepResolverConfig(): ProxyConfig {\n    return {\n      httpProxy: this.config.proxy,\n      httpsProxy: this.config.httpsProxy || this.config.proxy,\n      noProxy: this.config.noProxy,\n    };\n  }\n\n  async getNetworkConfig(): Promise<NetworkConfig> {\n    const networkConfig = {\n      ...(await this.getNetworkConfigFromGlobalConfig()),\n      ...(await this.getNetworkConfigFromPackageManager()),\n      ...this.getNetworkConfigFromDepResolverConfig(),\n    };\n    this.logger.debug(\n      `the next network configuration is used in dependency-resolver: ${JSON.stringify(\n        {\n          ...networkConfig,\n          key: networkConfig.key ? 'set' : 'not set', // this is sensitive information, we should not log it\n        },\n        null,\n        2\n      )}`\n    );\n    return networkConfig;\n  }\n\n  private async getNetworkConfigFromGlobalConfig(): Promise<NetworkConfig> {\n    const globalNetworkConfig = await Http.getNetworkConfig();\n    if (!globalNetworkConfig.ca && globalNetworkConfig.cafile) {\n      globalNetworkConfig.ca = readCAFileSync(globalNetworkConfig.cafile);\n    }\n    return globalNetworkConfig;\n  }\n\n  private getNetworkConfigFromDepResolverConfig(): NetworkConfig {\n    const config: NetworkConfig = pick(this.config, [\n      'fetchTimeout',\n      'fetchRetries',\n      'fetchRetryFactor',\n      'fetchRetryMintimeout',\n      'fetchRetryMaxtimeout',\n      'maxSockets',\n      'networkConcurrency',\n      'key',\n      'cert',\n      'ca',\n      'cafile',\n    ]);\n    if (this.config.strictSsl != null) {\n      config.strictSSL =\n        typeof this.config.strictSsl === 'string'\n          ? this.config.strictSsl.toLowerCase() === 'true'\n          : this.config.strictSsl;\n    }\n    return config;\n  }\n\n  private async getNetworkConfigFromPackageManager(): Promise<NetworkConfig> {\n    const packageManager = this.packageManagerSlot.get(this.config.packageManager);\n    let networkConfigFromPackageManager: NetworkConfig = {};\n    if (typeof packageManager?.getNetworkConfig === 'function') {\n      networkConfigFromPackageManager = await packageManager?.getNetworkConfig();\n    } else {\n      const systemPm = this.getSystemPackageManager();\n      if (!systemPm.getNetworkConfig) throw new Error('system package manager must implement `getNetworkConfig()`');\n      networkConfigFromPackageManager = await systemPm.getNetworkConfig();\n    }\n    return networkConfigFromPackageManager;\n  }\n\n  private async getProxyConfigFromPackageManager(): Promise<ProxyConfig> {\n    const packageManager = this.packageManagerSlot.get(this.config.packageManager);\n    let proxyConfigFromPackageManager: ProxyConfig = {};\n    if (packageManager?.getProxyConfig && typeof packageManager?.getProxyConfig === 'function') {\n      proxyConfigFromPackageManager = await packageManager?.getProxyConfig();\n    } else {\n      const systemPm = this.getSystemPackageManager();\n      if (!systemPm.getProxyConfig) throw new Error('system package manager must implement `getProxyConfig()`');\n      proxyConfigFromPackageManager = await systemPm.getProxyConfig();\n    }\n    return proxyConfigFromPackageManager;\n  }\n\n  private getProxyConfigFromGlobalConfig(): Promise<ProxyConfig> {\n    return Http.getProxyConfig();\n  }\n\n  /**\n   * Return the peer dependencies and their ranges that may be installed\n   * without causing unmet peer dependency issues in some of the dependencies.\n   */\n  async getMissingPeerDependencies(\n    rootDir: string,\n    rootPolicy: WorkspacePolicy,\n    componentDirectoryMap: ComponentMap<string>,\n    options: PackageManagerGetPeerDependencyIssuesOptions\n  ): Promise<Record<string, string>> {\n    this.logger.setStatusLine('finding missing peer dependencies');\n    const packageManager = this.packageManagerSlot.get(this.config.packageManager);\n    let peerDependencyIssues!: PeerDependencyIssuesByProjects;\n    const installer = this.getInstaller();\n    const manifests = await installer.getComponentManifests({\n      ...options,\n      componentDirectoryMap,\n      rootPolicy,\n      rootDir,\n    });\n    if (packageManager?.getPeerDependencyIssues && typeof packageManager?.getPeerDependencyIssues === 'function') {\n      peerDependencyIssues = await packageManager?.getPeerDependencyIssues(rootDir, manifests, options);\n    } else {\n      const systemPm = this.getSystemPackageManager();\n      if (!systemPm.getPeerDependencyIssues)\n        throw new Error('system package manager must implement `getPeerDependencyIssues()`');\n      peerDependencyIssues = await systemPm?.getPeerDependencyIssues(rootDir, manifests, options);\n    }\n    this.logger.consoleSuccess();\n    return peerDependencyIssues['.']?.intersections;\n  }\n\n  async getRegistries(): Promise<Registries> {\n    const packageManager = this.packageManagerSlot.get(this.config.packageManager);\n    let registries;\n    if (packageManager?.getRegistries && typeof packageManager?.getRegistries === 'function') {\n      registries = await packageManager?.getRegistries();\n    } else {\n      const systemPm = this.getSystemPackageManager();\n      if (!systemPm.getRegistries) throw new Error('system package manager must implement `getRegistries()`');\n      registries = await systemPm.getRegistries();\n    }\n\n    const bitScope = registries.scopes.bit;\n\n    const getDefaultBitRegistry = (): Registry => {\n      const bitRegistry = bitScope?.uri || BIT_DEV_REGISTRY;\n\n      const { bitOriginalAuthType, bitAuthHeaderValue, bitOriginalAuthValue } = this.getBitAuthConfig(bitScope);\n\n      const alwaysAuth = bitAuthHeaderValue !== undefined;\n      const bitDefaultRegistry = new Registry(\n        bitRegistry,\n        alwaysAuth,\n        bitAuthHeaderValue,\n        bitOriginalAuthType,\n        bitOriginalAuthValue\n      );\n      return bitDefaultRegistry;\n    };\n\n    const bitDefaultRegistry = getDefaultBitRegistry();\n\n    const installFromBitDevRegistry = this.config.installFromBitDevRegistry ?? true;\n\n    // Override default registry to use bit registry in case npmjs is the default - bit registry will proxy it\n    // We check also NPM_REGISTRY.startsWith because the uri might not have the trailing / we have in NPM_REGISTRY\n    if (\n      installFromBitDevRegistry &&\n      (!registries.defaultRegistry.uri ||\n        registries.defaultRegistry.uri === NPM_REGISTRY ||\n        NPM_REGISTRY.startsWith(registries.defaultRegistry.uri))\n    ) {\n      // TODO: this will not handle cases where you have token for private npm registries stored on npmjs\n      // it should be handled by somehow in such case (default is npmjs and there is token for default) by sending the token of npmjs to the registry\n      // (for example by setting some special header in the request)\n      // then in the registry server it should be use it when proxies\n      registries = registries.setDefaultRegistry(bitDefaultRegistry);\n    }\n    // Make sure @bit scope is register with alwaysAuth\n    if (!bitScope || (bitScope && !bitScope.alwaysAuth)) {\n      registries = registries.updateScopedRegistry('bit', bitDefaultRegistry);\n    }\n\n    registries = this.addAuthToScopedBitRegistries(registries, bitScope);\n    return registries;\n  }\n\n  /**\n   * This will mutate any registry which point to BIT_DEV_REGISTRY to have the auth config from the @bit scoped registry or from the user.token in bit's config\n   */\n  private addAuthToScopedBitRegistries(registries: Registries, bitScopeRegistry: Registry): Registries {\n    const { bitOriginalAuthType, bitAuthHeaderValue, bitOriginalAuthValue } = this.getBitAuthConfig(bitScopeRegistry);\n    const alwaysAuth = bitAuthHeaderValue !== undefined;\n    let updatedRegistries = registries;\n    Object.entries(registries.scopes).map(([name, registry]) => {\n      if (!registry.authHeaderValue && BIT_DEV_REGISTRY.includes(registry.uri)) {\n        const registryWithAuth = new Registry(\n          registry.uri,\n          alwaysAuth,\n          bitAuthHeaderValue,\n          bitOriginalAuthType,\n          bitOriginalAuthValue\n        );\n        updatedRegistries = updatedRegistries.updateScopedRegistry(name, registryWithAuth);\n      }\n      return updatedRegistries;\n    });\n    return updatedRegistries;\n  }\n\n  private getBitAuthConfig(\n    bitScopeRegistry: Registry\n  ): Partial<{ bitOriginalAuthType: string; bitAuthHeaderValue: string; bitOriginalAuthValue: string }> {\n    const bitGlobalConfigToken = this.globalConfig.getSync(CFG_USER_TOKEN_KEY);\n    let bitAuthHeaderValue = bitScopeRegistry?.authHeaderValue;\n    let bitOriginalAuthType = bitScopeRegistry?.originalAuthType;\n    let bitOriginalAuthValue = bitScopeRegistry?.originalAuthValue;\n\n    // In case there is no auth configuration in the npmrc, but there is token in bit config, take it from the config\n    if ((!bitScopeRegistry || !bitScopeRegistry.authHeaderValue) && bitGlobalConfigToken) {\n      bitOriginalAuthType = 'authToken';\n      bitAuthHeaderValue = `Bearer ${bitGlobalConfigToken}`;\n      bitOriginalAuthValue = bitGlobalConfigToken;\n    }\n\n    return {\n      bitOriginalAuthType,\n      bitAuthHeaderValue,\n      bitOriginalAuthValue,\n    };\n  }\n\n  get packageManagerName(): string {\n    return this.config.packageManager;\n  }\n\n  addToRootPolicy(entries: WorkspacePolicyEntry[], options?: WorkspacePolicyAddEntryOptions): WorkspacePolicy {\n    const workspacePolicy = this.getWorkspacePolicyFromConfig();\n    entries.forEach((entry) => workspacePolicy.add(entry, options));\n    this.updateConfigPolicy(workspacePolicy);\n    return workspacePolicy;\n  }\n\n  removeFromRootPolicy(dependencyIds: string[]) {\n    const workspacePolicy = this.getWorkspacePolicyFromConfig();\n    const workspacePolicyUpdated = workspacePolicy.remove(dependencyIds);\n    this.updateConfigPolicy(workspacePolicyUpdated);\n  }\n\n  private updateConfigPolicy(workspacePolicy: WorkspacePolicy) {\n    const workspacePolicyObject = workspacePolicy.toConfigObject();\n    this.config.policy = workspacePolicyObject;\n    this.configAspect.setExtension(DependencyResolverAspect.id, this.config, {\n      overrideExisting: true,\n      ignoreVersion: true,\n    });\n  }\n\n  async persistConfig(workspaceDir?: string) {\n    return this.configAspect.workspaceConfig?.write({ dir: workspaceDir });\n  }\n\n  /**\n   * register new dependencies policies\n   */\n  registerDependenciesPolicies(policy: VariantPolicyConfigObject): void {\n    return this.policiesRegistry.register(policy);\n  }\n\n  /**\n   * register new dependencies policies\n   */\n  registerRootPolicy(policy: WorkspacePolicy): void {\n    return this.rootPolicyRegistry.register(policy);\n  }\n\n  async getComponentEnvPolicyFromExtension(configuredExtensions: ExtensionDataList): Promise<EnvPolicy> {\n    const env = this.envs.calculateEnvFromExtensions(configuredExtensions).env;\n    return this.getComponentEnvPolicyFromEnv(env);\n  }\n\n  async getEnvPolicyFromEnvLegacyId(id: BitId): Promise<EnvPolicy | undefined> {\n    const envDef = await this.envs.getEnvDefinitionByLegacyId(id);\n    if (!envDef) return undefined;\n    const env = envDef.env;\n    return this.getComponentEnvPolicyFromEnv(env);\n  }\n\n  async getComponentEnvPolicy(component: Component): Promise<EnvPolicy> {\n    const env = this.envs.getEnv(component).env;\n    return this.getComponentEnvPolicyFromEnv(env);\n  }\n\n  async getComponentEnvPolicyFromEnv(env: DependenciesEnv): Promise<EnvPolicy> {\n    if (env.getDependencies && typeof env.getDependencies === 'function') {\n      const policiesFromEnvConfig = await env.getDependencies();\n      if (policiesFromEnvConfig) {\n        const allPoliciesFromEnv = new EnvPolicyFactory().fromConfigObject(policiesFromEnvConfig);\n        return allPoliciesFromEnv;\n      }\n    }\n    return new EnvPolicyFactory().getEmpty();\n  }\n\n  /**\n   * Get a list of peer dependencies applied from an env\n   * This will merge different peers list like:\n   * 1. peerDependencies from the getDependencies\n   * 2. peers from getDependencies\n   * 3. getAdditionalHostDependencies\n   * @param env\n   */\n  async getPeerDependenciesListFromEnv(env: DependenciesEnv): Promise<string[]> {\n    const envPolicy = await this.getComponentEnvPolicyFromEnv(env);\n    const peers = uniq(\n      envPolicy.peersAutoDetectPolicy.names.concat(envPolicy.variantPolicy.byLifecycleType('peer').names)\n    );\n    let additionalHostDeps: string[] = [];\n    if (env.getAdditionalHostDependencies && typeof env.getAdditionalHostDependencies === 'function') {\n      additionalHostDeps = await env.getAdditionalHostDependencies();\n    }\n    return uniq(peers.concat(additionalHostDeps));\n  }\n\n  /**\n   * Merge the dependencies provided by:\n   * 1. envs configured in the component - via dependencies method\n   * 2. extensions that registered to the registerDependencyPolicy slot (and configured for the component)\n   * 3. props defined by the user (they are the strongest one)\n   * @param configuredExtensions\n   */\n  async mergeVariantPolicies(configuredExtensions: ExtensionDataList): Promise<VariantPolicy> {\n    const variantPolicyFactory = new VariantPolicyFactory();\n    let policiesFromSlots: VariantPolicy = variantPolicyFactory.getEmpty();\n    let policiesFromConfig: VariantPolicy = variantPolicyFactory.getEmpty();\n    const policiesFromEnv: VariantPolicy = (await this.getComponentEnvPolicyFromExtension(configuredExtensions))\n      ?.variantPolicy;\n    const configuredIds = configuredExtensions.ids;\n    const policiesTuples = this.policiesRegistry.toArray();\n    configuredIds.forEach((extId) => {\n      // TODO: change this way of search, once we have workspace as dep-resolver dependency\n      // we can use something like:\n      // const resolvedId = this.workspace.resolveComponentId(extId)\n      // const currentPolicy = this.policiesRegistry.get(resolvedId.toString());\n      // Only get props from configured extensions on this specific component\n      const policyTupleToApply = policiesTuples.find(([policyRegistrar]) => {\n        return policyRegistrar === extId || policyRegistrar.includes(extId);\n      });\n\n      if (policyTupleToApply && policyTupleToApply[1]) {\n        const currentPolicy = variantPolicyFactory.fromConfigObject(policyTupleToApply[1], 'slots');\n        policiesFromSlots = VariantPolicy.mergePolices([policiesFromSlots, currentPolicy]);\n      }\n    });\n    const currentExtension = configuredExtensions.findExtension(DependencyResolverAspect.id);\n    const currentConfig = currentExtension?.config as unknown as DependencyResolverVariantConfig;\n    if (currentConfig && currentConfig.policy) {\n      policiesFromConfig = variantPolicyFactory.fromConfigObject(currentConfig.policy, 'config');\n    }\n\n    const result = VariantPolicy.mergePolices([policiesFromEnv, policiesFromSlots, policiesFromConfig]);\n    return result;\n  }\n\n  updateDepsOnLegacyTag(component: LegacyComponent, idTransformer: onTagIdTransformer): LegacyComponent {\n    const entry = component.extensions.findCoreExtension(DependencyResolverAspect.id);\n    if (!entry) {\n      return component;\n    }\n    const dependencies = get(entry, ['data', 'dependencies'], []);\n    dependencies.forEach((dep) => {\n      if (dep.__type === COMPONENT_DEP_TYPE) {\n        const depId = new BitId(dep.componentId);\n        const newDepId = idTransformer(depId);\n        dep.componentId = (newDepId || depId).serialize();\n        dep.id = (newDepId || depId).toString();\n        dep.version = (newDepId || depId).version;\n      }\n    });\n    return component;\n  }\n\n  updateDepsOnLegacyExport(version: VersionModel, idTransformer: OnExportIdTransformer): VersionModel {\n    const entry = version.extensions.findCoreExtension(DependencyResolverAspect.id);\n    if (!entry) {\n      return version;\n    }\n    const dependencies = get(entry, ['data', 'dependencies'], []);\n    dependencies.forEach((dep) => {\n      if (dep.__type === COMPONENT_DEP_TYPE) {\n        const depId = new BitId(dep.componentId);\n        const newDepId = idTransformer(depId);\n        dep.componentId = (newDepId || depId).serialize();\n        dep.id = (newDepId || depId).toString();\n      }\n    });\n    return version;\n  }\n\n  /**\n   * Register a new dependency detector. Detectors allow to extend Bit's dependency detection\n   * mechanism to support new file extensions and types.\n   */\n  registerDetector(detector: DependencyDetector) {\n    DetectorHook.hooks.push(detector);\n    return this;\n  }\n\n  /**\n   * This function registered to the onLoadRequireableExtensionSlot of the aspect-loader\n   * Update the aspect / manifest deps versions in the runtimes (recursively)\n   * This function mutate the manifest directly as otherwise it becomes very complicated\n   * TODO: think if this funciton should be here as it about dependencies, or on the aspect loader\n   * (as it's aware of the internal structure of aspects)\n   * Maybe only register the dep resolution part to the aspect loader\n   * at the moment it here for simplify the process\n   * @param requireableExtension\n   * @param manifest\n   * @returns\n   */\n  async onLoadRequireableExtensionSubscriber(\n    requireableExtension: RequireableComponent,\n    manifest: ExtensionManifest | Aspect\n  ): Promise<ExtensionManifest | Aspect> {\n    const parentComponent = requireableExtension.component;\n    return this.resolveRequireableExtensionManifestDepsVersionsRecursively(parentComponent, manifest);\n  }\n\n  /**\n   * Update the aspect / manifest deps versions in the runtimes (recursively)\n   * @param parentComponent\n   * @param manifest\n   */\n  private async resolveRequireableExtensionManifestDepsVersionsRecursively(\n    // Allow getting here string for lazy load the component\n    // we only want to load the component in case there are deps to resolve\n    parentComponent: Component | string,\n    manifest: ExtensionManifest | Aspect\n    // TODO: add visited = new Map() for performence improve\n  ): Promise<ExtensionManifest | Aspect> {\n    // Not resolve it immediately for performance sake\n    let resolvedParentComponent: Component | undefined;\n    let resolvedParentDeps: DependencyList;\n    const updateDirectDepsVersions = (deps: Array<ExtensionManifest | Aspect>): Promise<void[]> => {\n      return mapSeries(deps, async (dep) => {\n        // Nothing to update (this shouldn't happen ever)\n        if (!dep.id) return;\n        // In case of core aspect, do not update the version, as it's loaded to harmony without version\n        if (this.aspectLoader.isCoreAspect(dep.id)) return;\n        // Lazily get the parent component\n        if (typeof parentComponent === 'string') {\n          const parentComponentId = await this.componentAspect.getHost().resolveComponentId(parentComponent);\n          resolvedParentComponent = await this.componentAspect.getHost().get(parentComponentId);\n        } else {\n          // it's of type component;\n          resolvedParentComponent = parentComponent;\n        }\n        if (!resolvedParentComponent) {\n          this.logger.error(\n            `could not resolve the component ${parentComponent} during manifest deps resolution. it shouldn't happen`\n          );\n          return;\n        }\n        // Lazily get the dependencies\n        resolvedParentDeps = resolvedParentDeps || (await this.getDependencies(resolvedParentComponent));\n        const resolvedDep = resolvedParentDeps.findDependency(dep.id, { ignoreVersion: true });\n        dep.id = resolvedDep?.id ?? dep.id;\n        await this.resolveRequireableExtensionManifestDepsVersionsRecursively(dep.id, dep);\n      });\n    };\n    if (manifest.dependencies) {\n      manifest.dependencies = manifest.dependencies.map((dep) => this.aspectLoader.cloneManifest(dep));\n      await updateDirectDepsVersions(manifest.dependencies);\n    }\n    // @ts-ignore\n    if (manifest?._runtimes) {\n      // @ts-ignore\n      await mapSeries(manifest?._runtimes, async (runtime: RuntimeManifest) => {\n        if (runtime.dependencies) {\n          runtime.dependencies = runtime.dependencies.map((dep) => this.aspectLoader.cloneManifest(dep));\n          await updateDirectDepsVersions(runtime.dependencies);\n        }\n      });\n    }\n\n    return manifest;\n  }\n\n  /**\n   * Return a list of outdated policy dependencies.\n   */\n  async getOutdatedPkgsFromPolicies({\n    rootDir,\n    variantPoliciesByPatterns,\n    componentPoliciesById,\n    components,\n  }: {\n    rootDir: string;\n    variantPoliciesByPatterns: Record<string, VariantPolicyConfigObject>;\n    componentPoliciesById: Record<string, any>;\n    components: Component[];\n  }): Promise<OutdatedPkg[]> {\n    const componentModelVersions: ComponentModelVersion[] = (\n      await Promise.all(\n        components.map(async (component) => {\n          const depList = await this.getDependencies(component);\n          return depList\n            .filter(\n              (dep) =>\n                typeof dep.getPackageName === 'function' &&\n                dep.version !== 'latest' &&\n                !dep['isExtension'] && // eslint-disable-line\n                dep.lifecycle !== 'peer'\n            )\n            .map((dep) => ({\n              name: dep.getPackageName!(), // eslint-disable-line\n              version: dep.version,\n              componentId: component.id.toString(),\n              lifecycleType: dep.lifecycle,\n            }));\n        })\n      )\n    ).flat();\n    const allPkgs = getAllPolicyPkgs({\n      rootPolicy: this.getWorkspacePolicyFromConfig(),\n      variantPoliciesByPatterns,\n      componentPoliciesById,\n      componentModelVersions,\n    });\n    return this.getOutdatedPkgs(rootDir, allPkgs);\n  }\n\n  /**\n   * Accepts a list of package dependency policies and returns a list of outdated policies extended with their \"latestRange\"\n   */\n  async getOutdatedPkgs<T>(\n    rootDir: string,\n    pkgs: Array<{ name: string; currentRange: string } & T>\n  ): Promise<Array<{ name: string; currentRange: string; latestRange: string } & T>> {\n    this.logger.setStatusLine('checking the latest versions of dependencies');\n    const resolver = await this.getVersionResolver();\n    const resolve = async (spec: string) =>\n      (\n        await resolver.resolveRemoteVersion(spec, {\n          rootDir,\n        })\n      ).version;\n    const outdatedPkgs = (\n      await Promise.all(\n        pkgs.map(async (pkg) => {\n          const latestVersion = await resolve(`${pkg.name}@latest`);\n          return {\n            ...pkg,\n            latestRange: latestVersion ? repeatPrefix(pkg.currentRange, latestVersion) : null,\n          } as any;\n        })\n      )\n    ).filter(({ latestRange, currentRange }) => latestRange != null && latestRange !== currentRange);\n    this.logger.consoleSuccess();\n    return outdatedPkgs;\n  }\n\n  /**\n   * Update the specified packages to their latest versions in all policies;\n   * root polcies, variant pocilicies, and component configuration policies (component.json).\n   */\n  applyUpdates(\n    outdatedPkgs: Array<Omit<OutdatedPkg, 'currentRange'>>,\n    options: {\n      variantPoliciesByPatterns: Record<string, any>;\n      componentPoliciesById: Record<string, any>;\n    }\n  ): {\n    updatedVariants: string[];\n    updatedComponents: string[];\n  } {\n    const { updatedVariants, updatedComponents, updatedWorkspacePolicyEntries } = applyUpdates(outdatedPkgs, {\n      variantPoliciesByPatterns: options.variantPoliciesByPatterns,\n      componentPoliciesById: options.componentPoliciesById,\n    });\n    this.addToRootPolicy(updatedWorkspacePolicyEntries, {\n      updateExisting: true,\n    });\n    return {\n      updatedVariants,\n      updatedComponents,\n    };\n  }\n\n  static runtime = MainRuntime;\n  static dependencies = [\n    EnvsAspect,\n    LoggerAspect,\n    ConfigAspect,\n    AspectLoaderAspect,\n    ComponentAspect,\n    GraphqlAspect,\n    GlobalConfigAspect,\n  ];\n\n  static slots = [\n    Slot.withType<WorkspacePolicy>(),\n    Slot.withType<VariantPolicyConfigObject>(),\n    Slot.withType<PackageManager>(),\n    Slot.withType<RegExp>(),\n    Slot.withType<DependencyFactory>(),\n    Slot.withType<PreInstallSubscriberList>(),\n    Slot.withType<PostInstallSubscriberList>(),\n    Slot.withType<DependencyDetector>(),\n  ];\n\n  static defaultConfig: DependencyResolverWorkspaceConfig &\n    Required<Pick<DependencyResolverWorkspaceConfig, 'linkCoreAspects'>> = {\n    /**\n     * default package manager.\n     */\n    packageManager: 'teambit.dependencies/pnpm',\n    policy: {},\n    linkCoreAspects: true,\n  };\n\n  static async provider(\n    [envs, loggerExt, configMain, aspectLoader, componentAspect, graphql, globalConfig]: [\n      EnvsMain,\n      LoggerMain,\n      ConfigMain,\n      AspectLoaderMain,\n      ComponentMain,\n      GraphqlMain,\n      GlobalConfigMain\n    ],\n    config: DependencyResolverWorkspaceConfig,\n    [\n      rootPolicyRegistry,\n      policiesRegistry,\n      packageManagerSlot,\n      dependencyFactorySlot,\n      preInstallSlot,\n      postInstallSlot,\n    ]: [\n      RootPolicyRegistry,\n      PoliciesRegistry,\n      PackageManagerSlot,\n      DependencyFactorySlot,\n      PreInstallSlot,\n      PostInstallSlot\n    ]\n  ) {\n    // const packageManager = new PackageManagerLegacy(config.packageManager, logger);\n    const logger = loggerExt.createLogger(DependencyResolverAspect.id);\n    const dependencyResolver = new DependencyResolverMain(\n      config,\n      rootPolicyRegistry,\n      policiesRegistry,\n      envs,\n      logger,\n      configMain,\n      aspectLoader,\n      globalConfig,\n      componentAspect,\n      packageManagerSlot,\n      dependencyFactorySlot,\n      preInstallSlot,\n      postInstallSlot\n    );\n\n    componentAspect.registerShowFragments([\n      new DependenciesFragment(dependencyResolver),\n      new DevDependenciesFragment(dependencyResolver),\n      new PeerDependenciesFragment(dependencyResolver),\n    ]);\n    // TODO: solve this generics issue and remove the ts-ignore\n    // @ts-ignore\n    dependencyResolver.registerDependencyFactories([new ComponentDependencyFactory(componentAspect)]);\n\n    DependencyResolver.getDepResolverAspectName = () => DependencyResolverAspect.id;\n\n    LegacyComponent.registerOnComponentOverridesLoading(\n      DependencyResolverAspect.id,\n      async (configuredExtensions: ExtensionDataList) => {\n        const policy = await dependencyResolver.mergeVariantPolicies(configuredExtensions);\n        return policy.toLegacyDepsOverrides();\n      }\n    );\n    DependencyResolver.registerWorkspacePolicyGetter(() => {\n      const workspacePolicy = dependencyResolver.getWorkspacePolicy();\n      return workspacePolicy.toManifest();\n    });\n    DependencyResolver.registerHarmonyEnvPeersPolicyForComponentGetter(\n      async (configuredExtensions: ExtensionDataList) => {\n        const envPolicy = await dependencyResolver.getComponentEnvPolicyFromExtension(configuredExtensions);\n        return envPolicy.peersAutoDetectPolicy.toNameSupportedRangeMap();\n      }\n    );\n    DependencyResolver.registerHarmonyEnvPeersPolicyForEnvItselfGetter(async (id: BitId) => {\n      const envPolicy = await dependencyResolver.getEnvPolicyFromEnvLegacyId(id);\n      if (!envPolicy) return undefined;\n      return envPolicy.peersAutoDetectPolicy.toVersionManifest();\n    });\n    aspectLoader.registerOnLoadRequireableExtensionSlot(\n      dependencyResolver.onLoadRequireableExtensionSubscriber.bind(dependencyResolver)\n    );\n\n    graphql.register(dependencyResolverSchema(dependencyResolver));\n    envs.registerService(new DependenciesService());\n\n    return dependencyResolver;\n  }\n\n  getEmptyDepsObject(): ManifestDependenciesObject {\n    return {\n      dependencies: {},\n      devDependencies: {},\n      peerDependencies: {},\n    };\n  }\n\n  /**\n   * Returns a list of target locations where that given component was hard linked to.\n   *\n   * @param rootDir - The root directory of the workspace\n   * @param componentDir - Relative path to the component's directory\n   * @param packageName - The injected component's packageName\n   */\n  async getInjectedDirs(rootDir: string, componentDir: string, packageName: string): Promise<string[]> {\n    const packageManager = this.packageManagerSlot.get(this.config.packageManager);\n    if (typeof packageManager?.getInjectedDirs === 'function') {\n      return packageManager.getInjectedDirs(rootDir, componentDir, packageName);\n    }\n    return [];\n  }\n}\n\nDependencyResolverAspect.addRuntime(DependencyResolverMain);\n\nfunction repeatPrefix(originalSpec: string, newVersion: string): string {\n  switch (originalSpec[0]) {\n    case '~':\n    case '^':\n      return `${originalSpec[0]}${newVersion}`;\n    default:\n      return newVersion;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAGA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAGA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAMA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAkBA;EAAA;EAAA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"}