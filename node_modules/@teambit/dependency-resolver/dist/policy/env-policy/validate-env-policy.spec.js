"use strict";

function _validateEnvPolicy() {
  const data = require("./validate-env-policy");
  _validateEnvPolicy = function () {
    return data;
  };
  return data;
}
describe('validateEnvPolicy', () => {
  it('should throw an exception if peer supportedRange is empty', () => {
    expect(() => (0, _validateEnvPolicy().validateEnvPolicy)({
      peers: [{
        name: 'peer',
        supportedRange: ''
      }]
    })).toThrowError('Peer "peer" has an empty supportedRange');
  });
  it('should throw an exception if peer supportedRange is null', () => {
    expect(() => (0, _validateEnvPolicy().validateEnvPolicy)({
      peers: [{
        name: 'peer',
        supportedRange: null
      }]
    })).toThrowError('Peer "peer" has no supportedRange set');
  });
  it('should throw an exception if peer version is empty', () => {
    expect(() => (0, _validateEnvPolicy().validateEnvPolicy)({
      peers: [{
        name: 'peer',
        supportedRange: '1',
        version: ''
      }]
    })).toThrowError('Peer "peer" has an empty version');
  });
  it('should throw an exception if peer version is null', () => {
    expect(() => (0, _validateEnvPolicy().validateEnvPolicy)({
      peers: [{
        name: 'peer',
        supportedRange: '1',
        version: null
      }]
    })).toThrowError('Peer "peer" has no version set');
  });
});

//# sourceMappingURL=validate-env-policy.spec.js.map