{"version":3,"names":["PeersAutoDetectPolicy","constructor","_policiesEntries","uniqEntries","entries","length","names","map","e","name","find","matchedEntry","entry","sortByName","sorted","sortBy","hashNameVersion","toHash","version","join","sha1","filter","predicate","filtered","getDepVersion","depId","undefined","getDepSupportedRange","supportedRange","toNameSupportedRangeMap","reduce","acc","toVersionManifest","mergePolices","policies","allEntries","curr","concat","reverse","uniq","uniqWith","entry1","entry2"],"sources":["peers-auto-detect-policy.ts"],"sourcesContent":["import { sha1 } from '@teambit/legacy/dist/utils';\nimport { uniqWith, sortBy } from 'lodash';\nimport { SemverVersion } from '../policy';\n\nexport type EnvPolicyEntryVersion = SemverVersion;\nexport type EnvPolicyEntrySupportedRange = SemverVersion;\n\nexport type PeersAutoDetectPolicyEntry = {\n  name: string;\n  version: string;\n  supportedRange: string;\n};\n\nexport class PeersAutoDetectPolicy {\n  constructor(private _policiesEntries: PeersAutoDetectPolicyEntry[]) {\n    this._policiesEntries = uniqEntries(_policiesEntries);\n  }\n\n  get entries(): PeersAutoDetectPolicyEntry[] {\n    return this._policiesEntries;\n  }\n\n  get length(): number {\n    return this.entries.length;\n  }\n\n  get names(): string[] {\n    return this.entries.map((e) => e.name);\n  }\n\n  find(name: string): PeersAutoDetectPolicyEntry | undefined {\n    const matchedEntry = this.entries.find((entry) => entry.name === name);\n    return matchedEntry;\n  }\n\n  sortByName(): PeersAutoDetectPolicy {\n    const sorted = sortBy(this.entries, ['name']);\n    return new PeersAutoDetectPolicy(sorted);\n  }\n\n  /**\n   * Return a hash of all the peers names and their version\n   * This useful when you want to compare 2 envs\n   */\n  hashNameVersion(): string {\n    const sorted = this.sortByName();\n    const toHash = sorted.entries.map(({ name, version }) => `${name}::${version}`).join(':::');\n    return sha1(toHash);\n  }\n\n  filter(predicate: (dep: PeersAutoDetectPolicyEntry, index?: number) => boolean): PeersAutoDetectPolicy {\n    const filtered = this.entries.filter(predicate);\n    return new PeersAutoDetectPolicy(filtered);\n  }\n\n  getDepVersion(depId: string): EnvPolicyEntryVersion | undefined {\n    const entry = this.find(depId);\n    if (!entry) {\n      return undefined;\n    }\n    return entry.version;\n  }\n\n  getDepSupportedRange(depId: string): EnvPolicyEntrySupportedRange | undefined {\n    const entry = this.find(depId);\n    if (!entry) {\n      return undefined;\n    }\n    return entry.supportedRange;\n  }\n\n  toNameSupportedRangeMap(): { [name: string]: string } {\n    return this.entries.reduce((acc, entry) => {\n      acc[entry.name] = entry.supportedRange;\n      return acc;\n    }, {});\n  }\n\n  toVersionManifest(): { [name: string]: string } {\n    return this.entries.reduce((acc, entry) => {\n      acc[entry.name] = entry.version;\n      return acc;\n    }, {});\n  }\n\n  static mergePolices(policies: PeersAutoDetectPolicy[]): PeersAutoDetectPolicy {\n    let allEntries: PeersAutoDetectPolicyEntry[] = [];\n    allEntries = policies.reduce((acc, curr) => {\n      return acc.concat(curr.entries);\n    }, allEntries);\n    // We reverse it to make sure the latest policy will be stronger in case of conflict\n    allEntries = allEntries.reverse();\n    return new PeersAutoDetectPolicy(allEntries);\n  }\n}\n\nfunction uniqEntries(entries: Array<PeersAutoDetectPolicyEntry>): Array<PeersAutoDetectPolicyEntry> {\n  const uniq = uniqWith(entries, (entry1: PeersAutoDetectPolicyEntry, entry2: PeersAutoDetectPolicyEntry) => {\n    return entry1.name === entry2.name;\n  });\n  return uniq;\n}\n"],"mappings":"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"}