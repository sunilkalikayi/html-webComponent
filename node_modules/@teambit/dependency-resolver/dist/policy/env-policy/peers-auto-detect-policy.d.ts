import { SemverVersion } from '../policy';
export declare type EnvPolicyEntryVersion = SemverVersion;
export declare type EnvPolicyEntrySupportedRange = SemverVersion;
export declare type PeersAutoDetectPolicyEntry = {
    name: string;
    version: string;
    supportedRange: string;
};
export declare class PeersAutoDetectPolicy {
    private _policiesEntries;
    constructor(_policiesEntries: PeersAutoDetectPolicyEntry[]);
    get entries(): PeersAutoDetectPolicyEntry[];
    get length(): number;
    get names(): string[];
    find(name: string): PeersAutoDetectPolicyEntry | undefined;
    sortByName(): PeersAutoDetectPolicy;
    /**
     * Return a hash of all the peers names and their version
     * This useful when you want to compare 2 envs
     */
    hashNameVersion(): string;
    filter(predicate: (dep: PeersAutoDetectPolicyEntry, index?: number) => boolean): PeersAutoDetectPolicy;
    getDepVersion(depId: string): EnvPolicyEntryVersion | undefined;
    getDepSupportedRange(depId: string): EnvPolicyEntrySupportedRange | undefined;
    toNameSupportedRangeMap(): {
        [name: string]: string;
    };
    toVersionManifest(): {
        [name: string]: string;
    };
    static mergePolices(policies: PeersAutoDetectPolicy[]): PeersAutoDetectPolicy;
}
