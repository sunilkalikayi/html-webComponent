import { Policy, SemverVersion, GitUrlVersion, FileSystemPath, PolicyConfigKeys } from '../policy';
import { WorkspaceDependencyLifecycleType } from '../../dependencies';
export declare type WorkspacePolicyConfigKeys = Omit<PolicyConfigKeys, 'devDependencies'>;
export declare type WorkspacePolicyConfigKeysNames = keyof WorkspacePolicyConfigKeys;
export declare type WorkspacePolicyConfigObject = Partial<Record<WorkspacePolicyConfigKeysNames, WorkspacePolicyLifecycleConfigObject>>;
export declare type WorkspacePolicyManifest = Partial<Record<WorkspacePolicyConfigKeysNames, WorkspacePolicyLifecycleManifestObject>>;
export declare type WorkspacePolicyLifecycleConfigObject = {
    [dependencyId: string]: WorkspacePolicyConfigEntryValue;
};
declare type WorkspacePolicyLifecycleManifestObject = {
    [dependencyId: string]: WorkspacePolicyEntryVersion;
};
export declare type WorkspacePolicyConfigEntryValue = WorkspacePolicyEntryValue | WorkspacePolicyEntryVersion;
export declare type AddEntryOptions = {
    updateExisting: boolean;
};
/**
 * Allowed values are valid semver values, git urls, fs path.
 */
export declare type WorkspacePolicyEntryVersion = SemverVersion | GitUrlVersion | FileSystemPath;
export declare type WorkspacePolicyEntryValue = {
    version: WorkspacePolicyEntryVersion;
    preserve?: boolean;
};
export declare type WorkspacePolicyEntry = {
    dependencyId: string;
    lifecycleType: WorkspaceDependencyLifecycleType;
    value: WorkspacePolicyEntryValue;
};
export declare class WorkspacePolicy implements Policy<WorkspacePolicyConfigObject> {
    private _policiesEntries;
    constructor(_policiesEntries: WorkspacePolicyEntry[]);
    get entries(): WorkspacePolicyEntry[];
    add(entry: WorkspacePolicyEntry, options?: AddEntryOptions): void;
    forEach(predicate: (dep: WorkspacePolicyEntry, index?: number) => void): void;
    filter(predicate: (dep: WorkspacePolicyEntry, index?: number) => boolean): WorkspacePolicy;
    find(depId: string, lifecycleType?: WorkspaceDependencyLifecycleType): WorkspacePolicyEntry | undefined;
    remove(depIds: string[]): WorkspacePolicy;
    getDepVersion(depId: string, lifecycleType?: WorkspaceDependencyLifecycleType): WorkspacePolicyEntryVersion | undefined;
    getValidSemverDepVersion(depId: string, lifecycleType?: WorkspaceDependencyLifecycleType): WorkspacePolicyEntryVersion | undefined;
    toConfigObject(): WorkspacePolicyConfigObject;
    /**
     * Create an object ready for package manager installation
     * this is similar to "toConfigObject" but it will make the value of a specific dep always a string (the version / url)
     */
    toManifest(): WorkspacePolicyManifest;
    byLifecycleType(lifecycleType: WorkspaceDependencyLifecycleType): WorkspacePolicy;
    static mergePolices(policies: WorkspacePolicy[]): WorkspacePolicy;
}
export {};
