"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WorkspacePolicyFactory = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _workspacePolicy() {
  const data = require("./workspace-policy");
  _workspacePolicy = function () {
    return data;
  };
  return data;
}
function _dependencies() {
  const data = require("../../dependencies");
  _dependencies = function () {
    return data;
  };
  return data;
}
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
class WorkspacePolicyFactory {
  fromConfigObject(configObject) {
    if (!configObject) {
      return new (_workspacePolicy().WorkspacePolicy)([]);
    }
    const runtimeEntries = entriesFromKey(configObject, 'dependencies');
    const peerEntries = entriesFromKey(configObject, 'peerDependencies');
    const entries = runtimeEntries.concat(peerEntries);
    return new (_workspacePolicy().WorkspacePolicy)(entries);
  }
  fromPackageJson(packageJson) {
    const obj = {
      dependencies: _objectSpread(_objectSpread({}, packageJson.devDependencies || {}), packageJson.dependencies || {}),
      peerDependencies: _objectSpread({}, packageJson.peerDependencies || {})
    };
    return this.fromConfigObject(obj);
  }
}
exports.WorkspacePolicyFactory = WorkspacePolicyFactory;
function entriesFromKey(configObject, keyName) {
  const obj = configObject[keyName];
  if (!obj) {
    return [];
  }
  const lifecycleType = _dependencies().LIFECYCLE_TYPE_BY_KEY_NAME[keyName];
  const entries = Object.entries(obj).map(([depId, value]) => {
    return createEntry(depId, value, lifecycleType);
  });
  return entries;
}
function createEntry(depId, value, lifecycleType) {
  const version = typeof value === 'string' ? value : value.version;
  const preserve = typeof value === 'string' ? false : value.preserve;
  const entryValue = {
    version,
    preserve
  };
  const entry = {
    dependencyId: depId,
    value: entryValue,
    lifecycleType
  };
  return entry;
}

//# sourceMappingURL=workspace-policy-factory.js.map