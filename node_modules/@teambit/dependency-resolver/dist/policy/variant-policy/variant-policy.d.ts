import { DependenciesOverridesData } from '@teambit/legacy/dist/consumer/config/component-overrides';
import { Policy, PolicyConfigKeys, PolicyEntry, SemverVersion } from '../policy';
import { DependencyLifecycleType } from '../../dependencies';
export declare type VariantPolicyConfigObject = Partial<Record<keyof PolicyConfigKeys, VariantPolicyLifecycleConfigObject>>;
declare type VariantPolicyLifecycleConfigObject = {
    [dependencyId: string]: VariantPolicyConfigEntryValue;
};
export declare type VariantPolicyConfigEntryValue = VariantPolicyEntryValue | VariantPolicyEntryVersion;
/**
 * Allowed values are valid semver values, git urls, fs path.
 */
export declare type VariantPolicyEntryVersion = SemverVersion;
export declare type VariantPolicyEntryValue = {
    version: VariantPolicyEntryVersion;
    resolveFromEnv?: boolean;
};
export declare type DependencySource = 'auto' | 'env' | 'slots' | 'config';
export declare type VariantPolicyEntry = PolicyEntry & {
    value: VariantPolicyEntryValue;
    source?: DependencySource;
};
export declare type SerializedVariantPolicyEntry = VariantPolicyEntry;
export declare type SerializedVariantPolicy = SerializedVariantPolicyEntry[];
export declare class VariantPolicy implements Policy<VariantPolicyConfigObject> {
    private _policiesEntries;
    constructor(_policiesEntries: VariantPolicyEntry[]);
    get entries(): VariantPolicyEntry[];
    get names(): string[];
    get length(): number;
    find(depId: string, lifecycleType?: DependencyLifecycleType): VariantPolicyEntry | undefined;
    byLifecycleType(lifecycleType: DependencyLifecycleType): VariantPolicy;
    sortByName(): VariantPolicy;
    /**
     * Return a hash of all the peers names and their version
     * This useful when you want to compare 2 envs
     */
    hashNameVersion(): string;
    filter(predicate: (dep: VariantPolicyEntry, index?: number) => boolean): VariantPolicy;
    /**
     * Filter only deps which should be resolved from the env
     */
    getResolvedFromEnv(): VariantPolicy;
    getDepVersion(depId: string, lifecycleType?: DependencyLifecycleType): VariantPolicyEntryVersion | undefined;
    getValidSemverDepVersion(depId: string, lifecycleType?: DependencyLifecycleType): VariantPolicyEntryVersion | undefined;
    serialize(): SerializedVariantPolicy;
    toConfigObject(): VariantPolicyConfigObject;
    toLegacyDepsOverrides(): DependenciesOverridesData;
    static mergePolices(policies: VariantPolicy[]): VariantPolicy;
}
export {};
