{"version":3,"names":["VariantPolicyFactory","fromConfigObject","configObject","source","runtimeEntries","entriesFromKey","devEntries","peerEntries","entries","concat","VariantPolicy","parse","serializedEntries","getEmpty","keyName","obj","lifecycleType","LIFECYCLE_TYPE_BY_KEY_NAME","Object","map","depId","value","createEntry","version","resolveFromEnv","entryValue","entry","dependencyId"],"sources":["variant-policy-factory.ts"],"sourcesContent":["import { PolicyConfigKeysNames } from '../policy';\nimport {\n  VariantPolicy,\n  VariantPolicyConfigObject,\n  VariantPolicyEntryValue,\n  VariantPolicyEntry,\n  VariantPolicyConfigEntryValue,\n  SerializedVariantPolicy,\n  DependencySource,\n} from './variant-policy';\nimport { LIFECYCLE_TYPE_BY_KEY_NAME, DependencyLifecycleType } from '../../dependencies';\n\nexport class VariantPolicyFactory {\n  fromConfigObject(configObject, source?: DependencySource): VariantPolicy {\n    const runtimeEntries = entriesFromKey(configObject, 'dependencies', source);\n    const devEntries = entriesFromKey(configObject, 'devDependencies', source);\n    const peerEntries = entriesFromKey(configObject, 'peerDependencies', source);\n    const entries = runtimeEntries.concat(devEntries).concat(peerEntries);\n    return new VariantPolicy(entries);\n  }\n\n  parse(serializedEntries: SerializedVariantPolicy) {\n    return new VariantPolicy(serializedEntries);\n  }\n\n  getEmpty(): VariantPolicy {\n    return new VariantPolicy([]);\n  }\n}\n\nfunction entriesFromKey(\n  configObject: VariantPolicyConfigObject,\n  keyName: PolicyConfigKeysNames,\n  source?: DependencySource\n): VariantPolicyEntry[] {\n  const obj = configObject[keyName];\n  if (!obj) {\n    return [];\n  }\n  const lifecycleType = LIFECYCLE_TYPE_BY_KEY_NAME[keyName];\n  const entries = Object.entries(obj).map(([depId, value]: [string, VariantPolicyConfigEntryValue]) => {\n    return createEntry(depId, value, lifecycleType, source);\n  });\n  return entries;\n}\n\nfunction createEntry(\n  depId: string,\n  value: VariantPolicyConfigEntryValue,\n  lifecycleType: DependencyLifecycleType,\n  source?: DependencySource\n): VariantPolicyEntry {\n  const version = typeof value === 'string' ? value : value.version;\n  const resolveFromEnv = typeof value === 'string' ? false : value.resolveFromEnv;\n\n  const entryValue: VariantPolicyEntryValue = {\n    version,\n    resolveFromEnv,\n  };\n  const entry: VariantPolicyEntry = {\n    dependencyId: depId,\n    value: entryValue,\n    lifecycleType,\n    source,\n  };\n  return entry;\n}\n"],"mappings":";;;;;;;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AASA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEO,MAAMA,oBAAoB,CAAC;EAChCC,gBAAgB,CAACC,YAAY,EAAEC,MAAyB,EAAiB;IACvE,MAAMC,cAAc,GAAGC,cAAc,CAACH,YAAY,EAAE,cAAc,EAAEC,MAAM,CAAC;IAC3E,MAAMG,UAAU,GAAGD,cAAc,CAACH,YAAY,EAAE,iBAAiB,EAAEC,MAAM,CAAC;IAC1E,MAAMI,WAAW,GAAGF,cAAc,CAACH,YAAY,EAAE,kBAAkB,EAAEC,MAAM,CAAC;IAC5E,MAAMK,OAAO,GAAGJ,cAAc,CAACK,MAAM,CAACH,UAAU,CAAC,CAACG,MAAM,CAACF,WAAW,CAAC;IACrE,OAAO,KAAIG,8BAAa,EAACF,OAAO,CAAC;EACnC;EAEAG,KAAK,CAACC,iBAA0C,EAAE;IAChD,OAAO,KAAIF,8BAAa,EAACE,iBAAiB,CAAC;EAC7C;EAEAC,QAAQ,GAAkB;IACxB,OAAO,KAAIH,8BAAa,EAAC,EAAE,CAAC;EAC9B;AACF;AAAC;AAED,SAASL,cAAc,CACrBH,YAAuC,EACvCY,OAA8B,EAC9BX,MAAyB,EACH;EACtB,MAAMY,GAAG,GAAGb,YAAY,CAACY,OAAO,CAAC;EACjC,IAAI,CAACC,GAAG,EAAE;IACR,OAAO,EAAE;EACX;EACA,MAAMC,aAAa,GAAGC,0CAA0B,CAACH,OAAO,CAAC;EACzD,MAAMN,OAAO,GAAGU,MAAM,CAACV,OAAO,CAACO,GAAG,CAAC,CAACI,GAAG,CAAC,CAAC,CAACC,KAAK,EAAEC,KAAK,CAA0C,KAAK;IACnG,OAAOC,WAAW,CAACF,KAAK,EAAEC,KAAK,EAAEL,aAAa,EAAEb,MAAM,CAAC;EACzD,CAAC,CAAC;EACF,OAAOK,OAAO;AAChB;AAEA,SAASc,WAAW,CAClBF,KAAa,EACbC,KAAoC,EACpCL,aAAsC,EACtCb,MAAyB,EACL;EACpB,MAAMoB,OAAO,GAAG,OAAOF,KAAK,KAAK,QAAQ,GAAGA,KAAK,GAAGA,KAAK,CAACE,OAAO;EACjE,MAAMC,cAAc,GAAG,OAAOH,KAAK,KAAK,QAAQ,GAAG,KAAK,GAAGA,KAAK,CAACG,cAAc;EAE/E,MAAMC,UAAmC,GAAG;IAC1CF,OAAO;IACPC;EACF,CAAC;EACD,MAAME,KAAyB,GAAG;IAChCC,YAAY,EAAEP,KAAK;IACnBC,KAAK,EAAEI,UAAU;IACjBT,aAAa;IACbb;EACF,CAAC;EACD,OAAOuB,KAAK;AACd"}