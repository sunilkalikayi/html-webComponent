"use strict";

require("core-js/modules/es.array.iterator.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VariantPolicyFactory = void 0;
function _variantPolicy() {
  const data = require("./variant-policy");
  _variantPolicy = function () {
    return data;
  };
  return data;
}
function _dependencies() {
  const data = require("../../dependencies");
  _dependencies = function () {
    return data;
  };
  return data;
}
class VariantPolicyFactory {
  fromConfigObject(configObject, source) {
    const runtimeEntries = entriesFromKey(configObject, 'dependencies', source);
    const devEntries = entriesFromKey(configObject, 'devDependencies', source);
    const peerEntries = entriesFromKey(configObject, 'peerDependencies', source);
    const entries = runtimeEntries.concat(devEntries).concat(peerEntries);
    return new (_variantPolicy().VariantPolicy)(entries);
  }
  parse(serializedEntries) {
    return new (_variantPolicy().VariantPolicy)(serializedEntries);
  }
  getEmpty() {
    return new (_variantPolicy().VariantPolicy)([]);
  }
}
exports.VariantPolicyFactory = VariantPolicyFactory;
function entriesFromKey(configObject, keyName, source) {
  const obj = configObject[keyName];
  if (!obj) {
    return [];
  }
  const lifecycleType = _dependencies().LIFECYCLE_TYPE_BY_KEY_NAME[keyName];
  const entries = Object.entries(obj).map(([depId, value]) => {
    return createEntry(depId, value, lifecycleType, source);
  });
  return entries;
}
function createEntry(depId, value, lifecycleType, source) {
  const version = typeof value === 'string' ? value : value.version;
  const resolveFromEnv = typeof value === 'string' ? false : value.resolveFromEnv;
  const entryValue = {
    version,
    resolveFromEnv
  };
  const entry = {
    dependencyId: depId,
    value: entryValue,
    lifecycleType,
    source
  };
  return entry;
}

//# sourceMappingURL=variant-policy-factory.js.map