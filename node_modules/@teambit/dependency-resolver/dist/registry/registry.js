"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Registry = void 0;
function _http() {
  const data = require("@teambit/legacy/dist/scope/network/http/http");
  _http = function () {
    return data;
  };
  return data;
}
class Registry {
  constructor(
  /**
   * uri of the registry.
   */
  uri,
  /**
   * always authenticate.
   */
  alwaysAuth,
  /**
   * authentication header.
   */
  authHeaderValue,
  /**
   * Type of auth as it appears in the npmrc file
   * authToken
   * auth
   * user-pass
   */
  originalAuthType,
  /**
   * original auth value as it appears in npmrc file
   * for user/pass it will appear as user:pass
   */
  originalAuthValue) {
    this.uri = uri;
    this.alwaysAuth = alwaysAuth;
    this.authHeaderValue = authHeaderValue;
    this.originalAuthType = originalAuthType;
    this.originalAuthValue = originalAuthValue;
  }
  get token() {
    const authData = (0, _http().getAuthDataFromHeader)(this.authHeaderValue);
    return authData && authData.type === 'Bearer' ? authData.credentials : undefined;
  }

  /**
   * Support for basic token or user/pass
   */
  get baseToken() {
    const authData = (0, _http().getAuthDataFromHeader)(this.authHeaderValue);
    return authData && authData.type === 'Basic' ? authData.credentials : undefined;
  }
}
exports.Registry = Registry;

//# sourceMappingURL=registry.js.map