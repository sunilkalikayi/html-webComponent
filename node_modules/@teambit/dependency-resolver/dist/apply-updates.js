"use strict";

require("core-js/modules/es.array.iterator.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.applyUpdates = applyUpdates;
/**
 * Applies updates to policies.
 */
function applyUpdates(outdatedPkgs, {
  variantPoliciesByPatterns,
  componentPoliciesById
}) {
  const updatedWorkspacePolicyEntries = [];
  const updatedVariants = new Set();
  const updatedComponents = new Set();
  for (const outdatedPkg of outdatedPkgs) {
    switch (outdatedPkg.source) {
      case 'rootPolicy':
      case 'component-model':
        updatedWorkspacePolicyEntries.push({
          dependencyId: outdatedPkg.name,
          value: {
            version: outdatedPkg.latestRange
          },
          lifecycleType: outdatedPkg.targetField === 'peerDependencies' ? 'peer' : 'runtime'
        });
        break;
      case 'variants':
        if (outdatedPkg.variantPattern) {
          var _variantPoliciesByPat, _variantPoliciesByPat2, _variantPoliciesByPat3;
          const {
            variantPattern,
            targetField,
            name
          } = outdatedPkg;
          updatedVariants.add(outdatedPkg.variantPattern);
          // eslint-disable-next-line dot-notation
          if ((_variantPoliciesByPat = variantPoliciesByPatterns[variantPattern]) !== null && _variantPoliciesByPat !== void 0 && (_variantPoliciesByPat2 = _variantPoliciesByPat[targetField]) !== null && _variantPoliciesByPat2 !== void 0 && (_variantPoliciesByPat3 = _variantPoliciesByPat2[name]) !== null && _variantPoliciesByPat3 !== void 0 && _variantPoliciesByPat3['version']) {
            // eslint-disable-line
            variantPoliciesByPatterns[variantPattern][targetField][name]['version'] = outdatedPkg.latestRange; // eslint-disable-line
          } else {
            variantPoliciesByPatterns[variantPattern][targetField][name] = outdatedPkg.latestRange; // eslint-disable-line
          }
        }

        break;
      case 'component':
        if (outdatedPkg.componentId) {
          updatedComponents.add(outdatedPkg.componentId);
          if (componentPoliciesById[outdatedPkg.componentId][outdatedPkg.targetField][outdatedPkg.name].version) {
            componentPoliciesById[outdatedPkg.componentId][outdatedPkg.targetField][outdatedPkg.name].version = outdatedPkg.latestRange;
          } else {
            componentPoliciesById[outdatedPkg.componentId][outdatedPkg.targetField][outdatedPkg.name] = outdatedPkg.latestRange;
          }
        }
        break;
      default:
        throw new Error(`Unsupported policy source for update: ${outdatedPkg.source}`);
    }
  }
  return {
    updatedVariants: Array.from(updatedVariants),
    updatedComponents: Array.from(updatedComponents),
    updatedWorkspacePolicyEntries
  };
}

//# sourceMappingURL=apply-updates.js.map