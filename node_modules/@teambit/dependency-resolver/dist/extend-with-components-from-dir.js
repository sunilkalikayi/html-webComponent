"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extendWithComponentsFromDir = extendWithComponentsFromDir;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));
  _fsExtra = function () {
    return data;
  };
  return data;
}
function _path() {
  const data = _interopRequireDefault(require("path"));
  _path = function () {
    return data;
  };
  return data;
}
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
/**
 * Currently, the same capsule directory is used multiple times during installation.
 * The issue is that the state between installations is not preserved,
 * so the node_modules directory gets broken on each sunseqent install.
 * This function is for finding all components in the root of the capsule and reading their manifests.
 * This way the package manager will have all the necessary information to keep the node_modules directory
 * in the correct state.
 */
async function extendWithComponentsFromDir(rootDir, manifestsByPaths) {
  const files = await _fsExtra().default.readdir(rootDir, {
    withFileTypes: true
  });
  const newManifestsByPaths = _objectSpread({}, manifestsByPaths);
  await Promise.all(files.filter(file => file.isDirectory() && file.name !== 'node_modules').map(dir => _path().default.join(rootDir, dir.name)).filter(dirPath => !manifestsByPaths[dirPath]).map(async dirPath => {
    try {
      newManifestsByPaths[dirPath] = await _fsExtra().default.readJson(_path().default.join(dirPath, 'package.json'));
    } catch (err) {
      if (err.code !== 'ENOENT') throw err;
    }
  }));
  return newManifestsByPaths;
}

//# sourceMappingURL=extend-with-components-from-dir.js.map