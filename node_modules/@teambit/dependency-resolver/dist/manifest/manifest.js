"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Manifest = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
// export type ManifestDependenciesKeys = 'dependencies' | 'devDependencies' | 'peerDependencies';

class Manifest {
  constructor(name, version, dependencies) {
    this.name = name;
    this.version = version;
    this.dependencies = dependencies;
  }

  // Should be implemented on sub classes
  // get dir(): string {
  //   throw new GeneralError('not implemented');
  // }

  toJson(options = {}) {
    let dependencies = this.dependencies.dependencies || {};
    const devDependencies = this.dependencies.devDependencies || {};
    const peerDependencies = this.dependencies.peerDependencies || {};
    if (options.copyPeerToRuntime) {
      dependencies = _objectSpread(_objectSpread({}, peerDependencies), dependencies);
    }
    const manifest = {
      name: this.name,
      version: this.version.version,
      dependencies,
      devDependencies,
      peerDependencies
    };
    // if (options.includeDir) {
    //   return {
    //     rootDir: this.dir,
    //     manifest,
    //   };
    // }
    return manifest;
  }
}
exports.Manifest = Manifest;

//# sourceMappingURL=manifest.js.map