import { ManifestDependenciesKeysNames } from '../manifest';
import { DependencyLifecycleType, SemverVersion, PackageName } from '../../dependencies';
import { ComponentDependenciesMap } from '../workspace-manifest-factory';
import { WorkspacePolicy } from '../../policy';
export declare type PackageNameIndexItem = {
    metadata: PackageNameIndexItemMetadata;
    componentItems: PackageNameIndexComponentItem[];
};
export declare type PackageNameIndexItemMetadata = {
    preservedVersion?: string;
    preservedLifecycleType?: DependencyLifecycleType;
};
export declare type PackageNameIndexComponentItem = {
    range: SemverVersion;
    origin: PackageName;
    lifecycleType: DependencyLifecycleType;
};
export declare type PackageNameIndex = Map<PackageName, PackageNameIndexItem>;
/**
 * This will get the map of dependencies for each component and will create a new index with the dependencyId (package name) as key
 * and all components / ranges as value
 * It used as a pre processing as part of the deduping process
 *
 * @param {ComponentDependenciesMap} componentDependenciesMap
 * @returns {PackageNameIndex}
 */
export declare function indexByDepId(rootPolicy: WorkspacePolicy, componentDependenciesMap: ComponentDependenciesMap, hoistedDepFields?: ManifestDependenciesKeysNames[]): PackageNameIndex;
