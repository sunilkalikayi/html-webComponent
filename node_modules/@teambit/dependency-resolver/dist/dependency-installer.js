"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DependencyInstaller = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _pMapSeries() {
  const data = _interopRequireDefault(require("p-map-series"));
  _pMapSeries = function () {
    return data;
  };
  return data;
}
function _path() {
  const data = _interopRequireDefault(require("path"));
  _path = function () {
    return data;
  };
  return data;
}
function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));
  _fsExtra = function () {
    return data;
  };
  return data;
}
function _lodash() {
  const data = require("lodash");
  _lodash = function () {
    return data;
  };
  return data;
}
function _exceptions() {
  const data = require("./exceptions");
  _exceptions = function () {
    return data;
  };
  return data;
}
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
const DEFAULT_PM_INSTALL_OPTIONS = {
  dedupe: true,
  copyPeerToRuntimeOnRoot: true,
  copyPeerToRuntimeOnComponents: false,
  installPeersFromEnvs: false
};
const DEFAULT_INSTALL_OPTIONS = {
  installTeambitBit: false
};
class DependencyInstaller {
  constructor(
  /**
   * package manager instance.
   */
  packageManager, aspectLoader, logger, dependencyResolver, rootDir, cacheRootDir, preInstallSubscriberList, postInstallSubscriberList, nodeLinker, packageImportMethod, sideEffectsCache, nodeVersion, engineStrict, peerDependencyRules) {
    this.packageManager = packageManager;
    this.aspectLoader = aspectLoader;
    this.logger = logger;
    this.dependencyResolver = dependencyResolver;
    this.rootDir = rootDir;
    this.cacheRootDir = cacheRootDir;
    this.preInstallSubscriberList = preInstallSubscriberList;
    this.postInstallSubscriberList = postInstallSubscriberList;
    this.nodeLinker = nodeLinker;
    this.packageImportMethod = packageImportMethod;
    this.sideEffectsCache = sideEffectsCache;
    this.nodeVersion = nodeVersion;
    this.engineStrict = engineStrict;
    this.peerDependencyRules = peerDependencyRules;
  }
  async install(rootDir, rootPolicy, componentDirectoryMap, options = DEFAULT_INSTALL_OPTIONS, packageManagerOptions = DEFAULT_PM_INSTALL_OPTIONS) {
    const finalRootDir = rootDir !== null && rootDir !== void 0 ? rootDir : this.rootDir;
    if (!finalRootDir) {
      throw new (_exceptions().RootDirNotDefined)();
    }
    const manifests = await this.getComponentManifests(_objectSpread(_objectSpread({}, packageManagerOptions), {}, {
      componentDirectoryMap,
      rootPolicy,
      rootDir: finalRootDir
    }));
    return this.installComponents(finalRootDir, manifests, rootPolicy, componentDirectoryMap, options, packageManagerOptions);
  }
  async installComponents(rootDir, manifests, rootPolicy, componentDirectoryMap, options = DEFAULT_INSTALL_OPTIONS, packageManagerOptions = DEFAULT_PM_INSTALL_OPTIONS) {
    const args = {
      componentDirectoryMap,
      options,
      packageManagerOptions,
      rootDir,
      rootPolicy
    };
    await this.runPrePostSubscribers(this.preInstallSubscriberList, 'pre', args);
    const mainAspect = this.aspectLoader.mainAspect;
    const finalRootDir = rootDir || this.rootDir;
    if (!finalRootDir) {
      throw new (_exceptions().RootDirNotDefined)();
    }
    // Make sure to take other default if passed options with only one option
    const calculatedPmOpts = _objectSpread(_objectSpread({}, DEFAULT_PM_INSTALL_OPTIONS), {}, {
      cacheRootDir: this.cacheRootDir,
      nodeLinker: this.nodeLinker,
      packageImportMethod: this.packageImportMethod,
      sideEffectsCache: this.sideEffectsCache,
      nodeVersion: this.nodeVersion,
      engineStrict: this.engineStrict,
      packageManagerConfigRootDir: options.packageManagerConfigRootDir,
      peerDependencyRules: this.peerDependencyRules
    }, packageManagerOptions);
    if (options.installTeambitBit) {
      if (!mainAspect.version || !mainAspect.packageName) {
        throw new (_exceptions().MainAspectNotInstallable)();
      }
      const version = mainAspect.version;
      rootPolicy.add({
        dependencyId: mainAspect.packageName,
        lifecycleType: 'runtime',
        value: {
          version
        }
      });
    }
    if (!packageManagerOptions.rootComponents && !packageManagerOptions.keepExistingModulesDir) {
      // Remove node modules dir for all components dirs, since it might contain left overs from previous install.
      //
      // This is not needed when "rootComponents" are used, as in that case the package manager handles the node_modules
      // and it never leaves node_modules in a broken state.
      // Removing node_modules in that case would delete useful state information that is used by Yarn or pnpm.
      await this.cleanCompsNodeModules(componentDirectoryMap);
    }

    // TODO: the cache should be probably passed to the package manager constructor not to the install function
    await this.packageManager.install({
      rootDir: finalRootDir,
      manifests,
      componentDirectoryMap
    }, calculatedPmOpts);
    await this.runPrePostSubscribers(this.postInstallSubscriberList, 'post', args);
    return componentDirectoryMap;
  }

  /**
   * Compute all the component manifests (a.k.a. package.json files) that should be passed to the package manager
   * in order to install the dependencies.
   */
  async getComponentManifests({
    componentDirectoryMap,
    rootPolicy,
    rootDir,
    dedupe,
    dependencyFilterFn,
    copyPeerToRuntimeOnComponents,
    copyPeerToRuntimeOnRoot,
    installPeersFromEnvs
  }) {
    const options = {
      filterComponentsFromManifests: true,
      createManifestForComponentsWithoutDependencies: true,
      dedupe,
      dependencyFilterFn
    };
    const workspaceManifest = await this.dependencyResolver.getWorkspaceManifest(undefined, undefined, rootPolicy, rootDir, componentDirectoryMap.components, options);
    const manifests = componentDirectoryMap.toArray().reduce((acc, [component, dir]) => {
      const packageName = this.dependencyResolver.getPackageName(component);
      const manifest = workspaceManifest.componentsManifestsMap.get(packageName);
      if (manifest) {
        acc[dir] = manifest.toJson({
          copyPeerToRuntime: copyPeerToRuntimeOnComponents
        });
        acc[dir].defaultPeerDependencies = (0, _lodash().fromPairs)(manifest.envPolicy.peersAutoDetectPolicy.entries.map(({
          name,
          version
        }) => [name, version]));
      }
      return acc;
    }, {});
    if (!manifests[rootDir]) {
      manifests[rootDir] = workspaceManifest.toJson({
        copyPeerToRuntime: copyPeerToRuntimeOnRoot,
        installPeersFromEnvs
      });
    }
    return manifests;
  }
  async cleanCompsNodeModules(componentDirectoryMap) {
    const promises = componentDirectoryMap.toArray().map(([, dir]) => {
      const nmDir = _path().default.join(dir, 'node_modules');
      return _fsExtra().default.remove(nmDir);
    });
    return Promise.all(promises);
  }
  async runPrePostSubscribers(subscribers = [], type, args) {
    let message = 'running pre install subscribers';
    if (type === 'post') {
      message = 'running post install subscribers';
    }
    this.logger.setStatusLine(message);
    await (0, _pMapSeries().default)(subscribers, async subscriber => {
      return subscriber(this, args);
    });
    this.logger.consoleSuccess(message);
  }
}
exports.DependencyInstaller = DependencyInstaller;

//# sourceMappingURL=dependency-installer.js.map