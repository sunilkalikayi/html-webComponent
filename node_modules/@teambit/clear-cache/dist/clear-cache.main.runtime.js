"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ClearCacheMain = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _cli() {
  const data = require("@teambit/cli");
  _cli = function () {
    return data;
  };
  return data;
}
function _workspace() {
  const data = _interopRequireDefault(require("@teambit/workspace"));
  _workspace = function () {
    return data;
  };
  return data;
}
function _scope() {
  const data = _interopRequireDefault(require("@teambit/scope"));
  _scope = function () {
    return data;
  };
  return data;
}
function _consumer() {
  const data = require("@teambit/legacy/dist/api/consumer");
  _consumer = function () {
    return data;
  };
  return data;
}
function _action() {
  const data = require("@teambit/legacy/dist/api/scope/lib/action");
  _action = function () {
    return data;
  };
  return data;
}
function _community() {
  const data = require("@teambit/community");
  _community = function () {
    return data;
  };
  return data;
}
function _getRemoteByName() {
  const data = _interopRequireDefault(require("@teambit/legacy/dist/remotes/get-remote-by-name"));
  _getRemoteByName = function () {
    return data;
  };
  return data;
}
function _clearCacheCmd() {
  const data = _interopRequireDefault(require("./clear-cache-cmd"));
  _clearCacheCmd = function () {
    return data;
  };
  return data;
}
function _clearCache() {
  const data = require("./clear-cache.aspect");
  _clearCache = function () {
    return data;
  };
  return data;
}
function _clearCacheAction() {
  const data = require("./clear-cache-action");
  _clearCacheAction = function () {
    return data;
  };
  return data;
}
class ClearCacheMain {
  constructor(workspace) {
    this.workspace = workspace;
  }
  async clearCache() {
    return (0, _consumer().clearCache)();
  }
  async clearRemoteCache(remote) {
    var _this$workspace;
    const remoteObj = await (0, _getRemoteByName().default)(remote, (_this$workspace = this.workspace) === null || _this$workspace === void 0 ? void 0 : _this$workspace.consumer);
    const result = await remoteObj.action(_clearCacheAction().ClearCacheAction.name, {});
    return result;
  }
  static async provider([workspace, cli, scope, community]) {
    const clearCacheMain = new ClearCacheMain(workspace);
    cli.register(new (_clearCacheCmd().default)(clearCacheMain, community.getDocsDomain()));
    _action().ExternalActions.externalActions.push(new (_clearCacheAction().ClearCacheAction)(scope));
    return clearCacheMain;
  }
}
exports.ClearCacheMain = ClearCacheMain;
(0, _defineProperty2().default)(ClearCacheMain, "slots", []);
(0, _defineProperty2().default)(ClearCacheMain, "dependencies", [_workspace().default, _cli().CLIAspect, _scope().default, _community().CommunityAspect]);
(0, _defineProperty2().default)(ClearCacheMain, "runtime", _cli().MainRuntime);
_clearCache().ClearCacheAspect.addRuntime(ClearCacheMain);

//# sourceMappingURL=clear-cache.main.runtime.js.map