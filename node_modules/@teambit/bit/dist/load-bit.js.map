{"version":3,"names":["process","on","err","console","error","exit","nativeCompileCache","install","loadLegacyConfig","config","harmony","Harmony","load","ConfigAspect","ConfigRuntime","name","toObject","run","aspect","runtime","requireAspects","getConfig","cwd","consumerInfo","getConsumerInfo","scopePath","propagateUntil","globalConfigOpts","configOpts","global","shouldThrow","path","Config","attachVersionsFromBitmap","loadGlobal","hasBitMap","rawConfig","rawBitmap","BitMap","loadRawSync","parsedBitMap","json","parse","toString","undefined","_bit_lane","removeNonComponentFields","e","allBitmapIds","Object","keys","map","id","getBitIdFromComponentJson","bitMapBitIds","BitIds","fromArray","result","entries","reduce","acc","aspectId","aspectConfig","newAspectEntry","includes","VERSION_DELIMITER","manifestsMap","versionFromBitmap","getVersionFromBitMapIds","aspectBitId","BitId","Error","found","searchWithoutVersion","searchWithoutScopeAndVersion","hasVersion","version","dirPath","getAspectDistDir","files","readdir","runtimeFile","find","file","require","resolve","getMainAspect","mainAspectDir","getAspectDir","BitAspect","packageName","getCoreAspectPackageName","packageJson","getCoreAspectName","shouldLoadInSafeMode","currentCommand","argv","safeModeCommands","hasSafeModeFlag","isSafeModeCommand","loadBit","clearGlobalsIfNeeded","logger","info","join","registerCoreExtensions","configMap","verifyEngine","aspectsToLoad","CLIAspect","loadCLIOnly","push","MainRuntime","loader","start","aspectLoader","get","setCoreAspects","values","setMainAspect","registerCoreAspectsToLegacyDepResolver","bitConfig","engine","bitVersion","getHarmonyVersion","satisfies","msg","engineStrict","runCLI","cli","hasWorkspace","allCoreAspectsIds","getCoreAspectIds","coreAspectsPackagesAndIds","forEach","DependencyResolver","getCoreAspectsPackagesAndIds","loadConsumer","cache","PackageJsonTransformer","packageJsonTransformersRegistry","length","ComponentLoader","onComponentLoadSubscribers","ComponentOverrides","componentOverridesLoadingRegistry","ComponentConfig","componentConfigLegacyLoadingRegistry","componentConfigLoadingRegistry","getWorkspacePolicy","ManyComponentsWriter","externalInstaller","ExtensionDataList","coreExtensionsNames","Map","WorkspaceConfig","workspaceConfigEnsuringRegistry","workspaceConfigIsExistRegistry","workspaceConfigLoadingRegistry","ExternalActions","externalActions"],"sources":["load-bit.ts"],"sourcesContent":["/* eslint-disable import/no-dynamic-require */\n/* eslint-disable import/first */\nprocess.on('uncaughtException', (err) => {\n  // eslint-disable-next-line no-console\n  console.error('uncaughtException', err);\n  process.exit(1);\n});\n\nimport { nativeCompileCache } from '@teambit/toolbox.performance.v8-cache';\n\n// Enable v8 compile cache, keep this before other imports\nnativeCompileCache?.install();\n\n// needed for class-transformer package\nimport 'reflect-metadata';\n\nimport './hook-require';\n\nimport {\n  getAspectDir,\n  getAspectDistDir,\n  AspectLoaderMain,\n  getCoreAspectPackageName,\n  getCoreAspectName,\n} from '@teambit/aspect-loader';\nimport json from 'comment-json';\nimport { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport { ConfigAspect, ConfigRuntime } from '@teambit/config';\nimport { Harmony, RuntimeDefinition, Extension } from '@teambit/harmony';\n// TODO: expose this types from harmony (once we have a way to expose it only for node)\nimport { Config, ConfigOptions } from '@teambit/harmony/dist/harmony-config';\n\nimport { BitId, VERSION_DELIMITER } from '@teambit/legacy-bit-id';\nimport { DependencyResolver } from '@teambit/legacy/dist/consumer/component/dependencies/dependency-resolver';\nimport { getConsumerInfo, loadConsumer } from '@teambit/legacy/dist/consumer';\nimport { ConsumerInfo } from '@teambit/legacy/dist/consumer/consumer-locator';\nimport BitMap from '@teambit/legacy/dist/consumer/bit-map';\nimport ComponentLoader from '@teambit/legacy/dist/consumer/component/component-loader';\nimport ComponentConfig from '@teambit/legacy/dist/consumer/config/component-config';\nimport ComponentOverrides from '@teambit/legacy/dist/consumer/config/component-overrides';\nimport { PackageJsonTransformer } from '@teambit/legacy/dist/consumer/component/package-json-transformer';\nimport { satisfies } from 'semver';\nimport ManyComponentsWriter from '@teambit/legacy/dist/consumer/component-ops/many-components-writer';\nimport { getHarmonyVersion } from '@teambit/legacy/dist/bootstrap';\nimport { ExtensionDataList } from '@teambit/legacy/dist/consumer/config';\nimport WorkspaceConfig from '@teambit/legacy/dist/consumer/config/workspace-config';\nimport { BitIds } from '@teambit/legacy/dist/bit-id';\nimport { propogateUntil as propagateUntil } from '@teambit/legacy/dist/utils';\nimport logger from '@teambit/legacy/dist/logger/logger';\nimport { ExternalActions } from '@teambit/legacy/dist/api/scope/lib/action';\nimport loader from '@teambit/legacy/dist/cli/loader';\nimport { readdir } from 'fs-extra';\nimport { resolve } from 'path';\nimport { manifestsMap } from './manifests';\nimport { BitAspect } from './bit.aspect';\nimport { registerCoreExtensions } from './bit.main.runtime';\nimport { BitConfig } from './bit.provider';\n\nasync function loadLegacyConfig(config: any) {\n  const harmony = await Harmony.load([ConfigAspect], ConfigRuntime.name, config.toObject());\n  await harmony.run(async (aspect: Extension, runtime: RuntimeDefinition) => requireAspects(aspect, runtime));\n}\n\nasync function getConfig(cwd = process.cwd()) {\n  const consumerInfo = await getConsumerInfo(cwd);\n  const scopePath = propagateUntil(cwd);\n  const globalConfigOpts = {\n    name: '.bitrc.jsonc',\n  };\n  const configOpts: ConfigOptions = {\n    global: globalConfigOpts,\n    shouldThrow: false,\n    cwd: consumerInfo?.path || scopePath,\n  };\n\n  if (consumerInfo) {\n    const config = Config.load('workspace.jsonc', configOpts);\n    return attachVersionsFromBitmap(config, consumerInfo);\n  }\n\n  if (scopePath && !consumerInfo) {\n    return Config.load('scope.jsonc', configOpts);\n  }\n\n  return Config.loadGlobal(globalConfigOpts);\n}\n\n/**\n * This will attach versions of aspects configured in the config without version by resolves them from the bitmap file\n * It's required in order to support a usecase which you develop a local aspect and configure it in your workspace.jsonc\n * in that case you always want the workspace.jsonc config to be linked to your local aspect\n * but you don't want to change your workspace.jsonc version after each tag of the aspect\n * @param config\n */\nfunction attachVersionsFromBitmap(config: Config, consumerInfo: ConsumerInfo): Config {\n  if (!consumerInfo || !consumerInfo.hasBitMap) {\n    return config;\n  }\n  const rawConfig = config.toObject();\n  const rawBitmap = BitMap.loadRawSync(consumerInfo.path);\n  let parsedBitMap = {};\n  try {\n    parsedBitMap = rawBitmap ? json.parse(rawBitmap?.toString('utf8'), undefined, true) : {};\n    // @todo: remove this if statement once we don't need the migration of the bitmap file for lanes\n    // @ts-ignore\n    if (parsedBitMap?._bit_lane?.name) {\n      // backward compatibility. if \"_bit_land\" has the old format, then, later, when the bitmap is loaded again,\n      // it'll take care of the migration.\n      parsedBitMap = {};\n    }\n    BitMap.removeNonComponentFields(parsedBitMap);\n    // Do nothing here, invalid bitmaps will be handled later\n    // eslint-disable-next-line no-empty\n  } catch (e: any) {}\n  const allBitmapIds = Object.keys(parsedBitMap).map((id) => BitMap.getBitIdFromComponentJson(id, parsedBitMap[id]));\n  const bitMapBitIds = BitIds.fromArray(allBitmapIds);\n  const result = Object.entries(rawConfig).reduce((acc, [aspectId, aspectConfig]) => {\n    let newAspectEntry = aspectId;\n    // In case the id already has a version we don't want to get it from the bitmap\n    // We also don't want to add versions for core aspects\n    if (!aspectId.includes(VERSION_DELIMITER) && !manifestsMap[aspectId]) {\n      const versionFromBitmap = getVersionFromBitMapIds(bitMapBitIds, aspectId);\n      if (versionFromBitmap) {\n        newAspectEntry = `${aspectId}${VERSION_DELIMITER}${versionFromBitmap}`;\n      }\n    }\n    acc[newAspectEntry] = aspectConfig;\n    return acc;\n  }, {});\n  return new Config(result);\n}\n\nfunction getVersionFromBitMapIds(allBitmapIds: BitIds, aspectId: string): string | undefined {\n  let aspectBitId: BitId;\n  try {\n    aspectBitId = BitId.parse(aspectId, true);\n  } catch (err: any) {\n    throw new Error(\n      `unable to parse the component-id \"${aspectId}\" from the workspace.jsonc file, make sure this is a component id`\n    );\n  }\n  // start by searching id in the bitmap with exact match (including scope name)\n  // in case the aspect is not exported yet, it will be in the bitmap without a scope,\n  // while in the aspect id it will have the default scope\n  const found =\n    allBitmapIds.searchWithoutVersion(aspectBitId) || allBitmapIds.searchWithoutScopeAndVersion(aspectBitId);\n  return found && found.hasVersion() ? found.version : undefined;\n}\n\nexport async function requireAspects(aspect: Extension, runtime: RuntimeDefinition) {\n  const id = aspect.name;\n  if (!id) throw new Error('could not retrieve aspect id');\n  const dirPath = getAspectDistDir(id);\n  const files = await readdir(dirPath);\n  const runtimeFile = files.find((file) => file.includes(`.${runtime.name}.runtime.js`));\n  if (!runtimeFile) return;\n  // eslint-disable-next-line\n  require(resolve(`${dirPath}/${runtimeFile}`));\n}\n\nfunction getMainAspect() {\n  const mainAspectDir = getAspectDir(BitAspect.id);\n  let version: string | undefined;\n  const packageName = getCoreAspectPackageName(BitAspect.id);\n\n  try {\n    // eslint-disable-next-line global-require\n    const packageJson = require(`${mainAspectDir}/package.json`);\n    version = packageJson.version;\n  } catch (err: any) {\n    version = undefined;\n  }\n\n  return {\n    path: mainAspectDir,\n    version,\n    packageName,\n    aspect: BitAspect,\n    name: getCoreAspectName(BitAspect.id),\n    id: BitAspect.id,\n  };\n}\n\n/**\n * Bit may crush during the aspect loading phase or workspace/consumer initialization.\n * normally, this is the desired behavior, however, some commands are there to help overcome these\n * errors, such as \"bit clear-cache\". for these commands we're better off loading the bare minimum,\n * which is only the CLI aspect.\n *\n * at this stage we don't have the commands objects, so we can't check the command/flags from there\n * instead, we have to check the `process.argv.` directly instead, which is not 100% accurate.\n */\nfunction shouldLoadInSafeMode() {\n  const currentCommand = process.argv[2];\n  const safeModeCommands = [\n    'init',\n    'cat-scope',\n    'cat-object',\n    'cat-component',\n    'cmp',\n    'cat-lane',\n    'login',\n    'logout',\n    'config',\n    'remote',\n  ];\n  const hasSafeModeFlag = process.argv.includes('--safe-mode');\n  const isSafeModeCommand = safeModeCommands.includes(currentCommand);\n  return isSafeModeCommand || hasSafeModeFlag;\n}\n\nexport async function loadBit(path = process.cwd()) {\n  clearGlobalsIfNeeded();\n  logger.info(`*** Loading Bit *** argv:\\n${process.argv.join('\\n')}`);\n  const config = await getConfig(path);\n  registerCoreExtensions();\n  await loadLegacyConfig(config);\n  const configMap = config.toObject();\n  configMap[BitAspect.id] ||= {};\n  configMap[BitAspect.id].cwd = path;\n  verifyEngine(configMap[BitAspect.id]);\n\n  const aspectsToLoad = [CLIAspect];\n  const loadCLIOnly = shouldLoadInSafeMode();\n  if (!loadCLIOnly) {\n    aspectsToLoad.push(BitAspect);\n  }\n  const harmony = await Harmony.load(aspectsToLoad, MainRuntime.name, configMap);\n\n  await harmony.run(async (aspect: Extension, runtime: RuntimeDefinition) => requireAspects(aspect, runtime));\n  if (loadCLIOnly) return harmony;\n  loader.start('loading aspects...');\n  const aspectLoader = harmony.get<AspectLoaderMain>('teambit.harmony/aspect-loader');\n  aspectLoader.setCoreAspects(Object.values(manifestsMap));\n  aspectLoader.setMainAspect(getMainAspect());\n  registerCoreAspectsToLegacyDepResolver(aspectLoader);\n  return harmony;\n}\n\nfunction verifyEngine(bitConfig: BitConfig) {\n  if (!bitConfig.engine) {\n    return;\n  }\n  const bitVersion = getHarmonyVersion(true);\n  if (satisfies(bitVersion, bitConfig.engine)) {\n    return;\n  }\n  const msg = `your bit version \"${bitVersion}\" doesn't satisfies the required \"${bitConfig.engine}\" version`;\n  if (bitConfig.engineStrict) {\n    throw new Error(`error: ${msg}`);\n  }\n  logger.console(msg, 'warn', 'yellow');\n}\n\nexport async function runCLI() {\n  const harmony = await loadBit();\n  const cli = harmony.get<CLIMain>('teambit.harmony/cli');\n  let hasWorkspace = true;\n  try {\n    harmony.get('teambit.workspace/workspace');\n  } catch (err: any) {\n    hasWorkspace = false;\n  }\n  await cli.run(hasWorkspace);\n}\n\nfunction registerCoreAspectsToLegacyDepResolver(aspectLoader: AspectLoaderMain) {\n  const allCoreAspectsIds = aspectLoader.getCoreAspectIds();\n  const coreAspectsPackagesAndIds = {};\n\n  allCoreAspectsIds.forEach((id) => {\n    const packageName = getCoreAspectPackageName(id);\n    coreAspectsPackagesAndIds[packageName] = id;\n  });\n  // @ts-ignore\n  DependencyResolver.getCoreAspectsPackagesAndIds = () => coreAspectsPackagesAndIds;\n}\n\n/**\n * loadBit may gets called multiple times (currently, it's happening during e2e-tests that call loadBit).\n * when it happens, the static methods in this function still have the callbacks that were added in\n * the previous loadBit call. this callbacks have the old data such as workspace/bitmap/consumer\n * of the previous workspace, which leads to hard-to-debug issues.\n */\nfunction clearGlobalsIfNeeded() {\n  if (!loadConsumer.cache && !PackageJsonTransformer.packageJsonTransformersRegistry.length) {\n    return;\n  }\n  delete loadConsumer.cache;\n  ComponentLoader.onComponentLoadSubscribers = [];\n  ComponentOverrides.componentOverridesLoadingRegistry = {};\n  ComponentConfig.componentConfigLegacyLoadingRegistry = {};\n  ComponentConfig.componentConfigLoadingRegistry = {};\n  PackageJsonTransformer.packageJsonTransformersRegistry = [];\n  // @ts-ignore\n  DependencyResolver.getWorkspacePolicy = undefined;\n  // @ts-ignore\n  ManyComponentsWriter.externalInstaller = {};\n  ExtensionDataList.coreExtensionsNames = new Map();\n  // @ts-ignore\n  WorkspaceConfig.workspaceConfigEnsuringRegistry = undefined;\n  // @ts-ignore\n  WorkspaceConfig.workspaceConfigIsExistRegistry = undefined;\n  // @ts-ignore\n  WorkspaceConfig.workspaceConfigLoadingRegistry = undefined;\n  ExternalActions.externalActions = [];\n}\n"],"mappings":"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"}