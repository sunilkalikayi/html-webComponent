{"version":3,"names":["process","on","err","console","error","exit","nativeCompileCache","install","initApp","bootstrap","runCLI","originalError","handleErrorAndExit","argv"],"sources":["app.ts"],"sourcesContent":["/* eslint-disable import/no-dynamic-require */\n/* eslint-disable import/first */\nprocess.on('uncaughtException', (err) => {\n  // eslint-disable-next-line no-console\n  console.error('uncaughtException', err);\n  process.exit(1);\n});\n\nimport { nativeCompileCache } from '@teambit/toolbox.performance.v8-cache';\n\n// Enable v8 compile cache, keep this before other imports\nnativeCompileCache?.install();\n\nimport './hook-require';\nimport { bootstrap } from '@teambit/legacy/dist/bootstrap';\nimport { handleErrorAndExit } from '@teambit/legacy/dist/cli/handle-errors';\nimport { runCLI } from './load-bit';\n\n// eslint-disable-next-line @typescript-eslint/no-floating-promises\ninitApp();\n\nasync function initApp() {\n  try {\n    await bootstrap();\n    // registerCoreExtensions();\n    // const harmony = await Harmony.load([ConfigExt], {});\n    await runCLI();\n  } catch (err: any) {\n    const originalError = err.originalError || err;\n    await handleErrorAndExit(originalError, process.argv[2]);\n  }\n}\n"],"mappings":";;;AAQA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAKA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAhBA;AACA;AACAA,OAAO,CAACC,EAAE,CAAC,mBAAmB,EAAGC,GAAG,IAAK;EACvC;EACAC,OAAO,CAACC,KAAK,CAAC,mBAAmB,EAAEF,GAAG,CAAC;EACvCF,OAAO,CAACK,IAAI,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC;AAIF;AACAC,wCAAkB,aAAlBA,wCAAkB,uBAAlBA,wCAAkB,CAAEC,OAAO,EAAE;AAO7B;AACAC,OAAO,EAAE;AAET,eAAeA,OAAO,GAAG;EACvB,IAAI;IACF,MAAM,IAAAC,sBAAS,GAAE;IACjB;IACA;IACA,MAAM,IAAAC,iBAAM,GAAE;EAChB,CAAC,CAAC,OAAOR,GAAQ,EAAE;IACjB,MAAMS,aAAa,GAAGT,GAAG,CAACS,aAAa,IAAIT,GAAG;IAC9C,MAAM,IAAAU,kCAAkB,EAACD,aAAa,EAAEX,OAAO,CAACa,IAAI,CAAC,CAAC,CAAC,CAAC;EAC1D;AACF"}