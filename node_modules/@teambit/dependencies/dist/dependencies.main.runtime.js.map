{"version":3,"names":["DependenciesMain","constructor","workspace","dependencyResolver","setDependency","componentPattern","packages","options","compIds","idsByPattern","getDepField","dev","peer","packagesObj","Promise","all","map","pkg","name","version","getPackageNameAndVerResolved","config","policy","compId","addSpecificComponentConfig","DependencyResolverAspect","id","bitMap","write","changedComps","toStringWithoutVersion","addedPackages","removeDependency","results","component","get","depList","getDependencies","currentDepResolverConfig","getSpecificComponentConfig","newDepResolverConfig","cloneDeep","removedPackagesWithNulls","pMapSeries","splitPkgToNameAndVer","dependency","findByPkgNameOrCompId","depField","KEY_NAME_BY_LIFECYCLE_TYPE","lifecycle","depName","getPackageName","existsInSpecificConfig","set","removedPackages","compact","length","resolveLatest","pkgName","versionResolver","getVersionResolver","resolved","resolveRemoteVersion","rootDir","Error","versionResolved","packageSplit","split","startsWith","provider","cli","depsResolver","depsMain","depsCmd","DependenciesCmd","commands","DependenciesGetCmd","DependenciesRemoveCmd","DependenciesDebugCmd","DependenciesSetCmd","register","CLIAspect","WorkspaceAspect","MainRuntime","DependenciesAspect","addRuntime"],"sources":["dependencies.main.runtime.ts"],"sourcesContent":["import { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport { ComponentID } from '@teambit/component-id';\nimport {\n  DependencyResolverAspect,\n  DependencyResolverMain,\n  KEY_NAME_BY_LIFECYCLE_TYPE,\n} from '@teambit/dependency-resolver';\nimport WorkspaceAspect, { Workspace } from '@teambit/workspace';\nimport { cloneDeep, compact, set } from 'lodash';\nimport pMapSeries from 'p-map-series';\nimport {\n  DependenciesCmd,\n  DependenciesDebugCmd,\n  DependenciesGetCmd,\n  DependenciesRemoveCmd,\n  DependenciesSetCmd,\n  SetDependenciesFlags,\n} from './dependencies-cmd';\nimport { DependenciesAspect } from './dependencies.aspect';\n\nexport type RemoveDependencyResult = { id: ComponentID; removedPackages: string[] };\n\nexport class DependenciesMain {\n  constructor(private workspace: Workspace, private dependencyResolver: DependencyResolverMain) {}\n\n  async setDependency(\n    componentPattern: string,\n    packages: string[],\n    options: SetDependenciesFlags\n  ): Promise<{ changedComps: string[]; addedPackages: Record<string, string> }> {\n    const compIds = await this.workspace.idsByPattern(componentPattern);\n    const getDepField = () => {\n      if (options.dev) return 'devDependencies';\n      if (options.peer) return 'peerDependencies';\n      return 'dependencies';\n    };\n    const packagesObj = {};\n    await Promise.all(\n      packages.map(async (pkg) => {\n        const [name, version] = await this.getPackageNameAndVerResolved(pkg);\n        packagesObj[name] = version;\n      })\n    );\n    const config = {\n      policy: {\n        [getDepField()]: packagesObj,\n      },\n    };\n    await Promise.all(\n      compIds.map(async (compId) => {\n        await this.workspace.addSpecificComponentConfig(compId, DependencyResolverAspect.id, config, true);\n      })\n    );\n\n    await this.workspace.bitMap.write();\n\n    return {\n      changedComps: compIds.map((compId) => compId.toStringWithoutVersion()),\n      addedPackages: packagesObj,\n    };\n  }\n\n  async removeDependency(componentPattern: string, packages: string[]): Promise<RemoveDependencyResult[]> {\n    const compIds = await this.workspace.idsByPattern(componentPattern);\n    const results = await Promise.all(\n      compIds.map(async (compId) => {\n        const component = await this.workspace.get(compId);\n        const depList = await this.dependencyResolver.getDependencies(component);\n        const currentDepResolverConfig = await this.workspace.getSpecificComponentConfig(\n          compId,\n          DependencyResolverAspect.id\n        );\n        const newDepResolverConfig = cloneDeep(currentDepResolverConfig || {});\n        const removedPackagesWithNulls = await pMapSeries(packages, async (pkg) => {\n          const [name, version] = this.splitPkgToNameAndVer(pkg);\n          const dependency = depList.findByPkgNameOrCompId(name, version);\n          if (!dependency) return null;\n          const depField = KEY_NAME_BY_LIFECYCLE_TYPE[dependency.lifecycle];\n          const depName = dependency.getPackageName?.() || dependency.id;\n          const existsInSpecificConfig = newDepResolverConfig.policy?.[depField]?.[depName];\n          if (existsInSpecificConfig) {\n            if (existsInSpecificConfig === '-') return null;\n            delete newDepResolverConfig.policy[depField][depName];\n          } else {\n            set(newDepResolverConfig, ['policy', depField, depName], '-');\n          }\n          return `${depName}@${dependency.version}`;\n        });\n        const removedPackages = compact(removedPackagesWithNulls);\n        if (!removedPackages.length) return null;\n        await this.workspace.addSpecificComponentConfig(compId, DependencyResolverAspect.id, newDepResolverConfig);\n        return { id: compId, removedPackages };\n      })\n    );\n    await this.workspace.bitMap.write();\n\n    return compact(results);\n  }\n\n  private async getPackageNameAndVerResolved(pkg: string): Promise<[string, string]> {\n    const resolveLatest = async (pkgName: string) => {\n      const versionResolver = await this.dependencyResolver.getVersionResolver({});\n      const resolved = await versionResolver.resolveRemoteVersion(pkgName, { rootDir: '' });\n      if (!resolved.version) throw new Error(`unable to resolve version for ${pkgName}`);\n      return resolved.version;\n    };\n    const [name, version] = this.splitPkgToNameAndVer(pkg);\n    const versionResolved = !version || version === 'latest' ? await resolveLatest(name) : version;\n    return [name, versionResolved];\n  }\n\n  private splitPkgToNameAndVer(pkg: string): [string, string | undefined] {\n    const packageSplit = pkg.split('@');\n    if (pkg.startsWith('@')) {\n      // scoped package\n      if (packageSplit.length > 3) throw new Error(`invalid package \"${pkg}\" syntax, expected \"package[@version]\"`);\n      return [`@${packageSplit[1]}`, packageSplit[2]];\n    }\n    if (packageSplit.length > 2) throw new Error(`invalid package \"${pkg}\" syntax, expected \"package[@version]\"`);\n    return [packageSplit[0], packageSplit[1]];\n  }\n\n  static slots = [];\n  static dependencies = [CLIAspect, WorkspaceAspect, DependencyResolverAspect];\n\n  static runtime = MainRuntime;\n\n  static async provider([cli, workspace, depsResolver]: [CLIMain, Workspace, DependencyResolverMain]) {\n    const depsMain = new DependenciesMain(workspace, depsResolver);\n    const depsCmd = new DependenciesCmd();\n    depsCmd.commands = [\n      new DependenciesGetCmd(),\n      new DependenciesRemoveCmd(depsMain),\n      new DependenciesDebugCmd(),\n      new DependenciesSetCmd(depsMain),\n    ];\n    cli.register(depsCmd);\n\n    return depsMain;\n  }\n}\n\nDependenciesAspect.addRuntime(DependenciesMain);\n\nexport default DependenciesMain;\n"],"mappings":"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"}