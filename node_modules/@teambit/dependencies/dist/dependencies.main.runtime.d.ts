import { CLIMain } from '@teambit/cli';
import { ComponentID } from '@teambit/component-id';
import { DependencyResolverMain } from '@teambit/dependency-resolver';
import { Workspace } from '@teambit/workspace';
import { SetDependenciesFlags } from './dependencies-cmd';
export declare type RemoveDependencyResult = {
    id: ComponentID;
    removedPackages: string[];
};
export declare class DependenciesMain {
    private workspace;
    private dependencyResolver;
    constructor(workspace: Workspace, dependencyResolver: DependencyResolverMain);
    setDependency(componentPattern: string, packages: string[], options: SetDependenciesFlags): Promise<{
        changedComps: string[];
        addedPackages: Record<string, string>;
    }>;
    removeDependency(componentPattern: string, packages: string[]): Promise<RemoveDependencyResult[]>;
    private getPackageNameAndVerResolved;
    private splitPkgToNameAndVer;
    static slots: never[];
    static dependencies: import("@teambit/harmony").Aspect[];
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static provider([cli, workspace, depsResolver]: [CLIMain, Workspace, DependencyResolverMain]): Promise<DependenciesMain>;
}
export default DependenciesMain;
