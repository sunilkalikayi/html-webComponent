"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DependenciesSetCmd = exports.DependenciesRemoveCmd = exports.DependenciesGetCmd = exports.DependenciesDebugCmd = exports.DependenciesCmd = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
function _archy() {
  const data = _interopRequireDefault(require("archy"));
  _archy = function () {
    return data;
  };
  return data;
}
function _dependencies() {
  const data = require("@teambit/legacy/dist/api/consumer/lib/dependencies");
  _dependencies = function () {
    return data;
  };
  return data;
}
function _componentTemplate() {
  const data = require("@teambit/legacy/dist/cli/templates/component-template");
  _componentTemplate = function () {
    return data;
  };
  return data;
}
function _idNotFoundInGraph() {
  const data = require("@teambit/legacy/dist/scope/exceptions/id-not-found-in-graph");
  _idNotFoundInGraph = function () {
    return data;
  };
  return data;
}
function _constants() {
  const data = require("@teambit/legacy/dist/constants");
  _constants = function () {
    return data;
  };
  return data;
}
// eslint-disable-next-line max-classes-per-file

class DependenciesGetCmd {
  constructor() {
    (0, _defineProperty2().default)(this, "name", 'get <component-name>');
    (0, _defineProperty2().default)(this, "arguments", [{
      name: 'component-name',
      description: 'component name or component id'
    }]);
    (0, _defineProperty2().default)(this, "group", 'info');
    (0, _defineProperty2().default)(this, "description", 'show direct and indirect dependencies of the given component');
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "options", [['t', 'tree', 'EXPERIMENTAL. render dependencies as a tree, similar to "npm ls"']]);
  }
  async report([id], {
    tree = false
  }) {
    const results = await (0, _dependencies().dependencies)(id, false);
    if (tree) {
      const idWithVersion = results.workspaceGraph._getIdWithLatestVersion(results.id);
      const getGraphAsTree = graph => {
        try {
          const graphAsTree = graph.getDependenciesAsObjectTree(idWithVersion.toString());
          return (0, _archy().default)(graphAsTree);
        } catch (err) {
          if (err.constructor.name === 'RangeError') {
            return `${_chalk().default.red('unable to generate a tree representation, the graph is too big or has cycles')}`;
          }
          throw err;
        }
      };
      const workspaceTree = getGraphAsTree(results.workspaceGraph);
      const scopeTree = getGraphAsTree(results.scopeGraph);
      return `${_chalk().default.green('workspace')}:\n${workspaceTree}\n\n${_chalk().default.green('scope')}:\n${scopeTree}`;
    }
    const workspaceGraph = results.workspaceGraph.getDependenciesInfo(results.id);
    const getScopeDependencies = () => {
      try {
        return results.scopeGraph.getDependenciesInfo(results.id);
      } catch (err) {
        if (err instanceof _idNotFoundInGraph().IdNotFoundInGraph) return []; // component might be new
        throw err;
      }
    };
    const scopeGraph = getScopeDependencies();
    if (!scopeGraph.length && !workspaceGraph.length) {
      return `no dependencies found for ${results.id.toString()}.
try running "bit cat-component ${results.id.toStringWithoutVersion()}" to see whether the component/version exists locally`;
    }
    const scopeTable = (0, _componentTemplate().generateDependenciesInfoTable)(scopeGraph, results.id);
    const workspaceTable = (0, _componentTemplate().generateDependenciesInfoTable)(workspaceGraph, results.id);
    return `${_chalk().default.bold('Dependencies originated from workspace')}
${workspaceTable || '<none>'}

${_chalk().default.bold('Dependencies originated from scope')}
${scopeTable || '<none>'}`;
  }
}
exports.DependenciesGetCmd = DependenciesGetCmd;
class DependenciesDebugCmd {
  constructor() {
    (0, _defineProperty2().default)(this, "name", 'debug <component-name>');
    (0, _defineProperty2().default)(this, "arguments", [{
      name: 'component-name',
      description: 'component name or component id'
    }]);
    (0, _defineProperty2().default)(this, "group", 'info');
    (0, _defineProperty2().default)(this, "description", 'show the immediate dependencies and how their versions were determined');
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "options", []);
  }
  async report([id]) {
    const results = await (0, _dependencies().dependencies)(id, true);
    return JSON.stringify(results, undefined, 4);
  }
}
exports.DependenciesDebugCmd = DependenciesDebugCmd;
class DependenciesSetCmd {
  constructor(deps) {
    this.deps = deps;
    (0, _defineProperty2().default)(this, "name", 'set <component-pattern> <package...>');
    (0, _defineProperty2().default)(this, "arguments", [{
      name: 'component-pattern',
      description: _constants().COMPONENT_PATTERN_HELP
    }, {
      name: 'package...',
      description: 'package name with or without a version, e.g. "lodash@1.0.0" or just "lodash" which will be resolved to the latest'
    }]);
    (0, _defineProperty2().default)(this, "group", 'info');
    (0, _defineProperty2().default)(this, "description", 'set a dependency to component(s)');
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "options", [['d', 'dev', 'add to the devDependencies'], ['p', 'peer', 'add to the peerDependencies']]);
  }
  async report([pattern, packages], setDepsFlags) {
    const {
      changedComps,
      addedPackages
    } = await this.deps.setDependency(pattern, packages, setDepsFlags);
    return `${_chalk().default.green('successfully updated dependencies')}
${_chalk().default.bold('changed components')}
${changedComps.join('\n')}

${_chalk().default.bold('added packages')}
${JSON.stringify(addedPackages, undefined, 4)}`;
  }
}
exports.DependenciesSetCmd = DependenciesSetCmd;
class DependenciesRemoveCmd {
  constructor(deps) {
    this.deps = deps;
    (0, _defineProperty2().default)(this, "name", 'remove <component-pattern> <package...>');
    (0, _defineProperty2().default)(this, "arguments", [{
      name: 'component-pattern',
      description: _constants().COMPONENT_PATTERN_HELP
    }, {
      name: 'package...',
      description: 'package name with or without a version, e.g. "lodash@1.0.0" or just "lodash" which will remove all lodash instances of any version'
    }]);
    (0, _defineProperty2().default)(this, "group", 'info');
    (0, _defineProperty2().default)(this, "description", 'remove a dependency to component(s)');
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "options", []);
  }
  async report([pattern, packages]) {
    const results = await this.deps.removeDependency(pattern, packages);
    if (!results.length) {
      return _chalk().default.yellow('the specified component-pattern do not use the entered packages. nothing to remove');
    }
    const output = results.map(({
      id,
      removedPackages
    }) => `${_chalk().default.underline(id.toString())}\n${removedPackages.join('\n')}`).join('\n\n');
    return `${_chalk().default.green('successfully removed dependencies')}\n${output}`;
  }
}
exports.DependenciesRemoveCmd = DependenciesRemoveCmd;
class DependenciesCmd {
  constructor() {
    (0, _defineProperty2().default)(this, "name", 'deps <sub-command>');
    (0, _defineProperty2().default)(this, "alias", 'dependencies');
    (0, _defineProperty2().default)(this, "description", 'manage dependencies');
    (0, _defineProperty2().default)(this, "options", []);
    (0, _defineProperty2().default)(this, "group", 'info');
    (0, _defineProperty2().default)(this, "commands", []);
  }
  async report([unrecognizedSubcommand]) {
    return _chalk().default.red(`"${unrecognizedSubcommand}" is not a subcommand of "dependencies", please run "bit dependencies --help" to list the subcommands`);
  }
}
exports.DependenciesCmd = DependenciesCmd;

//# sourceMappingURL=dependencies-cmd.js.map