{"version":3,"names":["PrettierMain","constructor","logger","createFormatter","context","options","transformers","PrettierModule","configMutator","PrettierConfigMutator","config","transformerContext","check","afterMutation","runTransformersWithContext","clone","PrettierFormatter","raw","provider","loggerExt","createLogger","PrettierAspect","id","MainRuntime","LoggerAspect","addRuntime","Array","isArray","newConfig","reduce","acc","transformer"],"sources":["prettier.main.runtime.ts"],"sourcesContent":["import { MainRuntime } from '@teambit/cli';\nimport { Options as PrettierModuleOptions } from 'prettier';\nimport { Formatter, FormatterContext } from '@teambit/formatter';\nimport { Logger, LoggerAspect, LoggerMain } from '@teambit/logger';\nimport { PrettierConfigMutator } from '@teambit/defender.prettier.config-mutator';\nimport { PrettierAspect } from './prettier.aspect';\nimport { PrettierFormatter } from './prettier.formatter';\n\nexport type PrettierOptions = {\n  /**\n   * formatter config for prettier.\n   */\n  config: PrettierModuleOptions;\n};\n\nexport type PrettierConfigTransformContext = {\n  check: boolean;\n};\n\nexport type PrettierConfigTransformer = (\n  config: PrettierConfigMutator,\n  context: PrettierConfigTransformContext\n) => PrettierConfigMutator;\n\nexport class PrettierMain {\n  constructor(private logger: Logger) {}\n  /**\n   * create a prettier formatter instance.\n   * @param options prettier options.\n   * @param PrettierModule reference to an `prettier` module.\n   */\n  createFormatter(\n    context: FormatterContext,\n    options: PrettierOptions,\n    transformers: PrettierConfigTransformer[] = [],\n    PrettierModule?: any\n  ): Formatter {\n    const configMutator = new PrettierConfigMutator(options.config);\n    const transformerContext: PrettierConfigTransformContext = { check: !!context.check };\n    const afterMutation = runTransformersWithContext(configMutator.clone(), transformers, transformerContext);\n    return new PrettierFormatter(this.logger, afterMutation.raw, PrettierModule);\n  }\n\n  static runtime = MainRuntime;\n\n  static dependencies = [LoggerAspect];\n\n  static async provider([loggerExt]: [LoggerMain]): Promise<PrettierMain> {\n    const logger = loggerExt.createLogger(PrettierAspect.id);\n    return new PrettierMain(logger);\n  }\n}\n\nPrettierAspect.addRuntime(PrettierMain);\n\nexport function runTransformersWithContext(\n  config: PrettierConfigMutator,\n  transformers: PrettierConfigTransformer[] = [],\n  context: PrettierConfigTransformContext\n): PrettierConfigMutator {\n  if (!Array.isArray(transformers)) return config;\n  const newConfig = transformers.reduce((acc, transformer) => {\n    return transformer(acc, context);\n  }, config);\n  return newConfig;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAGA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAkBO,MAAMA,YAAY,CAAC;EACxBC,WAAW,CAASC,MAAc,EAAE;IAAA,KAAhBA,MAAc,GAAdA,MAAc;EAAG;EACrC;AACF;AACA;AACA;AACA;EACEC,eAAe,CACbC,OAAyB,EACzBC,OAAwB,EACxBC,YAAyC,GAAG,EAAE,EAC9CC,cAAoB,EACT;IACX,MAAMC,aAAa,GAAG,KAAIC,yCAAqB,EAACJ,OAAO,CAACK,MAAM,CAAC;IAC/D,MAAMC,kBAAkD,GAAG;MAAEC,KAAK,EAAE,CAAC,CAACR,OAAO,CAACQ;IAAM,CAAC;IACrF,MAAMC,aAAa,GAAGC,0BAA0B,CAACN,aAAa,CAACO,KAAK,EAAE,EAAET,YAAY,EAAEK,kBAAkB,CAAC;IACzG,OAAO,KAAIK,8BAAiB,EAAC,IAAI,CAACd,MAAM,EAAEW,aAAa,CAACI,GAAG,EAAEV,cAAc,CAAC;EAC9E;EAMA,aAAaW,QAAQ,CAAC,CAACC,SAAS,CAAe,EAAyB;IACtE,MAAMjB,MAAM,GAAGiB,SAAS,CAACC,YAAY,CAACC,0BAAc,CAACC,EAAE,CAAC;IACxD,OAAO,IAAItB,YAAY,CAACE,MAAM,CAAC;EACjC;AACF;AAAC;AAAA,gCA3BYF,YAAY,aAmBNuB,kBAAW;AAAA,gCAnBjBvB,YAAY,kBAqBD,CAACwB,sBAAY,CAAC;AAQtCH,0BAAc,CAACI,UAAU,CAACzB,YAAY,CAAC;AAEhC,SAASc,0BAA0B,CACxCJ,MAA6B,EAC7BJ,YAAyC,GAAG,EAAE,EAC9CF,OAAuC,EAChB;EACvB,IAAI,CAACsB,KAAK,CAACC,OAAO,CAACrB,YAAY,CAAC,EAAE,OAAOI,MAAM;EAC/C,MAAMkB,SAAS,GAAGtB,YAAY,CAACuB,MAAM,CAAC,CAACC,GAAG,EAAEC,WAAW,KAAK;IAC1D,OAAOA,WAAW,CAACD,GAAG,EAAE1B,OAAO,CAAC;EAClC,CAAC,EAAEM,MAAM,CAAC;EACV,OAAOkB,SAAS;AAClB"}