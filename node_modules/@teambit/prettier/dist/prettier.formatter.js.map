{"version":3,"names":["PrettierFormatter","constructor","logger","options","prettierModule","PrettierLib","displayConfig","JSON","stringify","format","context","run","check","longProcessLogger","createLongProcessLogger","components","length","resultsP","mapSeries","component","logProgress","id","toString","mergedOpts","getOptions","filesP","filesystem","files","map","file","sourceCode","contents","optsWithFilePath","addFilePathToOpts","checkFormatResults","formatResults","hasIssues","newContent","undefined","Buffer","from","write","filePath","relative","Promise","all","results","errors","Object","assign","filepath","path","version"],"sources":["prettier.formatter.ts"],"sourcesContent":["import { AbstractVinyl } from '@teambit/legacy/dist/consumer/component/sources';\nimport {\n  Formatter,\n  FormatterContext,\n  FormatResults,\n  FileFormatResult,\n  ComponentFormatResult,\n} from '@teambit/formatter';\nimport PrettierLib, { Options as PrettierModuleOptions } from 'prettier';\nimport mapSeries from 'p-map-series';\nimport { Logger } from '@teambit/logger';\n// import { PrettierOptions } from './prettier.main.runtime';\n\nexport class PrettierFormatter implements Formatter {\n  constructor(\n    private logger: Logger,\n\n    private options: PrettierModuleOptions,\n\n    /**\n     * reference to the prettier module.\n     */\n    private prettierModule = PrettierLib\n  ) {}\n\n  displayName = 'Prettier';\n\n  displayConfig() {\n    return JSON.stringify(this.options, null, 2);\n  }\n\n  async format(context: FormatterContext): Promise<FormatResults> {\n    return this.run(context);\n  }\n  async check(context: FormatterContext): Promise<FormatResults> {\n    return this.run(context);\n  }\n\n  private async run(context: FormatterContext): Promise<FormatResults> {\n    const check = !!context.check;\n    const longProcessLogger = this.logger.createLongProcessLogger('formatting components', context.components.length);\n    const resultsP = mapSeries(context.components, async (component): Promise<ComponentFormatResult> => {\n      longProcessLogger.logProgress(component.id.toString());\n      const mergedOpts = this.getOptions(this.options, context);\n      const filesP = component.filesystem.files.map(async (file): Promise<FileFormatResult> => {\n        const sourceCode = file.contents.toString('utf8');\n        const optsWithFilePath = this.addFilePathToOpts(mergedOpts, file);\n        const checkFormatResults = await this.prettierModule.check(sourceCode, optsWithFilePath);\n        const formatResults = await this.prettierModule.format(sourceCode, optsWithFilePath);\n\n        const hasIssues = !checkFormatResults;\n        const newContent = typeof formatResults === 'string' && hasIssues ? formatResults : undefined;\n\n        if (!check && newContent) {\n          file.contents = Buffer.from(newContent);\n          await file.write(undefined, true);\n        }\n\n        return {\n          filePath: file.relative,\n          hasIssues,\n          newContent,\n        };\n      });\n\n      const files = await Promise.all(filesP);\n\n      return {\n        component,\n        results: files,\n      };\n    });\n\n    const results = await resultsP;\n\n    return {\n      results,\n      errors: [],\n    };\n  }\n\n  /**\n   * get options for eslint.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  private getOptions(options: PrettierModuleOptions, context: FormatterContext): PrettierModuleOptions {\n    return options;\n  }\n\n  private addFilePathToOpts(options: PrettierModuleOptions, file: AbstractVinyl): PrettierModuleOptions {\n    return Object.assign({}, options, { filepath: file.path });\n  }\n\n  version() {\n    return this.prettierModule.version;\n  }\n}\n"],"mappings":"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"}