{"version":3,"names":["MergeLaneCmd","constructor","mergeLanes","name","description","report","pattern","ours","theirs","manual","build","workspace","existingOnWorkspaceOnly","noSnap","tag","message","snapMessage","keepReadme","noSquash","skipDependencyInstallation","remote","includeDeps","resolveUnrelated","ignoreConfigChanges","verbose","isFeatureEnabled","BUILD_ON_CI","Boolean","mergeStrategy","getMergeStrategy","BitError","getResolveUnrelated","undefined","Error","mergeResults","deleteResults","mergeLane","mergeResult","mergeReport","deleteResult","localResult","paintRemoved","remoteResult","map","item","readmeResult","chalk","yellow"],"sources":["merge-lane.cmd.ts"],"sourcesContent":["import chalk from 'chalk';\nimport { Command, CommandOptions } from '@teambit/cli';\nimport { getMergeStrategy, MergeStrategy } from '@teambit/legacy/dist/consumer/versions-ops/merge-version';\nimport { mergeReport } from '@teambit/merging';\nimport { BUILD_ON_CI, isFeatureEnabled } from '@teambit/legacy/dist/api/consumer/lib/feature-toggle';\nimport { BitError } from '@teambit/bit-error';\nimport paintRemoved from '@teambit/legacy/dist/cli/templates/remove-template';\nimport { MergeLanesMain } from './merge-lanes.main.runtime';\n\nexport class MergeLaneCmd implements Command {\n  name = 'merge <lane> [pattern]';\n  description = `merge a local or a remote lane`;\n  extendedDescription = `if the <lane> exists locally, it will be merged from the local lane.\notherwise, it will fetch the lane from the remote and merge it.\nin case the <lane> exists locally but you want to merge the remote version of it, use --remote flag.\nwhen the current and the other lanes are diverged in history and the files could be merged with no conflicts,\nit will snap-merge these components to complete the merge. use \"no-snap\" to opt-out, or \"tag\" to tag instead`;\n  arguments = [\n    {\n      name: 'lane',\n      description: 'lane-name or lane-id (if not exists locally) to merge to the current lane',\n    },\n    {\n      name: 'pattern',\n      description: 'EXPERIMENTAL. partially merge the lane with the specified component-pattern',\n    },\n  ];\n  alias = '';\n  options = [\n    ['', 'ours', 'in case of a conflict, override the used version with the current modification'],\n    ['', 'theirs', 'in case of a conflict, override the current modification with the specified version'],\n    ['', 'manual', 'in case of a conflict, leave the files with a conflict state to resolve them manually later'],\n    ['', 'workspace', 'merge only components in a lane that exist in the workspace'],\n    ['', 'no-snap', 'do not auto snap in case the merge completed without conflicts'],\n    ['', 'tag', 'tag all lane components after merging into main (also tag-merge in case of snap-merge)'],\n    ['', 'build', 'in case of snap during the merge, run the build-pipeline (similar to bit snap --build)'],\n    ['m', 'message <message>', 'override the default message for the auto snap'],\n    ['', 'keep-readme', 'skip deleting the lane readme component after merging'],\n    ['', 'no-squash', 'EXPERIMENTAL. relevant for merging lanes into main, which by default squash.'],\n    [\n      '',\n      'ignore-config-changes',\n      'allow merging when component are modified due to config changes (such as dependencies) only and not files',\n    ],\n    ['', 'verbose', 'show details of components that were not merged legitimately'],\n    ['', 'skip-dependency-installation', 'do not install packages of the imported components'],\n    ['', 'remote', 'relevant when the target-lane locally is differ than the remote and you want the remote'],\n    [\n      '',\n      'include-deps',\n      'EXPERIMENTAL. relevant for \"--pattern\" and \"--workspace\". merge also dependencies of the given components',\n    ],\n    [\n      '',\n      'resolve-unrelated [merge-strategy]',\n      'EXPERIMENTAL. relevant when a component on a lane and the component on main has nothing in common. merge-strategy can be \"ours\" (default) or \"theirs\"',\n    ],\n  ] as CommandOptions;\n  loader = true;\n  private = true;\n  migration = true;\n  remoteOp = true;\n\n  constructor(private mergeLanes: MergeLanesMain) {}\n\n  async report(\n    [name, pattern]: [string, string],\n    {\n      ours = false,\n      theirs = false,\n      manual = false,\n      build,\n      workspace: existingOnWorkspaceOnly = false,\n      noSnap = false,\n      tag = false,\n      message: snapMessage = '',\n      keepReadme = false,\n      noSquash = false,\n      skipDependencyInstallation = false,\n      remote = false,\n      includeDeps = false,\n      resolveUnrelated,\n      ignoreConfigChanges,\n      verbose = false,\n    }: {\n      ours: boolean;\n      theirs: boolean;\n      manual: boolean;\n      workspace?: boolean;\n      build?: boolean;\n      noSnap: boolean;\n      tag: boolean;\n      message: string;\n      keepReadme?: boolean;\n      noSquash: boolean;\n      skipDependencyInstallation?: boolean;\n      remote: boolean;\n      includeDeps?: boolean;\n      resolveUnrelated?: string | boolean;\n      ignoreConfigChanges?: boolean;\n      verbose?: boolean;\n    }\n  ): Promise<string> {\n    build = isFeatureEnabled(BUILD_ON_CI) ? Boolean(build) : true;\n    const mergeStrategy = getMergeStrategy(ours, theirs, manual);\n    if (noSnap && snapMessage) throw new BitError('unable to use \"noSnap\" and \"message\" flags together');\n    if (includeDeps && !pattern && !existingOnWorkspaceOnly) {\n      throw new BitError(`\"--include-deps\" flag is relevant only for --workspace and --pattern flags`);\n    }\n    const getResolveUnrelated = (): MergeStrategy | undefined => {\n      if (!resolveUnrelated) return undefined;\n      if (typeof resolveUnrelated === 'boolean') return 'ours';\n      if (resolveUnrelated !== 'ours' && resolveUnrelated !== 'theirs' && resolveUnrelated !== 'manual') {\n        throw new Error('--resolve-unrelated must be one of the following: [ours, theirs, manual]');\n      }\n      return resolveUnrelated;\n    };\n    if (resolveUnrelated && typeof resolveUnrelated === 'boolean') {\n      resolveUnrelated = 'ours';\n    }\n    const { mergeResults, deleteResults } = await this.mergeLanes.mergeLane(name, {\n      build,\n      // @ts-ignore\n      mergeStrategy,\n      existingOnWorkspaceOnly,\n      noSnap,\n      snapMessage,\n      keepReadme,\n      noSquash,\n      tag,\n      pattern,\n      skipDependencyInstallation,\n      remote,\n      resolveUnrelated: getResolveUnrelated(),\n      ignoreConfigChanges,\n      includeDeps,\n    });\n\n    const mergeResult = mergeReport({ ...mergeResults, verbose });\n    const deleteResult = `${deleteResults.localResult ? paintRemoved(deleteResults.localResult, false) : ''}${(\n      deleteResults.remoteResult || []\n    ).map((item) => paintRemoved(item, true))}${\n      (deleteResults.readmeResult && chalk.yellow(deleteResults.readmeResult)) || ''\n    }\\n`;\n    return mergeResult + deleteResult;\n  }\n}\n"],"mappings":"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"}