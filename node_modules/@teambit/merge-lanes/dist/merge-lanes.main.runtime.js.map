{"version":3,"names":["MergeLanesMain","constructor","workspace","merging","lanes","logger","remove","scope","exporter","mergeLane","laneName","options","BitError","consumer","mergeStrategy","noSnap","tag","snapMessage","existingOnWorkspaceOnly","build","keepReadme","noSquash","pattern","includeDeps","skipDependencyInstallation","resolveUnrelated","ignoreConfigChanges","remote","currentLaneId","getCurrentLaneId","isDefault","toString","otherLaneId","getParsedLaneId","isEqual","currentLane","loadLane","isDefaultLane","getOtherLane","undefined","lane","fetchLaneWithItsComponents","otherLane","getBitIds","Error","DEFAULT_LANE","getDefaultLaneIdsFromLane","toBitIds","bitIds","debug","otherLaneName","getAllComponentsStatus","tmp","Tmp","componentsStatus","Promise","all","map","bitId","getComponentMergeStatus","clear","err","allComponentsStatus","componentIds","resolveMultipleComponentIds","compIdsFromPattern","filterIdsFromPoolIdsByPattern","filterComponentsStatus","forEach","find","c","id","isEqualWithoutVersion","push","unmergedLegitimately","unmergedMessage","workspaceIds","listIds","filter","_legacy","throwForFailures","squashSnaps","mergeResults","mergeSnaps","laneId","localLane","mergedSuccessfully","failedComponents","length","every","failedComponent","unchangedLegitimately","deleteResults","readmeComponent","readmeComponentId","changeVersion","head","hash","componentsPattern","force","track","deleteFiles","fromLane","readmeResult","name","onDestroy","failureMsgs","chalk","bold","red","join","mergeFromScope","LaneId","parse","importLaneObject","laneIds","scopeComponentsImporter","ScopeComponentsImporter","getInstance","legacyScope","importManyDeltaWithoutDeps","toVersionLatest","repo","objects","mergedPreviously","mergedNow","bitObjectsPerComp","pMapSeries","modelComponent","getModelComponent","versionObj","loadVersion","version","laneHead","getRef","mainHead","divergeData","getDivergeData","remoteHead","checkedOutLocalHead","modifiedVersion","squashOneComp","setHead","bitObjects","compact","b","writeObjectsToTheFS","flat","exportedIds","ids","BitIds","fromArray","exported","exportMany","idsWithFutureScope","allVersions","provider","cli","loggerMain","createLogger","MergeLanesAspect","lanesCommand","getCommand","mergeLanesMain","commands","MergeLaneCmd","register","MergeLaneFromScopeCmd","LanesAspect","CLIAspect","WorkspaceAspect","MergingAspect","LoggerAspect","RemoveAspect","ScopeAspect","ExportAspect","MainRuntime","compIdsToKeep","allBitIds","bitIdsFromPattern","bitIdsNotFromPattern","hasWithoutVersion","filteredComponentStatus","depsToAdd","compId","fromStatus","remoteVersions","snapsOnRemoteOnly","remoteVersion","flattenedDeps","getAllFlattenedDependencies","depsNotIncludeInPattern","depsOnLane","dep","isOnLane","isIdOnLane","d","depsUniq","uniqFromArray","currentLaneName","succeededComponents","componentFromModel","modifiedComp","add","isDiverged","isLocalAhead","isRemoteAhead","remoteSnaps","currentParents","parents","commonSnapBeforeDiverge","addAsOnlyParent","ref","removeParent","setSquashed","previousParents","addRuntime"],"sources":["merge-lanes.main.runtime.ts"],"sourcesContent":["import { BitError } from '@teambit/bit-error';\nimport { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport { LanesAspect, LanesMain } from '@teambit/lanes';\nimport MergingAspect, { MergingMain, ComponentMergeStatus } from '@teambit/merging';\nimport WorkspaceAspect, { Workspace } from '@teambit/workspace';\nimport chalk from 'chalk';\nimport { BitId } from '@teambit/legacy-bit-id';\nimport pMapSeries from 'p-map-series';\nimport { Consumer } from '@teambit/legacy/dist/consumer';\nimport { MergeStrategy, ApplyVersionResults } from '@teambit/legacy/dist/consumer/versions-ops/merge-version';\nimport { BitIds } from '@teambit/legacy/dist/bit-id';\nimport { ScopeAspect, ScopeMain } from '@teambit/scope';\nimport ScopeComponentsImporter from '@teambit/legacy/dist/scope/component-ops/scope-components-importer';\nimport { ComponentID } from '@teambit/component-id';\nimport { DEFAULT_LANE, LaneId } from '@teambit/lane-id';\nimport { Lane, Version } from '@teambit/legacy/dist/scope/models';\nimport { Tmp } from '@teambit/legacy/dist/scope/repositories';\nimport { Logger, LoggerAspect, LoggerMain } from '@teambit/logger';\nimport { DivergeData } from '@teambit/legacy/dist/scope/component-ops/diverge-data';\nimport { RemoveAspect, RemoveMain } from '@teambit/remove';\nimport { compact } from 'lodash';\nimport { ExportAspect, ExportMain } from '@teambit/export';\nimport { BitObject } from '@teambit/legacy/dist/scope/objects';\nimport { getDivergeData } from '@teambit/legacy/dist/scope/component-ops/get-diverge-data';\nimport { MergeLanesAspect } from './merge-lanes.aspect';\nimport { MergeLaneCmd } from './merge-lane.cmd';\nimport { MergeLaneFromScopeCmd } from './merge-lane-from-scope.cmd';\n\nexport type MergeLaneOptions = {\n  mergeStrategy: MergeStrategy;\n  noSnap: boolean;\n  snapMessage: string;\n  existingOnWorkspaceOnly: boolean;\n  build: boolean;\n  keepReadme: boolean;\n  noSquash: boolean;\n  tag?: boolean;\n  pattern?: string;\n  includeDeps?: boolean;\n  skipDependencyInstallation?: boolean;\n  resolveUnrelated?: MergeStrategy;\n  ignoreConfigChanges?: boolean;\n  remote?: boolean;\n};\n\nexport class MergeLanesMain {\n  constructor(\n    private workspace: Workspace | undefined,\n    private merging: MergingMain,\n    private lanes: LanesMain,\n    private logger: Logger,\n    private remove: RemoveMain,\n    private scope: ScopeMain,\n    private exporter: ExportMain\n  ) {}\n\n  async mergeLane(\n    laneName: string,\n    options: MergeLaneOptions\n  ): Promise<{ mergeResults: ApplyVersionResults; deleteResults: any }> {\n    if (!this.workspace) {\n      throw new BitError(`unable to merge a lane outside of Bit workspace`);\n    }\n    const consumer = this.workspace.consumer;\n\n    const {\n      mergeStrategy,\n      noSnap,\n      tag,\n      snapMessage,\n      existingOnWorkspaceOnly,\n      build,\n      keepReadme,\n      noSquash,\n      pattern,\n      includeDeps,\n      skipDependencyInstallation,\n      resolveUnrelated,\n      ignoreConfigChanges,\n      remote,\n    } = options;\n\n    const currentLaneId = consumer.getCurrentLaneId();\n    if (tag && !currentLaneId.isDefault()) {\n      throw new BitError(`--tag only possible when on main. currently checked out to ${currentLaneId.toString()}`);\n    }\n    const otherLaneId = await consumer.getParsedLaneId(laneName);\n    if (otherLaneId.isEqual(currentLaneId)) {\n      throw new BitError(\n        `unable to merge lane \"${otherLaneId.toString()}\", you're already at this lane. to get updates, simply run \"bit checkout head\"`\n      );\n    }\n    const currentLane = currentLaneId.isDefault() ? null : await consumer.scope.loadLane(currentLaneId);\n    const isDefaultLane = otherLaneId.isDefault();\n    const getOtherLane = async () => {\n      if (isDefaultLane) {\n        return undefined;\n      }\n      const lane = await consumer.scope.loadLane(otherLaneId);\n      if (remote || !lane) {\n        return this.lanes.fetchLaneWithItsComponents(otherLaneId);\n      }\n      return lane;\n    };\n    const otherLane = await getOtherLane();\n    const getBitIds = async () => {\n      if (isDefaultLane) {\n        if (!currentLane) throw new Error(`unable to merge ${DEFAULT_LANE}, the current lane was not found`);\n        return consumer.scope.getDefaultLaneIdsFromLane(currentLane);\n      }\n      if (!otherLane) throw new Error(`lane must be defined for non-default`);\n      return otherLane.toBitIds();\n    };\n    const bitIds = await getBitIds();\n    this.logger.debug(`merging the following bitIds: ${bitIds.toString()}`);\n    const otherLaneName = isDefaultLane ? DEFAULT_LANE : otherLaneId.toString();\n\n    const getAllComponentsStatus = async (): Promise<ComponentMergeStatus[]> => {\n      const tmp = new Tmp(consumer.scope);\n      try {\n        const componentsStatus = await Promise.all(\n          bitIds.map((bitId) =>\n            this.merging.getComponentMergeStatus(bitId, currentLane, otherLaneName, {\n              resolveUnrelated,\n              ignoreConfigChanges,\n            })\n          )\n        );\n        await tmp.clear();\n        return componentsStatus;\n      } catch (err: any) {\n        await tmp.clear();\n        throw err;\n      }\n    };\n    let allComponentsStatus = await getAllComponentsStatus();\n\n    if (pattern) {\n      const componentIds = await this.workspace.resolveMultipleComponentIds(bitIds);\n      const compIdsFromPattern = this.workspace.scope.filterIdsFromPoolIdsByPattern(pattern, componentIds);\n      allComponentsStatus = await filterComponentsStatus(\n        allComponentsStatus,\n        compIdsFromPattern,\n        bitIds,\n        this.workspace,\n        includeDeps,\n        otherLane || undefined\n      );\n      bitIds.forEach((bitId) => {\n        if (!allComponentsStatus.find((c) => c.id.isEqualWithoutVersion(bitId))) {\n          allComponentsStatus.push({ id: bitId, unmergedLegitimately: true, unmergedMessage: `excluded by pattern` });\n        }\n      });\n    }\n    if (existingOnWorkspaceOnly) {\n      const workspaceIds = await this.workspace.listIds();\n      const compIdsFromPattern = workspaceIds.filter((id) =>\n        allComponentsStatus.find((c) => c.id.isEqualWithoutVersion(id._legacy))\n      );\n      allComponentsStatus = await filterComponentsStatus(\n        allComponentsStatus,\n        compIdsFromPattern,\n        bitIds,\n        this.workspace,\n        includeDeps\n      );\n      bitIds.forEach((bitId) => {\n        if (!allComponentsStatus.find((c) => c.id.isEqualWithoutVersion(bitId))) {\n          allComponentsStatus.push({ id: bitId, unmergedLegitimately: true, unmergedMessage: `not in the workspace` });\n        }\n      });\n    }\n\n    throwForFailures();\n\n    if (currentLaneId.isDefault() && !noSquash) {\n      squashSnaps(allComponentsStatus, otherLaneId, consumer);\n    }\n\n    const mergeResults = await this.merging.mergeSnaps({\n      mergeStrategy,\n      allComponentsStatus,\n      laneId: otherLaneId,\n      localLane: currentLane,\n      noSnap,\n      tag,\n      snapMessage,\n      build,\n      skipDependencyInstallation,\n    });\n\n    const mergedSuccessfully =\n      !mergeResults.failedComponents ||\n      mergeResults.failedComponents.length === 0 ||\n      mergeResults.failedComponents.every((failedComponent) => failedComponent.unchangedLegitimately);\n\n    let deleteResults = {};\n\n    if (!keepReadme && otherLane && otherLane.readmeComponent && mergedSuccessfully) {\n      const readmeComponentId = otherLane.readmeComponent.id\n        .changeVersion(otherLane.readmeComponent?.head?.hash)\n        .toString();\n\n      deleteResults = await this.remove.remove({\n        componentsPattern: readmeComponentId,\n        force: false,\n        remote: false,\n        track: false,\n        deleteFiles: true,\n        fromLane: false,\n      });\n    } else if (otherLane && !otherLane.readmeComponent) {\n      deleteResults = { readmeResult: `\\nlane ${otherLane.name} doesn't have a readme component` };\n    }\n\n    await this.workspace.consumer.onDestroy();\n\n    return { mergeResults, deleteResults };\n\n    function throwForFailures() {\n      const failedComponents = allComponentsStatus.filter((c) => c.unmergedMessage && !c.unmergedLegitimately);\n      if (failedComponents.length) {\n        const failureMsgs = failedComponents\n          .map(\n            (failedComponent) =>\n              `${chalk.bold(failedComponent.id.toString())} - ${chalk.red(failedComponent.unmergedMessage as string)}`\n          )\n          .join('\\n');\n        throw new BitError(`unable to merge due to the following failures:\\n${failureMsgs}`);\n      }\n    }\n  }\n\n  async mergeFromScope(\n    laneName: string,\n    options: Partial<MergeLaneOptions> & { push?: boolean }\n  ): Promise<{\n    mergedPreviously: string[];\n    mergedNow: string[];\n    exportedIds: string[];\n  }> {\n    if (this.workspace)\n      throw new BitError(\n        `unable to run this command from a workspace, please create a new bare-scope and run it from there`\n      );\n    const laneId = LaneId.parse(laneName);\n    const lane = await this.lanes.importLaneObject(laneId);\n    const laneIds = lane.toBitIds();\n    const scopeComponentsImporter = ScopeComponentsImporter.getInstance(this.scope.legacyScope);\n    await scopeComponentsImporter.importManyDeltaWithoutDeps(laneIds, true, lane, true);\n    // get their main as well\n    await scopeComponentsImporter.importManyDeltaWithoutDeps(laneIds.toVersionLatest(), true, undefined, true);\n    const repo = this.scope.legacyScope.objects;\n    // loop through all components, make sure they're all ahead of main (it might not be on main yet).\n    // then, change the version object to include an extra parent to point to the main.\n    // then, change the component object head to point to this changed version\n    const mergedPreviously: BitId[] = [];\n    const mergedNow: BitId[] = [];\n    const bitObjectsPerComp = await pMapSeries(laneIds, async (id) => {\n      const modelComponent = await this.scope.legacyScope.getModelComponent(id);\n      const versionObj = await modelComponent.loadVersion(id.version as string, repo);\n      const laneHead = modelComponent.getRef(id.version as string);\n      if (!laneHead) throw new Error(`lane head must be defined for ${id.toString()}`);\n      const mainHead = modelComponent.head || null;\n      if (mainHead?.isEqual(laneHead)) {\n        mergedPreviously.push(id);\n        return undefined;\n      }\n      const divergeData = await getDivergeData({\n        repo,\n        modelComponent,\n        remoteHead: laneHead,\n        checkedOutLocalHead: mainHead,\n      });\n      const modifiedVersion = squashOneComp(DEFAULT_LANE, laneId, id, divergeData, versionObj);\n      modelComponent.setHead(laneHead);\n      const objects = [modelComponent, modifiedVersion];\n      mergedNow.push(id);\n      return { id, objects };\n    });\n    const bitObjects = compact(bitObjectsPerComp).map((b) => b.objects);\n    await repo.writeObjectsToTheFS(bitObjects.flat() as BitObject[]);\n    let exportedIds: string[] = [];\n    if (options.push) {\n      const ids = compact(bitObjectsPerComp).map((b) => b.id);\n      const bitIds = BitIds.fromArray(ids);\n      const { exported } = await this.exporter.exportMany({\n        scope: this.scope.legacyScope,\n        ids: bitIds,\n        idsWithFutureScope: bitIds,\n        allVersions: false,\n      });\n      exportedIds = exported.map((id) => id.toString());\n    }\n\n    return {\n      mergedPreviously: mergedPreviously.map((id) => id.toString()),\n      mergedNow: mergedNow.map((id) => id.toString()),\n      exportedIds,\n    };\n  }\n\n  static slots = [];\n  static dependencies = [\n    LanesAspect,\n    CLIAspect,\n    WorkspaceAspect,\n    MergingAspect,\n    LoggerAspect,\n    RemoveAspect,\n    ScopeAspect,\n    ExportAspect,\n  ];\n  static runtime = MainRuntime;\n\n  static async provider([lanes, cli, workspace, merging, loggerMain, remove, scope, exporter]: [\n    LanesMain,\n    CLIMain,\n    Workspace,\n    MergingMain,\n    LoggerMain,\n    RemoveMain,\n    ScopeMain,\n    ExportMain\n  ]) {\n    const logger = loggerMain.createLogger(MergeLanesAspect.id);\n    const lanesCommand = cli.getCommand('lane');\n    const mergeLanesMain = new MergeLanesMain(workspace, merging, lanes, logger, remove, scope, exporter);\n    lanesCommand?.commands?.push(new MergeLaneCmd(mergeLanesMain));\n    cli.register(new MergeLaneFromScopeCmd(mergeLanesMain));\n    return mergeLanesMain;\n  }\n}\n\nasync function filterComponentsStatus(\n  allComponentsStatus: ComponentMergeStatus[],\n  compIdsToKeep: ComponentID[],\n  allBitIds: BitId[],\n  workspace: Workspace,\n  includeDeps = false,\n  lane?: Lane\n): Promise<ComponentMergeStatus[]> {\n  const bitIdsFromPattern = BitIds.fromArray(compIdsToKeep.map((c) => c._legacy));\n  const bitIdsNotFromPattern = allBitIds.filter((bitId) => !bitIdsFromPattern.hasWithoutVersion(bitId));\n  const filteredComponentStatus: ComponentMergeStatus[] = [];\n  const depsToAdd: BitId[] = [];\n  await pMapSeries(compIdsToKeep, async (compId) => {\n    const fromStatus = allComponentsStatus.find((c) => c.id.isEqualWithoutVersion(compId._legacy));\n    if (!fromStatus) {\n      throw new Error(`filterComponentsStatus: unable to find ${compId.toString()} in component-status`);\n    }\n    filteredComponentStatus.push(fromStatus);\n    if (fromStatus.unmergedMessage) {\n      return;\n    }\n    const { divergeData } = fromStatus;\n    if (!divergeData) {\n      throw new Error(`filterComponentsStatus: unable to find divergeData for ${compId.toString()}`);\n    }\n    const remoteVersions = divergeData.snapsOnRemoteOnly;\n    if (!remoteVersions.length) {\n      return;\n    }\n    const modelComponent = await workspace.consumer.scope.getModelComponent(compId._legacy);\n    // optimization suggestion: if squash is given, check only the last version.\n    await pMapSeries(remoteVersions, async (remoteVersion) => {\n      const versionObj = await modelComponent.loadVersion(remoteVersion.toString(), workspace.consumer.scope.objects);\n      const flattenedDeps = versionObj.getAllFlattenedDependencies();\n      const depsNotIncludeInPattern = flattenedDeps.filter((id) =>\n        bitIdsNotFromPattern.find((bitId) => bitId.isEqualWithoutVersion(id))\n      );\n      if (!depsNotIncludeInPattern.length) {\n        return;\n      }\n      const depsOnLane: BitId[] = [];\n      await Promise.all(\n        depsNotIncludeInPattern.map(async (dep) => {\n          const isOnLane = await workspace.consumer.scope.isIdOnLane(dep, lane);\n          if (isOnLane) {\n            depsOnLane.push(dep);\n          }\n        })\n      );\n      if (!depsOnLane.length) {\n        return;\n      }\n      if (!includeDeps) {\n        throw new BitError(`unable to merge ${compId.toString()}.\nit has (in version ${remoteVersion.toString()}) the following dependencies which were not included in the pattern. consider adding \"--include-deps\" flag\n${depsOnLane.map((d) => d.toString()).join('\\n')}`);\n      }\n      depsToAdd.push(...depsOnLane);\n    });\n  });\n  if (depsToAdd.length) {\n    const depsUniq = BitIds.uniqFromArray(depsToAdd);\n    depsUniq.forEach((id) => {\n      const fromStatus = allComponentsStatus.find((c) => c.id.isEqualWithoutVersion(id));\n      if (!fromStatus) {\n        throw new Error(`filterComponentsStatus: unable to find ${id.toString()} in component-status`);\n      }\n      filteredComponentStatus.push(fromStatus);\n    });\n  }\n  return filteredComponentStatus;\n}\n\nfunction squashSnaps(allComponentsStatus: ComponentMergeStatus[], otherLaneId: LaneId, consumer: Consumer) {\n  const currentLaneName = consumer.getCurrentLaneId().name;\n  const succeededComponents = allComponentsStatus.filter((c) => !c.unmergedMessage);\n  succeededComponents.forEach(({ id, divergeData, componentFromModel }) => {\n    if (!divergeData) {\n      throw new Error(`unable to squash. divergeData is missing from ${id.toString()}`);\n    }\n    const modifiedComp = squashOneComp(currentLaneName, otherLaneId, id, divergeData, componentFromModel);\n    if (modifiedComp) consumer.scope.objects.add(modifiedComp);\n  });\n}\n\n/**\n * returns Version object if it was modified. otherwise, returns undefined\n */\nfunction squashOneComp(\n  currentLaneName: string,\n  otherLaneId: LaneId,\n  id: BitId,\n  divergeData: DivergeData,\n  componentFromModel?: Version\n): Version | undefined {\n  if (divergeData.isDiverged()) {\n    throw new BitError(`unable to squash because ${id.toString()} is diverged in history.\nconsider switching to \"${\n      otherLaneId.name\n    }\" first, merging \"${currentLaneName}\", then switching back to \"${currentLaneName}\" and merging \"${\n      otherLaneId.name\n    }\"\nalternatively, use \"--no-squash\" flag to keep the entire history of \"${otherLaneId.name}\"`);\n  }\n  if (divergeData.isLocalAhead()) {\n    // nothing to do. current is ahead, nothing to merge. (it was probably filtered out already as a \"failedComponent\")\n    return undefined;\n  }\n  if (!divergeData.isRemoteAhead()) {\n    // nothing to do. current and remote are the same, nothing to merge. (it was probably filtered out already as a \"failedComponent\")\n    return undefined;\n  }\n  // remote is ahead and was not diverge.\n  const remoteSnaps = divergeData.snapsOnRemoteOnly;\n  if (remoteSnaps.length === 0) {\n    throw new Error(`remote is ahead but it has no snaps. it's impossible`);\n  }\n  // no need to check this case. even if it has only one snap ahead, we want to do the \"squash\", and run \"addAsOnlyParent\"\n  // to make sure it doesn't not have two parents.\n  // if (remoteSnaps.length === 1) {\n  //   // nothing to squash. it has only one commit.\n  //   return;\n  // }\n  if (!componentFromModel) {\n    throw new Error('unable to squash, the componentFromModel is missing');\n  }\n\n  const currentParents = componentFromModel.parents;\n\n  // do the squash.\n  if (divergeData.commonSnapBeforeDiverge) {\n    componentFromModel.addAsOnlyParent(divergeData.commonSnapBeforeDiverge);\n  } else {\n    // there is no commonSnapBeforeDiverge. the local has no snaps, all are remote, no need for parents. keep only head.\n    componentFromModel.parents.forEach((ref) => componentFromModel.removeParent(ref));\n  }\n  componentFromModel.setSquashed({ previousParents: currentParents, laneId: otherLaneId });\n  return componentFromModel;\n}\n\nMergeLanesAspect.addRuntime(MergeLanesMain);\n\nexport default MergeLanesMain;\n"],"mappings":"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"}