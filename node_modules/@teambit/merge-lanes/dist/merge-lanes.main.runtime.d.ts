import { CLIMain } from '@teambit/cli';
import { LanesMain } from '@teambit/lanes';
import { MergingMain } from '@teambit/merging';
import { Workspace } from '@teambit/workspace';
import { MergeStrategy, ApplyVersionResults } from '@teambit/legacy/dist/consumer/versions-ops/merge-version';
import { ScopeMain } from '@teambit/scope';
import { Logger, LoggerMain } from '@teambit/logger';
import { RemoveMain } from '@teambit/remove';
import { ExportMain } from '@teambit/export';
export declare type MergeLaneOptions = {
    mergeStrategy: MergeStrategy;
    noSnap: boolean;
    snapMessage: string;
    existingOnWorkspaceOnly: boolean;
    build: boolean;
    keepReadme: boolean;
    noSquash: boolean;
    tag?: boolean;
    pattern?: string;
    includeDeps?: boolean;
    skipDependencyInstallation?: boolean;
    resolveUnrelated?: MergeStrategy;
    ignoreConfigChanges?: boolean;
    remote?: boolean;
};
export declare class MergeLanesMain {
    private workspace;
    private merging;
    private lanes;
    private logger;
    private remove;
    private scope;
    private exporter;
    constructor(workspace: Workspace | undefined, merging: MergingMain, lanes: LanesMain, logger: Logger, remove: RemoveMain, scope: ScopeMain, exporter: ExportMain);
    mergeLane(laneName: string, options: MergeLaneOptions): Promise<{
        mergeResults: ApplyVersionResults;
        deleteResults: any;
    }>;
    mergeFromScope(laneName: string, options: Partial<MergeLaneOptions> & {
        push?: boolean;
    }): Promise<{
        mergedPreviously: string[];
        mergedNow: string[];
        exportedIds: string[];
    }>;
    static slots: never[];
    static dependencies: import("@teambit/harmony").Aspect[];
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static provider([lanes, cli, workspace, merging, loggerMain, remove, scope, exporter]: [
        LanesMain,
        CLIMain,
        Workspace,
        MergingMain,
        LoggerMain,
        RemoveMain,
        ScopeMain,
        ExportMain
    ]): Promise<MergeLanesMain>;
}
export default MergeLanesMain;
