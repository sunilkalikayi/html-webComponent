"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CheckoutCmd = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
function _bitError() {
  const data = require("@teambit/bit-error");
  _bitError = function () {
    return data;
  };
  return data;
}
function _constants() {
  const data = require("@teambit/legacy/dist/constants");
  _constants = function () {
    return data;
  };
  return data;
}
function _mergeVersion() {
  const data = require("@teambit/legacy/dist/consumer/versions-ops/merge-version");
  _mergeVersion = function () {
    return data;
  };
  return data;
}
class CheckoutCmd {
  constructor(checkout) {
    this.checkout = checkout;
    (0, _defineProperty2().default)(this, "name", 'checkout <to> [component-pattern]');
    (0, _defineProperty2().default)(this, "arguments", [{
      name: 'to',
      description: "permitted values: [head, reset, specific-version]. 'head' - last snap/tag. 'reset' - removes local changes"
    }, {
      name: 'component-pattern',
      description: _constants().COMPONENT_PATTERN_HELP
    }]);
    (0, _defineProperty2().default)(this, "description", 'switch between component versions or remove local changes');
    (0, _defineProperty2().default)(this, "group", 'development');
    (0, _defineProperty2().default)(this, "extendedDescription", `
  \`bit checkout <version> [component-pattern]\` => checkout the specified ids (or all components when --all is used) to the specified version
  \`bit checkout head [component-pattern]\` => checkout to the last snap/tag, omit [component-pattern] to checkout head for all
  \`bit checkout reset [component-pattern]\` => remove local modifications from the specified ids (or all components when --all is used)`);
    (0, _defineProperty2().default)(this, "alias", 'U');
    (0, _defineProperty2().default)(this, "options", [['i', 'interactive-merge', 'when a component is modified and the merge process found conflicts, display options to resolve them'], ['o', 'ours', 'in case of a conflict, override the used version with the current modification'], ['t', 'theirs', 'in case of a conflict, override the current modification with the specified version'], ['m', 'manual', 'in case of a conflict, leave the files with a conflict state to resolve them manually later'], ['r', 'reset', 'revert changes that were not snapped/tagged'], ['a', 'all', 'all components'], ['v', 'verbose', 'showing verbose output for inspection'], ['', 'reset', 'DEPRECATED. run "bit checkout reset" instead'], ['', 'skip-npm-install', 'DEPRECATED. use "--skip-dependency-installation" instead'], ['', 'skip-dependency-installation', 'do not install packages of the imported components']]);
    (0, _defineProperty2().default)(this, "loader", true);
  }
  async report([to, componentPattern], {
    interactiveMerge = false,
    ours = false,
    theirs = false,
    manual = false,
    reset = false,
    all = false,
    verbose = false,
    skipNpmInstall = false,
    skipDependencyInstallation = false
  }) {
    if (reset) {
      throw new (_bitError().BitError)(`--reset flag has been removed. please run "bit checkout reset" instead`);
    }
    if (skipNpmInstall) {
      // eslint-disable-next-line no-console
      console.log(_chalk().default.yellow(`"--skip-npm-install" has been deprecated, please use "--skip-dependency-installation" instead`));
      skipDependencyInstallation = true;
    }
    const checkoutProps = {
      promptMergeOptions: interactiveMerge,
      mergeStrategy: (0, _mergeVersion().getMergeStrategy)(ours, theirs, manual),
      all,
      verbose,
      isLane: false,
      skipNpmInstall: skipDependencyInstallation
    };
    const {
      components,
      version,
      failedComponents,
      leftUnresolvedConflicts
    } = await this.checkout.checkoutByCLIValues(to, componentPattern || '', checkoutProps);
    const isLatest = to === 'head';
    const isReset = to === 'reset';
    const getFailureOutput = () => {
      // components that failed for no legitimate reason. e.g. merge-conflict.
      const realFailedComponents = failedComponents === null || failedComponents === void 0 ? void 0 : failedComponents.filter(f => !f.unchangedLegitimately);
      if (!realFailedComponents || !realFailedComponents.length) return '';
      const title = 'the checkout has been canceled on the following component(s)';
      const body = realFailedComponents.map(failedComponent => `${_chalk().default.bold(failedComponent.id.toString())} - ${_chalk().default.red(failedComponent.failureMessage)}`).join('\n');
      return `${title}\n${body}\n\n`;
    };
    const getNeutralOutput = () => {
      // components that weren't checked out for legitimate reasons, e.g. up-to-date.
      const neutralComponents = (failedComponents || []).filter(f => f.unchangedLegitimately);
      if (!neutralComponents.length) return '';
      if (!verbose && all) {
        return _chalk().default.green(`checkout was not needed for ${_chalk().default.bold(neutralComponents.length.toString())} components (use --verbose to get more details)\n`);
      }
      const title = 'the checkout was not needed on the following component(s)';
      const body = neutralComponents.map(failedComponent => `${_chalk().default.bold(failedComponent.id.toString())} - ${failedComponent.failureMessage}`).join('\n');
      return `${title}\n${body}\n\n`;
    };
    const getConflictSummary = () => {
      if (!components || !components.length || !leftUnresolvedConflicts) return '';
      const title = `\n\nfiles with conflicts summary\n`;
      const suggestion = `\n\nfix the conflicts above manually and then run "bit install" and "bit compile".
once ready, snap/tag the components to persist the changes`;
      return _chalk().default.underline(title) + (0, _mergeVersion().conflictSummaryReport)(components) + _chalk().default.yellow(suggestion);
    };
    const getSuccessfulOutput = () => {
      if (!components || !components.length) return '';
      if (components.length === 1) {
        const component = components[0];
        const componentName = isReset ? component.id.toString() : component.id.toStringWithoutVersion();
        if (isReset) return `successfully reset ${_chalk().default.bold(componentName)}\n`;
        const title = `successfully switched ${_chalk().default.bold(componentName)} to version ${_chalk().default.bold(
        // $FlowFixMe version is defined when !isReset
        // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
        isLatest ? component.id.version : version)}\n`;
        return `${title} ${(0, _mergeVersion().applyVersionReport)(components, false)}`;
      }
      if (isReset) {
        const title = 'successfully reset the following components\n\n';
        const body = components.map(component => _chalk().default.bold(component.id.toString())).join('\n');
        return title + body;
      }
      // $FlowFixMe version is defined when !isReset
      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
      const versionOutput = isLatest ? 'their latest version' : `version ${_chalk().default.bold(version)}`;
      const title = `successfully switched the following components to ${versionOutput}\n\n`;
      const showVersion = isLatest || isReset;
      const componentsStr = (0, _mergeVersion().applyVersionReport)(components, true, showVersion);
      return title + componentsStr;
    };
    return getFailureOutput() + getNeutralOutput() + getSuccessfulOutput() + getConflictSummary();
  }
}
exports.CheckoutCmd = CheckoutCmd;

//# sourceMappingURL=checkout-cmd.js.map