import { CLIMain } from '@teambit/cli';
import { Logger, LoggerMain } from '@teambit/logger';
import { Workspace } from '@teambit/workspace';
import { ApplyVersionResults, MergeStrategy } from '@teambit/legacy/dist/consumer/versions-ops/merge-version';
import { ComponentID } from '@teambit/component-id';
export declare type CheckoutProps = {
    version?: string;
    ids?: ComponentID[];
    head?: boolean;
    promptMergeOptions?: boolean;
    mergeStrategy?: MergeStrategy | null;
    verbose?: boolean;
    skipNpmInstall?: boolean;
    reset?: boolean;
    all?: boolean;
    isLane?: boolean;
};
declare type CheckoutTo = 'head' | 'reset' | string;
export declare class CheckoutMain {
    private workspace;
    private logger;
    constructor(workspace: Workspace, logger: Logger);
    checkout(checkoutProps: CheckoutProps): Promise<ApplyVersionResults>;
    checkoutByCLIValues(to: CheckoutTo, componentPattern: string, checkoutProps: CheckoutProps): Promise<ApplyVersionResults>;
    private syncNewComponents;
    private parseValues;
    private getComponentStatus;
    static slots: never[];
    static dependencies: import("@teambit/harmony").Aspect[];
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static provider([cli, workspace, loggerMain]: [CLIMain, Workspace, LoggerMain]): Promise<CheckoutMain>;
}
export default CheckoutMain;
