{"version":3,"names":["CheckoutMain","constructor","workspace","logger","checkout","checkoutProps","consumer","version","ids","promptMergeOptions","syncNewComponents","bitIds","BitIds","fromArray","map","id","_legacy","scope","import","components","loadComponents","getAllComponentsStatus","tmp","Tmp","componentsStatusP","component","getComponentStatus","componentsStatus","Promise","all","clear","err","allComponentsStatus","componentWithConflict","find","mergeResults","hasConflicts","mergeStrategy","GeneralError","toStringWithoutVersion","getMergeStrategyInteractive","failedComponents","filter","componentStatus","failureMessage","unchangedLegitimately","succeededComponents","checkoutPropsLegacy","componentsResults","mapSeries","componentFromFS","applyVersion","markFilesToBeRemovedIfNeeded","componentsWithDependencies","c","leftUnresolvedConflicts","length","manyComponentsWriter","ManyComponentsWriter","installNpmPackages","skipNpmInstall","override","verbose","resetConfig","reset","writeAll","deleteFilesIfNeeded","appliedVersionComponents","applyVersionResult","checkoutByCLIValues","to","componentPattern","setStatusLine","BEFORE_CHECKOUT","ConsumerNotFound","parseValues","checkoutResults","onDestroy","head","notExported","hasScope","changeScope","scopeComponentsImporter","ScopeComponentsImporter","importManyDeltaWithoutDeps","error","HEAD","LATEST","BitError","BitId","isValidVersion","console","idsByPattern","listIds","changeVersion","latestVersion","repo","objects","componentModel","getModelComponentIfExist","returnFailure","msg","toString","unmerged","unmergedComponents","getEntry","name","getNewVersion","latestIncludeRemote","newVersion","hasVersion","existingBitMapId","bitMap","getBitId","ignoreVersion","currentlyUsedVersion","currentVersionObject","loadVersion","isModified","isComponentModified","baseVersion","baseComponent","otherComponent","threeWayMerge","otherLabel","currentComponent","currentLabel","versionRef","getRef","componentVersion","getObject","hash","newId","componentFromModel","provider","cli","loggerMain","createLogger","CheckoutAspect","checkoutMain","register","CheckoutCmd","CLIAspect","WorkspaceAspect","LoggerAspect","MainRuntime","addRuntime"],"sources":["checkout.main.runtime.ts"],"sourcesContent":["import { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport { Logger, LoggerAspect, LoggerMain } from '@teambit/logger';\nimport WorkspaceAspect, { Workspace } from '@teambit/workspace';\nimport { BitId } from '@teambit/legacy-bit-id';\nimport { BitError } from '@teambit/bit-error';\nimport { BEFORE_CHECKOUT } from '@teambit/legacy/dist/cli/loader/loader-messages';\nimport { HEAD, LATEST } from '@teambit/legacy/dist/constants';\nimport {\n  applyVersion,\n  markFilesToBeRemovedIfNeeded,\n  ComponentStatus,\n  deleteFilesIfNeeded,\n} from '@teambit/legacy/dist/consumer/versions-ops/checkout-version';\nimport {\n  ApplyVersionResults,\n  FailedComponents,\n  getMergeStrategyInteractive,\n  MergeStrategy,\n  threeWayMerge,\n} from '@teambit/legacy/dist/consumer/versions-ops/merge-version';\nimport GeneralError from '@teambit/legacy/dist/error/general-error';\nimport { ConsumerNotFound } from '@teambit/legacy/dist/consumer/exceptions';\nimport mapSeries from 'p-map-series';\nimport { BitIds } from '@teambit/legacy/dist/bit-id';\nimport { ComponentWithDependencies } from '@teambit/legacy/dist/scope';\nimport Version from '@teambit/legacy/dist/scope/models/version';\nimport { Tmp } from '@teambit/legacy/dist/scope/repositories';\nimport ManyComponentsWriter from '@teambit/legacy/dist/consumer/component-ops/many-components-writer';\nimport ScopeComponentsImporter from '@teambit/legacy/dist/scope/component-ops/scope-components-importer';\nimport { MergeResultsThreeWay } from '@teambit/legacy/dist/consumer/versions-ops/merge-version/three-way-merge';\nimport ConsumerComponent from '@teambit/legacy/dist/consumer/component';\nimport { ComponentID } from '@teambit/component-id';\nimport { CheckoutCmd } from './checkout-cmd';\nimport { CheckoutAspect } from './checkout.aspect';\n\nexport type CheckoutProps = {\n  version?: string; // if reset is true, the version is undefined\n  ids?: ComponentID[];\n  head?: boolean;\n  promptMergeOptions?: boolean;\n  mergeStrategy?: MergeStrategy | null;\n  verbose?: boolean;\n  skipNpmInstall?: boolean;\n  reset?: boolean; // remove local changes. if set, the version is undefined.\n  all?: boolean; // checkout all ids\n  isLane?: boolean;\n};\n\ntype CheckoutTo = 'head' | 'reset' | string;\n\nexport class CheckoutMain {\n  constructor(private workspace: Workspace, private logger: Logger) {}\n\n  async checkout(checkoutProps: CheckoutProps): Promise<ApplyVersionResults> {\n    const consumer = this.workspace.consumer;\n    const { version, ids, promptMergeOptions } = checkoutProps;\n    await this.syncNewComponents(checkoutProps);\n    const bitIds = BitIds.fromArray(ids?.map((id) => id._legacy) || []);\n    await consumer.scope.import(bitIds, false);\n    const { components } = await consumer.loadComponents(bitIds);\n\n    const getAllComponentsStatus = async (): Promise<ComponentStatus[]> => {\n      const tmp = new Tmp(consumer.scope);\n      try {\n        const componentsStatusP = components.map((component) => this.getComponentStatus(component, checkoutProps));\n        const componentsStatus = await Promise.all(componentsStatusP);\n        await tmp.clear();\n        return componentsStatus;\n      } catch (err: any) {\n        await tmp.clear();\n        throw err;\n      }\n    };\n\n    const allComponentsStatus: ComponentStatus[] = await getAllComponentsStatus();\n    const componentWithConflict = allComponentsStatus.find(\n      (component) => component.mergeResults && component.mergeResults.hasConflicts\n    );\n    if (componentWithConflict) {\n      if (!promptMergeOptions && !checkoutProps.mergeStrategy) {\n        throw new GeneralError(\n          `automatic merge has failed for component ${componentWithConflict.id.toStringWithoutVersion()}.\\nplease use \"--manual\" to manually merge changes or use \"--theirs / --ours\" to choose one of the conflicted versions`\n        );\n      }\n      if (!checkoutProps.mergeStrategy) checkoutProps.mergeStrategy = await getMergeStrategyInteractive();\n    }\n    const failedComponents: FailedComponents[] = allComponentsStatus\n      .filter((componentStatus) => componentStatus.failureMessage)\n      .map((componentStatus) => ({\n        id: componentStatus.id,\n        failureMessage: componentStatus.failureMessage as string,\n        unchangedLegitimately: componentStatus.unchangedLegitimately,\n      }));\n\n    const succeededComponents = allComponentsStatus.filter((componentStatus) => !componentStatus.failureMessage);\n    // do not use Promise.all for applyVersion. otherwise, it'll write all components in parallel,\n    // which can be an issue when some components are also dependencies of others\n    const checkoutPropsLegacy = { ...checkoutProps, ids: checkoutProps.ids?.map((id) => id._legacy) };\n    const componentsResults = await mapSeries(succeededComponents, ({ id, componentFromFS, mergeResults }) => {\n      return applyVersion(consumer, id, componentFromFS, mergeResults, checkoutPropsLegacy);\n    });\n\n    markFilesToBeRemovedIfNeeded(succeededComponents, componentsResults);\n\n    const componentsWithDependencies = componentsResults\n      .map((c) => c.component)\n      .filter((c) => c) as ComponentWithDependencies[];\n    const leftUnresolvedConflicts = componentWithConflict && checkoutProps.mergeStrategy === 'manual';\n    if (componentsWithDependencies.length) {\n      const manyComponentsWriter = new ManyComponentsWriter({\n        consumer,\n        componentsWithDependencies,\n        installNpmPackages: !checkoutProps.skipNpmInstall && !leftUnresolvedConflicts,\n        override: true,\n        verbose: checkoutProps.verbose,\n        resetConfig: checkoutProps.reset,\n      });\n      await manyComponentsWriter.writeAll();\n      await deleteFilesIfNeeded(componentsResults, consumer);\n    }\n\n    const appliedVersionComponents = componentsResults.map((c) => c.applyVersionResult);\n\n    return { components: appliedVersionComponents, version, failedComponents, leftUnresolvedConflicts };\n  }\n\n  async checkoutByCLIValues(\n    to: CheckoutTo,\n    componentPattern: string,\n    checkoutProps: CheckoutProps\n  ): Promise<ApplyVersionResults> {\n    this.logger.setStatusLine(BEFORE_CHECKOUT);\n    if (!this.workspace) throw new ConsumerNotFound();\n    const consumer = this.workspace.consumer;\n    await this.parseValues(to, componentPattern, checkoutProps);\n    const checkoutResults = await this.checkout(checkoutProps);\n    await consumer.onDestroy();\n    return checkoutResults;\n  }\n\n  private async syncNewComponents({ ids, head }: CheckoutProps) {\n    if (!head) return;\n    const notExported = ids?.filter((id) => !id._legacy.hasScope()).map((id) => id._legacy.changeScope(id.scope));\n    const scopeComponentsImporter = new ScopeComponentsImporter(this.workspace.consumer.scope);\n    try {\n      await scopeComponentsImporter.importManyDeltaWithoutDeps(BitIds.fromArray(notExported || []), true);\n    } catch (err) {\n      // don't stop the process. it's possible that the scope doesn't exist yet because these are new components\n      this.logger.error(`unable to sync new components due to an error`, err);\n    }\n  }\n\n  private async parseValues(to: CheckoutTo, componentPattern: string, checkoutProps: CheckoutProps) {\n    if (to === HEAD) checkoutProps.head = true;\n    else if (to === LATEST) throw new BitError(`\"latest\" was deprecated a while ago, please use \"head\" instead`);\n    else if (to === 'reset') checkoutProps.reset = true;\n    else {\n      if (!BitId.isValidVersion(to)) throw new BitError(`the specified version \"${to}\" is not a valid version`);\n      checkoutProps.version = to;\n    }\n    if (checkoutProps.head && !componentPattern) {\n      if (checkoutProps.all) {\n        this.logger.console(`\"--all\" is deprecated for \"bit checkout ${HEAD}\", please omit it.`);\n      }\n      checkoutProps.all = true;\n    }\n    if (componentPattern && checkoutProps.all) {\n      throw new GeneralError('please specify either [component-pattern] or --all, not both');\n    }\n    if (!componentPattern && !checkoutProps.all) {\n      throw new GeneralError('please specify [component-pattern] or use --all flag');\n    }\n    const ids = componentPattern ? await this.workspace.idsByPattern(componentPattern) : await this.workspace.listIds();\n    checkoutProps.ids = ids.map((id) => (checkoutProps.head ? id.changeVersion(LATEST) : id));\n  }\n\n  private async getComponentStatus(\n    component: ConsumerComponent,\n    checkoutProps: CheckoutProps\n  ): Promise<ComponentStatus> {\n    const consumer = this.workspace.consumer;\n    const { version, head: latestVersion, reset } = checkoutProps;\n    const repo = consumer.scope.objects;\n    const componentModel = await consumer.scope.getModelComponentIfExist(component.id);\n    const componentStatus: ComponentStatus = { id: component.id };\n    const returnFailure = (msg: string, unchangedLegitimately = false) => {\n      componentStatus.failureMessage = msg;\n      componentStatus.unchangedLegitimately = unchangedLegitimately;\n      return componentStatus;\n    };\n    if (!componentModel) {\n      return returnFailure(`component ${component.id.toString()} is new, no version to checkout`, true);\n    }\n    const unmerged = repo.unmergedComponents.getEntry(component.name);\n    if (!reset && unmerged) {\n      return returnFailure(\n        `component ${component.id.toStringWithoutVersion()} is in during-merge state, please snap/tag it first (or use bit merge --resolve/--abort)`\n      );\n    }\n    const getNewVersion = async (): Promise<string> => {\n      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!\n      if (reset) return component.id.version;\n      // @ts-ignore if !reset the version is defined\n      return latestVersion ? componentModel.latestIncludeRemote(repo) : version;\n    };\n    const newVersion = await getNewVersion();\n    if (version && !latestVersion) {\n      const hasVersion = await componentModel.hasVersion(version, repo);\n      if (!hasVersion)\n        return returnFailure(`component ${component.id.toStringWithoutVersion()} doesn't have version ${version}`);\n    }\n    const existingBitMapId = consumer.bitMap.getBitId(component.id, { ignoreVersion: true });\n    const currentlyUsedVersion = existingBitMapId.version;\n    if (!currentlyUsedVersion) {\n      return returnFailure(`component ${component.id.toStringWithoutVersion()} is new`);\n    }\n    if (version && currentlyUsedVersion === version) {\n      // it won't be relevant for 'reset' as it doesn't have a version\n      return returnFailure(`component ${component.id.toStringWithoutVersion()} is already at version ${version}`);\n    }\n    if (latestVersion && currentlyUsedVersion === newVersion) {\n      return returnFailure(\n        `component ${component.id.toStringWithoutVersion()} is already at the latest version, which is ${newVersion}`,\n        true\n      );\n    }\n    const currentVersionObject: Version = await componentModel.loadVersion(currentlyUsedVersion, repo);\n    const isModified = await consumer.isComponentModified(currentVersionObject, component);\n    if (!isModified && reset) {\n      return returnFailure(`component ${component.id.toStringWithoutVersion()} is not modified`);\n    }\n    // this is tricky. imagine the user is 0.0.2+modification and wants to checkout to 0.0.1.\n    // the base is 0.0.1, as it's the common version for 0.0.1 and 0.0.2. however, if we let git merge-file use the 0.0.1\n    // as the base, then, it'll get the changes done since 0.0.1 to 0.0.1, which is nothing, and put them on top of\n    // 0.0.2+modification. in other words, it won't make any change.\n    // this scenario of checking out while there are modified files, is forbidden in Git. here, we want to simulate a similar\n    // experience of \"git stash\", then \"git checkout\", then \"git stash pop\". practically, we want the changes done on 0.0.2\n    // to be added to 0.0.1\n    // if there is no modification, it doesn't go the threeWayMerge anyway, so it doesn't matter what the base is.\n    const baseVersion = currentlyUsedVersion;\n    const baseComponent: Version = await componentModel.loadVersion(baseVersion, repo);\n    let mergeResults: MergeResultsThreeWay | null | undefined;\n    // if the component is not modified, no need to try merge the files, they will be written later on according to the\n    // checked out version. same thing when no version is specified, it'll be reset to the model-version later.\n    if (!reset && isModified) {\n      const otherComponent: Version = await componentModel.loadVersion(newVersion, repo);\n      mergeResults = await threeWayMerge({\n        consumer,\n        otherComponent,\n        otherLabel: newVersion,\n        currentComponent: component,\n        currentLabel: `${currentlyUsedVersion} modified`,\n        baseComponent,\n      });\n    }\n    const versionRef = componentModel.getRef(newVersion);\n    // @ts-ignore\n    const componentVersion = await consumer.scope.getObject(versionRef.hash);\n    const newId = component.id.changeVersion(newVersion);\n    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!\n    return { componentFromFS: component, componentFromModel: componentVersion, id: newId, mergeResults };\n  }\n\n  static slots = [];\n  static dependencies = [CLIAspect, WorkspaceAspect, LoggerAspect];\n\n  static runtime = MainRuntime;\n\n  static async provider([cli, workspace, loggerMain]: [CLIMain, Workspace, LoggerMain]) {\n    const logger = loggerMain.createLogger(CheckoutAspect.id);\n    const checkoutMain = new CheckoutMain(workspace, logger);\n    cli.register(new CheckoutCmd(checkoutMain));\n    return checkoutMain;\n  }\n}\n\nCheckoutAspect.addRuntime(CheckoutMain);\n\nexport default CheckoutMain;\n"],"mappings":"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"}