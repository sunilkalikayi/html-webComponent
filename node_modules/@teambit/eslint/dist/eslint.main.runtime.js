"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ESLintMain = void 0;
exports.runTransformersWithContext = runTransformersWithContext;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _cli() {
  const data = require("@teambit/cli");
  _cli = function () {
    return data;
  };
  return data;
}
function _logger() {
  const data = require("@teambit/logger");
  _logger = function () {
    return data;
  };
  return data;
}
function _defenderEslint() {
  const data = require("@teambit/defender.eslint.config-mutator");
  _defenderEslint = function () {
    return data;
  };
  return data;
}
function _eslint() {
  const data = require("./eslint.aspect");
  _eslint = function () {
    return data;
  };
  return data;
}
function _eslint2() {
  const data = require("./eslint.linter");
  _eslint2 = function () {
    return data;
  };
  return data;
}
class ESLintMain {
  constructor(logger) {
    this.logger = logger;
  }

  /**
   * create a eslint linter instance.
   * @param options eslint options.
   * @param ESLintModule reference to an `eslint` module.
   */
  createLinter(context, options, transformers = [], ESLintModule) {
    const mergedOptions = getOptions(options, context);
    const configMutator = new (_defenderEslint().EslintConfigMutator)(mergedOptions);
    const transformerContext = {
      fix: !!context.fix
    };
    const afterMutation = runTransformersWithContext(configMutator.clone(), transformers, transformerContext);
    return new (_eslint2().ESLintLinter)(this.logger, afterMutation.raw, ESLintModule);
  }
  static async provider([loggerExt]) {
    const logger = loggerExt.createLogger(_eslint().ESLintAspect.id);
    return new ESLintMain(logger);
  }
}
exports.ESLintMain = ESLintMain;
(0, _defineProperty2().default)(ESLintMain, "runtime", _cli().MainRuntime);
(0, _defineProperty2().default)(ESLintMain, "dependencies", [_logger().LoggerAspect]);
_eslint().ESLintAspect.addRuntime(ESLintMain);

/**
 * get options for eslint.
 */
function getOptions(options, context) {
  const mergedConfig = {
    // @ts-ignore - this is a bug in the @types/eslint types
    overrideConfig: options.config,
    extensions: context.extensionFormats,
    useEslintrc: false,
    cwd: options.pluginPath,
    fix: !!context.fix,
    fixTypes: context.fixTypes
  };
  return Object.assign({}, options, {
    config: mergedConfig,
    extensions: context.extensionFormats
  });
}
function runTransformersWithContext(config, transformers = [], context) {
  if (!Array.isArray(transformers)) return config;
  const newConfig = transformers.reduce((acc, transformer) => {
    return transformer(acc, context);
  }, config);
  return newConfig;
}

//# sourceMappingURL=eslint.main.runtime.js.map