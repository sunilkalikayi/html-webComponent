{"version":3,"names":["ESLintLinter","constructor","logger","options","ESLint","displayConfig","JSON","stringify","lint","context","longProcessLogger","createLongProcessLogger","components","length","eslint","createEslint","config","tsConfig","rootDir","tsConfigPath","createTempTsConfigFile","envRuntime","id","overrideConfig","parserOptions","project","resultsP","mapSeries","component","logProgress","toString","filesP","filesystem","files","map","file","extensions","includes","extname","undefined","path","compact","Promise","all","lintResults","lintFiles","fix","ESLintLib","outputFixes","results","flatten","formatter","loadFormatter","output","format","totalErrorCount","totalFatalErrorCount","totalFixableErrorCount","totalFixableWarningCount","totalWarningCount","componentsResults","computeComponentResultsWithTotals","totalComponentsWithErrorCount","totalComponentsWithFatalErrorCount","totalComponentsWithFixableErrorCount","totalComponentsWithFixableWarningCount","totalComponentsWithWarningCount","computeManyComponentsTotals","errors","envId","newTsConfig","include","includedPath","exclude","excludedPath","cacheDir","getCacheDir","hash","objectHash","tempTsConfigPath","join","fs","existsSync","outputJSONSync","spaces","result","errorCount","fatalErrorCount","fixableErrorCount","fixableWarningCount","warningCount","filePath","messages","raw","forEach","ESLintModule","version"],"sources":["eslint.linter.ts"],"sourcesContent":["import fs from 'fs-extra';\nimport path from 'path';\nimport { flatten, compact } from 'lodash';\nimport { Linter, LinterContext, LintResults, ComponentLintResult } from '@teambit/linter';\nimport { ESLint as ESLintLib } from 'eslint';\nimport mapSeries from 'p-map-series';\nimport objectHash from 'object-hash';\nimport { Logger } from '@teambit/logger';\nimport { ESLintOptions } from './eslint.main.runtime';\n\nexport class ESLintLinter implements Linter {\n  constructor(\n    private logger: Logger,\n\n    private options: ESLintOptions,\n\n    /**\n     * reference to the eslint module.\n     */\n    private ESLint?: any\n  ) {}\n\n  displayName = 'ESlint';\n\n  displayConfig() {\n    return JSON.stringify(this.options, null, 2);\n  }\n\n  async lint(context: LinterContext): Promise<LintResults> {\n    const longProcessLogger = this.logger.createLongProcessLogger('linting components', context.components.length);\n    const eslint = this.createEslint(this.options.config, this.ESLint);\n    if (this.options.tsConfig && context.rootDir) {\n      const tsConfigPath = this.createTempTsConfigFile(context.rootDir, context.envRuntime.id, this.options.tsConfig);\n      if (this.options?.config?.overrideConfig?.parserOptions) {\n        this.options.config.overrideConfig.parserOptions.project = tsConfigPath;\n      }\n    }\n    const resultsP = mapSeries(context.components, async (component) => {\n      longProcessLogger.logProgress(component.id.toString());\n      const filesP = component.filesystem.files.map(async (file) => {\n        // TODO: now that we moved to lint files, maybe it's not required anymore\n        // The eslint api will not ignore extensions by default when using lintText, so we do it manually\n        if (!this.options.extensions?.includes(file.extname)) return undefined;\n        return file.path;\n      });\n\n      const files = compact(await Promise.all(filesP));\n      const lintResults = await eslint.lintFiles(files);\n\n      if (eslint && this.options.config.fix && lintResults) {\n        await ESLintLib.outputFixes(lintResults);\n      }\n\n      const results: ESLintLib.LintResult[] = compact(flatten(lintResults));\n      const formatter = await eslint.loadFormatter(this.options.formatter || 'stylish');\n      const output = formatter.format(results);\n      const {\n        totalErrorCount,\n        totalFatalErrorCount,\n        totalFixableErrorCount,\n        totalFixableWarningCount,\n        totalWarningCount,\n        componentsResults,\n      } = this.computeComponentResultsWithTotals(results);\n\n      return {\n        component,\n        output,\n        totalErrorCount,\n        totalFatalErrorCount,\n        totalFixableErrorCount,\n        totalFixableWarningCount,\n        totalWarningCount,\n        results: componentsResults,\n      };\n    });\n\n    const results = (await resultsP) as any as ComponentLintResult[];\n    const {\n      totalErrorCount,\n      totalFatalErrorCount,\n      totalFixableErrorCount,\n      totalFixableWarningCount,\n      totalWarningCount,\n      totalComponentsWithErrorCount,\n      totalComponentsWithFatalErrorCount,\n      totalComponentsWithFixableErrorCount,\n      totalComponentsWithFixableWarningCount,\n      totalComponentsWithWarningCount,\n    } = this.computeManyComponentsTotals(results);\n\n    return {\n      totalErrorCount,\n      totalFatalErrorCount,\n      totalFixableErrorCount,\n      totalFixableWarningCount,\n      totalWarningCount,\n      totalComponentsWithErrorCount,\n      totalComponentsWithFatalErrorCount,\n      totalComponentsWithFixableErrorCount,\n      totalComponentsWithFixableWarningCount,\n      totalComponentsWithWarningCount,\n      results,\n      errors: [],\n    };\n  }\n\n  private createTempTsConfigFile(rootDir: string, envId: string, tsConfig: Record<string, any>): string {\n    const newTsConfig = {\n      ...tsConfig,\n    };\n    if (tsConfig.include) {\n      newTsConfig.include = tsConfig.include.map((includedPath) => `../../${includedPath}`);\n    }\n    if (tsConfig.exclude) {\n      newTsConfig.exclude = tsConfig.exclude.map((excludedPath) => `../../${excludedPath}`);\n    }\n    const cacheDir = getCacheDir(rootDir);\n    const hash = objectHash(newTsConfig);\n    // We save the tsconfig with hash here to avoid creating unnecessary tsconfig files\n    // this is very important as eslint will be able to cache the tsconfig file and will not need to create another program\n    // this affects performance dramatically\n    const tempTsConfigPath = path.join(cacheDir, `bit.tsconfig.eslint.${hash}.json`);\n    if (!fs.existsSync(tempTsConfigPath)) {\n      fs.outputJSONSync(tempTsConfigPath, newTsConfig, { spaces: 2 });\n    }\n    return tempTsConfigPath;\n  }\n\n  private computeComponentResultsWithTotals(results: ESLintLib.LintResult[]) {\n    let totalErrorCount = 0;\n    let totalFatalErrorCount = 0;\n    let totalFixableErrorCount = 0;\n    let totalFixableWarningCount = 0;\n    let totalWarningCount = 0;\n    const componentsResults = results.map((result) => {\n      totalErrorCount += result.errorCount ?? 0;\n      // @ts-ignore - missing from the @types/eslint lib\n      totalFatalErrorCount += result.fatalErrorCount ?? 0;\n      totalFixableErrorCount += result.fixableErrorCount ?? 0;\n      totalFixableWarningCount += result.fixableWarningCount ?? 0;\n      totalWarningCount += result.warningCount ?? 0;\n      return {\n        filePath: result.filePath,\n        errorCount: result.errorCount,\n        // @ts-ignore - missing from the @types/eslint lib\n        fatalErrorCount: result.fatalErrorCount,\n        fixableErrorCount: result.fixableErrorCount,\n        fixableWarningCount: result.fixableWarningCount,\n        warningCount: result.warningCount,\n        messages: result.messages,\n        raw: result,\n      };\n    });\n    return {\n      totalErrorCount,\n      totalFatalErrorCount,\n      totalFixableErrorCount,\n      totalFixableWarningCount,\n      totalWarningCount,\n      componentsResults,\n    };\n  }\n\n  private computeManyComponentsTotals(componentsResults: ComponentLintResult[]) {\n    let totalErrorCount = 0;\n    let totalFatalErrorCount = 0;\n    let totalFixableErrorCount = 0;\n    let totalFixableWarningCount = 0;\n    let totalWarningCount = 0;\n    let totalComponentsWithErrorCount = 0;\n    let totalComponentsWithFatalErrorCount = 0;\n    let totalComponentsWithFixableErrorCount = 0;\n    let totalComponentsWithFixableWarningCount = 0;\n    let totalComponentsWithWarningCount = 0;\n\n    componentsResults.forEach((result) => {\n      if (result.totalErrorCount) {\n        totalErrorCount += result.totalErrorCount;\n        totalComponentsWithErrorCount += 1;\n      }\n      // @ts-ignore - missing from the @types/eslint lib\n      if (result.totalFatalErrorCount) {\n        totalFatalErrorCount += result.totalFatalErrorCount;\n        totalComponentsWithFatalErrorCount += 1;\n      }\n      if (result.totalFixableErrorCount) {\n        totalFixableErrorCount += result.totalFixableErrorCount;\n        totalComponentsWithFixableErrorCount += 1;\n      }\n      if (result.totalFixableWarningCount) {\n        totalFixableWarningCount += result.totalFixableWarningCount;\n        totalComponentsWithFixableWarningCount += 1;\n      }\n      if (result.totalWarningCount) {\n        totalWarningCount += result.totalWarningCount;\n        totalComponentsWithWarningCount += 1;\n      }\n    });\n    return {\n      totalErrorCount,\n      totalFatalErrorCount,\n      totalFixableErrorCount,\n      totalFixableWarningCount,\n      totalWarningCount,\n      componentsResults,\n      totalComponentsWithErrorCount,\n      totalComponentsWithFatalErrorCount,\n      totalComponentsWithFixableErrorCount,\n      totalComponentsWithFixableWarningCount,\n      totalComponentsWithWarningCount,\n    };\n  }\n\n  /**\n   * Create the eslint instance by options that was already merged with context\n   * @param options\n   * @param ESLintModule\n   * @returns\n   */\n  private createEslint(options: ESLintLib.Options, ESLintModule?: any): ESLintLib {\n    // eslint-disable-next-line no-new\n    if (ESLintModule) new ESLintModule.ESLint(options);\n    return new ESLintLib(options);\n  }\n\n  version() {\n    if (this.ESLint) return this.ESLint.version;\n    return ESLintLib.version;\n  }\n}\n\nfunction getCacheDir(rootDir): string {\n  return path.join(rootDir, 'node_modules', '.cache');\n}\n"],"mappings":"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"}