{"version":3,"names":["ESLintMain","constructor","logger","createLinter","context","options","transformers","ESLintModule","mergedOptions","getOptions","configMutator","EslintConfigMutator","transformerContext","fix","afterMutation","runTransformersWithContext","clone","ESLintLinter","raw","provider","loggerExt","createLogger","ESLintAspect","id","MainRuntime","LoggerAspect","addRuntime","mergedConfig","overrideConfig","config","extensions","extensionFormats","useEslintrc","cwd","pluginPath","fixTypes","Object","assign","Array","isArray","newConfig","reduce","acc","transformer"],"sources":["eslint.main.runtime.ts"],"sourcesContent":["import { MainRuntime } from '@teambit/cli';\n// import { Linter as ESLinter, ESLint as ESLintLib } from 'eslint';\nimport { ESLint as ESLintLib } from 'eslint';\nimport { Linter, LinterContext } from '@teambit/linter';\nimport { Logger, LoggerAspect, LoggerMain } from '@teambit/logger';\nimport { EslintConfigMutator } from '@teambit/defender.eslint.config-mutator';\nimport { ESLintAspect } from './eslint.aspect';\nimport { ESLintLinter } from './eslint.linter';\n\nexport type ESLintOptions = {\n  /**\n   * linter config for eslint.\n   */\n  // config: ESLinter.Config;\n  config: ESLintLib.Options;\n\n  /**\n   * specify to path to resolve eslint plugins from.\n   */\n  pluginPath?: string;\n\n  /**\n   * decide the formatter for the CLI output.\n   */\n  formatter?: string;\n\n  /**\n   * file types to lint.\n   */\n  extensions?: string[];\n\n  // TODO: improve type\n  /**\n   * typescript config for eslint.\n   * If you pass this, bit will auto generate a temp config file in `node_modules/.cache` and pass it to eslint.\n   * In case you have include/exclude props in the tsconfig, they will be changed to handle the fact that they are inside the node_modules/.cache folder.\n   * a `../../` will be added to the beginning of the path.\n   */\n  tsConfig?: Record<string, any>;\n};\n\nexport type EslintConfigTransformContext = {\n  fix: boolean;\n};\n\nexport type EslintConfigTransformer = (\n  config: EslintConfigMutator,\n  context: EslintConfigTransformContext\n) => EslintConfigMutator;\n\nexport class ESLintMain {\n  constructor(private logger: Logger) {}\n\n  /**\n   * create a eslint linter instance.\n   * @param options eslint options.\n   * @param ESLintModule reference to an `eslint` module.\n   */\n  createLinter(\n    context: LinterContext,\n    options: ESLintOptions,\n    transformers: EslintConfigTransformer[] = [],\n    ESLintModule?: any\n  ): Linter {\n    const mergedOptions = getOptions(options, context);\n    const configMutator = new EslintConfigMutator(mergedOptions);\n    const transformerContext: EslintConfigTransformContext = { fix: !!context.fix };\n    const afterMutation = runTransformersWithContext(configMutator.clone(), transformers, transformerContext);\n\n    return new ESLintLinter(this.logger, afterMutation.raw, ESLintModule);\n  }\n\n  static runtime = MainRuntime;\n\n  static dependencies = [LoggerAspect];\n\n  static async provider([loggerExt]: [LoggerMain]): Promise<ESLintMain> {\n    const logger = loggerExt.createLogger(ESLintAspect.id);\n    return new ESLintMain(logger);\n  }\n}\n\nESLintAspect.addRuntime(ESLintMain);\n\n/**\n * get options for eslint.\n */\nfunction getOptions(options: ESLintOptions, context: LinterContext): ESLintOptions {\n  const mergedConfig: ESLintLib.Options = {\n    // @ts-ignore - this is a bug in the @types/eslint types\n    overrideConfig: options.config,\n    extensions: context.extensionFormats,\n    useEslintrc: false,\n    cwd: options.pluginPath,\n    fix: !!context.fix,\n    fixTypes: context.fixTypes,\n  };\n  return Object.assign({}, options, { config: mergedConfig, extensions: context.extensionFormats });\n}\n\nexport function runTransformersWithContext(\n  config: EslintConfigMutator,\n  transformers: EslintConfigTransformer[] = [],\n  context: EslintConfigTransformContext\n): EslintConfigMutator {\n  if (!Array.isArray(transformers)) return config;\n  const newConfig = transformers.reduce((acc, transformer) => {\n    return transformer(acc, context);\n  }, config);\n  return newConfig;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAIA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AA2CO,MAAMA,UAAU,CAAC;EACtBC,WAAW,CAASC,MAAc,EAAE;IAAA,KAAhBA,MAAc,GAAdA,MAAc;EAAG;;EAErC;AACF;AACA;AACA;AACA;EACEC,YAAY,CACVC,OAAsB,EACtBC,OAAsB,EACtBC,YAAuC,GAAG,EAAE,EAC5CC,YAAkB,EACV;IACR,MAAMC,aAAa,GAAGC,UAAU,CAACJ,OAAO,EAAED,OAAO,CAAC;IAClD,MAAMM,aAAa,GAAG,KAAIC,qCAAmB,EAACH,aAAa,CAAC;IAC5D,MAAMI,kBAAgD,GAAG;MAAEC,GAAG,EAAE,CAAC,CAACT,OAAO,CAACS;IAAI,CAAC;IAC/E,MAAMC,aAAa,GAAGC,0BAA0B,CAACL,aAAa,CAACM,KAAK,EAAE,EAAEV,YAAY,EAAEM,kBAAkB,CAAC;IAEzG,OAAO,KAAIK,uBAAY,EAAC,IAAI,CAACf,MAAM,EAAEY,aAAa,CAACI,GAAG,EAAEX,YAAY,CAAC;EACvE;EAMA,aAAaY,QAAQ,CAAC,CAACC,SAAS,CAAe,EAAuB;IACpE,MAAMlB,MAAM,GAAGkB,SAAS,CAACC,YAAY,CAACC,sBAAY,CAACC,EAAE,CAAC;IACtD,OAAO,IAAIvB,UAAU,CAACE,MAAM,CAAC;EAC/B;AACF;AAAC;AAAA,gCA9BYF,UAAU,aAsBJwB,kBAAW;AAAA,gCAtBjBxB,UAAU,kBAwBC,CAACyB,sBAAY,CAAC;AAQtCH,sBAAY,CAACI,UAAU,CAAC1B,UAAU,CAAC;;AAEnC;AACA;AACA;AACA,SAASS,UAAU,CAACJ,OAAsB,EAAED,OAAsB,EAAiB;EACjF,MAAMuB,YAA+B,GAAG;IACtC;IACAC,cAAc,EAAEvB,OAAO,CAACwB,MAAM;IAC9BC,UAAU,EAAE1B,OAAO,CAAC2B,gBAAgB;IACpCC,WAAW,EAAE,KAAK;IAClBC,GAAG,EAAE5B,OAAO,CAAC6B,UAAU;IACvBrB,GAAG,EAAE,CAAC,CAACT,OAAO,CAACS,GAAG;IAClBsB,QAAQ,EAAE/B,OAAO,CAAC+B;EACpB,CAAC;EACD,OAAOC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEhC,OAAO,EAAE;IAAEwB,MAAM,EAAEF,YAAY;IAAEG,UAAU,EAAE1B,OAAO,CAAC2B;EAAiB,CAAC,CAAC;AACnG;AAEO,SAAShB,0BAA0B,CACxCc,MAA2B,EAC3BvB,YAAuC,GAAG,EAAE,EAC5CF,OAAqC,EAChB;EACrB,IAAI,CAACkC,KAAK,CAACC,OAAO,CAACjC,YAAY,CAAC,EAAE,OAAOuB,MAAM;EAC/C,MAAMW,SAAS,GAAGlC,YAAY,CAACmC,MAAM,CAAC,CAACC,GAAG,EAAEC,WAAW,KAAK;IAC1D,OAAOA,WAAW,CAACD,GAAG,EAAEtC,OAAO,CAAC;EAClC,CAAC,EAAEyB,MAAM,CAAC;EACV,OAAOW,SAAS;AAClB"}