import { ESLint as ESLintLib } from 'eslint';
import { Linter, LinterContext } from '@teambit/linter';
import { Logger, LoggerMain } from '@teambit/logger';
import { EslintConfigMutator } from '@teambit/defender.eslint.config-mutator';
export declare type ESLintOptions = {
    /**
     * linter config for eslint.
     */
    config: ESLintLib.Options;
    /**
     * specify to path to resolve eslint plugins from.
     */
    pluginPath?: string;
    /**
     * decide the formatter for the CLI output.
     */
    formatter?: string;
    /**
     * file types to lint.
     */
    extensions?: string[];
    /**
     * typescript config for eslint.
     * If you pass this, bit will auto generate a temp config file in `node_modules/.cache` and pass it to eslint.
     * In case you have include/exclude props in the tsconfig, they will be changed to handle the fact that they are inside the node_modules/.cache folder.
     * a `../../` will be added to the beginning of the path.
     */
    tsConfig?: Record<string, any>;
};
export declare type EslintConfigTransformContext = {
    fix: boolean;
};
export declare type EslintConfigTransformer = (config: EslintConfigMutator, context: EslintConfigTransformContext) => EslintConfigMutator;
export declare class ESLintMain {
    private logger;
    constructor(logger: Logger);
    /**
     * create a eslint linter instance.
     * @param options eslint options.
     * @param ESLintModule reference to an `eslint` module.
     */
    createLinter(context: LinterContext, options: ESLintOptions, transformers?: EslintConfigTransformer[], ESLintModule?: any): Linter;
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static dependencies: import("@teambit/harmony").Aspect[];
    static provider([loggerExt]: [LoggerMain]): Promise<ESLintMain>;
}
export declare function runTransformersWithContext(config: EslintConfigMutator, transformers: EslintConfigTransformer[] | undefined, context: EslintConfigTransformContext): EslintConfigMutator;
