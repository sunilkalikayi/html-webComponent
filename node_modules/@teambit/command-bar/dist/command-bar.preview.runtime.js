"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CommandBarPreview = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _preview() {
  const data = require("@teambit/preview");
  _preview = function () {
    return data;
  };
  return data;
}
function _pubsub() {
  const data = require("@teambit/pubsub");
  _pubsub = function () {
    return data;
  };
  return data;
}
function _keybinding() {
  const data = require("./keybinding");
  _keybinding = function () {
    return data;
  };
  return data;
}
function _commandBar() {
  const data = require("./command-bar.aspect");
  _commandBar = function () {
    return data;
  };
  return data;
}
function _keyEvent() {
  const data = require("./model/key-event");
  _keyEvent = function () {
    return data;
  };
  return data;
}
class CommandBarPreview {
  constructor(pubSub) {
    this.pubSub = pubSub;
    (0, _defineProperty2().default)(this, "handleKeyEvent", e => {
      const {
        target
      } = e;
      if (!target || isEditable(target)) return;
      if (isDenyListed(e)) e.preventDefault();
      this.pubSub.pub(_commandBar().CommandBarAspect.id, new (_keyEvent().KeyEvent)(e));
    });
    document.addEventListener('keydown', this.handleKeyEvent);
    document.addEventListener('keypress', this.handleKeyEvent);
    document.addEventListener('keyup', this.handleKeyEvent);
  }
  static async provider([pubSub]) {
    const pubsubPreview = new CommandBarPreview(pubSub);
    return pubsubPreview;
  }
}
exports.CommandBarPreview = CommandBarPreview;
(0, _defineProperty2().default)(CommandBarPreview, "dependencies", [_pubsub().PubsubAspect]);
(0, _defineProperty2().default)(CommandBarPreview, "runtime", _preview().PreviewRuntime);
const editableTags = ['INPUT', 'SELECT', 'TEXTAREA'];
function isEditable(element) {
  return editableTags.includes(element.tagName) || element.isContentEditable;
}
_commandBar().CommandBarAspect.addRuntime(CommandBarPreview);

// block default browser behavior that would override our keybinding.
function isDenyListed(e) {
  return (0, _keybinding().isOpenCommandBarKeybinding)(e);
}

//# sourceMappingURL=command-bar.preview.runtime.js.map