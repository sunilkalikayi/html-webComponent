"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolvePeerToDirOrFile = resolvePeerToDirOrFile;
exports.resolvePeerToFile = resolvePeerToFile;
function _fs() {
  const data = _interopRequireWildcard(require("fs"));
  _fs = function () {
    return data;
  };
  return data;
}
function _enhancedResolve() {
  const data = require("enhanced-resolve");
  _enhancedResolve = function () {
    return data;
  };
  return data;
}
function _findRoot() {
  const data = _interopRequireDefault(require("find-root"));
  _findRoot = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * Get the package folder, and in case it's not found get the resolved file path
 * @param peerName
 * @returns
 */
function resolvePeerToDirOrFile(peerName, logger, hostRootDir) {
  let resolved;
  try {
    const options = {
      // resolve the host root dir to its real location, as require.resolve is preserve symlink, so we get wrong result otherwise
      paths: [process.cwd(), __dirname]
    };
    if (hostRootDir) {
      // resolve the host root dir to its real location, as require.resolve is preserve symlink, so we get wrong result otherwise
      options.paths.unshift((0, _fs().realpathSync)(hostRootDir));
    }
    resolved = require.resolve(peerName, options);
    const folder = (0, _findRoot().default)(resolved);
    return folder;
  } catch (e) {
    if (resolved) {
      logger.warn(`Couldn't find root dir for "${peerName}" from path "${resolved}" to add it as webpack alias`);
    } else {
      logger.warn(`Couldn't resolve "${peerName}" to add it as webpack alias`);
    }
    return resolved;
  }
}

/**
 * Make sure to resolve the peer path correctly
 * we first resolve it to its dir (to be aligned with the aliases transformer)
 * Then we resolve it to specific file, using enhanced resolve to make sure we resolve it using the correct main fields order
 * @param peer
 */
function resolvePeerToFile(peer, logger, hostRootDir) {
  const dirOrFile = resolvePeerToDirOrFile(peer, logger, hostRootDir);
  if (!dirOrFile) return undefined;
  const resolver = createResolver();
  const resolvedFile = resolver.resolveSync({}, '', dirOrFile);
  return resolvedFile;
}

/**
 * Generate a resolver that will read first the module field then the main field
 * to make it compatible with webpack behavior
 * @returns
 */
function createResolver() {
  // create a resolver
  const myResolver = _enhancedResolve().ResolverFactory.createResolver({
    fileSystem: new (_enhancedResolve().CachedInputFileSystem)(_fs().default, 4000),
    useSyncFileSystemCalls: true,
    mainFields: ['browser', 'module', 'main']
  });
  return myResolver;
}

//# sourceMappingURL=resolve-peer.js.map