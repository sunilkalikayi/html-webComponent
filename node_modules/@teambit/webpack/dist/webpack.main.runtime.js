"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WebpackMain = void 0;
exports.runTransformersWithContext = runTransformersWithContext;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _webpack() {
  const data = _interopRequireDefault(require("webpack"));
  _webpack = function () {
    return data;
  };
  return data;
}
function _pubsub() {
  const data = _interopRequireDefault(require("@teambit/pubsub"));
  _pubsub = function () {
    return data;
  };
  return data;
}
function _bundler() {
  const data = require("@teambit/bundler");
  _bundler = function () {
    return data;
  };
  return data;
}
function _cli() {
  const data = require("@teambit/cli");
  _cli = function () {
    return data;
  };
  return data;
}
function _logger() {
  const data = require("@teambit/logger");
  _logger = function () {
    return data;
  };
  return data;
}
function _workspace() {
  const data = require("@teambit/workspace");
  _workspace = function () {
    return data;
  };
  return data;
}
function _webpackMerge() {
  const data = require("webpack-merge");
  _webpackMerge = function () {
    return data;
  };
  return data;
}
function _webpackDevServer() {
  const data = _interopRequireDefault(require("webpack-dev-server"));
  _webpackDevServer = function () {
    return data;
  };
  return data;
}
function _webpackModules() {
  const data = require("@teambit/webpack.modules.config-mutator");
  _webpackModules = function () {
    return data;
  };
  return data;
}
function _transformers() {
  const data = require("./transformers");
  _transformers = function () {
    return data;
  };
  return data;
}
function _webpackDev() {
  const data = require("./config/webpack.dev.config");
  _webpackDev = function () {
    return data;
  };
  return data;
}
function _webpack2() {
  const data = require("./config/webpack.config");
  _webpack2 = function () {
    return data;
  };
  return data;
}
function _webpack3() {
  const data = require("./webpack.aspect");
  _webpack3 = function () {
    return data;
  };
  return data;
}
function _webpack4() {
  const data = require("./webpack.bundler");
  _webpack4 = function () {
    return data;
  };
  return data;
}
function _webpack5() {
  const data = require("./webpack.dev-server");
  _webpack5 = function () {
    return data;
  };
  return data;
}
class WebpackMain {
  constructor(
  /**
   * Pubsub extension.
   */
  pubsub,
  /**
   * workspace extension.
   */
  workspace,
  /**
   * bundler extension.
   */
  bundler,
  /**
   * Logger extension
   */
  logger) {
    this.pubsub = pubsub;
    this.workspace = workspace;
    this.bundler = bundler;
    this.logger = logger;
  }

  /**
   * create an instance of bit-compliant webpack dev server for a set of components
   */
  createDevServer(context, transformers = []) {
    const config = this.createDevServerConfig(context.entry, this.workspace.path, context.id, context.rootPath, context.publicPath, context.title);
    const configMutator = new (_webpackModules().WebpackConfigMutator)(config);
    const transformerContext = Object.assign(context, {
      mode: 'dev'
    });
    const internalTransformers = this.generateTransformers(undefined, transformerContext);
    const afterMutation = runTransformersWithContext(configMutator.clone(), [...internalTransformers, ...transformers], transformerContext);
    // @ts-ignore - fix this
    return new (_webpack5().WebpackDevServer)(afterMutation.raw, _webpack().default, _webpackDevServer().default);
  }
  mergeConfig(target, source) {
    return (0, _webpackMerge().merge)(target, source);
  }
  createBundler(context, transformers = [], initialConfigs, webpackInstance) {
    const transformerContext = {
      mode: 'prod'
    };
    // eslint-disable-next-line max-len
    const configs = initialConfigs || this.createConfigs(context.targets, _webpack2().configFactory, transformers, transformerContext, context);
    return new (_webpack4().WebpackBundler)(context.targets, configs, this.logger, webpackInstance || _webpack().default, context.metaData);
  }
  createConfigs(targets, factory, transformers = [], transformerContext, bundlerContext) {
    return targets.map(target => {
      const baseConfig = factory(target, bundlerContext);
      const configMutator = new (_webpackModules().WebpackConfigMutator)(baseConfig);
      const context = Object.assign({}, transformerContext, {
        target
      });
      const internalTransformers = this.generateTransformers(context, undefined, target);
      const afterMutation = runTransformersWithContext(configMutator.clone(), [...internalTransformers, ...transformers], context);
      return afterMutation.raw;
    });
  }
  generateTransformers(_bundlerContext, devServerContext, target) {
    const transformers = [];
    // TODO: handle dev server
    const hostDeps = (target === null || target === void 0 ? void 0 : target.hostDependencies) || (devServerContext === null || devServerContext === void 0 ? void 0 : devServerContext.hostDependencies);
    if (hostDeps) {
      if (target !== null && target !== void 0 && target.aliasHostDependencies || devServerContext !== null && devServerContext !== void 0 && devServerContext.aliasHostDependencies) {
        const peerAliasesTransformer = (0, _transformers().generateAddAliasesFromPeersTransformer)(hostDeps, this.logger);
        transformers.push(peerAliasesTransformer);
      }
      if (target !== null && target !== void 0 && target.externalizeHostDependencies || devServerContext !== null && devServerContext !== void 0 && devServerContext.externalizeHostDependencies) {
        const externalsTransformer = (0, _transformers().generateExternalsTransformer)(hostDeps);
        transformers.push(externalsTransformer);
      }
    }
    return transformers;
  }
  createDevServerConfig(entry, rootPath, devServerID, publicRoot, publicPath, title) {
    return (0, _webpackDev().configFactory)(devServerID, rootPath, entry, publicRoot, publicPath, this.pubsub, title);
  }
  static async provider([pubsub, workspace, bundler, logger]) {
    const logPublisher = logger.createLogger(_webpack3().WebpackAspect.id);
    return new WebpackMain(pubsub, workspace, bundler, logPublisher);
  }
}
exports.WebpackMain = WebpackMain;
(0, _defineProperty2().default)(WebpackMain, "slots", []);
(0, _defineProperty2().default)(WebpackMain, "runtime", _cli().MainRuntime);
(0, _defineProperty2().default)(WebpackMain, "dependencies", [_pubsub().default, _workspace().WorkspaceAspect, _bundler().BundlerAspect, _logger().LoggerAspect]);
_webpack3().WebpackAspect.addRuntime(WebpackMain);
function runTransformersWithContext(config, transformers = [],
// context: WebpackConfigTransformContext | WebpackConfigDevServerTransformContext
context) {
  if (!Array.isArray(transformers)) return config;
  const newConfig = transformers.reduce((acc, transformer) => {
    // @ts-ignore
    return transformer(acc, context);
  }, config);
  return newConfig;
}

//# sourceMappingURL=webpack.main.runtime.js.map