"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WebpackDevServer = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _util() {
  const data = require("util");
  _util = function () {
    return data;
  };
  return data;
}
function _webpack() {
  const data = require("./webpack.aspect");
  _webpack = function () {
    return data;
  };
  return data;
}
class WebpackDevServer {
  constructor(config, webpack, WsDevServer) {
    this.config = config;
    this.webpack = webpack;
    this.WsDevServer = WsDevServer;
    (0, _defineProperty2().default)(this, "id", _webpack().WebpackAspect.id);
    (0, _defineProperty2().default)(this, "displayName", 'Webpack dev server');
  }
  getCompiler() {
    return this.webpack(this.config);
  }
  displayConfig() {
    return (0, _util().inspect)(this.config, {
      depth: 10
    });
  }
  async listen(port) {
    if (!this.config.devServer) {
      throw new Error('Missing devServer configuration for webpack');
    }
    // Prevent different port between the config port and the listen arg port
    this.config.devServer.port = port;

    // Adding signal listeners to make sure we immediately close the process on sigint / sigterm (otherwise webpack dev server closing will take time)
    this.addSignalListener();

    // Compatibility check for Webpack dev server v3 (e.g. for Angular v8)
    if (typeof this.WsDevServer.addDevServerEntrypoints !== 'undefined') {
      // @ts-ignore in the capsules it throws an error about compatibilities issues between webpack.compiler and webpackDevServer/webpack/compiler
      const webpackDs = new this.WsDevServer(this.getCompiler(), this.config.devServer);
      return webpackDs.listen(port);
    }

    // @ts-ignore in the capsules it throws an error about compatibilities issues between webpack.compiler and webpackDevServer/webpack/compiler
    const webpackDs = new this.WsDevServer(this.config.devServer, this.getCompiler());
    await webpackDs.start();
    return webpackDs.server;
  }
  addSignalListener() {
    process.on('SIGTERM', () => {
      process.exit();
    });
    process.on('SIGINT', () => {
      process.exit();
    });
  }
}
exports.WebpackDevServer = WebpackDevServer;

//# sourceMappingURL=webpack.dev-server.js.map