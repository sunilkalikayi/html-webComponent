import webpack from 'webpack';
import { PubsubMain } from '@teambit/pubsub';
import { BundlerContext, BundlerMain, DevServer, DevServerContext, BundlerMode, Target } from '@teambit/bundler';
import { Logger, LoggerMain } from '@teambit/logger';
import { Workspace } from '@teambit/workspace';
import { WebpackConfigMutator } from '@teambit/webpack.modules.config-mutator';
import { WebpackBundler } from './webpack.bundler';
export declare type WebpackConfigTransformContext = GlobalWebpackConfigTransformContext & {
    target: Target;
};
export declare type WebpackConfigDevServerTransformContext = GlobalWebpackConfigTransformContext & DevServerContext;
export declare type GlobalWebpackConfigTransformContext = {
    mode: BundlerMode;
    /**
     * A path for the host root dir
     * Host root dir is usually the env root dir
     * This can be used in different bundle options which run require.resolve
     * for example when configuring webpack aliases or webpack expose loader on the peers deps
     */
    hostRootDir?: string;
};
export declare type WebpackConfigTransformer = (config: WebpackConfigMutator, context: WebpackConfigTransformContext) => WebpackConfigMutator;
export declare type WebpackConfigDevServerTransformer = (config: WebpackConfigMutator, context: WebpackConfigDevServerTransformContext) => WebpackConfigMutator;
export declare class WebpackMain {
    /**
     * Pubsub extension.
     */
    pubsub: PubsubMain;
    /**
     * workspace extension.
     */
    private workspace;
    /**
     * bundler extension.
     */
    private bundler;
    /**
     * Logger extension
     */
    logger: Logger;
    constructor(
    /**
     * Pubsub extension.
     */
    pubsub: PubsubMain, 
    /**
     * workspace extension.
     */
    workspace: Workspace, 
    /**
     * bundler extension.
     */
    bundler: BundlerMain, 
    /**
     * Logger extension
     */
    logger: Logger);
    /**
     * create an instance of bit-compliant webpack dev server for a set of components
     */
    createDevServer(context: DevServerContext, transformers?: WebpackConfigTransformer[]): DevServer;
    mergeConfig(target: any, source: any): any;
    createBundler(context: BundlerContext, transformers?: WebpackConfigTransformer[], initialConfigs?: webpack.Configuration[], webpackInstance?: any): WebpackBundler;
    private createConfigs;
    private generateTransformers;
    private createDevServerConfig;
    static slots: never[];
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static dependencies: import("@teambit/harmony").Aspect[];
    static provider([pubsub, workspace, bundler, logger]: [PubsubMain, Workspace, BundlerMain, LoggerMain]): Promise<WebpackMain>;
}
export declare function runTransformersWithContext(config: WebpackConfigMutator, transformers: (WebpackConfigTransformer | WebpackConfigDevServerTransformer)[] | undefined, context: any): WebpackConfigMutator;
