"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.configFactory = configFactory;
function _path() {
  const data = _interopRequireDefault(require("path"));
  _path = function () {
    return data;
  };
  return data;
}
function _webpack() {
  const data = _interopRequireDefault(require("webpack"));
  _webpack = function () {
    return data;
  };
  return data;
}
function _htmlWebpackPlugin() {
  const data = _interopRequireDefault(require("html-webpack-plugin"));
  _htmlWebpackPlugin = function () {
    return data;
  };
  return data;
}
function _errorOverlayMiddleware() {
  const data = _interopRequireDefault(require("react-dev-utils/errorOverlayMiddleware"));
  _errorOverlayMiddleware = function () {
    return data;
  };
  return data;
}
function _evalSourceMapMiddleware() {
  const data = _interopRequireDefault(require("react-dev-utils/evalSourceMapMiddleware"));
  _evalSourceMapMiddleware = function () {
    return data;
  };
  return data;
}
function _noopServiceWorkerMiddleware() {
  const data = _interopRequireDefault(require("react-dev-utils/noopServiceWorkerMiddleware"));
  _noopServiceWorkerMiddleware = function () {
    return data;
  };
  return data;
}
function _redirectServedPathMiddleware() {
  const data = _interopRequireDefault(require("react-dev-utils/redirectServedPathMiddleware"));
  _redirectServedPathMiddleware = function () {
    return data;
  };
  return data;
}
function _getPublicUrlOrPath() {
  const data = _interopRequireDefault(require("react-dev-utils/getPublicUrlOrPath"));
  _getPublicUrlOrPath = function () {
    return data;
  };
  return data;
}
function _utils() {
  const data = require("@teambit/legacy/dist/utils");
  _utils = function () {
    return data;
  };
  return data;
}
function _webpackFallbacks() {
  const data = require("./webpack-fallbacks");
  _webpackFallbacks = function () {
    return data;
  };
  return data;
}
function _html() {
  const data = require("./html");
  _html = function () {
    return data;
  };
  return data;
}
function _webpackBitReporterPlugin() {
  const data = require("../plugins/webpack-bit-reporter-plugin");
  _webpackBitReporterPlugin = function () {
    return data;
  };
  return data;
}
function _webpackFallbacksProvidePluginConfig() {
  const data = require("./webpack-fallbacks-provide-plugin-config");
  _webpackFallbacksProvidePluginConfig = function () {
    return data;
  };
  return data;
}
function _webpackFallbacksAliases() {
  const data = require("./webpack-fallbacks-aliases");
  _webpackFallbacksAliases = function () {
    return data;
  };
  return data;
}
const publicUrlOrPath = (0, _getPublicUrlOrPath().default)(process.env.NODE_ENV === 'development', '/', '/public');
function configFactory(devServerID, workspaceDir, entryFiles, publicRoot, publicPath, pubsub, title, favicon) {
  const resolveWorkspacePath = relativePath => _path().default.resolve(workspaceDir, relativePath);

  // Required for babel-preset-react-app
  process.env.NODE_ENV = 'development';
  const publicDirectory = `${publicRoot}/${publicPath}`;
  return {
    // Environment mode
    mode: 'development',
    devtool: 'inline-source-map',
    // Entry point of app
    entry: entryFiles.map(filePath => resolveWorkspacePath(filePath)),
    output: {
      // Development filename output
      filename: 'static/js/[name].bundle.js',
      pathinfo: true,
      path: resolveWorkspacePath(publicDirectory),
      // publicPath: resolveWorkspacePath(publicDirectory),

      chunkFilename: 'static/js/[name].chunk.js',
      // point sourcemap entries to original disk locations (format as URL on windows)
      devtoolModuleFilenameTemplate: info => (0, _utils().pathNormalizeToLinux)(_path().default.resolve(info.absoluteResourcePath))

      // this defaults to 'window', but by setting it to 'this' then
      // module chunks which are built will work in web workers as well.
      // Commented out to use the default (self) as according to tobias with webpack5 self is working with workers as well
      // globalObject: 'this',
    },

    infrastructureLogging: {
      level: 'error'
    },
    stats: {
      errorDetails: true
    },
    devServer: {
      allowedHosts: 'all',
      static: [{
        directory: resolveWorkspacePath(publicDirectory),
        staticOptions: {},
        // Don't be confused with `dev.publicPath`, it is `publicPath` for static directory
        // Can be:
        // publicPath: ['/static-public-path-one/', '/static-public-path-two/'],
        publicPath: publicDirectory,
        // Can be:
        // serveIndex: {} (options for the `serveIndex` option you can find https://github.com/expressjs/serve-index)
        serveIndex: true,
        // Can be:
        // watch: {} (options for the `watch` option you can find https://github.com/paulmillr/chokidar)
        watch: true
      }],
      // Enable compression
      compress: true,
      // Enable hot reloading
      hot: true,
      historyApiFallback: {
        disableDotRule: true,
        index: resolveWorkspacePath(publicDirectory)
      },
      client: {
        overlay: false
      },
      onBeforeSetupMiddleware(wds) {
        const {
          app
        } = wds;
        // Keep `evalSourceMapMiddleware` and `errorOverlayMiddleware`
        // middlewares before `redirectServedPath` otherwise will not have any effect
        // This lets us fetch source contents from webpack for the error overlay
        // @ts-ignore - @types/WDS mismatch - 3.11.6 vs 4.0.3
        app.use((0, _evalSourceMapMiddleware().default)(wds));
        // This lets us open files from the runtime error overlay.
        app.use((0, _errorOverlayMiddleware().default)());
      },
      onAfterSetupMiddleware({
        app
      }) {
        // Redirect to `PUBLIC_URL` or `homepage` from `package.json` if url not match
        app.use((0, _redirectServedPathMiddleware().default)(publicUrlOrPath));

        // This service worker file is effectively a 'no-op' that will reset any
        // previous service worker registered for the same host:port combination.
        // We do this in development to avoid hitting the production cache if
        // it used the same host and port.
        // https://github.com/facebook/create-react-app/issues/2272#issuecomment-302832432
        app.use((0, _noopServiceWorkerMiddleware().default)(publicUrlOrPath));
      },
      devMiddleware: {
        // forward static files
        publicPath: _path().default.join('/', publicRoot)
      }
    },
    resolve: {
      // TODO - check - we shoult not need both fallbacks and alias and provider plugin
      alias: _webpackFallbacksAliases().fallbacksAliases,
      fallback: _webpackFallbacks().fallbacks
    },
    plugins: [new (_htmlWebpackPlugin().default)({
      templateContent: (0, _html().html)(title || 'Component preview'),
      filename: 'index.html',
      favicon
    }), new (_webpack().default.ProvidePlugin)(_webpackFallbacksProvidePluginConfig().fallbacksProvidePluginConfig), new (_webpackBitReporterPlugin().WebpackBitReporterPlugin)({
      options: {
        pubsub,
        devServerID
      }
    })]
  };
}

//# sourceMappingURL=webpack.dev.config.js.map