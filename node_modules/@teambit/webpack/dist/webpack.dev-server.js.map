{"version":3,"names":["WebpackDevServer","constructor","config","webpack","WsDevServer","WebpackAspect","id","getCompiler","displayConfig","inspect","depth","listen","port","devServer","Error","addSignalListener","addDevServerEntrypoints","webpackDs","start","server","process","on","exit"],"sources":["webpack.dev-server.ts"],"sourcesContent":["import type { DevServer } from '@teambit/bundler';\nimport type { Server } from 'http';\nimport type { webpack as webpackCompiler, Configuration } from 'webpack';\nimport type * as WDS from 'webpack-dev-server';\nimport { inspect } from 'util';\nimport { WebpackAspect } from './webpack.aspect';\n\nexport interface WebpackConfigWithDevServer extends Configuration {\n  devServer: WDS.Configuration;\n  favicon?: string;\n}\nexport class WebpackDevServer implements DevServer {\n  constructor(\n    private config: WebpackConfigWithDevServer,\n    private webpack: typeof webpackCompiler,\n    private WsDevServer: WDS\n  ) {}\n\n  private getCompiler(): any {\n    return this.webpack(this.config);\n  }\n\n  id = WebpackAspect.id;\n\n  displayName = 'Webpack dev server';\n\n  displayConfig(): string {\n    return inspect(this.config, { depth: 10 });\n  }\n\n  async listen(port: number): Promise<Server> {\n    if (!this.config.devServer) {\n      throw new Error('Missing devServer configuration for webpack');\n    }\n    // Prevent different port between the config port and the listen arg port\n    this.config.devServer.port = port;\n\n    // Adding signal listeners to make sure we immediately close the process on sigint / sigterm (otherwise webpack dev server closing will take time)\n    this.addSignalListener();\n\n    // Compatibility check for Webpack dev server v3 (e.g. for Angular v8)\n    if (typeof (this.WsDevServer as any).addDevServerEntrypoints !== 'undefined') {\n      // @ts-ignore in the capsules it throws an error about compatibilities issues between webpack.compiler and webpackDevServer/webpack/compiler\n      const webpackDs = new (this.WsDevServer as any)(this.getCompiler(), this.config.devServer);\n      return webpackDs.listen(port);\n    }\n\n    // @ts-ignore in the capsules it throws an error about compatibilities issues between webpack.compiler and webpackDevServer/webpack/compiler\n    const webpackDs: WDS = new this.WsDevServer(this.config.devServer, this.getCompiler());\n    await webpackDs.start();\n\n    return webpackDs.server;\n  }\n\n  private addSignalListener() {\n    process.on('SIGTERM', () => {\n      process.exit();\n    });\n\n    process.on('SIGINT', () => {\n      process.exit();\n    });\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;AAIA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAMO,MAAMA,gBAAgB,CAAsB;EACjDC,WAAW,CACDC,MAAkC,EAClCC,OAA+B,EAC/BC,WAAgB,EACxB;IAAA,KAHQF,MAAkC,GAAlCA,MAAkC;IAAA,KAClCC,OAA+B,GAA/BA,OAA+B;IAAA,KAC/BC,WAAgB,GAAhBA,WAAgB;IAAA,4CAOrBC,wBAAa,CAACC,EAAE;IAAA,qDAEP,oBAAoB;EAR/B;EAEKC,WAAW,GAAQ;IACzB,OAAO,IAAI,CAACJ,OAAO,CAAC,IAAI,CAACD,MAAM,CAAC;EAClC;EAMAM,aAAa,GAAW;IACtB,OAAO,IAAAC,eAAO,EAAC,IAAI,CAACP,MAAM,EAAE;MAAEQ,KAAK,EAAE;IAAG,CAAC,CAAC;EAC5C;EAEA,MAAMC,MAAM,CAACC,IAAY,EAAmB;IAC1C,IAAI,CAAC,IAAI,CAACV,MAAM,CAACW,SAAS,EAAE;MAC1B,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;IAChE;IACA;IACA,IAAI,CAACZ,MAAM,CAACW,SAAS,CAACD,IAAI,GAAGA,IAAI;;IAEjC;IACA,IAAI,CAACG,iBAAiB,EAAE;;IAExB;IACA,IAAI,OAAQ,IAAI,CAACX,WAAW,CAASY,uBAAuB,KAAK,WAAW,EAAE;MAC5E;MACA,MAAMC,SAAS,GAAG,IAAK,IAAI,CAACb,WAAW,CAAS,IAAI,CAACG,WAAW,EAAE,EAAE,IAAI,CAACL,MAAM,CAACW,SAAS,CAAC;MAC1F,OAAOI,SAAS,CAACN,MAAM,CAACC,IAAI,CAAC;IAC/B;;IAEA;IACA,MAAMK,SAAc,GAAG,IAAI,IAAI,CAACb,WAAW,CAAC,IAAI,CAACF,MAAM,CAACW,SAAS,EAAE,IAAI,CAACN,WAAW,EAAE,CAAC;IACtF,MAAMU,SAAS,CAACC,KAAK,EAAE;IAEvB,OAAOD,SAAS,CAACE,MAAM;EACzB;EAEQJ,iBAAiB,GAAG;IAC1BK,OAAO,CAACC,EAAE,CAAC,SAAS,EAAE,MAAM;MAC1BD,OAAO,CAACE,IAAI,EAAE;IAChB,CAAC,CAAC;IAEFF,OAAO,CAACC,EAAE,CAAC,QAAQ,EAAE,MAAM;MACzBD,OAAO,CAACE,IAAI,EAAE;IAChB,CAAC,CAAC;EACJ;AACF;AAAC"}