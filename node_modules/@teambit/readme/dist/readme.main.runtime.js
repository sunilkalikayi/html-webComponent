"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReadmeMain = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _envs() {
  const data = require("@teambit/envs");
  _envs = function () {
    return data;
  };
  return data;
}
function _cli() {
  const data = require("@teambit/cli");
  _cli = function () {
    return data;
  };
  return data;
}
function _mdx() {
  const data = _interopRequireDefault(require("@teambit/mdx"));
  _mdx = function () {
    return data;
  };
  return data;
}
function _docs() {
  const data = _interopRequireDefault(require("@teambit/docs"));
  _docs = function () {
    return data;
  };
  return data;
}
function _readme() {
  const data = require("./readme.aspect");
  _readme = function () {
    return data;
  };
  return data;
}
function _readme2() {
  const data = require("./readme.env");
  _readme2 = function () {
    return data;
  };
  return data;
}
class ReadmeMain {
  constructor(env, docs) {
    this.env = env;
    this.docs = docs;
  }
  icon() {
    return 'https://static.bit.dev/bit-icons/file-text.svg';
  }
  static async provider([envs, mdx, docs]) {
    const readmeEnv = envs.merge(new (_readme2().ReadmeEnv)(docs), mdx.mdxEnv);
    envs.registerEnv(readmeEnv);
    const readme = new ReadmeMain(readmeEnv, docs);
    return readme;
  }
}
exports.ReadmeMain = ReadmeMain;
(0, _defineProperty2().default)(ReadmeMain, "runtime", _cli().MainRuntime);
(0, _defineProperty2().default)(ReadmeMain, "dependencies", [_envs().EnvsAspect, _mdx().default, _docs().default]);
_readme().ReadmeAspect.addRuntime(ReadmeMain);

//# sourceMappingURL=readme.main.runtime.js.map