{"version":3,"names":["BitMap","constructor","legacyBitMap","consumer","addComponentConfig","id","aspectId","config","shouldMergeConfig","Error","bitMapEntry","getBitmapEntry","ignoreScopeAndVersion","currentConfig","isEqual","getNewConfig","merge","newConfig","markAsChanged","removeComponentConfig","markWithMinusIfNotExist","REMOVE_EXTENSION_SPECIAL_SIGN","removeEntireConfig","setEntireConfig","removeDefaultScope","defaultScope","setDefaultScope","write","writeBitMap","ignoreVersion","getComponent","_legacy","getAspectIdFromConfig","componentId","ignoreAspectVersion","undefined","toString","allVersions","Object","keys","filter","startsWith","toStringWithoutVersion","length","BitError","join","renameNewComponent","sourceId","targetId","hasVersion","fullName","removeComponent","setComponent","scope","getExportedLaneId","isLaneExported","laneId","hasChanged"],"sources":["bit-map.ts"],"sourcesContent":["import { isEqual, merge } from 'lodash';\nimport { ComponentID } from '@teambit/component-id';\nimport LegacyBitMap from '@teambit/legacy/dist/consumer/bit-map';\nimport { Consumer } from '@teambit/legacy/dist/consumer';\nimport { GetBitMapComponentOptions } from '@teambit/legacy/dist/consumer/bit-map/bit-map';\nimport ComponentMap from '@teambit/legacy/dist/consumer/bit-map/component-map';\nimport { REMOVE_EXTENSION_SPECIAL_SIGN } from '@teambit/legacy/dist/consumer/config';\nimport { BitError } from '@teambit/bit-error';\nimport { LaneId } from '@teambit/lane-id';\n/**\n * consider extracting to a new component.\n * (pro: making Workspace aspect smaller. con: it's an implementation details of the workspace)\n */\nexport class BitMap {\n  constructor(private legacyBitMap: LegacyBitMap, private consumer: Consumer) {}\n\n  /**\n   * adds component config to the .bitmap file.\n   * later, upon `bit tag`, the data is saved in the scope.\n   * returns a boolean indicating whether a change has been made.\n   */\n  addComponentConfig(\n    id: ComponentID,\n    aspectId: string,\n    config: Record<string, any> = {},\n    shouldMergeConfig = false\n  ): boolean {\n    if (!aspectId || typeof aspectId !== 'string') throw new Error(`expect aspectId to be string, got ${aspectId}`);\n    const bitMapEntry = this.getBitmapEntry(id, { ignoreScopeAndVersion: true });\n    const currentConfig = (bitMapEntry.config ||= {})[aspectId];\n    if (isEqual(currentConfig, config)) {\n      return false; // no changes\n    }\n    const getNewConfig = () => {\n      if (!config) return null;\n      if (!shouldMergeConfig) return config;\n      // should merge\n      if (!currentConfig) return config;\n      if (currentConfig === '-') return config;\n      // lodash merge performs a deep merge. (the native concatenation don't)\n      return merge(currentConfig, config);\n    };\n    const newConfig = getNewConfig();\n    if (newConfig) {\n      bitMapEntry.config[aspectId] = newConfig;\n    } else {\n      delete bitMapEntry.config[aspectId];\n    }\n    this.legacyBitMap.markAsChanged();\n\n    return true; // changes have been made\n  }\n\n  removeComponentConfig(id: ComponentID, aspectId: string, markWithMinusIfNotExist: boolean): boolean {\n    if (!aspectId || typeof aspectId !== 'string') throw new Error(`expect aspectId to be string, got ${aspectId}`);\n    const bitMapEntry = this.getBitmapEntry(id, { ignoreScopeAndVersion: true });\n    const currentConfig = (bitMapEntry.config ||= {})[aspectId];\n    if (currentConfig) {\n      delete bitMapEntry.config[aspectId];\n    } else {\n      if (!markWithMinusIfNotExist) {\n        return false; // no changes\n      }\n      bitMapEntry.config[aspectId] = REMOVE_EXTENSION_SPECIAL_SIGN;\n    }\n\n    this.legacyBitMap.markAsChanged();\n\n    return true; // changes have been made\n  }\n\n  removeEntireConfig(id: ComponentID): boolean {\n    const bitMapEntry = this.getBitmapEntry(id, { ignoreScopeAndVersion: true });\n    if (!bitMapEntry.config) return false;\n    delete bitMapEntry.config;\n    this.legacyBitMap.markAsChanged();\n    return true;\n  }\n\n  setEntireConfig(id: ComponentID, config: Record<string, any>) {\n    const bitMapEntry = this.getBitmapEntry(id, { ignoreScopeAndVersion: true });\n    bitMapEntry.config = config;\n    this.legacyBitMap.markAsChanged();\n  }\n\n  removeDefaultScope(id: ComponentID) {\n    const bitMapEntry = this.getBitmapEntry(id, { ignoreScopeAndVersion: true });\n    if (bitMapEntry.defaultScope) {\n      delete bitMapEntry.defaultScope;\n      this.legacyBitMap.markAsChanged();\n    }\n  }\n\n  setDefaultScope(id: ComponentID, defaultScope: string) {\n    const bitMapEntry = this.getBitmapEntry(id, { ignoreScopeAndVersion: true });\n    bitMapEntry.defaultScope = defaultScope;\n    this.legacyBitMap.markAsChanged();\n  }\n\n  /**\n   * write .bitmap object to the filesystem\n   */\n  async write() {\n    await this.consumer.writeBitMap();\n  }\n\n  /**\n   * get the data saved in the .bitmap file for this component-id.\n   */\n  getBitmapEntry(\n    id: ComponentID,\n    { ignoreVersion, ignoreScopeAndVersion }: GetBitMapComponentOptions = {}\n  ): ComponentMap {\n    return this.legacyBitMap.getComponent(id._legacy, { ignoreVersion, ignoreScopeAndVersion });\n  }\n\n  getAspectIdFromConfig(\n    componentId: ComponentID,\n    aspectId: ComponentID,\n    ignoreAspectVersion = false\n  ): string | undefined {\n    const bitMapEntry = this.getBitmapEntry(componentId);\n    const config = bitMapEntry.config;\n    if (!config) {\n      return undefined;\n    }\n    if (config[aspectId.toString()]) {\n      return aspectId.toString();\n    }\n    if (!ignoreAspectVersion) {\n      return undefined;\n    }\n    const allVersions = Object.keys(config).filter((id) => id.startsWith(`${aspectId.toStringWithoutVersion()}@`));\n    if (allVersions.length > 1) {\n      throw new BitError(\n        `error: the same aspect ${\n          aspectId.toStringWithoutVersion\n        } configured multiple times for \"${componentId.toString()}\"\\n${allVersions.join('\\n')}`\n      );\n    }\n    return allVersions.length === 1 ? allVersions[0] : undefined;\n  }\n\n  /**\n   * components that were not tagged yet are safe to rename them from the .bitmap file.\n   */\n  renameNewComponent(sourceId: ComponentID, targetId: ComponentID) {\n    const bitMapEntry = this.getBitmapEntry(sourceId);\n    if (bitMapEntry.id.hasVersion()) {\n      throw new Error(`unable to rename tagged or exported component: ${bitMapEntry.id.toString()}`);\n    }\n    if (sourceId.isEqual(targetId)) {\n      throw new Error(`source-id and target-id are equal: \"${sourceId.toString()}\"`);\n    }\n    if (sourceId.fullName !== targetId.fullName) {\n      this.legacyBitMap.removeComponent(bitMapEntry.id);\n      bitMapEntry.id = targetId._legacy;\n      this.legacyBitMap.setComponent(bitMapEntry.id, bitMapEntry);\n    }\n    if (sourceId.scope !== targetId.scope) {\n      this.setDefaultScope(targetId, targetId.scope);\n    }\n  }\n\n  removeComponent(id: ComponentID) {\n    this.legacyBitMap.removeComponent(id._legacy);\n  }\n\n  /**\n   * this is the lane-id of the recently exported lane. in case of a new lane, which was not exported yet, this will be\n   * empty.\n   */\n  getExportedLaneId(): LaneId | undefined {\n    return this.legacyBitMap.isLaneExported ? this.legacyBitMap.laneId : undefined;\n  }\n\n  /**\n   * whether .bitmap file has changed in-memory\n   */\n  hasChanged(): boolean {\n    return this.legacyBitMap.hasChanged;\n  }\n}\n"],"mappings":";;;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAMA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;AACA;AACA;AACA;AACO,MAAMA,MAAM,CAAC;EAClBC,WAAW,CAASC,YAA0B,EAAUC,QAAkB,EAAE;IAAA,KAAxDD,YAA0B,GAA1BA,YAA0B;IAAA,KAAUC,QAAkB,GAAlBA,QAAkB;EAAG;;EAE7E;AACF;AACA;AACA;AACA;EACEC,kBAAkB,CAChBC,EAAe,EACfC,QAAgB,EAChBC,MAA2B,GAAG,CAAC,CAAC,EAChCC,iBAAiB,GAAG,KAAK,EAChB;IACT,IAAI,CAACF,QAAQ,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE,MAAM,IAAIG,KAAK,CAAE,qCAAoCH,QAAS,EAAC,CAAC;IAC/G,MAAMI,WAAW,GAAG,IAAI,CAACC,cAAc,CAACN,EAAE,EAAE;MAAEO,qBAAqB,EAAE;IAAK,CAAC,CAAC;IAC5E,MAAMC,aAAa,GAAG,CAACH,WAAW,CAACH,MAAM,KAAlBG,WAAW,CAACH,MAAM,GAAK,CAAC,CAAC,GAAED,QAAQ,CAAC;IAC3D,IAAI,IAAAQ,iBAAO,EAACD,aAAa,EAAEN,MAAM,CAAC,EAAE;MAClC,OAAO,KAAK,CAAC,CAAC;IAChB;;IACA,MAAMQ,YAAY,GAAG,MAAM;MACzB,IAAI,CAACR,MAAM,EAAE,OAAO,IAAI;MACxB,IAAI,CAACC,iBAAiB,EAAE,OAAOD,MAAM;MACrC;MACA,IAAI,CAACM,aAAa,EAAE,OAAON,MAAM;MACjC,IAAIM,aAAa,KAAK,GAAG,EAAE,OAAON,MAAM;MACxC;MACA,OAAO,IAAAS,eAAK,EAACH,aAAa,EAAEN,MAAM,CAAC;IACrC,CAAC;IACD,MAAMU,SAAS,GAAGF,YAAY,EAAE;IAChC,IAAIE,SAAS,EAAE;MACbP,WAAW,CAACH,MAAM,CAACD,QAAQ,CAAC,GAAGW,SAAS;IAC1C,CAAC,MAAM;MACL,OAAOP,WAAW,CAACH,MAAM,CAACD,QAAQ,CAAC;IACrC;IACA,IAAI,CAACJ,YAAY,CAACgB,aAAa,EAAE;IAEjC,OAAO,IAAI,CAAC,CAAC;EACf;;EAEAC,qBAAqB,CAACd,EAAe,EAAEC,QAAgB,EAAEc,uBAAgC,EAAW;IAClG,IAAI,CAACd,QAAQ,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE,MAAM,IAAIG,KAAK,CAAE,qCAAoCH,QAAS,EAAC,CAAC;IAC/G,MAAMI,WAAW,GAAG,IAAI,CAACC,cAAc,CAACN,EAAE,EAAE;MAAEO,qBAAqB,EAAE;IAAK,CAAC,CAAC;IAC5E,MAAMC,aAAa,GAAG,CAACH,WAAW,CAACH,MAAM,KAAlBG,WAAW,CAACH,MAAM,GAAK,CAAC,CAAC,GAAED,QAAQ,CAAC;IAC3D,IAAIO,aAAa,EAAE;MACjB,OAAOH,WAAW,CAACH,MAAM,CAACD,QAAQ,CAAC;IACrC,CAAC,MAAM;MACL,IAAI,CAACc,uBAAuB,EAAE;QAC5B,OAAO,KAAK,CAAC,CAAC;MAChB;;MACAV,WAAW,CAACH,MAAM,CAACD,QAAQ,CAAC,GAAGe,uCAA6B;IAC9D;IAEA,IAAI,CAACnB,YAAY,CAACgB,aAAa,EAAE;IAEjC,OAAO,IAAI,CAAC,CAAC;EACf;;EAEAI,kBAAkB,CAACjB,EAAe,EAAW;IAC3C,MAAMK,WAAW,GAAG,IAAI,CAACC,cAAc,CAACN,EAAE,EAAE;MAAEO,qBAAqB,EAAE;IAAK,CAAC,CAAC;IAC5E,IAAI,CAACF,WAAW,CAACH,MAAM,EAAE,OAAO,KAAK;IACrC,OAAOG,WAAW,CAACH,MAAM;IACzB,IAAI,CAACL,YAAY,CAACgB,aAAa,EAAE;IACjC,OAAO,IAAI;EACb;EAEAK,eAAe,CAAClB,EAAe,EAAEE,MAA2B,EAAE;IAC5D,MAAMG,WAAW,GAAG,IAAI,CAACC,cAAc,CAACN,EAAE,EAAE;MAAEO,qBAAqB,EAAE;IAAK,CAAC,CAAC;IAC5EF,WAAW,CAACH,MAAM,GAAGA,MAAM;IAC3B,IAAI,CAACL,YAAY,CAACgB,aAAa,EAAE;EACnC;EAEAM,kBAAkB,CAACnB,EAAe,EAAE;IAClC,MAAMK,WAAW,GAAG,IAAI,CAACC,cAAc,CAACN,EAAE,EAAE;MAAEO,qBAAqB,EAAE;IAAK,CAAC,CAAC;IAC5E,IAAIF,WAAW,CAACe,YAAY,EAAE;MAC5B,OAAOf,WAAW,CAACe,YAAY;MAC/B,IAAI,CAACvB,YAAY,CAACgB,aAAa,EAAE;IACnC;EACF;EAEAQ,eAAe,CAACrB,EAAe,EAAEoB,YAAoB,EAAE;IACrD,MAAMf,WAAW,GAAG,IAAI,CAACC,cAAc,CAACN,EAAE,EAAE;MAAEO,qBAAqB,EAAE;IAAK,CAAC,CAAC;IAC5EF,WAAW,CAACe,YAAY,GAAGA,YAAY;IACvC,IAAI,CAACvB,YAAY,CAACgB,aAAa,EAAE;EACnC;;EAEA;AACF;AACA;EACE,MAAMS,KAAK,GAAG;IACZ,MAAM,IAAI,CAACxB,QAAQ,CAACyB,WAAW,EAAE;EACnC;;EAEA;AACF;AACA;EACEjB,cAAc,CACZN,EAAe,EACf;IAAEwB,aAAa;IAAEjB;EAAiD,CAAC,GAAG,CAAC,CAAC,EAC1D;IACd,OAAO,IAAI,CAACV,YAAY,CAAC4B,YAAY,CAACzB,EAAE,CAAC0B,OAAO,EAAE;MAAEF,aAAa;MAAEjB;IAAsB,CAAC,CAAC;EAC7F;EAEAoB,qBAAqB,CACnBC,WAAwB,EACxB3B,QAAqB,EACrB4B,mBAAmB,GAAG,KAAK,EACP;IACpB,MAAMxB,WAAW,GAAG,IAAI,CAACC,cAAc,CAACsB,WAAW,CAAC;IACpD,MAAM1B,MAAM,GAAGG,WAAW,CAACH,MAAM;IACjC,IAAI,CAACA,MAAM,EAAE;MACX,OAAO4B,SAAS;IAClB;IACA,IAAI5B,MAAM,CAACD,QAAQ,CAAC8B,QAAQ,EAAE,CAAC,EAAE;MAC/B,OAAO9B,QAAQ,CAAC8B,QAAQ,EAAE;IAC5B;IACA,IAAI,CAACF,mBAAmB,EAAE;MACxB,OAAOC,SAAS;IAClB;IACA,MAAME,WAAW,GAAGC,MAAM,CAACC,IAAI,CAAChC,MAAM,CAAC,CAACiC,MAAM,CAAEnC,EAAE,IAAKA,EAAE,CAACoC,UAAU,CAAE,GAAEnC,QAAQ,CAACoC,sBAAsB,EAAG,GAAE,CAAC,CAAC;IAC9G,IAAIL,WAAW,CAACM,MAAM,GAAG,CAAC,EAAE;MAC1B,MAAM,KAAIC,oBAAQ,EACf,0BACCtC,QAAQ,CAACoC,sBACV,mCAAkCT,WAAW,CAACG,QAAQ,EAAG,MAAKC,WAAW,CAACQ,IAAI,CAAC,IAAI,CAAE,EAAC,CACxF;IACH;IACA,OAAOR,WAAW,CAACM,MAAM,KAAK,CAAC,GAAGN,WAAW,CAAC,CAAC,CAAC,GAAGF,SAAS;EAC9D;;EAEA;AACF;AACA;EACEW,kBAAkB,CAACC,QAAqB,EAAEC,QAAqB,EAAE;IAC/D,MAAMtC,WAAW,GAAG,IAAI,CAACC,cAAc,CAACoC,QAAQ,CAAC;IACjD,IAAIrC,WAAW,CAACL,EAAE,CAAC4C,UAAU,EAAE,EAAE;MAC/B,MAAM,IAAIxC,KAAK,CAAE,kDAAiDC,WAAW,CAACL,EAAE,CAAC+B,QAAQ,EAAG,EAAC,CAAC;IAChG;IACA,IAAIW,QAAQ,CAACjC,OAAO,CAACkC,QAAQ,CAAC,EAAE;MAC9B,MAAM,IAAIvC,KAAK,CAAE,uCAAsCsC,QAAQ,CAACX,QAAQ,EAAG,GAAE,CAAC;IAChF;IACA,IAAIW,QAAQ,CAACG,QAAQ,KAAKF,QAAQ,CAACE,QAAQ,EAAE;MAC3C,IAAI,CAAChD,YAAY,CAACiD,eAAe,CAACzC,WAAW,CAACL,EAAE,CAAC;MACjDK,WAAW,CAACL,EAAE,GAAG2C,QAAQ,CAACjB,OAAO;MACjC,IAAI,CAAC7B,YAAY,CAACkD,YAAY,CAAC1C,WAAW,CAACL,EAAE,EAAEK,WAAW,CAAC;IAC7D;IACA,IAAIqC,QAAQ,CAACM,KAAK,KAAKL,QAAQ,CAACK,KAAK,EAAE;MACrC,IAAI,CAAC3B,eAAe,CAACsB,QAAQ,EAAEA,QAAQ,CAACK,KAAK,CAAC;IAChD;EACF;EAEAF,eAAe,CAAC9C,EAAe,EAAE;IAC/B,IAAI,CAACH,YAAY,CAACiD,eAAe,CAAC9C,EAAE,CAAC0B,OAAO,CAAC;EAC/C;;EAEA;AACF;AACA;AACA;EACEuB,iBAAiB,GAAuB;IACtC,OAAO,IAAI,CAACpD,YAAY,CAACqD,cAAc,GAAG,IAAI,CAACrD,YAAY,CAACsD,MAAM,GAAGrB,SAAS;EAChF;;EAEA;AACF;AACA;EACEsB,UAAU,GAAY;IACpB,OAAO,IAAI,CAACvD,YAAY,CAACuD,UAAU;EACrC;AACF;AAAC"}