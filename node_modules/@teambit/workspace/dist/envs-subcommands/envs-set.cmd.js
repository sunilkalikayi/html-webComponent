"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EnvsSetCmd = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
function _constants() {
  const data = require("@teambit/legacy/dist/constants");
  _constants = function () {
    return data;
  };
  return data;
}
class EnvsSetCmd {
  constructor(workspace) {
    this.workspace = workspace;
    (0, _defineProperty2().default)(this, "name", 'set <component-pattern> <env>');
    (0, _defineProperty2().default)(this, "description", 'Sets one or more components with a development environment (env)');
    (0, _defineProperty2().default)(this, "arguments", [{
      name: 'component-pattern',
      description: _constants().COMPONENT_PATTERN_HELP
    }, {
      name: 'env',
      description: "the env's component id (include version for non-core envs. e.g, `teambit.community/envs/community-react@1.95.13`)"
    }]);
    (0, _defineProperty2().default)(this, "examples", [{
      cmd: 'set ui/button teambit.react/react',
      description: "configures 'ui/button' to use the 'teambit.react/react' env"
    }, {
      cmd: 'set ui/button teambit.community/envs/community-mdx@1.95.16',
      description: "configures 'ui/button' to use the (non-core) 'teambit.community/envs/community-mdx@1.95.16' env"
    }, {
      cmd: 'set "ui/**" teambit.react/react',
      description: "configures all components that have the 'ui' namespace to use the teambit.react/react env"
    }]);
    (0, _defineProperty2().default)(this, "options", []);
    (0, _defineProperty2().default)(this, "group", 'development');
  }
  async report([pattern, env]) {
    const envId = await this.workspace.resolveComponentId(env);
    const componentIds = await this.workspace.idsByPattern(pattern);
    await this.workspace.setEnvToComponents(envId, componentIds);
    return `added ${_chalk().default.bold(envId.toString())} env to the following component(s):
${componentIds.map(compId => compId.toString()).join('\n')}`;
  }
}
exports.EnvsSetCmd = EnvsSetCmd;

//# sourceMappingURL=envs-set.cmd.js.map