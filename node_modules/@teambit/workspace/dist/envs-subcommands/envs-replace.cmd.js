"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EnvsReplaceCmd = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
class EnvsReplaceCmd {
  constructor(workspace) {
    this.workspace = workspace;
    (0, _defineProperty2().default)(this, "name", 'replace <current-env> <new-env>');
    (0, _defineProperty2().default)(this, "description", 'replace an existing env with another env for all components using the old env');
    (0, _defineProperty2().default)(this, "options", []);
    (0, _defineProperty2().default)(this, "group", 'development');
    (0, _defineProperty2().default)(this, "arguments", [{
      name: 'current-env',
      description: 'the component id of the current env'
    }, {
      name: 'new-env',
      description: 'the component id of the new env'
    }]);
    (0, _defineProperty2().default)(this, "examples", [{
      cmd: 'replace teambit.harmony/aspect teambit.harmony/node',
      description: "components configured to use the 'aspect' env will be configured to use the 'node' env, instead"
    }]);
  }
  async report([oldEnv, env]) {
    const envId = await this.workspace.resolveComponentId(env);
    const components = await this.workspace.getComponentsUsingEnv(oldEnv, true, true);
    const componentIds = components.map(comp => comp.id);
    await this.workspace.setEnvToComponents(envId, componentIds);
    return `added ${_chalk().default.bold(envId.toString())} env to the following component(s):
${componentIds.map(compId => compId.toString()).join('\n')}`;
  }
}
exports.EnvsReplaceCmd = EnvsReplaceCmd;

//# sourceMappingURL=envs-replace.cmd.js.map