{"version":3,"names":["AspectSpecificField","ComponentAdded","ComponentChanged","ComponentRemoved","DEFAULT_VENDOR_DIR","Workspace","constructor","pubsub","config","consumer","scope","componentAspect","dependencyResolver","variants","aspectLoader","logger","componentList","ComponentsList","harmony","onComponentLoadSlot","onComponentChangeSlot","envs","onComponentAddSlot","onComponentRemoveSlot","onPreWatchSlot","graphql","Watcher","componentLoadedSelfAsAspects","createInMemoryCache","maxSize","getMaxSizeForComponents","owner","defaultOwner","componentLoader","WorkspaceComponentLoader","validateConfig","bitMap","BitMap","componentDefaultScopeFromComponentDirAndNameWithoutConfigFile","memoize","bind","primitive","promise","maxAge","isLegacy","isEmpty","BitError","defaultScope","isValidScopeName","InvalidScopeName","path","getPath","modulesPath","join","onComponentLoad","loadFn","register","registerOnComponentChange","onComponentChangeFunc","registerOnComponentAdd","onComponentAddFunc","registerOnComponentRemove","onComponentRemoveFunc","registerOnPreWatch","onPreWatchFunc","name","tokenizedPath","split","length","icon","hasModifiedDependencies","component","componentsList","listAutoTagPendingComponents","isAutoTag","find","consumerComponent","id","isEqualWithoutVersion","_legacy","getComponentIssues","state","_consumer","issues","getComponentStatus","status","getComponentStatusById","ComponentStatus","fromLegacy","isOutdated","list","filter","loadOpts","legacyIds","getAllIdsAvailableOnLane","ids","resolveMultipleComponentIds","idsToGet","limit","slice","offset","getMany","listInvalid","getInvalid","listIds","_cachedListIds","hasChanged","bitmapIdsFromCurrentLane","hasId","componentId","found","isEqual","hasName","Boolean","fullName","hasIdNested","includeCache","modified","listModifiedComponents","componentIds","map","ComponentID","newComponents","listNewComponents","getAllComponentIds","bitIds","getAllBitIds","getNewAndModifiedIds","listTagPendingComponents","newAndModified","getLogs","shortHash","startsFrom","getLegacyGraph","shouldThrowOnMissingDep","legacyGraph","buildOneGraphForComponents","undefined","getDependentsIds","workspaceGraph","DependencyGraph","buildGraphFromWorkspace","workspaceDependencyGraph","workspaceDependents","getDependentsInfo","dependentsLegacyIds","flat","_","dependentsLegacyNoDup","BitIds","uniqFromArray","dependentsIds","createAspectList","extensionDataList","entiresP","entry","extensionDataEntryToAspectEntry","entries","Promise","all","createAspectListFromEntries","dataEntry","AspectEntry","resolveComponentId","get","legacyComponent","useCache","storeInCache","debug","toString","tryLoadAsAspect","isUsingEnvEnv","isCoreAspect","toStringWithoutVersion","isAspectLoaded","set","loadAspects","e","delete","getEnvSystemDescriptor","env","calculateEnv","__getDescriptor","systemDescriptor","services","isEnvRegistered","getServices","getDescriptor","type","description","toObject","clearCache","resetFailedLoadAspects","clearComponentCache","clearOneComponentCache","triggerOnComponentChange","files","initiator","write","onChangeEntries","toArray","results","mapSeries","extension","onChangeFunc","onChangeResult","push","extensionId","publish","componentChanged","triggerOnComponentAdd","onAddEntries","filesystem","file","onAddFunc","onAddResult","componentAdded","triggerOnComponentRemove","onRemoveEntries","onRemoveFunc","onRemoveResult","componentRemoved","getState","hash","getSnap","getCurrentLaneId","getCurrentRemoteLane","currentLaneId","isDefault","scopeComponentImporter","ScopeComponentsImporter","getInstance","lanes","importLanes","err","ScopeNotFoundOrDenied","LaneNotFound","InvalidScopeNameFromRemote","bitMapLaneId","getExportedLaneId","loader","stop","warn","message","getDefaultExtensions","extensions","ExtensionDataList","fromConfigObject","ejectMultipleConfigs","options","ejectConfig","componentFromScope","componentExtensions","aspects","componentDir","ignoreVersion","componentConfigFile","ComponentConfigFile","propagate","override","removeEntireConfig","configPath","composePath","resolveScopeAspectListIds","aspectListFromScope","resolvedList","pmap","newId","newEntry","legacy","byPattern","pattern","finalPattern","targetIds","spec","isMatchNamespacePatternItem","match","components","idsByPattern","throwForNoMatch","includes","exists","MissingBitMapComponent","filterIdsFromPoolIdsByPattern","getComponentsByUserInput","includeDependents","newAndModifiedIds","comp","dependentsIdsFiltered","dependents","getComponentsUsingEnv","throwIfNotFound","allComps","allEnvs","createEnvironment","foundEnv","runtimeEnvs","runtimeEnv","envWithoutVersion","availableEnvs","getManyByLegacy","getIfExist","importAndGetMany","importCurrentLaneIfMissing","import","reFetchUnBuiltVersion","shouldReFetchUnBuiltVersion","laneId","laneObj","legacyScope","getCurrentLaneObject","lane","info","objects","writeObjectsToTheFS","scopeComponentsImporter","fromArray","toBitIds","hasScope","importManyDeltaWithoutDeps","importMany","add","componentPaths","main","addComponent","AddComponents","addResults","use","aspectIdStr","aspectId","aspectIdToAdd","loadedIds","workspaceConfig","Error","setExtension","overrideExisting","track","trackData","addOwnerToScopeName","rootDir","componentName","mainFile","result","addedComponent","addedComponents","f","relativePath","warnings","scopeName","isSelfHosted","isHostedByBit","wsDefaultScope","rootPath","pathToWrite","relative","fs","outputFile","contents","bitMapOptions","componentDirFromLegacyId","componentPackageDir","packageName","componentIdToPackageName","packageDir","toAbsolutePath","bitId","componentMap","getComponent","relativeComponentDir","getComponentDir","NoComponentDir","componentDirToAbsolute","componentDefaultScope","componentDefaultScopeFromComponentDirAndName","componentConfigFileFromComponentDirAndName","bitMapId","getExistingBitId","bitMapEntry","variantConfig","byRootDirAndName","isVendor","isVendorComponentByComponentDir","excludeOrigins","configFileExtensions","variantsExtensions","wsDefaultExtensions","mergeFromScope","getComponentIfExist","bitMapExtensions","unmergedHead","getUnmergedHead","unmergedExtensions","unmergedExtensionsSpecific","unmergedExtensionsNonSpecific","versionInstance","getVersionInstance","changeVersion","specific","nonSpecific","partition","scopeExtensions","scopeExtensionsNonSpecific","scopeExtensionsSpecific","toLegacy","clone","extensionsToMerge","envWasFoundPreviously","loadedExtensionIds","removedExtensionIds","addAndLoadExtensions","origin","extraData","extData","isRemoved","stringId","extsWithoutRemoved","filterRemovedExtensions","extsWithoutLoaded","ext","selfInMergedExtensions","findExtension","toStringWithoutScopeAndVersion","extsWithoutSelf","remove","loadExtensions","extensionDataListFiltered","envIsCurrentlySet","filterEnvsFromExtensionsIfNeeded","warnAboutMisconfiguredEnv","compact","setDataListAsSpecific","forEach","continuePropagating","appliedRules","sortedMatches","specificity","isDefaultExtension","resolveExtensionListIds","afterMerge","mergeConfigs","withoutRemoved","beforeMerge","unmerged","unmergedComponents","getEntry","head","getUnmergedComponent","envAspect","EnvsAspect","envFromEnvsAspect","getCoreEnvsIds","warnedAboutMisconfiguredEnvs","envId","consoleWarning","isModified","consumerComp","_isModified","componentStatus","envsNotFromEnvsAspect","nonEnvs","shouldIgnoreCurrentEnv","triggerOnPreWatch","watchOpts","preWatchFunctions","values","func","setDefaultScopeToComponents","newComponentIds","hasVersion","compIdsStr","compId","setDefaultScope","WorkspaceAspect","mergeIntoExisting","dir","dirname","addSpecificComponentConfig","shouldMergeWithExisting","addAspect","addComponentConfig","removeSpecificComponentConfig","markWithMinusIfNotExist","removeAspect","removeComponentConfig","getAspectIdFromConfig","ignoreAspectVersion","aspectEntry","getSpecificComponentConfig","getBitmapEntry","extensionList","promises","vendorDir","vendor","directory","pathIsInside","getComponentIdByPath","componentPath","isAbsolute","linuxPath","pathNormalizeToLinux","absComponentDir","defaultScopeFromVariantsOrWs","load","getAspectsGraphWithoutCore","isAspect","coreAspectsStringIds","getCoreAspectIds","coreAspectsComponentIds","BitId","parse","coreAspectsBitIds","changeScope","ignoredIds","concat","throwOnError","neededFor","callId","Math","floor","random","loggerPrefix","notLoadedIds","idsWithoutCore","difference","importAndGetAspects","data","getEnvData","isUsingAspectEnv","isValidAspect","IncorrectEnvAspect","DEFAULT_ENV","error","graph","idsStr","nodes","compIds","workspaceComps","scopeComps","groupComponentsByWorkspaceAndScope","c","scopeIds","aspect","workspaceAspects","requireComponents","workspaceManifests","getManifestsFromRequireableExtensions","potentialPluginsIndexes","manifest","index","workspaceManifestsIds","m","scopeIdsGrouped","groupAspectIdsByEnvOfTheList","scopeEnvsManifestsIds","manifests","scopeOtherManifests","other","getManifestsGraphRecursively","packageManagerConfigRootDir","scopeOtherManifestsIds","loadExtensionsByManifests","pluginsWorkspaceComps","pluginsWorkspaceAspects","pluginsWorkspaceManifests","ignoreIds","shouldLoadFunc","graphFromFsBuilder","GraphFromFsBuilder","buildGraph","resolveAspects","runtimeName","opts","defaultOpts","excludeCore","requestedOnly","mergedOpts","missingPaths","stringIds","idsToResolve","extensionsIds","coreAspectsIds","userAspectsIds","componentIdsToResolve","workspaceIds","groupIdsByWorkspaceAndScope","wsComponents","aspectDefs","compStringId","localPath","getComponentPackagePath","isExist","pathExists","runtimePath","getRuntimePath","aspectPath","scopeAspectDefs","coreAspectDefs","coreId","rawDef","getAspectDef","loadDefinition","coreAspect","link","allDefs","idStr","fromString","afterExclusion","def","isCore","getId","isTarget","uniqDefs","uniqBy","defs","componentIdsString","existOnWorkspace","originatedFrom","extensionsIdsP","extensionEntry","loadedExtensions","extensionsToLoad","getTempDir","PREFIX","cacheDir","existsSync","mkdirSync","recursive","resolveP","requireFunc","plugins","getPlugins","has","MainRuntime","require","RequireableComponent","resolved","remotes","_legacyRemotes","isHub","ComponentNotFound","configStr","JSON","stringify","raw","_reloadConsumer","loadConsumer","getRuntimeModulePath","defaultDirectory","legacyDefaultDirectory","getDefaultScope","legacyId","getParsedIdIfExist","shouldSearchWithoutScopeInProvidedId","startsWith","idWithVersion","idWithoutVersion","version","_bitMapId","_bitMapIdWithoutVersion","_bitMapIdWithVersion","endsWith","defaultScopeForBitmapId","getFromBitmapAddDefaultScope","_bitmapIdWithVersionForSource","fromScope","resolveExtensionsList","resolveMergedExtensionsP","resolvedId","addDefaultScopeToExtensionsList","setEnvToComponents","envStrWithPossiblyVersion","resolveEnvIdWithPotentialVersionForConfig","envIdStrNoVersion","unsetEnvFromComponents","existsOnWorkspace","comps","changed","unchanged","envsAspect","currentEnv","REMOVE_EXTENSION_SPECIAL_SIGN","currentEnvWithPotentialVersion","commandsToReFetch","process","argv"],"sources":["workspace.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport memoize from 'memoizee';\nimport mapSeries from 'p-map-series';\nimport type { PubsubMain } from '@teambit/pubsub';\nimport { IssuesList } from '@teambit/component-issues';\nimport type { AspectLoaderMain, AspectDefinition } from '@teambit/aspect-loader';\nimport { getAspectDef } from '@teambit/aspect-loader';\nimport { MainRuntime } from '@teambit/cli';\nimport DependencyGraph from '@teambit/legacy/dist/scope/graph/scope-graph';\nimport {\n  AspectEntry,\n  ComponentMain,\n  Component,\n  ComponentFactory,\n  ComponentID,\n  AspectList,\n  AspectData,\n  InvalidComponent,\n  ResolveAspectsOptions,\n} from '@teambit/component';\nimport { BitError } from '@teambit/bit-error';\nimport { REMOVE_EXTENSION_SPECIAL_SIGN } from '@teambit/legacy/dist/consumer/config';\nimport { ComponentScopeDirMap, ConfigMain } from '@teambit/config';\nimport { DependencyResolverMain } from '@teambit/dependency-resolver';\nimport { EnvsMain, EnvsAspect, EnvServiceList, DEFAULT_ENV } from '@teambit/envs';\nimport { GraphqlMain } from '@teambit/graphql';\nimport { Harmony } from '@teambit/harmony';\nimport { Logger } from '@teambit/logger';\nimport type { ScopeMain } from '@teambit/scope';\nimport { isMatchNamespacePatternItem } from '@teambit/workspace.modules.match-pattern';\nimport { RequireableComponent } from '@teambit/harmony.modules.requireable-component';\nimport type { VariantsMain } from '@teambit/variants';\nimport { link } from '@teambit/legacy/dist/api/consumer';\nimport LegacyGraph from '@teambit/legacy/dist/scope/graph/graph';\nimport { BitIds } from '@teambit/legacy/dist/bit-id';\nimport { BitId, InvalidScopeName, InvalidScopeNameFromRemote, isValidScopeName } from '@teambit/legacy-bit-id';\nimport { LaneId } from '@teambit/lane-id';\nimport { Consumer, loadConsumer } from '@teambit/legacy/dist/consumer';\nimport { GetBitMapComponentOptions } from '@teambit/legacy/dist/consumer/bit-map/bit-map';\nimport AddComponents from '@teambit/legacy/dist/consumer/component-ops/add-components';\nimport type {\n  AddActionResults,\n  Warnings,\n} from '@teambit/legacy/dist/consumer/component-ops/add-components/add-components';\nimport { getMaxSizeForComponents, InMemoryCache } from '@teambit/legacy/dist/cache/in-memory-cache';\nimport { createInMemoryCache } from '@teambit/legacy/dist/cache/cache-factory';\nimport { ComponentNotFound } from '@teambit/legacy/dist/scope/exceptions';\nimport ComponentsList from '@teambit/legacy/dist/consumer/component/components-list';\nimport { NoComponentDir } from '@teambit/legacy/dist/consumer/component/exceptions/no-component-dir';\nimport { ExtensionDataList, ExtensionDataEntry } from '@teambit/legacy/dist/consumer/config/extension-data';\nimport { pathIsInside } from '@teambit/legacy/dist/utils';\nimport componentIdToPackageName from '@teambit/legacy/dist/utils/bit/component-id-to-package-name';\nimport {\n  PathOsBased,\n  PathOsBasedRelative,\n  PathOsBasedAbsolute,\n  pathNormalizeToLinux,\n} from '@teambit/legacy/dist/utils/path';\nimport fs from 'fs-extra';\nimport { slice, uniqBy, difference, compact, partition, isEmpty } from 'lodash';\nimport path from 'path';\nimport ConsumerComponent from '@teambit/legacy/dist/consumer/component';\nimport type { ComponentLog } from '@teambit/legacy/dist/scope/models/model-component';\nimport { CompilationInitiator } from '@teambit/compiler';\nimport ScopeComponentsImporter from '@teambit/legacy/dist/scope/component-ops/scope-components-importer';\nimport { MissingBitMapComponent } from '@teambit/legacy/dist/consumer/bit-map/exceptions';\nimport loader from '@teambit/legacy/dist/cli/loader';\nimport { Lane } from '@teambit/legacy/dist/scope/models';\nimport { LaneNotFound } from '@teambit/legacy/dist/api/scope/lib/exceptions/lane-not-found';\nimport { ScopeNotFoundOrDenied } from '@teambit/legacy/dist/remotes/exceptions/scope-not-found-or-denied';\nimport { ComponentLoadOptions } from '@teambit/legacy/dist/consumer/component/component-loader';\nimport { ComponentConfigFile } from './component-config-file';\nimport {\n  OnComponentAdd,\n  OnComponentChange,\n  OnComponentEventResult,\n  OnComponentLoad,\n  OnComponentRemove,\n  SerializableResults,\n} from './on-component-events';\nimport { WorkspaceExtConfig } from './types';\nimport { Watcher, WatchOptions } from './watch/watcher';\nimport { ComponentStatus } from './workspace-component/component-status';\nimport {\n  OnComponentAddSlot,\n  OnComponentChangeSlot,\n  OnComponentLoadSlot,\n  OnComponentRemoveSlot,\n  OnPreWatch,\n  OnPreWatchSlot,\n} from './workspace.provider';\nimport { WorkspaceComponentLoader } from './workspace-component/workspace-component-loader';\nimport { IncorrectEnvAspect } from './exceptions/incorrect-env-aspect';\nimport { GraphFromFsBuilder, ShouldLoadFunc } from './build-graph-from-fs';\nimport { BitMap } from './bit-map';\nimport { WorkspaceAspect } from './workspace.aspect';\n\nexport type EjectConfResult = {\n  configPath: string;\n};\n\nexport const AspectSpecificField = '__specific';\nexport const ComponentAdded = 'componentAdded';\nexport const ComponentChanged = 'componentChanged';\nexport const ComponentRemoved = 'componentRemoved';\n\nexport interface EjectConfOptions {\n  propagate?: boolean;\n  override?: boolean;\n}\n\nexport type TrackData = {\n  rootDir: PathOsBasedRelative; // path relative to the workspace\n  componentName?: string; // if empty, it'll be generated from the path\n  mainFile?: string; // if empty, attempts will be made to guess the best candidate\n  defaultScope?: string; // can be entered as part of \"bit create\" command, helpful for out-of-sync logic\n  config?: { [aspectName: string]: any }; // config specific to this component, which overrides variants of workspace.jsonc\n};\n\nexport type ExtensionsOrigin =\n  | 'BitmapFile'\n  | 'ModelSpecific'\n  | 'ModelNonSpecific'\n  | 'UnmergedSpecific'\n  | 'UnmergedNonSpecific'\n  | 'WorkspaceVariants'\n  | 'ComponentJsonFile'\n  | 'WorkspaceDefault'\n  | 'FinalAfterMerge';\n\nexport type TrackResult = { componentName: string; files: string[]; warnings: Warnings };\n\nconst DEFAULT_VENDOR_DIR = 'vendor';\n\n/**\n * API of the Bit Workspace\n */\nexport class Workspace implements ComponentFactory {\n  priority = true;\n  owner?: string;\n  componentsScopeDirsMap: ComponentScopeDirMap;\n  componentLoader: WorkspaceComponentLoader;\n  bitMap: BitMap;\n  private _cachedListIds?: ComponentID[];\n  private componentLoadedSelfAsAspects: InMemoryCache<boolean>; // cache loaded components\n  private warnedAboutMisconfiguredEnvs: string[] = []; // cache env-ids that have been errored about not having \"env\" type\n  constructor(\n    /**\n     * private pubsub.\n     */\n    private pubsub: PubsubMain,\n\n    private config: WorkspaceExtConfig,\n    /**\n     * private access to the legacy consumer instance.\n     */\n    public consumer: Consumer,\n\n    /**\n     * access to the workspace `Scope` instance\n     */\n    readonly scope: ScopeMain,\n\n    /**\n     * access to the `ComponentProvider` instance\n     */\n    private componentAspect: ComponentMain,\n\n    private dependencyResolver: DependencyResolverMain,\n\n    private variants: VariantsMain,\n\n    private aspectLoader: AspectLoaderMain,\n\n    private logger: Logger,\n\n    private componentList: ComponentsList = new ComponentsList(consumer),\n\n    /**\n     * private reference to the instance of Harmony.\n     */\n    private harmony: Harmony,\n\n    /**\n     * on component load slot.\n     */\n    public onComponentLoadSlot: OnComponentLoadSlot,\n\n    /**\n     * on component change slot.\n     */\n    private onComponentChangeSlot: OnComponentChangeSlot,\n\n    private envs: EnvsMain,\n\n    /**\n     * on component add slot.\n     */\n    private onComponentAddSlot: OnComponentAddSlot,\n\n    private onComponentRemoveSlot: OnComponentRemoveSlot,\n\n    private onPreWatchSlot: OnPreWatchSlot,\n\n    private graphql: GraphqlMain\n  ) {\n    this.componentLoadedSelfAsAspects = createInMemoryCache({ maxSize: getMaxSizeForComponents() });\n\n    // TODO: refactor - prefer to avoid code inside the constructor.\n    this.owner = this.config?.defaultOwner;\n    this.componentLoader = new WorkspaceComponentLoader(this, logger, dependencyResolver, envs);\n    this.validateConfig();\n    this.bitMap = new BitMap(this.consumer.bitMap, this.consumer);\n    // memoize this method to improve performance.\n    this.componentDefaultScopeFromComponentDirAndNameWithoutConfigFile = memoize(\n      this.componentDefaultScopeFromComponentDirAndNameWithoutConfigFile.bind(this),\n      {\n        primitive: true,\n        promise: true,\n        maxAge: 60 * 1000, // 1 min\n      }\n    );\n  }\n\n  private validateConfig() {\n    if (this.consumer.isLegacy) return;\n    if (isEmpty(this.config))\n      throw new BitError(\n        `fatal: workspace config is empty. probably one of bit files is missing. consider running \"bit init\"`\n      );\n    const defaultScope = this.config.defaultScope;\n    if (!defaultScope) throw new BitError('defaultScope is missing');\n    if (!isValidScopeName(defaultScope)) throw new InvalidScopeName(defaultScope);\n  }\n\n  /**\n   * watcher api.\n   */\n  readonly watcher = new Watcher(this, this.pubsub);\n\n  /**\n   * root path of the Workspace.\n   */\n  get path() {\n    return this.consumer.getPath();\n  }\n\n  /** get the `node_modules` folder of this workspace */\n  private get modulesPath() {\n    return path.join(this.path, 'node_modules');\n  }\n\n  get isLegacy(): boolean {\n    return this.consumer.isLegacy;\n  }\n\n  onComponentLoad(loadFn: OnComponentLoad) {\n    this.onComponentLoadSlot.register(loadFn);\n    return this;\n  }\n\n  registerOnComponentChange(onComponentChangeFunc: OnComponentChange) {\n    this.onComponentChangeSlot.register(onComponentChangeFunc);\n    return this;\n  }\n\n  registerOnComponentAdd(onComponentAddFunc: OnComponentAdd) {\n    this.onComponentAddSlot.register(onComponentAddFunc);\n    return this;\n  }\n\n  registerOnComponentRemove(onComponentRemoveFunc: OnComponentRemove) {\n    this.onComponentRemoveSlot.register(onComponentRemoveFunc);\n    return this;\n  }\n\n  registerOnPreWatch(onPreWatchFunc: OnPreWatch) {\n    this.onPreWatchSlot.register(onPreWatchFunc);\n    return this;\n  }\n\n  /**\n   * name of the workspace as configured in either `workspace.json`.\n   * defaults to workspace root directory name.\n   */\n  get name() {\n    if (this.config.name) return this.config.name;\n    const tokenizedPath = this.path.split('/');\n    return tokenizedPath[tokenizedPath.length - 1];\n  }\n\n  get icon() {\n    return this.config.icon;\n  }\n\n  async hasModifiedDependencies(component: Component) {\n    const componentsList = new ComponentsList(this.consumer);\n    const listAutoTagPendingComponents = await componentsList.listAutoTagPendingComponents();\n    const isAutoTag = listAutoTagPendingComponents.find((consumerComponent) =>\n      consumerComponent.id.isEqualWithoutVersion(component.id._legacy)\n    );\n    if (isAutoTag) return true;\n    return false;\n  }\n\n  /**\n   * get Component issues\n   */\n  getComponentIssues(component: Component): IssuesList | null {\n    return component.state._consumer.issues || null;\n  }\n\n  /**\n   * provides status of all components in the workspace.\n   */\n  async getComponentStatus(component: Component): Promise<ComponentStatus> {\n    const status = await this.consumer.getComponentStatusById(component.id._legacy);\n    const hasModifiedDependencies = await this.hasModifiedDependencies(component);\n    return ComponentStatus.fromLegacy(status, hasModifiedDependencies, component.isOutdated());\n  }\n\n  /**\n   * list all workspace components.\n   */\n  async list(filter?: { offset: number; limit: number }, loadOpts?: ComponentLoadOptions): Promise<Component[]> {\n    const legacyIds = this.consumer.bitMap.getAllIdsAvailableOnLane();\n    const ids = await this.resolveMultipleComponentIds(legacyIds);\n    const idsToGet = filter && filter.limit ? slice(ids, filter.offset, filter.offset + filter.limit) : ids;\n    return this.getMany(idsToGet, loadOpts);\n  }\n\n  /**\n   * list all invalid components.\n   * (see the invalid criteria in ConsumerComponent.isComponentInvalidByErrorType())\n   */\n  async listInvalid(): Promise<InvalidComponent[]> {\n    const legacyIds = this.consumer.bitMap.getAllIdsAvailableOnLane();\n    const ids = await this.resolveMultipleComponentIds(legacyIds);\n    return this.componentLoader.getInvalid(ids);\n  }\n\n  /**\n   * get ids of all workspace components.\n   */\n  async listIds(): Promise<ComponentID[]> {\n    if (this._cachedListIds && this.bitMap.hasChanged()) {\n      delete this._cachedListIds;\n    }\n    if (!this._cachedListIds) {\n      this._cachedListIds = await this.resolveMultipleComponentIds(this.consumer.bitmapIdsFromCurrentLane);\n    }\n    return this._cachedListIds;\n  }\n\n  /**\n   * Check if a specific id exist in the workspace\n   * @param componentId\n   */\n  async hasId(componentId: ComponentID): Promise<boolean> {\n    const ids = await this.listIds();\n    const found = ids.find((id) => {\n      return id.isEqual(componentId);\n    });\n    return !!found;\n  }\n\n  /**\n   * whether or not a workspace has a component with the given name\n   */\n  async hasName(name: string): Promise<boolean> {\n    const ids = await this.listIds();\n    return Boolean(ids.find((id) => id.fullName === name));\n  }\n\n  /**\n   * Check if a specific id exist in the workspace or in the scope\n   * @param componentId\n   */\n  async hasIdNested(componentId: ComponentID, includeCache = true): Promise<boolean> {\n    const found = await this.hasId(componentId);\n    if (found) return found;\n    return this.scope.hasIdNested(componentId, includeCache);\n  }\n\n  /**\n   * list all modified components in the workspace.\n   */\n  async modified(): Promise<Component[]> {\n    const ids: any = await this.componentList.listModifiedComponents(false);\n    const componentIds = ids.map(ComponentID.fromLegacy);\n    return this.getMany(componentIds);\n  }\n\n  /**\n   * list all new components in the workspace.\n   */\n  async newComponents() {\n    const ids: any = await this.componentList.listNewComponents(false);\n    const componentIds = ids.map(ComponentID.fromLegacy);\n    return this.getMany(componentIds);\n  }\n\n  /**\n   * get all workspace component-ids, include vendor components.\n   * (exclude nested dependencies in case dependencies are saved as components and not packages)\n   */\n  getAllComponentIds(): Promise<ComponentID[]> {\n    const bitIds = this.consumer.bitMap.getAllBitIds();\n    return this.resolveMultipleComponentIds(bitIds);\n  }\n\n  async getNewAndModifiedIds(): Promise<ComponentID[]> {\n    const ids = await this.componentList.listTagPendingComponents();\n    return this.resolveMultipleComponentIds(ids);\n  }\n\n  async newAndModified(): Promise<Component[]> {\n    const ids = await this.getNewAndModifiedIds();\n    return this.getMany(ids);\n  }\n\n  async getLogs(id: ComponentID, shortHash = false, startsFrom?: string): Promise<ComponentLog[]> {\n    return this.scope.getLogs(id, shortHash, startsFrom);\n  }\n\n  async getLegacyGraph(ids?: ComponentID[], shouldThrowOnMissingDep = true): Promise<LegacyGraph> {\n    if (!ids || ids.length < 1) ids = await this.listIds();\n\n    const legacyIds = ids.map((id) => id._legacy);\n\n    const legacyGraph = await this.buildOneGraphForComponents(legacyIds, undefined, undefined, shouldThrowOnMissingDep);\n    return legacyGraph;\n  }\n\n  /**\n   * given component ids, find their dependents in the workspace\n   */\n  async getDependentsIds(ids: ComponentID[]): Promise<ComponentID[]> {\n    const workspaceGraph = await DependencyGraph.buildGraphFromWorkspace(this.consumer, true);\n    const workspaceDependencyGraph = new DependencyGraph(workspaceGraph);\n    const workspaceDependents = ids.map((id) => workspaceDependencyGraph.getDependentsInfo(id._legacy));\n    const dependentsLegacyIds = workspaceDependents.flat().map((_) => _.id);\n    const dependentsLegacyNoDup = BitIds.uniqFromArray(dependentsLegacyIds);\n    const dependentsIds = await this.resolveMultipleComponentIds(dependentsLegacyNoDup);\n    return dependentsIds;\n  }\n\n  public async createAspectList(extensionDataList: ExtensionDataList) {\n    const entiresP = extensionDataList.map((entry) => this.extensionDataEntryToAspectEntry(entry));\n    const entries: AspectEntry[] = await Promise.all(entiresP);\n    return this.componentAspect.createAspectListFromEntries(entries);\n  }\n\n  private async extensionDataEntryToAspectEntry(dataEntry: ExtensionDataEntry): Promise<AspectEntry> {\n    return new AspectEntry(await this.resolveComponentId(dataEntry.id), dataEntry);\n  }\n\n  /**\n   * get a component from workspace\n   * @param id component ID\n   */\n  async get(\n    componentId: ComponentID,\n    legacyComponent?: ConsumerComponent,\n    useCache = true,\n    storeInCache = true,\n    loadOpts?: ComponentLoadOptions\n  ): Promise<Component> {\n    this.logger.debug(`get ${componentId.toString()}`);\n    const component = await this.componentLoader.get(componentId, legacyComponent, useCache, storeInCache, loadOpts);\n    // When loading a component if it's an env make sure to load it as aspect as well\n    // We only want to try load it as aspect if it's the first time we load the component\n    const tryLoadAsAspect = this.componentLoadedSelfAsAspects.get(component.id.toString()) === undefined;\n    // const config = this.harmony.get<ConfigMain>('teambit.harmony/config');\n\n    // We are loading the component as aspect if it's an env, in order to be able to run the env-preview-template task which run only on envs.\n    // Without this loading we will have a problem in case the env is the only component in the workspace. in that case we will load it as component\n    // then we don't run it's provider so it doesn't register to the env slot, so we don't know it's an env.\n    if (\n      tryLoadAsAspect &&\n      this.envs.isUsingEnvEnv(component) &&\n      !this.aspectLoader.isCoreAspect(component.id.toStringWithoutVersion()) &&\n      !this.aspectLoader.isAspectLoaded(component.id.toString()) &&\n      (await this.hasId(component.id))\n      // !config.extension(component.id.toStringWithoutVersion(), true)\n    ) {\n      try {\n        this.componentLoadedSelfAsAspects.set(component.id.toString(), true);\n        this.logger.debug(`trying to load self as aspect with id ${component.id.toString()}`);\n        await this.loadAspects([component.id.toString()], undefined, component.id.toString());\n        // In most cases if the load self as aspect failed we don't care about it.\n        // we only need it in specific cases to work, but this workspace.get runs on different\n        // cases where it might fail (like when importing aspect, after the import objects\n        // when we write the package.json we run the applyTransformers which get to pkg which call\n        // host.get, but the component not written yet to the fs, so it fails.)\n      } catch (e) {\n        this.logger.debug(`fail to load self as aspect with id ${component.id.toString()}`);\n        this.componentLoadedSelfAsAspects.delete(component.id.toString());\n        return component;\n      }\n    }\n    this.componentLoadedSelfAsAspects.set(component.id.toString(), false);\n\n    return component;\n  }\n\n  // TODO: @gilad we should refactor this asap into to the envs aspect.\n  async getEnvSystemDescriptor(component: Component): Promise<AspectData> {\n    const env = this.envs.calculateEnv(component);\n    if (env.env.__getDescriptor && typeof env.env.__getDescriptor === 'function') {\n      const systemDescriptor = await env.env.__getDescriptor();\n      // !important persist services only on the env itself.\n      let services: undefined | EnvServiceList;\n      if (this.envs.isEnvRegistered(component.id.toString())) services = this.envs.getServices(env);\n      const icon = this.aspectLoader.getDescriptor(env.id).icon || env.env.icon;\n\n      return {\n        type: systemDescriptor.type,\n        // Make sure to store the env id in the data without the version\n        // The version should always come from the aspect id configured on the component\n        id: env.id.split('@')[0],\n        name: env.name,\n        icon,\n        description: env.description,\n        services: services?.toObject(),\n      };\n    }\n\n    return {};\n  }\n\n  clearCache() {\n    this.aspectLoader.resetFailedLoadAspects();\n    this.logger.debug('clearing the workspace and scope caches');\n    delete this._cachedListIds;\n    this.componentLoader.clearCache();\n    this.scope.clearCache();\n    this.componentList = new ComponentsList(this.consumer);\n  }\n\n  clearComponentCache(id: ComponentID) {\n    this.componentLoader.clearComponentCache(id);\n    this.consumer.componentLoader.clearOneComponentCache(id._legacy);\n    this.componentList = new ComponentsList(this.consumer);\n  }\n\n  async triggerOnComponentChange(\n    id: ComponentID,\n    files: string[],\n    initiator?: CompilationInitiator\n  ): Promise<OnComponentEventResult[]> {\n    const component = await this.get(id);\n    // if a new file was added, upon component-load, its .bitmap entry is updated to include the\n    // new file. write these changes to the .bitmap file so then other processes have access to\n    // this new file. If the .bitmap wasn't change, it won't do anything.\n    await this.bitMap.write();\n    const onChangeEntries = this.onComponentChangeSlot.toArray(); // e.g. [ [ 'teambit.bit/compiler', [Function: bound onComponentChange] ] ]\n    const results: Array<{ extensionId: string; results: SerializableResults }> = [];\n    await mapSeries(onChangeEntries, async ([extension, onChangeFunc]) => {\n      const onChangeResult = await onChangeFunc(component, files, initiator);\n      results.push({ extensionId: extension, results: onChangeResult });\n    });\n\n    // TODO: find way to standardize event names.\n    await this.graphql.pubsub.publish(ComponentChanged, { componentChanged: { component } });\n    return results;\n  }\n\n  async triggerOnComponentAdd(id: ComponentID): Promise<OnComponentEventResult[]> {\n    const component = await this.get(id);\n    const onAddEntries = this.onComponentAddSlot.toArray(); // e.g. [ [ 'teambit.bit/compiler', [Function: bound onComponentChange] ] ]\n    const results: Array<{ extensionId: string; results: SerializableResults }> = [];\n    const files = component.state.filesystem.files.map((file) => file.path);\n    await mapSeries(onAddEntries, async ([extension, onAddFunc]) => {\n      const onAddResult = await onAddFunc(component, files);\n      results.push({ extensionId: extension, results: onAddResult });\n    });\n\n    await this.graphql.pubsub.publish(ComponentAdded, { componentAdded: { component } });\n    return results;\n  }\n\n  async triggerOnComponentRemove(id: ComponentID): Promise<OnComponentEventResult[]> {\n    const onRemoveEntries = this.onComponentRemoveSlot.toArray(); // e.g. [ [ 'teambit.bit/compiler', [Function: bound onComponentChange] ] ]\n    const results: Array<{ extensionId: string; results: SerializableResults }> = [];\n    await mapSeries(onRemoveEntries, async ([extension, onRemoveFunc]) => {\n      const onRemoveResult = await onRemoveFunc(id);\n      results.push({ extensionId: extension, results: onRemoveResult });\n    });\n\n    await this.graphql.pubsub.publish(ComponentRemoved, { componentRemoved: { componentIds: [id.toObject()] } });\n    return results;\n  }\n\n  getState(id: ComponentID, hash: string) {\n    return this.scope.getState(id, hash);\n  }\n\n  getSnap(id: ComponentID, hash: string) {\n    return this.scope.getSnap(id, hash);\n  }\n\n  getCurrentLaneId(): LaneId {\n    return this.consumer.getCurrentLaneId();\n  }\n\n  /**\n   * if checked out to a lane and the lane exists in the remote,\n   * return the remote lane id (name+scope). otherwise, return null.\n   */\n  async getCurrentRemoteLane(): Promise<Lane | null> {\n    const currentLaneId = this.getCurrentLaneId();\n    if (currentLaneId.isDefault()) {\n      return null;\n    }\n    const scopeComponentImporter = ScopeComponentsImporter.getInstance(this.consumer.scope);\n    try {\n      const lanes = await scopeComponentImporter.importLanes([currentLaneId]);\n\n      return lanes[0];\n    } catch (err) {\n      if (\n        err instanceof InvalidScopeName ||\n        err instanceof ScopeNotFoundOrDenied ||\n        err instanceof LaneNotFound ||\n        err instanceof InvalidScopeNameFromRemote\n      ) {\n        const bitMapLaneId = this.bitMap.getExportedLaneId();\n        if (bitMapLaneId?.isEqual(currentLaneId)) {\n          throw err; // we know the lane is not new, so the error is legit\n        }\n        // the lane could be a local lane so no need to throw an error in such case\n        loader.stop();\n        this.logger.warn(`unable to get lane's data from a remote due to an error:\\n${err.message}`);\n        return null;\n      }\n      throw err;\n    }\n  }\n\n  getDefaultExtensions(): ExtensionDataList {\n    if (!this.config.extensions) {\n      return new ExtensionDataList();\n    }\n    return ExtensionDataList.fromConfigObject(this.config.extensions);\n  }\n\n  async ejectMultipleConfigs(ids: ComponentID[], options: EjectConfOptions): Promise<EjectConfResult[]> {\n    return Promise.all(ids.map((id) => this.ejectConfig(id, options)));\n  }\n\n  async ejectConfig(id: ComponentID, options: EjectConfOptions): Promise<EjectConfResult> {\n    const componentId = await this.resolveComponentId(id);\n    const component = await this.get(componentId);\n    const componentFromScope = await this.scope.get(id);\n    const { extensions } = await this.componentExtensions(component.id, componentFromScope, [\n      'WorkspaceDefault',\n      'WorkspaceVariants',\n    ]);\n    const aspects = await this.createAspectList(extensions);\n    const componentDir = this.componentDir(id, { ignoreVersion: true });\n    const componentConfigFile = new ComponentConfigFile(componentId, aspects, componentDir, options.propagate);\n    await componentConfigFile.write({ override: options.override });\n    // remove config from the .bitmap as it's not needed anymore. it is replaced by the component.json\n    this.bitMap.removeEntireConfig(id);\n    await this.bitMap.write();\n    return {\n      configPath: ComponentConfigFile.composePath(componentDir),\n    };\n  }\n\n  /**\n   * see component-aspect, createAspectListFromLegacy() method for a context why this is needed.\n   */\n  private async resolveScopeAspectListIds(aspectListFromScope: AspectList): Promise<AspectList> {\n    const resolvedList = await aspectListFromScope.pmap(async (entry) => {\n      if (entry.id.scope !== this.scope.name) {\n        return entry;\n      }\n      const newId = await this.resolveComponentId(entry.id.fullName);\n      const newEntry = new AspectEntry(newId, entry.legacy);\n      return newEntry;\n    });\n    return resolvedList;\n  }\n\n  /**\n   * @deprecated use `this.idsByPattern` instead for consistency. also, it supports negation and list of patterns.\n   *\n   * load components into the workspace through a variants pattern.\n   * @param pattern variants.\n   * @param scope scope name.\n   */\n  async byPattern(pattern: string, scope = '**'): Promise<Component[]> {\n    const ids = await this.listIds();\n    const finalPattern = `${scope}/${pattern || '**'}`;\n    const targetIds = ids.filter((id) => {\n      const spec = isMatchNamespacePatternItem(id.toStringWithoutVersion(), finalPattern);\n      return spec.match;\n    });\n\n    const components = await this.getMany(targetIds);\n    return components;\n  }\n\n  /**\n   * get component-ids matching the given pattern. a pattern can have multiple patterns separated by a comma.\n   * it supports negate (!) character to exclude ids.\n   */\n  async idsByPattern(pattern: string, throwForNoMatch = true): Promise<ComponentID[]> {\n    if (!pattern.includes('*') && !pattern.includes(',')) {\n      // if it's not a pattern but just id, resolve it without multimatch to support specifying id without scope-name\n      const id = await this.resolveComponentId(pattern);\n      if (this.exists(id)) return [id];\n      if (throwForNoMatch) throw new MissingBitMapComponent(pattern);\n      return [];\n    }\n    const ids = await this.listIds();\n    return this.scope.filterIdsFromPoolIdsByPattern(pattern, ids, throwForNoMatch);\n  }\n\n  /**\n   * useful for workspace commands, such as `bit build`, `bit compile`.\n   * by default, it should be running on new and modified components.\n   * a user can specify `--all` to run on all components or specify a pattern to limit to specific components.\n   * some commands such as build/test needs to run also on the dependents.\n   */\n  async getComponentsByUserInput(all?: boolean, pattern?: string, includeDependents = false): Promise<Component[]> {\n    if (all) {\n      return this.list();\n    }\n    if (pattern) {\n      const ids = await this.idsByPattern(pattern);\n      return this.getMany(ids);\n    }\n    const newAndModified = await this.newAndModified();\n    if (includeDependents) {\n      const newAndModifiedIds = newAndModified.map((comp) => comp.id);\n      const dependentsIds = await this.getDependentsIds(newAndModifiedIds);\n      const dependentsIdsFiltered = dependentsIds.filter((id) => !newAndModified.find((_) => _.id.isEqual(id)));\n      const dependents = await this.getMany(dependentsIdsFiltered);\n      newAndModified.push(...dependents);\n    }\n    return newAndModified;\n  }\n\n  async getComponentsUsingEnv(env: string, ignoreVersion = true, throwIfNotFound = false): Promise<Component[]> {\n    const allComps = await this.list();\n    const allEnvs = await this.envs.createEnvironment(allComps);\n    const foundEnv = allEnvs.runtimeEnvs.find((runtimeEnv) => {\n      if (runtimeEnv.id === env) return true;\n      if (!ignoreVersion) return false;\n      const envWithoutVersion = runtimeEnv.id.split('@')[0];\n      return env === envWithoutVersion;\n    });\n    if (!foundEnv && throwIfNotFound) {\n      const availableEnvs = allEnvs.runtimeEnvs.map((runtimeEnv) => runtimeEnv.id);\n      throw new BitError(`unable to find components that using \"${env}\" env.\nthe following envs are used in this workspace: ${availableEnvs.join(', ')}`);\n    }\n    return foundEnv?.components || [];\n  }\n\n  async getMany(ids: Array<ComponentID>, loadOpts?: ComponentLoadOptions): Promise<Component[]> {\n    return this.componentLoader.getMany(ids, loadOpts);\n  }\n\n  getManyByLegacy(components: ConsumerComponent[], loadOpts?: ComponentLoadOptions): Promise<Component[]> {\n    return mapSeries(components, async (component) => {\n      const id = await this.resolveComponentId(component.id);\n      return this.get(id, component, true, true, loadOpts);\n    });\n  }\n\n  /**\n   * don't throw an error if the component was not found, simply return undefined.\n   */\n  async getIfExist(componentId: ComponentID): Promise<Component | undefined> {\n    return this.componentLoader.getIfExist(componentId);\n  }\n\n  /**\n   * whether a component exists in the workspace\n   */\n  exists(componentId: ComponentID): boolean {\n    return Boolean(this.consumer.bitmapIdsFromCurrentLane.find((_) => _.isEqualWithoutVersion(componentId._legacy)));\n  }\n\n  /**\n   * This will make sure to fetch the objects prior to load them\n   * do not use it if you are not sure you need it.\n   * It will influence the performance\n   * currently it used only for get many of aspects\n   * @param ids\n   */\n  async importAndGetMany(ids: Array<ComponentID>): Promise<Component[]> {\n    await this.importCurrentLaneIfMissing();\n    await this.scope.import(ids, { reFetchUnBuiltVersion: shouldReFetchUnBuiltVersion() });\n    return this.componentLoader.getMany(ids);\n  }\n\n  async importCurrentLaneIfMissing() {\n    const laneId = this.getCurrentLaneId();\n    const laneObj = await this.scope.legacyScope.getCurrentLaneObject();\n    if (laneId.isDefault() || laneObj) {\n      return;\n    }\n    const lane = await this.getCurrentRemoteLane();\n    if (!lane) {\n      return;\n    }\n    this.logger.info(`current lane ${laneId.toString()} is missing, importing it`);\n    await this.scope.legacyScope.objects.writeObjectsToTheFS([lane]);\n    const scopeComponentsImporter = ScopeComponentsImporter.getInstance(this.scope.legacyScope);\n    const ids = BitIds.fromArray(lane.toBitIds().filter((id) => id.hasScope()));\n    await scopeComponentsImporter.importManyDeltaWithoutDeps(ids, true, lane);\n    await scopeComponentsImporter.importMany({ ids, lanes: [lane] });\n  }\n\n  /**\n   * @deprecated use this.track() instead\n   * track a new component. (practically, add it to .bitmap).\n   *\n   * @param componentPaths component paths relative to the workspace dir\n   * @param id if not set, will be concluded from the filenames\n   * @param main if not set, will try to guess according to some strategies and throws if failed\n   * @param override whether add details to an existing component or re-define it\n   */\n  async add(\n    componentPaths: PathOsBasedRelative[],\n    id?: string,\n    main?: string,\n    override = false\n  ): Promise<AddActionResults> {\n    const addComponent = new AddComponents({ consumer: this.consumer }, { componentPaths, id, main, override });\n    const addResults = await addComponent.add();\n    // @todo: the legacy commands have `consumer.onDestroy()` on command completion, it writes the\n    //  .bitmap file. workspace needs a similar mechanism. once done, remove the next line.\n    await this.bitMap.write();\n    return addResults;\n  }\n\n  async use(aspectIdStr: string): Promise<string> {\n    const aspectId = await this.resolveComponentId(aspectIdStr);\n    let aspectIdToAdd = aspectId.toStringWithoutVersion();\n    if (!(await this.hasId(aspectId))) {\n      const loadedIds = await this.scope.loadAspects([aspectIdStr], true, 'bit use command');\n      if (loadedIds[0]) aspectIdToAdd = loadedIds[0];\n    }\n    const config = this.harmony.get<ConfigMain>('teambit.harmony/config').workspaceConfig;\n    if (!config) {\n      throw new Error(`use() unable to get the workspace config`);\n    }\n    config.setExtension(\n      aspectIdToAdd,\n      {},\n      {\n        overrideExisting: false,\n        ignoreVersion: false,\n      }\n    );\n    await config.write();\n    return aspectIdToAdd;\n  }\n\n  /**\n   * add a new component to the .bitmap file.\n   * this method only adds the records in memory but doesn't persist to the filesystem.\n   * to write the .bitmap file once completed, run \"await this.bitMap.write();\"\n   */\n  async track(trackData: TrackData): Promise<TrackResult> {\n    const defaultScope = trackData.defaultScope ? await this.addOwnerToScopeName(trackData.defaultScope) : undefined;\n    const addComponent = new AddComponents(\n      { consumer: this.consumer },\n      {\n        componentPaths: [trackData.rootDir],\n        id: trackData.componentName,\n        main: trackData.mainFile,\n        override: false,\n        defaultScope,\n        config: trackData.config,\n      }\n    );\n    const result = await addComponent.add();\n    const addedComponent = result.addedComponents[0];\n    const componentName = addedComponent?.id.name || (trackData.componentName as string);\n    const files = addedComponent?.files.map((f) => f.relativePath) || [];\n    return { componentName, files, warnings: result.warnings };\n  }\n\n  /**\n   * scopes in bit.dev are \"owner.collection\".\n   * we might have the scope-name only without the owner and we need to retrieve it from the defaultScope in the\n   * workspace.jsonc file.\n   *\n   * @param scopeName scopeName that might not have the owner part.\n   * @returns full scope name\n   */\n  private async addOwnerToScopeName(scopeName: string): Promise<string> {\n    if (scopeName.includes('.')) return scopeName; // it has owner.\n    const isSelfHosted = !(await this.isHostedByBit(scopeName));\n    if (isSelfHosted) return scopeName;\n    const wsDefaultScope = this.defaultScope;\n    if (!wsDefaultScope.includes('.')) {\n      throw new Error(`the entered scope has no owner nor the defaultScope in workspace.jsonc`);\n    }\n    const [owner] = wsDefaultScope.split('.');\n    return `${owner}.${scopeName}`;\n  }\n\n  async write(component: Component, rootPath?: string) {\n    await Promise.all(\n      component.filesystem.files.map(async (file) => {\n        const pathToWrite = rootPath ? path.join(this.path, rootPath, file.relative) : file.path;\n        await fs.outputFile(pathToWrite, file.contents);\n      })\n    );\n  }\n\n  /**\n   * Get the component root dir in the file system (relative to workspace or full) in Linux format\n   * @param componentId\n   * @param relative return the path relative to the workspace or full path\n   */\n  componentDir(\n    componentId: ComponentID,\n    bitMapOptions?: GetBitMapComponentOptions,\n    options = { relative: false }\n  ): PathOsBased {\n    return this.componentDirFromLegacyId(componentId._legacy, bitMapOptions, options);\n  }\n\n  /**\n   * component's files in the workspace are symlinked to the node_modules, and a package.json file is generated on that\n   * package directory to simulate a valid node package.\n   * @returns the package directory inside the node_module.\n   * by default the absolute path, unless `options.relative` was set\n   */\n  componentPackageDir(component: Component, options = { relative: false }): string {\n    const packageName = componentIdToPackageName(component.state._consumer);\n    const packageDir = path.join('node_modules', packageName);\n    return options.relative ? packageDir : this.consumer.toAbsolutePath(packageDir);\n  }\n\n  private componentDirFromLegacyId(\n    bitId: BitId,\n    bitMapOptions?: GetBitMapComponentOptions,\n    options = { relative: false }\n  ): PathOsBased {\n    const componentMap = this.consumer.bitMap.getComponent(bitId, bitMapOptions);\n    const relativeComponentDir = componentMap.getComponentDir();\n    if (!relativeComponentDir) {\n      throw new NoComponentDir(bitId.toString());\n    }\n    if (options.relative) {\n      return relativeComponentDir;\n    }\n\n    return path.join(this.path, relativeComponentDir);\n  }\n\n  componentDirToAbsolute(relativeComponentDir: PathOsBasedRelative): PathOsBasedAbsolute {\n    return path.join(this.path, relativeComponentDir);\n  }\n\n  async componentDefaultScope(componentId: ComponentID): Promise<string | undefined> {\n    const relativeComponentDir = this.componentDir(componentId, { ignoreVersion: true }, { relative: true });\n    return this.componentDefaultScopeFromComponentDirAndName(relativeComponentDir, componentId.fullName);\n  }\n\n  async componentDefaultScopeFromComponentDirAndName(\n    relativeComponentDir: PathOsBasedRelative,\n    name: string\n  ): Promise<string | undefined> {\n    const componentConfigFile = await this.componentConfigFileFromComponentDirAndName(relativeComponentDir, name);\n    if (componentConfigFile && componentConfigFile.defaultScope) {\n      return componentConfigFile.defaultScope;\n    }\n    const bitMapId = this.consumer.bitMap.getExistingBitId(name);\n    const bitMapEntry = bitMapId ? this.consumer.bitMap.getComponent(bitMapId) : undefined;\n    if (bitMapEntry && bitMapEntry.defaultScope) {\n      return bitMapEntry.defaultScope;\n    }\n    return this.componentDefaultScopeFromComponentDirAndNameWithoutConfigFile(relativeComponentDir, name);\n  }\n\n  get defaultScope() {\n    return this.config.defaultScope;\n  }\n\n  private async componentDefaultScopeFromComponentDirAndNameWithoutConfigFile(\n    relativeComponentDir: PathOsBasedRelative,\n    name: string\n  ): Promise<string | undefined> {\n    const variantConfig = this.variants.byRootDirAndName(relativeComponentDir, name);\n    if (variantConfig && variantConfig.defaultScope) {\n      return variantConfig.defaultScope;\n    }\n    const isVendor = this.isVendorComponentByComponentDir(relativeComponentDir);\n    if (!isVendor) {\n      return this.config.defaultScope;\n    }\n    return undefined;\n  }\n\n  /**\n   * Calculate the component config based on:\n   * the config property in the .bitmap file\n   * the component.json file in the component folder\n   * matching pattern in the variants config\n   * defaults extensions from workspace config\n   * extensions from the model.\n   */\n  // eslint-disable-next-line complexity\n  async componentExtensions(\n    componentId: ComponentID,\n    componentFromScope?: Component,\n    excludeOrigins: ExtensionsOrigin[] = []\n  ): Promise<{\n    extensions: ExtensionDataList;\n    beforeMerge: Array<{ extensions: ExtensionDataList; origin: ExtensionsOrigin; extraData: any }>; // useful for debugging\n  }> {\n    // TODO: consider caching this result\n    let configFileExtensions: ExtensionDataList | undefined;\n    let variantsExtensions: ExtensionDataList | undefined;\n    let wsDefaultExtensions: ExtensionDataList | undefined;\n    const mergeFromScope = true;\n\n    const bitMapEntry = this.consumer.bitMap.getComponentIfExist(componentId._legacy);\n    const bitMapExtensions = bitMapEntry?.config;\n\n    const unmergedHead = this.getUnmergedHead(componentId);\n    let unmergedExtensions: ExtensionDataList | undefined;\n    let unmergedExtensionsSpecific: ExtensionDataList | undefined;\n    let unmergedExtensionsNonSpecific: ExtensionDataList | undefined;\n    if (unmergedHead) {\n      const versionInstance = await this.scope.legacyScope.getVersionInstance(\n        componentId._legacy.changeVersion(unmergedHead.toString())\n      );\n      unmergedExtensions = versionInstance.extensions;\n      const [specific, nonSpecific] = partition(\n        unmergedExtensions,\n        (entry) => entry.config[AspectSpecificField] === true\n      );\n      unmergedExtensionsSpecific = new ExtensionDataList(...specific);\n      unmergedExtensionsNonSpecific = new ExtensionDataList(...nonSpecific);\n    }\n\n    const scopeExtensions = componentFromScope?.config?.extensions || new ExtensionDataList();\n    const [specific, nonSpecific] = partition(scopeExtensions, (entry) => entry.config[AspectSpecificField] === true);\n    const scopeExtensionsNonSpecific = new ExtensionDataList(...nonSpecific);\n    const scopeExtensionsSpecific = new ExtensionDataList(...specific);\n\n    const componentConfigFile = await this.componentConfigFile(componentId);\n    if (componentConfigFile) {\n      configFileExtensions = componentConfigFile.aspects.toLegacy();\n    }\n    const relativeComponentDir = this.componentDir(componentId, { ignoreVersion: true }, { relative: true });\n    const variantConfig = this.variants.byRootDirAndName(relativeComponentDir, componentId.fullName);\n    if (variantConfig) {\n      variantsExtensions = variantConfig.extensions.clone();\n      // Do not merge from scope when there is specific variant (which is not *) that match the component\n      // if (variantConfig.maxSpecificity > 0) {\n      //   mergeFromScope = false;\n      // }\n    }\n    const isVendor = this.isVendorComponentByComponentDir(relativeComponentDir);\n    if (!isVendor) {\n      wsDefaultExtensions = this.getDefaultExtensions();\n    }\n    // We don't stop on each step because we want to merge the default scope even if propagate=false but the default scope is not defined\n    // in the case the same extension pushed twice, the former takes precedence (opposite of Object.assign)\n    const extensionsToMerge: Array<{ origin: ExtensionsOrigin; extensions: ExtensionDataList; extraData: any }> = [];\n    let envWasFoundPreviously = false;\n    const loadedExtensionIds: string[] = [];\n    const removedExtensionIds: string[] = [];\n\n    const addAndLoadExtensions = async (extensions: ExtensionDataList, origin: ExtensionsOrigin, extraData?: any) => {\n      if (!extensions.length) {\n        return;\n      }\n      removedExtensionIds.push(...extensions.filter((extData) => extData.isRemoved).map((extData) => extData.stringId));\n      const extsWithoutRemoved = extensions.filterRemovedExtensions();\n      const extsWithoutLoaded = ExtensionDataList.fromArray(\n        extsWithoutRemoved.filter(\n          (ext) => !loadedExtensionIds.includes(ext.extensionId?.toStringWithoutVersion() || '')\n        )\n      );\n      const selfInMergedExtensions = extsWithoutLoaded.findExtension(\n        componentId._legacy.toStringWithoutScopeAndVersion(),\n        true,\n        true\n      );\n      const extsWithoutSelf = selfInMergedExtensions?.extensionId\n        ? extsWithoutLoaded.remove(selfInMergedExtensions.extensionId)\n        : extsWithoutLoaded;\n      await this.loadExtensions(extsWithoutSelf, componentId);\n      const { extensionDataListFiltered, envIsCurrentlySet } = this.filterEnvsFromExtensionsIfNeeded(\n        extsWithoutSelf,\n        envWasFoundPreviously\n      );\n      if (envIsCurrentlySet) {\n        await this.warnAboutMisconfiguredEnv(componentId, extensions);\n        envWasFoundPreviously = true;\n      }\n\n      extensionsToMerge.push({ origin, extensions: extensionDataListFiltered, extraData });\n\n      loadedExtensionIds.push(\n        ...compact(extensionDataListFiltered.map((e) => e.extensionId?.toStringWithoutVersion()))\n      );\n    };\n    const setDataListAsSpecific = (extensions: ExtensionDataList) => {\n      extensions.forEach((dataEntry) => (dataEntry.config[AspectSpecificField] = true));\n    };\n    if (bitMapExtensions && !excludeOrigins.includes('BitmapFile')) {\n      const extensionDataList = ExtensionDataList.fromConfigObject(bitMapExtensions);\n      setDataListAsSpecific(extensionDataList);\n      await addAndLoadExtensions(extensionDataList, 'BitmapFile');\n    }\n    if (configFileExtensions && !excludeOrigins.includes('ComponentJsonFile')) {\n      setDataListAsSpecific(configFileExtensions);\n      await addAndLoadExtensions(configFileExtensions, 'ComponentJsonFile');\n    }\n    if (unmergedExtensionsSpecific && !excludeOrigins.includes('UnmergedSpecific')) {\n      await addAndLoadExtensions(ExtensionDataList.fromArray(unmergedExtensionsSpecific), 'UnmergedSpecific');\n    }\n    if (!excludeOrigins.includes('ModelSpecific')) {\n      await addAndLoadExtensions(ExtensionDataList.fromArray(scopeExtensionsSpecific), 'ModelSpecific');\n    }\n    let continuePropagating = componentConfigFile?.propagate ?? true;\n    if (variantsExtensions && continuePropagating && !excludeOrigins.includes('WorkspaceVariants')) {\n      const appliedRules = variantConfig?.sortedMatches.map(({ pattern, specificity }) => ({ pattern, specificity }));\n      await addAndLoadExtensions(variantsExtensions, 'WorkspaceVariants', { appliedRules });\n    }\n    continuePropagating = continuePropagating && (variantConfig?.propagate ?? true);\n    // Do not apply default extensions on the default extensions (it will create infinite loop when loading them)\n    const isDefaultExtension = wsDefaultExtensions?.findExtension(componentId.toString(), true, true);\n    if (\n      wsDefaultExtensions &&\n      continuePropagating &&\n      !isDefaultExtension &&\n      !excludeOrigins.includes('WorkspaceDefault')\n    ) {\n      await addAndLoadExtensions(wsDefaultExtensions, 'WorkspaceDefault');\n    }\n    if (\n      unmergedExtensionsNonSpecific &&\n      mergeFromScope &&\n      continuePropagating &&\n      !excludeOrigins.includes('UnmergedNonSpecific')\n    ) {\n      await addAndLoadExtensions(unmergedExtensionsNonSpecific, 'UnmergedNonSpecific');\n    }\n    if (mergeFromScope && continuePropagating && !excludeOrigins.includes('ModelNonSpecific')) {\n      await addAndLoadExtensions(scopeExtensionsNonSpecific, 'ModelNonSpecific');\n    }\n\n    // It's important to do this resolution before the merge, otherwise we have issues with extensions\n    // coming from scope with local scope name, as opposed to the same extension comes from the workspace with default scope name\n    await Promise.all(extensionsToMerge.map((list) => this.resolveExtensionListIds(list.extensions)));\n    const afterMerge = ExtensionDataList.mergeConfigs(extensionsToMerge.map((ext) => ext.extensions));\n    const withoutRemoved = afterMerge.filter((extData) => !removedExtensionIds.includes(extData.stringId));\n    const extensions = ExtensionDataList.fromArray(withoutRemoved);\n    return {\n      extensions,\n      beforeMerge: extensionsToMerge,\n    };\n  }\n\n  private getUnmergedHead(componentId: ComponentID) {\n    const unmerged = this.scope.legacyScope.objects.unmergedComponents.getEntry(componentId._legacy.name);\n    return unmerged?.head;\n  }\n\n  async getUnmergedComponent(componentId: ComponentID): Promise<Component | undefined> {\n    const unmerged = this.scope.legacyScope.objects.unmergedComponents.getEntry(componentId._legacy.name);\n    if (unmerged?.head) {\n      return this.scope.get(componentId.changeVersion(unmerged?.head.toString()));\n    }\n    return undefined;\n  }\n\n  private async warnAboutMisconfiguredEnv(componentId: ComponentID, extensionDataList: ExtensionDataList) {\n    if (!(await this.hasId(componentId))) {\n      // if this is a dependency and not belong to the workspace, don't show the warning\n      return;\n    }\n    const envAspect = extensionDataList.findExtension(EnvsAspect.id);\n    const envFromEnvsAspect = envAspect?.config.env;\n    if (!envFromEnvsAspect) return;\n    if (this.envs.getCoreEnvsIds().includes(envFromEnvsAspect)) return;\n    if (this.warnedAboutMisconfiguredEnvs.includes(envFromEnvsAspect)) return;\n    let env: Component;\n    try {\n      const envId = await this.resolveComponentId(envFromEnvsAspect);\n      env = await this.get(envId);\n    } catch (err) {\n      return; // unable to get the component for some reason. don't sweat it. forget about the warning\n    }\n    if (!this.envs.isUsingEnvEnv(env)) {\n      this.warnedAboutMisconfiguredEnvs.push(envFromEnvsAspect);\n      this.logger.consoleWarning(\n        `env \"${envFromEnvsAspect}\" is not of type env. (correct the env's type, or component config with \"bit env set ${envFromEnvsAspect} teambit.envs/env\")`\n      );\n    }\n  }\n\n  async isModified(component: Component): Promise<boolean> {\n    const head = component.head;\n    if (!head) {\n      return true; // it's a new component\n    }\n    const consumerComp = component.state._consumer as ConsumerComponent;\n    if (typeof consumerComp._isModified === 'boolean') return consumerComp._isModified;\n    const componentStatus = await this.consumer.getComponentStatusById(component.id._legacy);\n    return componentStatus.modified === true;\n  }\n\n  private filterEnvsFromExtensionsIfNeeded(extensionDataList: ExtensionDataList, envWasFoundPreviously: boolean) {\n    const envAspect = extensionDataList.findExtension(EnvsAspect.id);\n    const envFromEnvsAspect = envAspect?.config.env;\n    const [envsNotFromEnvsAspect, nonEnvs] = partition(extensionDataList, (ext) =>\n      this.envs.isEnvRegistered(ext.stringId)\n    );\n    const extensionDataListFiltered = new ExtensionDataList(...nonEnvs);\n    const envIsCurrentlySet = envFromEnvsAspect || envsNotFromEnvsAspect.length;\n    const shouldIgnoreCurrentEnv = envIsCurrentlySet && envWasFoundPreviously;\n    if (shouldIgnoreCurrentEnv) {\n      // still, aspect env may have other data other then config.env.\n      if (envAspect) {\n        delete envAspect.config.env;\n        extensionDataListFiltered.push(envAspect);\n      }\n    } else {\n      // add the envs\n      if (envAspect) extensionDataListFiltered.push(envAspect);\n      extensionDataListFiltered.push(...envsNotFromEnvsAspect);\n    }\n    return { extensionDataListFiltered, envIsCurrentlySet };\n  }\n\n  async triggerOnPreWatch(componentIds: ComponentID[], watchOpts: WatchOptions) {\n    const components = await this.getMany(componentIds);\n    const preWatchFunctions = this.onPreWatchSlot.values();\n    await mapSeries(preWatchFunctions, async (func) => {\n      await func(components, watchOpts);\n    });\n  }\n\n  /**\n   * filter the given component-ids and set default-scope only to the new ones.\n   * returns the affected components.\n   */\n  async setDefaultScopeToComponents(componentIds: ComponentID[], scopeName: string): Promise<ComponentID[]> {\n    if (!isValidScopeName(scopeName)) {\n      throw new InvalidScopeName(scopeName);\n    }\n    const newComponentIds = componentIds.filter((id) => !id.hasVersion());\n    if (!newComponentIds.length) {\n      const compIdsStr = componentIds.map((compId) => compId.toString()).join(', ');\n      throw new BitError(\n        `unable to set default-scope for the following components, as they are not new:\\n${compIdsStr}`\n      );\n    }\n    newComponentIds.map((comp) => this.bitMap.setDefaultScope(comp, scopeName));\n    await this.bitMap.write();\n    return newComponentIds;\n  }\n\n  async setDefaultScope(scopeName: string) {\n    if (this.defaultScope === scopeName) {\n      throw new Error(`the default-scope is already set as \"${scopeName}\", nothing to change`);\n    }\n    const config = this.harmony.get<ConfigMain>('teambit.harmony/config');\n    config.workspaceConfig?.setExtension(\n      WorkspaceAspect.id,\n      { defaultScope: scopeName },\n      { mergeIntoExisting: true, ignoreVersion: true }\n    );\n    await config.workspaceConfig?.write({ dir: path.dirname(config.workspaceConfig.path) });\n  }\n\n  async addSpecificComponentConfig(\n    id: ComponentID,\n    aspectId: string,\n    config: Record<string, any> = {},\n    shouldMergeWithExisting = false\n  ) {\n    const componentConfigFile = await this.componentConfigFile(id);\n    if (componentConfigFile) {\n      await componentConfigFile.addAspect(\n        aspectId,\n        config,\n        this.resolveComponentId.bind(this),\n        shouldMergeWithExisting\n      );\n      await componentConfigFile.write({ override: true });\n    } else {\n      this.bitMap.addComponentConfig(id, aspectId, config, shouldMergeWithExisting);\n    }\n  }\n\n  async removeSpecificComponentConfig(id: ComponentID, aspectId: string, markWithMinusIfNotExist: boolean) {\n    const componentConfigFile = await this.componentConfigFile(id);\n    if (componentConfigFile) {\n      await componentConfigFile.removeAspect(aspectId, markWithMinusIfNotExist, this.resolveComponentId.bind(this));\n      await componentConfigFile.write({ override: true });\n    } else {\n      this.bitMap.removeComponentConfig(id, aspectId, markWithMinusIfNotExist);\n    }\n  }\n\n  async getAspectIdFromConfig(\n    componentId: ComponentID,\n    aspectIdStr: string,\n    ignoreAspectVersion = false\n  ): Promise<string | undefined> {\n    const aspectId = await this.resolveComponentId(aspectIdStr);\n    const componentConfigFile = await this.componentConfigFile(componentId);\n    if (componentConfigFile) {\n      const aspectEntry = componentConfigFile.aspects.find(aspectId, ignoreAspectVersion);\n      return aspectEntry?.id.toString();\n    }\n    return this.bitMap.getAspectIdFromConfig(componentId, aspectId, ignoreAspectVersion);\n  }\n\n  async getSpecificComponentConfig(id: ComponentID, aspectId: string): Promise<any> {\n    const componentConfigFile = await this.componentConfigFile(id);\n    if (componentConfigFile) {\n      return componentConfigFile.aspects.get(aspectId)?.config;\n    }\n    return this.bitMap.getBitmapEntry(id, { ignoreVersion: true }).config?.[aspectId];\n  }\n\n  /**\n   * This will mutate the entries with extensionId prop to have resolved legacy id\n   * This should be worked on the extension data list not the new aspect list\n   * @param extensionList\n   */\n  private async resolveExtensionListIds(extensionList: ExtensionDataList): Promise<ExtensionDataList> {\n    const promises = extensionList.map(async (entry) => {\n      if (entry.extensionId) {\n        const id = await this.resolveComponentId(entry.extensionId);\n        entry.extensionId = id._legacy;\n      }\n\n      return entry;\n    });\n    await Promise.all(promises);\n    return extensionList;\n  }\n\n  private isVendorComponentByComponentDir(relativeComponentDir: PathOsBasedRelative): boolean {\n    const vendorDir = this.config.vendor?.directory || DEFAULT_VENDOR_DIR;\n    if (pathIsInside(relativeComponentDir, vendorDir)) {\n      return true;\n    }\n    // TODO: implement\n    return false;\n  }\n\n  /**\n   * return the component config from its folder (component.json)\n   * @param componentId\n   */\n  public async componentConfigFile(id: ComponentID): Promise<ComponentConfigFile | undefined> {\n    const relativeComponentDir = this.componentDir(id, { ignoreVersion: true }, { relative: true });\n    return this.componentConfigFileFromComponentDirAndName(relativeComponentDir, id.fullName);\n  }\n\n  /**\n   * @param componentPath can be relative or absolute. supports Linux and Windows\n   */\n  async getComponentIdByPath(componentPath: PathOsBased): Promise<ComponentID | undefined> {\n    const relativePath = path.isAbsolute(componentPath) ? path.relative(this.path, componentPath) : componentPath;\n    const linuxPath = pathNormalizeToLinux(relativePath);\n    const bitId = this.consumer.bitMap.getComponentIdByPath(linuxPath);\n    if (bitId) {\n      return this.resolveComponentId(bitId);\n    }\n    return undefined;\n  }\n\n  private async componentConfigFileFromComponentDirAndName(\n    relativeComponentDir: PathOsBasedRelative,\n    name: string\n  ): Promise<ComponentConfigFile | undefined> {\n    let componentConfigFile;\n    if (relativeComponentDir) {\n      const absComponentDir = this.componentDirToAbsolute(relativeComponentDir);\n      const defaultScopeFromVariantsOrWs = await this.componentDefaultScopeFromComponentDirAndNameWithoutConfigFile(\n        relativeComponentDir,\n        name\n      );\n      componentConfigFile = await ComponentConfigFile.load(\n        absComponentDir,\n        this.createAspectList.bind(this),\n        defaultScopeFromVariantsOrWs\n      );\n    }\n\n    return componentConfigFile;\n  }\n\n  async getAspectsGraphWithoutCore(components: Component[], isAspect?: ShouldLoadFunc) {\n    const ids = components.map((component) => component.id._legacy);\n    const coreAspectsStringIds = this.aspectLoader.getCoreAspectIds();\n    const coreAspectsComponentIds = coreAspectsStringIds.map((id) => BitId.parse(id, true));\n    const coreAspectsBitIds = BitIds.fromArray(coreAspectsComponentIds.map((id) => id.changeScope(null)));\n    // const aspectsIds = components.reduce((acc, curr) => {\n    //   const currIds = curr.state.aspects.ids;\n    //   acc = acc.concat(currIds);\n    //   return acc;\n    // }, [] as any);\n    // const otherDependenciesMap = components.reduce((acc, curr) => {\n    //   // const currIds = curr.state.dependencies.dependencies.map(dep => dep.id.toString());\n    //   const currMap = curr.state.dependencies.getIdsMap();\n    //   Object.assign(acc, currMap);\n    //   return acc;\n    // }, {});\n\n    // const depsWhichAreNotAspects = difference(Object.keys(otherDependenciesMap), aspectsIds);\n    // const depsWhichAreNotAspectsBitIds = depsWhichAreNotAspects.map((strId) => otherDependenciesMap[strId]);\n    // We only want to load into the graph components which are aspects and not regular dependencies\n    // This come to solve a circular loop when an env aspect use an aspect (as regular dep) and the aspect use the env aspect as its env\n    // TODO: @gilad it causes many issues we need to find a better solution. removed for now.\n    const ignoredIds = coreAspectsBitIds.concat([]);\n    return this.buildOneGraphForComponents(ids, BitIds.fromArray(ignoredIds), isAspect);\n  }\n\n  /**\n   * load aspects from the workspace and if not exists in the workspace, load from the scope.\n   * keep in mind that the graph may have circles.\n   */\n  async loadAspects(ids: string[] = [], throwOnError = false, neededFor?: string): Promise<string[]> {\n    // generate a random callId to be able to identify the call from the logs\n    const callId = Math.floor(Math.random() * 1000);\n    const loggerPrefix = `[${callId}] loadAspects,`;\n    this.logger.info(`${loggerPrefix} loading ${ids.length} aspects.\nids: ${ids.join(', ')}\nneeded-for: ${neededFor || '<unknown>'}`);\n    const notLoadedIds = ids.filter((id) => !this.aspectLoader.isAspectLoaded(id));\n    if (!notLoadedIds.length) return [];\n    const coreAspectsStringIds = this.aspectLoader.getCoreAspectIds();\n    const idsWithoutCore: string[] = difference(notLoadedIds, coreAspectsStringIds);\n    const componentIds = await this.resolveMultipleComponentIds(idsWithoutCore);\n    const components = await this.importAndGetAspects(componentIds);\n\n    const isAspect = async (bitId: BitId) => {\n      const id = await this.resolveComponentId(bitId);\n      const component = await this.get(id);\n      const data = this.envs.getEnvData(component);\n      const isUsingAspectEnv = this.envs.isUsingAspectEnv(component);\n      const isUsingEnvEnv = this.envs.isUsingEnvEnv(component);\n      const isValidAspect = isUsingAspectEnv || isUsingEnvEnv;\n      if (!isValidAspect && idsWithoutCore.includes(component.id.toString())) {\n        const err = new IncorrectEnvAspect(component.id.toString(), data.type, data.id);\n        if (data.id === DEFAULT_ENV) {\n          // when cloning a project, or when the node-modules dir is deleted, nothing works and all\n          // components are default to the DEFAULT_ENV, which is node-env. we must allow \"bit\n          // install\" to prepare the workspace and let the proper the envs to be loaded\n          this.logger.error(err.message);\n        } else {\n          throw err;\n        }\n      }\n      return isValidAspect;\n    };\n\n    const graph = await this.getAspectsGraphWithoutCore(components, isAspect);\n    const idsStr = graph.nodes();\n    this.logger.debug(`${loggerPrefix} found ${idsStr.length} aspects in the aspects-graph`);\n    const compIds = await this.resolveMultipleComponentIds(idsStr);\n    const aspects = await this.getMany(compIds);\n    const { workspaceComps, scopeComps } = await this.groupComponentsByWorkspaceAndScope(aspects);\n    this.logger.debug(\n      `${loggerPrefix} found ${workspaceComps.length} components in the workspace:\\n${workspaceComps\n        .map((c) => c.id.toString())\n        .join('\\n')}`\n    );\n    this.logger.debug(\n      `${loggerPrefix} ${\n        scopeComps.length\n      } components are not in the workspace and are loaded from the scope:\\n${scopeComps\n        .map((c) => c.id.toString())\n        .join('\\n')}`\n    );\n    const scopeIds = scopeComps.map((aspect) => aspect.id.toString());\n    const workspaceAspects = await this.requireComponents(workspaceComps);\n    const workspaceManifests = await this.aspectLoader.getManifestsFromRequireableExtensions(\n      workspaceAspects,\n      throwOnError\n    );\n    const potentialPluginsIndexes = compact(\n      workspaceManifests.map((manifest, index) => {\n        if (this.aspectLoader.isValidAspect(manifest)) return undefined;\n        return index;\n      })\n    );\n    const workspaceManifestsIds = compact(workspaceManifests.map((m) => m.id));\n    // We are grouping the scope aspects by whether they are envs of something of the list or not\n    // if yes, we want to load them first\n    // the rest we will load together with the workspace aspects\n    const scopeIdsGrouped = await this.scope.groupAspectIdsByEnvOfTheList(scopeIds);\n    const scopeEnvsManifestsIds =\n      scopeIdsGrouped.envs && scopeIdsGrouped.envs.length\n        ? await this.scope.loadAspects(\n            scopeIdsGrouped.envs,\n            throwOnError,\n            'workspace.loadAspects loading scope aspects'\n          )\n        : [];\n    const { manifests: scopeOtherManifests } =\n      scopeIdsGrouped.other && scopeIdsGrouped.other.length\n        ? await this.scope.getManifestsGraphRecursively(\n            scopeIdsGrouped.other,\n            compact(workspaceManifestsIds),\n            throwOnError,\n            {\n              packageManagerConfigRootDir: this.path,\n            }\n          )\n        : { manifests: [] };\n    const scopeOtherManifestsIds = compact(scopeOtherManifests.map((m) => m.id));\n\n    await this.aspectLoader.loadExtensionsByManifests(\n      [...scopeOtherManifests, ...workspaceManifests],\n      throwOnError,\n      idsWithoutCore\n    );\n    // Try require components for potential plugins\n    const pluginsWorkspaceComps = potentialPluginsIndexes.map((index) => {\n      return workspaceComps[index];\n    });\n    // Do the require again now that the plugins defs already registered\n    const pluginsWorkspaceAspects = await this.requireComponents(pluginsWorkspaceComps);\n    const pluginsWorkspaceManifests = await this.aspectLoader.getManifestsFromRequireableExtensions(\n      pluginsWorkspaceAspects,\n      throwOnError\n    );\n    await this.aspectLoader.loadExtensionsByManifests(pluginsWorkspaceManifests, throwOnError);\n    this.logger.debug(`${loggerPrefix} finish loading aspects`);\n    return compact(scopeEnvsManifestsIds.concat(scopeOtherManifestsIds).concat(workspaceManifestsIds));\n  }\n\n  /**\n   * Note - this gets called from Harmony only.\n   * returns one graph that includes all dependencies types. each edge has a label of the dependency\n   * type. the nodes content is the Component object.\n   */\n  async buildOneGraphForComponents(\n    ids: BitId[],\n    ignoreIds?: BitIds,\n    shouldLoadFunc?: ShouldLoadFunc,\n    shouldThrowOnMissingDep = true\n  ): Promise<LegacyGraph> {\n    const graphFromFsBuilder = new GraphFromFsBuilder(\n      this,\n      this.logger,\n      ignoreIds,\n      shouldLoadFunc,\n      shouldThrowOnMissingDep\n    );\n    return graphFromFsBuilder.buildGraph(ids);\n  }\n\n  async resolveAspects(\n    runtimeName?: string,\n    componentIds?: ComponentID[],\n    opts?: ResolveAspectsOptions\n  ): Promise<AspectDefinition[]> {\n    this.logger.debug(`workspace resolveAspects, runtimeName: ${runtimeName}, componentIds: ${componentIds}`);\n    const defaultOpts: ResolveAspectsOptions = {\n      excludeCore: false,\n      requestedOnly: false,\n    };\n    const mergedOpts = { ...defaultOpts, ...opts };\n    let missingPaths = false;\n    const stringIds: string[] = [];\n    const idsToResolve = componentIds ? componentIds.map((id) => id.toString()) : this.harmony.extensionsIds;\n    const coreAspectsIds = this.aspectLoader.getCoreAspectIds();\n    const userAspectsIds: string[] = difference(idsToResolve, coreAspectsIds);\n    const componentIdsToResolve = await this.resolveMultipleComponentIds(userAspectsIds);\n    const { workspaceIds, scopeIds } = await this.groupIdsByWorkspaceAndScope(componentIdsToResolve);\n    const wsComponents = await this.getMany(workspaceIds);\n    const aspectDefs = await this.aspectLoader.resolveAspects(wsComponents, async (component) => {\n      const compStringId = component.id._legacy.toString();\n      stringIds.push(compStringId);\n      const localPath = this.getComponentPackagePath(component);\n      const isExist = await fs.pathExists(localPath);\n      if (!isExist) {\n        missingPaths = true;\n      }\n      const runtimePath = runtimeName\n        ? await this.aspectLoader.getRuntimePath(component, localPath, runtimeName)\n        : null;\n\n      this.logger.debug(\n        `workspace resolveAspects, resolving id: ${compStringId}, localPath: ${localPath}, runtimePath: ${runtimePath}`\n      );\n      return {\n        aspectPath: localPath,\n        runtimePath,\n      };\n    });\n\n    let scopeAspectDefs: AspectDefinition[] = [];\n    if (scopeIds.length) {\n      scopeAspectDefs = await this.scope.resolveAspects(runtimeName, scopeIds, mergedOpts);\n    }\n\n    let coreAspectDefs = await Promise.all(\n      coreAspectsIds.map(async (coreId) => {\n        const rawDef = await getAspectDef(coreId, runtimeName);\n        return this.aspectLoader.loadDefinition(rawDef);\n      })\n    );\n\n    // due to lack of workspace and scope runtimes. TODO: fix after adding them.\n    if (runtimeName) {\n      coreAspectDefs = coreAspectDefs.filter((coreAspect) => {\n        return coreAspect.runtimePath;\n      });\n    }\n\n    if (missingPaths) {\n      await link(stringIds, false);\n    }\n\n    const allDefs = aspectDefs.concat(coreAspectDefs).concat(scopeAspectDefs);\n    const ids = idsToResolve.map((idStr) => ComponentID.fromString(idStr).toStringWithoutVersion());\n    const afterExclusion = mergedOpts.excludeCore\n      ? allDefs.filter((def) => {\n          const isCore = coreAspectDefs.find((coreId) => def.getId === coreId.getId);\n          const id = ComponentID.fromString(def.getId || '');\n          const isTarget = ids.includes(id.toStringWithoutVersion());\n          if (isTarget) return true;\n          return !isCore;\n        })\n      : allDefs;\n\n    const uniqDefs = uniqBy(afterExclusion, (def) => `${def.aspectPath}-${def.runtimePath}`);\n    let defs = uniqDefs;\n    if (runtimeName) {\n      defs = defs.filter((def) => def.runtimePath);\n    }\n\n    if (componentIds && componentIds.length && mergedOpts.requestedOnly) {\n      const componentIdsString = componentIds.map((id) => id.toString());\n      defs = defs.filter((def) => {\n        return (\n          (def.id && componentIdsString.includes(def.id)) ||\n          (def.component && componentIdsString.includes(def.component?.id.toString()))\n        );\n      });\n    }\n\n    return defs;\n  }\n\n  private async groupIdsByWorkspaceAndScope(\n    ids: ComponentID[]\n  ): Promise<{ workspaceIds: ComponentID[]; scopeIds: ComponentID[] }> {\n    const workspaceIds: ComponentID[] = [];\n    const scopeIds: ComponentID[] = [];\n    await Promise.all(\n      ids.map(async (id) => {\n        const existOnWorkspace = await this.hasId(id);\n        existOnWorkspace ? workspaceIds.push(id) : scopeIds.push(id);\n      })\n    );\n    return { workspaceIds, scopeIds };\n  }\n\n  private async groupComponentsByWorkspaceAndScope(\n    components: Component[]\n  ): Promise<{ workspaceComps: Component[]; scopeComps: Component[] }> {\n    const workspaceComps: Component[] = [];\n    const scopeComps: Component[] = [];\n    await Promise.all(\n      components.map(async (component) => {\n        const existOnWorkspace = await this.hasId(component.id);\n        existOnWorkspace ? workspaceComps.push(component) : scopeComps.push(component);\n      })\n    );\n    return { workspaceComps, scopeComps };\n  }\n\n  /**\n   * Load all unloaded extensions from a list\n   * @param extensions list of extensions with config to load\n   */\n  async loadExtensions(\n    extensions: ExtensionDataList,\n    originatedFrom?: ComponentID,\n    throwOnError = false\n  ): Promise<void> {\n    const extensionsIdsP = extensions.map(async (extensionEntry) => {\n      // Core extension\n      if (!extensionEntry.extensionId) {\n        return extensionEntry.stringId as string;\n      }\n\n      const id = await this.resolveComponentId(extensionEntry.extensionId);\n      // return this.resolveComponentId(extensionEntry.extensionId);\n      return id.toString();\n    });\n    const extensionsIds: string[] = await Promise.all(extensionsIdsP);\n    const loadedExtensions = this.harmony.extensionsIds;\n    const extensionsToLoad = difference(extensionsIds, loadedExtensions);\n    if (!extensionsToLoad.length) return;\n    await this.loadAspects(extensionsToLoad, throwOnError, originatedFrom?.toString());\n  }\n\n  /**\n   * Provides a cache folder, unique per key.\n   * Return value may be undefined, if workspace folder is unconventional (bare-scope, no node_modules, etc)\n   */\n  getTempDir(\n    /*\n     * unique key, i.e. aspect or component id\n     */\n    id: string\n  ) {\n    const PREFIX = 'bit';\n    const cacheDir = path.join(this.modulesPath, '.cache', PREFIX, id);\n\n    // maybe should also check it's a folder and has write permissions\n    if (!fs.existsSync(cacheDir)) {\n      fs.mkdirSync(cacheDir, { recursive: true });\n    }\n\n    return cacheDir;\n  }\n\n  async requireComponents(components: Component[]): Promise<RequireableComponent[]> {\n    let missingPaths = false;\n    const stringIds: string[] = [];\n    const resolveP = components.map(async (component) => {\n      stringIds.push(component.id._legacy.toString());\n      const localPath = this.getComponentPackagePath(component);\n      const isExist = await fs.pathExists(localPath);\n      if (!isExist) {\n        missingPaths = true;\n      }\n\n      const requireFunc = async () => {\n        const plugins = this.aspectLoader.getPlugins(component, localPath);\n        if (plugins.has()) {\n          return plugins.load(MainRuntime.name);\n        }\n\n        // eslint-disable-next-line global-require, import/no-dynamic-require\n        const aspect = require(localPath);\n        // require aspect runtimes\n        const runtimePath = await this.aspectLoader.getRuntimePath(component, localPath, MainRuntime.name);\n        // eslint-disable-next-line global-require, import/no-dynamic-require\n        if (runtimePath) require(runtimePath);\n        return aspect;\n      };\n      return new RequireableComponent(component, requireFunc);\n    });\n    const resolved = await Promise.all(resolveP);\n    // Make sure to link missing components\n    if (missingPaths) {\n      await link(stringIds, false);\n    }\n    return resolved;\n  }\n\n  /**\n   * whether a scope is hosted by Bit cloud.\n   * otherwise, it is self-hosted\n   */\n  private async isHostedByBit(scopeName: string): Promise<boolean> {\n    // TODO: once scope create a new API for this, replace it with the new one\n    const remotes = await this.scope._legacyRemotes();\n    return remotes.isHub(scopeName);\n  }\n\n  /**\n   * same as `this.importAndGetMany()` with a specific error handling of ComponentNotFound\n   */\n  private async importAndGetAspects(componentIds: ComponentID[]): Promise<Component[]> {\n    try {\n      return await this.importAndGetMany(componentIds);\n    } catch (err: any) {\n      if (err instanceof ComponentNotFound) {\n        const config = this.harmony.get<ConfigMain>('teambit.harmony/config');\n        const configStr = JSON.stringify(config.workspaceConfig?.raw || {});\n        if (configStr.includes(err.id)) {\n          throw new BitError(`error: a component \"${err.id}\" was not found\nyour workspace.jsonc has this component-id set. you might want to remove/change it.`);\n        }\n      }\n\n      throw err;\n    }\n  }\n\n  /**\n   * this should be rarely in-use.\n   * it's currently used by watch extension as a quick workaround to load .bitmap and the components\n   */\n  async _reloadConsumer() {\n    this.consumer = await loadConsumer(this.path, true);\n    this.clearCache();\n  }\n\n  getComponentPackagePath(component: Component) {\n    const relativePath = this.dependencyResolver.getRuntimeModulePath(component);\n    return path.join(this.path, relativePath);\n  }\n\n  // TODO: should we return here the dir as it defined (aka components) or with /{name} prefix (as it used in legacy)\n  get defaultDirectory(): string {\n    return this.config.defaultDirectory;\n  }\n\n  get legacyDefaultDirectory(): string {\n    if (this.defaultDirectory && !this.defaultDirectory.includes('{name}')) {\n      return `${this.defaultDirectory}/{name}`;\n    }\n    return this.defaultDirectory;\n  }\n\n  /**\n   * Transform the id to ComponentId and get the exact id as appear in bitmap\n   *\n   * @param {(string | ComponentID | BitId)} id\n   * @returns {Promise<ComponentID>}\n   * @memberof Workspace\n   */\n  async resolveComponentId(id: string | ComponentID | BitId): Promise<ComponentID> {\n    const getDefaultScope = async (bitId: BitId, bitMapOptions?: GetBitMapComponentOptions) => {\n      if (bitId.scope) {\n        return bitId.scope;\n      }\n      const relativeComponentDir = this.componentDirFromLegacyId(bitId, bitMapOptions, { relative: true });\n      const defaultScope = await this.componentDefaultScopeFromComponentDirAndName(\n        relativeComponentDir,\n        bitId.toStringWithoutScopeAndVersion()\n      );\n      return defaultScope;\n    };\n\n    // This is required in case where you have in your workspace a component with the same name as a core aspect\n    // let's say you have component called react-native (which is eventually my-org.my-scope/react-native)\n    // and you set teambit.react/react-native as your env\n    // bit will get here with the string teambit.react/react-native and will try to resolve it from the workspace\n    // during this it will find the my-org.my-scope/react-native which is incorrect as the core one doesn't exist in the\n    // workspace\n    if (this.aspectLoader.isCoreAspect(id.toString())) {\n      return ComponentID.fromString(id.toString());\n    }\n    let legacyId = this.consumer.getParsedIdIfExist(id.toString(), true, true);\n    if (legacyId) {\n      const defaultScope = await getDefaultScope(legacyId);\n      // only reason to strip the scopeName from the given id is when this id has the defaultScope, because .bitmap\n      // doesn't have the defaultScope. if the given id doesn't have scope or has scope different than the default,\n      // then don't ignore it. search with the scope-name.\n      const shouldSearchWithoutScopeInProvidedId = id.toString().startsWith(`${defaultScope}/`);\n      legacyId = this.consumer.getParsedIdIfExist(id.toString(), true, shouldSearchWithoutScopeInProvidedId);\n      if (legacyId) {\n        return ComponentID.fromLegacy(legacyId, defaultScope);\n      }\n    }\n    try {\n      const idWithVersion = id.toString();\n      const [idWithoutVersion, version] = id.toString().split('@');\n      const _bitMapId = this.consumer.getParsedIdIfExist(idWithoutVersion, false, true);\n      // This logic is very specific, and very sensitive for changes please do not touch this without consulting with @ran or @gilad\n      // example (partial list) cases which should be handled are:\n      // use case 1 - ws component provided with the local scope name:\n      // source id        : my-scope1/my-name1\n      // bitmap res (_id) : my-name1 (comp is tagged but not exported)\n      // local scope name : my-scope1\n      // scope content    : my-name1\n      // expected result  : my-name1\n      // use case 2 - component with same name exist in ws and scope (but with different scope name)\n      // source id        : my-scope2/my-name1\n      // bitmap res (_id) : my-name1 (comp exist in ws but it's actually different component)\n      // local scope name : my-scope1\n      // scope content    : my-scope2/my-name1\n      // expected result  : my-scope2/my-name1\n      // use case 3 - component with same name exist in ws and scope (but with different scope name) - source provided without scope name\n      // source id        : my-name1\n      // bitmap res (_id) : my-name1 (comp exist in ws but it's actually different component)\n      // local scope name : my-scope1\n      // scope content    : my-scope1/my-name1 and my-scope2/my-name1\n      // expected result  : my-name1 (get the name from the bitmap)\n      // use case 4 - component with the same name and different scope are imported into the ws\n      // source id        : my-name1\n      // bitmap res (_id) : my-scope2/my-name1 (comp exist in ws from different scope (imported))\n      // local scope name : my-scope1\n      // scope content    : my-scope2/my-name1\n      // expected result  : my-scope2/my-name1 (get the name from the bitmap)\n\n      // No entry in bitmap at all, search for the original input id\n      if (!_bitMapId) {\n        return await this.scope.resolveComponentId(id.toString());\n      }\n      const _bitMapIdWithoutVersion = _bitMapId.toStringWithoutVersion();\n      const _bitMapIdWithVersion = _bitMapId.changeVersion(version).toString();\n      // The id in the bitmap has prefix which is not in the source id - the bitmap entry has scope name\n      // Handle use case 4\n      if (_bitMapIdWithoutVersion.endsWith(idWithoutVersion) && _bitMapIdWithoutVersion !== idWithoutVersion) {\n        return await this.scope.resolveComponentId(_bitMapIdWithVersion);\n      }\n      // Handle case when I tagged the component locally with a default scope which is not the local scope\n      // but not exported it yet\n      // now i'm trying to load it with source id contain the default scope prefix\n      // we want to get it from the local first before assuming it's something coming from outside\n      if (!_bitMapId.scope) {\n        const defaultScopeForBitmapId = await getDefaultScope(_bitMapId, { ignoreVersion: true });\n        const getFromBitmapAddDefaultScope = () => {\n          let _bitmapIdWithVersionForSource = _bitMapId;\n          if (version) {\n            _bitmapIdWithVersionForSource = _bitMapId.changeVersion(version);\n          }\n          return ComponentID.fromLegacy(_bitmapIdWithVersionForSource, defaultScopeForBitmapId);\n        };\n        // a case when the given id contains the default scope\n        if (idWithVersion.startsWith(`${defaultScopeForBitmapId}/${_bitMapIdWithoutVersion}`)) {\n          return getFromBitmapAddDefaultScope();\n        }\n        // a case when the given id does not contain the default scope\n        const fromScope = await this.scope.resolveComponentId(idWithVersion);\n        if (!fromScope._legacy.hasScope()) {\n          return getFromBitmapAddDefaultScope();\n        }\n      }\n\n      if (idWithoutVersion.endsWith(_bitMapIdWithoutVersion) && _bitMapIdWithoutVersion !== idWithoutVersion) {\n        // The id in the bitmap doesn't have scope, the source id has scope\n        // Handle use case 2 and use case 1\n        if (id.toString().startsWith(this.scope.name)) {\n          // Handle use case 1 - the provided id has scope name same as the local scope name\n          // we want to send it as it appear in the bitmap\n          return await this.scope.resolveComponentId(_bitMapIdWithVersion);\n        }\n        // Handle use case 2 - the provided id has scope which is not the local scope\n        // we want to search by the source id\n        return await this.scope.resolveComponentId(idWithVersion);\n      }\n      // Handle use case 3\n      return await this.scope.resolveComponentId(idWithVersion);\n    } catch (error: any) {\n      legacyId = BitId.parse(id.toString(), true);\n      return ComponentID.fromLegacy(legacyId);\n    }\n  }\n\n  async resolveMultipleComponentIds(ids: Array<string | ComponentID | BitId>): Promise<ComponentID[]> {\n    return Promise.all(ids.map(async (id) => this.resolveComponentId(id)));\n  }\n\n  /**\n   * This will mutate the original extensions list and resolve it's ids\n   *\n   * @param {ExtensionDataList} extensions\n   * @returns {Promise<void[]>}\n   * @memberof Workspace\n   */\n  resolveExtensionsList(extensions: ExtensionDataList): Promise<void[]> {\n    const resolveMergedExtensionsP = extensions.map(async (extensionEntry) => {\n      if (extensionEntry.extensionId) {\n        // const hasVersion = extensionEntry.extensionId.hasVersion();\n        // const useBitmapVersion = !hasVersion;\n        // const resolvedId = await this.resolveComponentId(extensionEntry.extensionId, true, useBitmapVersion);\n\n        // Assuming extensionId always has scope - do not allow extension id without scope\n        const resolvedId = await this.resolveComponentId(extensionEntry.extensionId);\n        extensionEntry.extensionId = resolvedId._legacy;\n      }\n    });\n    return Promise.all(resolveMergedExtensionsP);\n  }\n\n  /**\n   * This will mutate the original extensions list and make sure all extensions has the ids with the scope / default scope\n   *\n   * @param {ExtensionDataList} extensions\n   * @returns {Promise<void[]>}\n   * @memberof Workspace\n   */\n  addDefaultScopeToExtensionsList(extensions: ExtensionDataList): Promise<void[]> {\n    const resolveMergedExtensionsP = extensions.map(async (extensionEntry) => {\n      if (extensionEntry.extensionId && !extensionEntry.extensionId.hasScope()) {\n        const componentId = ComponentID.fromLegacy(extensionEntry.extensionId);\n        const defaultScope = await this.componentDefaultScope(componentId);\n        extensionEntry.extensionId = extensionEntry.extensionId.changeScope(defaultScope);\n      }\n    });\n    return Promise.all(resolveMergedExtensionsP);\n  }\n\n  /**\n   * configure an environment to the given components in the .bitmap file, this configuration overrides other, such as\n   * overrides in workspace.jsonc.\n   */\n  async setEnvToComponents(envId: ComponentID, componentIds: ComponentID[]) {\n    const envStrWithPossiblyVersion = await this.resolveEnvIdWithPotentialVersionForConfig(envId);\n    const envIdStrNoVersion = envId.toStringWithoutVersion();\n    await this.unsetEnvFromComponents(componentIds);\n    await Promise.all(\n      componentIds.map(async (componentId) => {\n        await this.addSpecificComponentConfig(componentId, envStrWithPossiblyVersion);\n        await this.addSpecificComponentConfig(componentId, EnvsAspect.id, { env: envIdStrNoVersion });\n      })\n    );\n    await this.bitMap.write();\n  }\n\n  /**\n   * helpful when a user provides an env-string to be set and this env has no version.\n   * in the workspace config, a custom-env needs to be set with a version unless it's part of the workspace.\n   * (inside envs/envs it's set without a version).\n   */\n  async resolveEnvIdWithPotentialVersionForConfig(envId: ComponentID): Promise<string> {\n    const isCore = this.aspectLoader.isCoreAspect(envId.toStringWithoutVersion());\n    const existsOnWorkspace = await this.hasId(envId);\n    if (isCore || existsOnWorkspace) {\n      // the env needs to be without version\n      return envId.toStringWithoutVersion();\n    }\n    // the env must include a version\n    if (envId.hasVersion()) {\n      return envId.toString();\n    }\n    const extensions = this.harmony.get<ConfigMain>('teambit.harmony/config').extensions;\n    const found = extensions?.findExtension(envId.toString(), true);\n    if (found && found.extensionId?.version) {\n      return found.extensionId.toString();\n    }\n    const comps = await this.importAndGetMany([envId]);\n    return comps[0].id.toString();\n  }\n\n  /**\n   * remove env configuration from the .bitmap file, so then other configuration, such as \"variants\" will take place\n   */\n  async unsetEnvFromComponents(ids: ComponentID[]): Promise<{ changed: ComponentID[]; unchanged: ComponentID[] }> {\n    const changed: ComponentID[] = [];\n    const unchanged: ComponentID[] = [];\n    await Promise.all(\n      ids.map(async (id) => {\n        const envsAspect = await this.getSpecificComponentConfig(id, EnvsAspect.id);\n        const currentEnv = envsAspect && envsAspect !== REMOVE_EXTENSION_SPECIAL_SIGN ? envsAspect.env : null;\n        if (!currentEnv) {\n          unchanged.push(id);\n          return;\n        }\n        const currentEnvWithPotentialVersion = await this.getAspectIdFromConfig(id, currentEnv, true);\n        await this.removeSpecificComponentConfig(id, currentEnvWithPotentialVersion || currentEnv, false);\n        await this.removeSpecificComponentConfig(id, EnvsAspect.id, false);\n        changed.push(id);\n      })\n    );\n    await this.bitMap.write();\n    return { changed, unchanged };\n  }\n}\n\n/**\n * this is a super hacky way to do it. problem is that loadAspect is running as onStart hook, where we don't\n * have the CLI fully loaded yet, so we can't get the command from the CLI aspect, we have to retrieve it from\n * process.argv.\n * in general, we don't want every command to try again and again fetching un-built versions. otherwise, every time\n * Bit loads (even bit --help), it'll fetch them and slow down everything.\n * instead, long-running commands and those that need the artifacts from the Version objects, should try to re-fetch.\n */\nfunction shouldReFetchUnBuiltVersion() {\n  const commandsToReFetch = ['import'];\n  return commandsToReFetch.includes(process.argv[2]);\n}\n\nexport default Workspace;\n"],"mappings":"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"}