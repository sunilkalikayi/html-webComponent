import { ComponentID } from '@teambit/component-id';
import LegacyBitMap from '@teambit/legacy/dist/consumer/bit-map';
import { Consumer } from '@teambit/legacy/dist/consumer';
import { GetBitMapComponentOptions } from '@teambit/legacy/dist/consumer/bit-map/bit-map';
import ComponentMap from '@teambit/legacy/dist/consumer/bit-map/component-map';
import { LaneId } from '@teambit/lane-id';
/**
 * consider extracting to a new component.
 * (pro: making Workspace aspect smaller. con: it's an implementation details of the workspace)
 */
export declare class BitMap {
    private legacyBitMap;
    private consumer;
    constructor(legacyBitMap: LegacyBitMap, consumer: Consumer);
    /**
     * adds component config to the .bitmap file.
     * later, upon `bit tag`, the data is saved in the scope.
     * returns a boolean indicating whether a change has been made.
     */
    addComponentConfig(id: ComponentID, aspectId: string, config?: Record<string, any>, shouldMergeConfig?: boolean): boolean;
    removeComponentConfig(id: ComponentID, aspectId: string, markWithMinusIfNotExist: boolean): boolean;
    removeEntireConfig(id: ComponentID): boolean;
    setEntireConfig(id: ComponentID, config: Record<string, any>): void;
    removeDefaultScope(id: ComponentID): void;
    setDefaultScope(id: ComponentID, defaultScope: string): void;
    /**
     * write .bitmap object to the filesystem
     */
    write(): Promise<void>;
    /**
     * get the data saved in the .bitmap file for this component-id.
     */
    getBitmapEntry(id: ComponentID, { ignoreVersion, ignoreScopeAndVersion }?: GetBitMapComponentOptions): ComponentMap;
    getAspectIdFromConfig(componentId: ComponentID, aspectId: ComponentID, ignoreAspectVersion?: boolean): string | undefined;
    /**
     * components that were not tagged yet are safe to rename them from the .bitmap file.
     */
    renameNewComponent(sourceId: ComponentID, targetId: ComponentID): void;
    removeComponent(id: ComponentID): void;
    /**
     * this is the lane-id of the recently exported lane. in case of a new lane, which was not exported yet, this will be
     * empty.
     */
    getExportedLaneId(): LaneId | undefined;
    /**
     * whether .bitmap file has changed in-memory
     */
    hasChanged(): boolean;
}
