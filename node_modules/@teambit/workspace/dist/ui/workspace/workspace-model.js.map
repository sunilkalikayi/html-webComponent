{"version":3,"names":["Workspace","constructor","name","path","icon","components","componentDescriptors","getComponent","id","find","component","fullName","from","map","ComponentID","fromObject","ComponentDescriptor","toString","value","ComponentModel","empty"],"sources":["workspace-model.ts"],"sourcesContent":["// import { ComponentMeta } from '@teambit/component';\nimport { ComponentID, ComponentModel, ComponentModelProps } from '@teambit/component';\nimport { ComponentDescriptor } from '@teambit/component-descriptor';\nimport { DeprecationInfo } from '@teambit/deprecation';\nimport { Descriptor } from '@teambit/envs';\n\nimport { ComponentStatus } from '../../workspace-component/component-status';\n\nexport type WorkspaceModelComponent = {\n  id: ComponentID;\n  status: ComponentStatus;\n  deprecation: DeprecationInfo;\n  env: Descriptor;\n};\n\nexport type WorkspaceProps = {\n  name: string;\n  path: string;\n  components: ComponentModelProps[];\n  icon: string;\n};\n\nexport class Workspace {\n  constructor(\n    /**\n     * name of the workspace.\n     */\n    readonly name: string,\n\n    /**\n     * absolute path of the workspace.\n     */\n    readonly path: string,\n\n    /**\n     * icon of the workspace.\n     */\n    readonly icon: string,\n\n    /**\n     * components container in the workspace.\n     */\n    readonly components: ComponentModel[],\n\n    /**\n     * components contained in the workspace.\n     */\n    readonly componentDescriptors: ComponentDescriptor[]\n  ) {}\n\n  /**\n   * return a component from the workspace.\n   */\n  getComponent(id: ComponentID) {\n    return this.components.find((component) => component.id.fullName === id.fullName);\n  }\n\n  static from({ name, path, components, icon }: WorkspaceProps) {\n    const componentDescriptors = components.map((component) => {\n      const id = ComponentID.fromObject(component.id);\n      return ComponentDescriptor.fromObject({ id: id.toString() });\n    });\n    return new Workspace(\n      name,\n      path,\n      icon,\n      components.map((value) => {\n        return ComponentModel.from(value);\n      }),\n      componentDescriptors\n    );\n  }\n\n  static empty() {\n    return new Workspace('', '', '', [], []);\n  }\n}\n"],"mappings":";;;;;;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAFA;;AAsBO,MAAMA,SAAS,CAAC;EACrBC,WAAW;EACT;AACJ;AACA;EACaC,IAAY;EAErB;AACJ;AACA;EACaC,IAAY;EAErB;AACJ;AACA;EACaC,IAAY;EAErB;AACJ;AACA;EACaC,UAA4B;EAErC;AACJ;AACA;EACaC,oBAA2C,EACpD;IAAA,KArBSJ,IAAY,GAAZA,IAAY;IAAA,KAKZC,IAAY,GAAZA,IAAY;IAAA,KAKZC,IAAY,GAAZA,IAAY;IAAA,KAKZC,UAA4B,GAA5BA,UAA4B;IAAA,KAK5BC,oBAA2C,GAA3CA,oBAA2C;EACnD;;EAEH;AACF;AACA;EACEC,YAAY,CAACC,EAAe,EAAE;IAC5B,OAAO,IAAI,CAACH,UAAU,CAACI,IAAI,CAAEC,SAAS,IAAKA,SAAS,CAACF,EAAE,CAACG,QAAQ,KAAKH,EAAE,CAACG,QAAQ,CAAC;EACnF;EAEA,OAAOC,IAAI,CAAC;IAAEV,IAAI;IAAEC,IAAI;IAAEE,UAAU;IAAED;EAAqB,CAAC,EAAE;IAC5D,MAAME,oBAAoB,GAAGD,UAAU,CAACQ,GAAG,CAAEH,SAAS,IAAK;MACzD,MAAMF,EAAE,GAAGM,wBAAW,CAACC,UAAU,CAACL,SAAS,CAACF,EAAE,CAAC;MAC/C,OAAOQ,0CAAmB,CAACD,UAAU,CAAC;QAAEP,EAAE,EAAEA,EAAE,CAACS,QAAQ;MAAG,CAAC,CAAC;IAC9D,CAAC,CAAC;IACF,OAAO,IAAIjB,SAAS,CAClBE,IAAI,EACJC,IAAI,EACJC,IAAI,EACJC,UAAU,CAACQ,GAAG,CAAEK,KAAK,IAAK;MACxB,OAAOC,2BAAc,CAACP,IAAI,CAACM,KAAK,CAAC;IACnC,CAAC,CAAC,EACFZ,oBAAoB,CACrB;EACH;EAEA,OAAOc,KAAK,GAAG;IACb,OAAO,IAAIpB,SAAS,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EAC1C;AACF;AAAC"}