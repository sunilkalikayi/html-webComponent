"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useWorkspace = useWorkspace;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _objectWithoutProperties2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
  _objectWithoutProperties2 = function () {
    return data;
  };
  return data;
}
function _react() {
  const data = require("react");
  _react = function () {
    return data;
  };
  return data;
}
function _component() {
  const data = require("@teambit/component");
  _component = function () {
    return data;
  };
  return data;
}
function _latest() {
  const data = _interopRequireDefault(require("@react-hook/latest"));
  _latest = function () {
    return data;
  };
  return data;
}
function _uiFoundationUiHooks() {
  const data = require("@teambit/ui-foundation.ui.hooks.use-data-query");
  _uiFoundationUiHooks = function () {
    return data;
  };
  return data;
}
function _client() {
  const data = require("@apollo/client");
  _client = function () {
    return data;
  };
  return data;
}
function _componentId() {
  const data = require("@teambit/component-id");
  _componentId = function () {
    return data;
  };
  return data;
}
function _workspaceModel() {
  const data = require("./workspace-model");
  _workspaceModel = function () {
    return data;
  };
  return data;
}
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
const wcComponentFields = (0, _client().gql)`
  fragment wcComponentFields on Component {
    id {
      name
      version
      scope
    }
    compositions {
      identifier
    }
    description
    issuesCount
    status {
      isOutdated
      isNew
      isInScope
      isStaged
      modifyInfo {
        hasModifiedFiles
        hasModifiedDependencies
      }
      isDeleted
    }
    preview {
      isScaling
    }
    deprecation {
      isDeprecate
      newId
    }
    server {
      env
      url
    }
    env {
      id
      icon
    }
  }
`;
const WORKSPACE = (0, _client().gql)`
  query workspace {
    workspace {
      name
      path
      icon
      components {
        ...wcComponentFields
      }
    }
  }
  ${wcComponentFields}
`;
const COMPONENT_SUBSCRIPTION_ADDED = (0, _client().gql)`
  subscription OnComponentAdded {
    componentAdded {
      component {
        ...wcComponentFields
      }
    }
  }
  ${wcComponentFields}
`;
const COMPONENT_SUBSCRIPTION_CHANGED = (0, _client().gql)`
  subscription OnComponentChanged {
    componentChanged {
      component {
        ...wcComponentFields
      }
    }
  }
  ${wcComponentFields}
`;
const COMPONENT_SUBSCRIPTION_REMOVED = (0, _client().gql)`
  subscription OnComponentRemoved {
    componentRemoved {
      componentIds {
        name
        version
        scope
      }
    }
  }
`;
function useWorkspace(options = {}) {
  const _useDataQuery = (0, _uiFoundationUiHooks().useDataQuery)(WORKSPACE),
    {
      data,
      subscribeToMore
    } = _useDataQuery,
    rest = (0, _objectWithoutProperties2().default)(_useDataQuery, ["data", "subscribeToMore"]);
  const optionsRef = (0, _latest().default)(options);
  (0, _react().useEffect)(() => {
    const unSubCompAddition = subscribeToMore({
      document: COMPONENT_SUBSCRIPTION_ADDED,
      updateQuery: (prev, {
        subscriptionData
      }) => {
        var _update$componentAdde;
        const update = subscriptionData.data;
        const addedComponent = update === null || update === void 0 ? void 0 : (_update$componentAdde = update.componentAdded) === null || _update$componentAdde === void 0 ? void 0 : _update$componentAdde.component;
        if (!addedComponent) return prev;
        const componentExists = prev.workspace.components.find(component => _componentId().ComponentID.isEqualObj(component.id, addedComponent.id, {
          ignoreVersion: true
        }));
        if (componentExists) return prev;

        // side effect - trigger observers
        setTimeout(() => {
          var _optionsRef$current$o, _optionsRef$current;
          return (_optionsRef$current$o = (_optionsRef$current = optionsRef.current).onComponentAdded) === null || _optionsRef$current$o === void 0 ? void 0 : _optionsRef$current$o.call(_optionsRef$current, [_component().ComponentModel.from(addedComponent)]);
        });
        return _objectSpread(_objectSpread({}, prev), {}, {
          workspace: _objectSpread(_objectSpread({}, prev.workspace), {}, {
            components: [...prev.workspace.components, addedComponent]
          })
        });
      }
    });
    const unSubCompChange = subscribeToMore({
      document: COMPONENT_SUBSCRIPTION_CHANGED,
      updateQuery: (prev, {
        subscriptionData
      }) => {
        const update = subscriptionData.data;
        if (!update) return prev;
        const updatedComponent = update.componentChanged.component;
        // side effect - trigger observers
        setTimeout(() => {
          var _optionsRef$current$o2, _optionsRef$current2;
          return (_optionsRef$current$o2 = (_optionsRef$current2 = optionsRef.current).onComponentUpdated) === null || _optionsRef$current$o2 === void 0 ? void 0 : _optionsRef$current$o2.call(_optionsRef$current2, [_component().ComponentModel.from(updatedComponent)]);
        });
        return _objectSpread(_objectSpread({}, prev), {}, {
          workspace: _objectSpread(_objectSpread({}, prev.workspace), {}, {
            components: prev.workspace.components.map(component => component.id.name === updatedComponent.id.name ? updatedComponent : component)
          })
        });
      }
    });
    const unSubCompRemoved = subscribeToMore({
      document: COMPONENT_SUBSCRIPTION_REMOVED,
      updateQuery: (prev, {
        subscriptionData
      }) => {
        var _subscriptionData$dat, _subscriptionData$dat2;
        const idsToRemove = (_subscriptionData$dat = subscriptionData.data) === null || _subscriptionData$dat === void 0 ? void 0 : (_subscriptionData$dat2 = _subscriptionData$dat.componentRemoved) === null || _subscriptionData$dat2 === void 0 ? void 0 : _subscriptionData$dat2.componentIds;
        if (!idsToRemove || idsToRemove.length === 0) return prev;

        // side effect - trigger observers
        setTimeout(() => {
          var _optionsRef$current$o3, _optionsRef$current3;
          return (_optionsRef$current$o3 = (_optionsRef$current3 = optionsRef.current).onComponentRemoved) === null || _optionsRef$current$o3 === void 0 ? void 0 : _optionsRef$current$o3.call(_optionsRef$current3, idsToRemove.map(id => _componentId().ComponentID.fromObject(id)));
        });
        return _objectSpread(_objectSpread({}, prev), {}, {
          workspace: _objectSpread(_objectSpread({}, prev.workspace), {}, {
            components: prev.workspace.components.filter(component => idsToRemove.every(id => !_componentId().ComponentID.isEqualObj(id, component.id)))
          })
        });
      }
    });

    // TODO - sub to component removal

    return () => {
      unSubCompAddition();
      unSubCompChange();
      unSubCompRemoved();
    };
  }, [optionsRef]);
  const workspace = (0, _react().useMemo)(() => {
    return data !== null && data !== void 0 && data.workspace ? _workspaceModel().Workspace.from(data === null || data === void 0 ? void 0 : data.workspace) : undefined;
  }, [data === null || data === void 0 ? void 0 : data.workspace]);
  return _objectSpread({
    workspace,
    subscribeToMore
  }, rest);
}

//# sourceMappingURL=use-workspace.js.map