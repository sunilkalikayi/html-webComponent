"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScopeSetCmd = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _constants() {
  const data = require("@teambit/legacy/dist/constants");
  _constants = function () {
    return data;
  };
  return data;
}
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
class ScopeSetCmd {
  constructor(workspace) {
    this.workspace = workspace;
    (0, _defineProperty2().default)(this, "name", 'set <scope-name> [component-pattern]');
    (0, _defineProperty2().default)(this, "description", 'Sets components with a default-scope. If no component is specified, sets the workspace with a default scope');
    (0, _defineProperty2().default)(this, "arguments", [{
      name: 'scope-name',
      description: 'the scope name to use as the default scope'
    }, {
      name: 'component-pattern',
      description: 'component name, component id, or component pattern. use component pattern to select multiple components. \nuse comma to separate patterns and "!" to exclude. e.g. "ui/**, !ui/button"\nwrap the pattern with quotes'
    }]);
    (0, _defineProperty2().default)(this, "options", []);
    (0, _defineProperty2().default)(this, "group", 'development');
    (0, _defineProperty2().default)(this, "extendedDescription", `default scopes for components are set in the bitmap file. the default scope for a workspace is set in the workspace.jsonc. a component is set with a scope (as oppose to default scope) only once it is versioned.'

${(0, _constants().PATTERN_HELP)('scope set scope-name')}`);
  }
  async report([scopeName, pattern]) {
    if (pattern) {
      const componentsIds = await this.workspace.idsByPattern(pattern);
      const changedIds = await this.workspace.setDefaultScopeToComponents(componentsIds, scopeName);
      return _chalk().default.green(`successfully set ${_chalk().default.bold(scopeName)} as the default-scope for the following component(s):
  ${_chalk().default.reset(changedIds.map(id => id.toString()).join('\n'))}`);
    }
    const oldScope = this.workspace.defaultScope;
    await this.workspace.setDefaultScope(scopeName);
    return _chalk().default.green(`successfully set the default-scope to ${_chalk().default.bold(scopeName)}. (previous scope was "${oldScope}")`);
  }
}
exports.ScopeSetCmd = ScopeSetCmd;

//# sourceMappingURL=scope-set.cmd.js.map