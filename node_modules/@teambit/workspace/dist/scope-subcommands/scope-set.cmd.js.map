{"version":3,"names":["ScopeSetCmd","constructor","workspace","name","description","PATTERN_HELP","report","scopeName","pattern","componentsIds","idsByPattern","changedIds","setDefaultScopeToComponents","chalk","green","bold","reset","map","id","toString","join","oldScope","defaultScope","setDefaultScope"],"sources":["scope-set.cmd.ts"],"sourcesContent":["import { Command } from '@teambit/cli';\nimport { PATTERN_HELP } from '@teambit/legacy/dist/constants';\nimport chalk from 'chalk';\nimport { Workspace } from '../workspace';\n\nexport class ScopeSetCmd implements Command {\n  name = 'set <scope-name> [component-pattern]';\n  description =\n    'Sets components with a default-scope. If no component is specified, sets the workspace with a default scope';\n  arguments = [\n    { name: 'scope-name', description: 'the scope name to use as the default scope' },\n    {\n      name: 'component-pattern',\n      description:\n        'component name, component id, or component pattern. use component pattern to select multiple components. \\nuse comma to separate patterns and \"!\" to exclude. e.g. \"ui/**, !ui/button\"\\nwrap the pattern with quotes',\n    },\n  ];\n  options = [];\n  group = 'development';\n  extendedDescription = `default scopes for components are set in the bitmap file. the default scope for a workspace is set in the workspace.jsonc. a component is set with a scope (as oppose to default scope) only once it is versioned.'\n\n${PATTERN_HELP('scope set scope-name')}`;\n\n  constructor(private workspace: Workspace) {}\n\n  async report([scopeName, pattern]: [string, string]) {\n    if (pattern) {\n      const componentsIds = await this.workspace.idsByPattern(pattern);\n      const changedIds = await this.workspace.setDefaultScopeToComponents(componentsIds, scopeName);\n      return chalk.green(`successfully set ${chalk.bold(scopeName)} as the default-scope for the following component(s):\n  ${chalk.reset(changedIds.map((id) => id.toString()).join('\\n'))}`);\n    }\n    const oldScope = this.workspace.defaultScope;\n    await this.workspace.setDefaultScope(scopeName);\n    return chalk.green(\n      `successfully set the default-scope to ${chalk.bold(scopeName)}. (previous scope was \"${oldScope}\")`\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAGO,MAAMA,WAAW,CAAoB;EAkB1CC,WAAW,CAASC,SAAoB,EAAE;IAAA,KAAtBA,SAAoB,GAApBA,SAAoB;IAAA,8CAjBjC,sCAAsC;IAAA,qDAE3C,6GAA6G;IAAA,mDACnG,CACV;MAAEC,IAAI,EAAE,YAAY;MAAEC,WAAW,EAAE;IAA6C,CAAC,EACjF;MACED,IAAI,EAAE,mBAAmB;MACzBC,WAAW,EACT;IACJ,CAAC,CACF;IAAA,iDACS,EAAE;IAAA,+CACJ,aAAa;IAAA,6DACE;AACzB;AACA,EAAE,IAAAC,yBAAY,EAAC,sBAAsB,CAAE,EAAC;EAEK;EAE3C,MAAMC,MAAM,CAAC,CAACC,SAAS,EAAEC,OAAO,CAAmB,EAAE;IACnD,IAAIA,OAAO,EAAE;MACX,MAAMC,aAAa,GAAG,MAAM,IAAI,CAACP,SAAS,CAACQ,YAAY,CAACF,OAAO,CAAC;MAChE,MAAMG,UAAU,GAAG,MAAM,IAAI,CAACT,SAAS,CAACU,2BAA2B,CAACH,aAAa,EAAEF,SAAS,CAAC;MAC7F,OAAOM,gBAAK,CAACC,KAAK,CAAE,oBAAmBD,gBAAK,CAACE,IAAI,CAACR,SAAS,CAAE;AACnE,IAAIM,gBAAK,CAACG,KAAK,CAACL,UAAU,CAACM,GAAG,CAAEC,EAAE,IAAKA,EAAE,CAACC,QAAQ,EAAE,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAE,EAAC,CAAC;IAChE;IACA,MAAMC,QAAQ,GAAG,IAAI,CAACnB,SAAS,CAACoB,YAAY;IAC5C,MAAM,IAAI,CAACpB,SAAS,CAACqB,eAAe,CAAChB,SAAS,CAAC;IAC/C,OAAOM,gBAAK,CAACC,KAAK,CACf,yCAAwCD,gBAAK,CAACE,IAAI,CAACR,SAAS,CAAE,0BAAyBc,QAAS,IAAG,CACrG;EACH;AACF;AAAC"}