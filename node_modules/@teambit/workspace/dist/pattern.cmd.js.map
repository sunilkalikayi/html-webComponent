{"version":3,"names":["PatternCommand","constructor","workspace","cmd","description","report","pattern","ids","json","title","chalk","green","bold","length","toString","join","idsByPattern"],"sources":["pattern.cmd.ts"],"sourcesContent":["import { Command, CommandOptions } from '@teambit/cli';\nimport chalk from 'chalk';\nimport { Workspace } from './workspace';\n\nexport class PatternCommand implements Command {\n  name = 'pattern <pattern>';\n  alias = '';\n  description = 'list the component ids matching the given pattern';\n  extendedDescription = `this command helps validating a pattern before using it in other commands.\na pattern can be a simple component-id or component-name. e.g. \"ui/button\".\na pattern can be used with wildcards for multiple component ids, e.g. \"org.scope/utils/**\".\nto enter multiple patterns, separate them by a comma, e.g. \"ui/*, lib/*\"\nto exclude, use \"!\". e.g. \"ui/**, !ui/button\"\nalways wrap the pattern with quotes to avoid collision with shell commands.\nthe matching algorithm is done by multimatch (@see https://github.com/sindresorhus/multimatch)\n`;\n  examples = [\n    { cmd: 'bit pattern \"**\"', description: 'matches all components' },\n    {\n      cmd: 'bit pattern \"*/ui/*\"',\n      description:\n        'matches components with any scope-name and the \"ui\" namespace. e.g. \"ui/button\" but not \"ui/elements/button\"',\n    },\n    {\n      cmd: 'bit pattern \"*/ui/**\"',\n      description: 'matches components that their namespace starts with \"ui/\" e.g. \"ui/button\", \"ui/elements/button\"',\n    },\n    { cmd: 'bit pattern \"bar, foo\"', description: 'matches two components: bar and foo' },\n    { cmd: 'bit pattern \"my-scope.org/**\"', description: 'matches all components of the scope \"my-scope.org\"' },\n  ];\n  group = 'development';\n  private = false;\n  options = [['j', 'json', 'return the output as JSON']] as CommandOptions;\n\n  constructor(private workspace: Workspace) {}\n\n  async report([pattern]: [string]) {\n    const ids = await this.json([pattern]);\n    const title = chalk.green(`found ${chalk.bold(ids.length.toString())} components matching the pattern`);\n    return `${title}\\n${ids.join('\\n')}`;\n  }\n\n  async json([pattern]: [string]) {\n    return this.workspace.idsByPattern(pattern, false);\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAGO,MAAMA,cAAc,CAAoB;EA8B7CC,WAAW,CAASC,SAAoB,EAAE;IAAA,KAAtBA,SAAoB,GAApBA,SAAoB;IAAA,8CA7BjC,mBAAmB;IAAA,+CAClB,EAAE;IAAA,qDACI,mDAAmD;IAAA,6DAC1C;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;IAAA,kDACY,CACT;MAAEC,GAAG,EAAE,kBAAkB;MAAEC,WAAW,EAAE;IAAyB,CAAC,EAClE;MACED,GAAG,EAAE,sBAAsB;MAC3BC,WAAW,EACT;IACJ,CAAC,EACD;MACED,GAAG,EAAE,uBAAuB;MAC5BC,WAAW,EAAE;IACf,CAAC,EACD;MAAED,GAAG,EAAE,wBAAwB;MAAEC,WAAW,EAAE;IAAsC,CAAC,EACrF;MAAED,GAAG,EAAE,+BAA+B;MAAEC,WAAW,EAAE;IAAqD,CAAC,CAC5G;IAAA,+CACO,aAAa;IAAA,iDACX,KAAK;IAAA,iDACL,CAAC,CAAC,GAAG,EAAE,MAAM,EAAE,2BAA2B,CAAC,CAAC;EAEX;EAE3C,MAAMC,MAAM,CAAC,CAACC,OAAO,CAAW,EAAE;IAChC,MAAMC,GAAG,GAAG,MAAM,IAAI,CAACC,IAAI,CAAC,CAACF,OAAO,CAAC,CAAC;IACtC,MAAMG,KAAK,GAAGC,gBAAK,CAACC,KAAK,CAAE,SAAQD,gBAAK,CAACE,IAAI,CAACL,GAAG,CAACM,MAAM,CAACC,QAAQ,EAAE,CAAE,kCAAiC,CAAC;IACvG,OAAQ,GAAEL,KAAM,KAAIF,GAAG,CAACQ,IAAI,CAAC,IAAI,CAAE,EAAC;EACtC;EAEA,MAAMP,IAAI,CAAC,CAACF,OAAO,CAAW,EAAE;IAC9B,OAAO,IAAI,CAACJ,SAAS,CAACc,YAAY,CAACV,OAAO,EAAE,KAAK,CAAC;EACpD;AACF;AAAC"}