import { Command, CommandOptions } from '@teambit/cli';
import { CapsuleList, IsolatorMain } from '@teambit/isolator';
import { Workspace } from '.';
declare type CreateOpts = {
    baseDir?: string;
    rootBaseDir?: string;
    alwaysNew?: boolean;
    seedersOnly?: boolean;
    id: string;
    installPackages?: boolean;
};
export declare class CapsuleCreateCmd implements Command {
    private workspace;
    private isolator;
    name: string;
    description: string;
    group: string;
    alias: string;
    options: CommandOptions;
    constructor(workspace: Workspace, isolator: IsolatorMain);
    create([componentIds]: [string[]], { baseDir, rootBaseDir, alwaysNew, id, installPackages, seedersOnly }: CreateOpts): Promise<CapsuleList>;
    report([componentIds]: [string[]], opts: CreateOpts): Promise<string>;
    json([componentIds]: [string[]], opts: CreateOpts): Promise<{
        id: string;
        path: string;
    }[]>;
}
export declare class CapsuleListCmd implements Command {
    private isolator;
    private workspace;
    name: string;
    description: string;
    group: string;
    alias: string;
    options: CommandOptions;
    constructor(isolator: IsolatorMain, workspace: Workspace);
    report(): Promise<string>;
    json(): Promise<{
        workspaceCapsulesRootDir: string;
        scopeAspectsCapsulesRootDir: string;
        workspace: string;
        capsules: string[];
    }>;
    private getCapsulesRootDirs;
}
export declare class CapsuleDeleteCmd implements Command {
    private isolator;
    private workspace;
    name: string;
    description: string;
    extendedDescription: string;
    group: string;
    alias: string;
    options: CommandOptions;
    constructor(isolator: IsolatorMain, workspace: Workspace);
    report(args: [], { all, scopeAspects }: {
        all: boolean;
        scopeAspects: boolean;
    }): Promise<string>;
}
export declare class CapsuleCmd implements Command {
    name: string;
    description: string;
    extendedDescription: string;
    alias: string;
    group: string;
    commands: Command[];
    options: CommandOptions;
    report(args: [string]): Promise<string>;
}
export {};
