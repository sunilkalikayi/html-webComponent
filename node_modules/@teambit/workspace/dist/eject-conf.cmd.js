"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _path() {
  const data = _interopRequireDefault(require("path"));
  _path = function () {
    return data;
  };
  return data;
}
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
function _constants() {
  const data = require("@teambit/legacy/dist/constants");
  _constants = function () {
    return data;
  };
  return data;
}
class EjectConfCmd {
  constructor(workspace) {
    this.workspace = workspace;
    (0, _defineProperty2().default)(this, "name", 'eject-conf <pattern>');
    (0, _defineProperty2().default)(this, "description", 'eject components configuration (create a `component.json` file)');
    (0, _defineProperty2().default)(this, "extendedDescription", `${(0, _constants().PATTERN_HELP)('eject-conf')}`);
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "group", 'development');
    (0, _defineProperty2().default)(this, "options", [['p', 'propagate', 'mark propagate true in the config file'], ['o', 'override', 'override file if exist']]);
  }
  async report(args, options) {
    const ejectResult = await this.json(args, options);
    const paths = ejectResult.map(result => result.configPath).map(p => _path().default.relative(this.workspace.path, p)).join('\n');
    return _chalk().default.green(`successfully ejected config in the following path(s)
${_chalk().default.bold(paths)}`);
  }
  async json([pattern], options) {
    const ejectOptions = options;
    if (ejectOptions.propagate === 'true') {
      ejectOptions.propagate = true;
    }
    if (ejectOptions.override === 'true') {
      ejectOptions.override = true;
    }
    const componentIds = await this.workspace.idsByPattern(pattern);
    const results = await this.workspace.ejectMultipleConfigs(componentIds, ejectOptions);
    return results;
  }
}
exports.default = EjectConfCmd;

//# sourceMappingURL=eject-conf.cmd.js.map