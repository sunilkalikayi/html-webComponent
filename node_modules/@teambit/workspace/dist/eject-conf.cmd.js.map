{"version":3,"names":["EjectConfCmd","constructor","workspace","PATTERN_HELP","report","args","options","ejectResult","json","paths","map","result","configPath","p","path","relative","join","chalk","green","bold","pattern","ejectOptions","propagate","override","componentIds","idsByPattern","results","ejectMultipleConfigs"],"sources":["eject-conf.cmd.ts"],"sourcesContent":["import path from 'path';\nimport { Command, CommandOptions } from '@teambit/cli';\nimport chalk from 'chalk';\nimport { PATTERN_HELP } from '@teambit/legacy/dist/constants';\n\nimport { EjectConfOptions, EjectConfResult, Workspace } from './workspace';\n\ntype EjectConfArgs = [string];\n// From the cli we might get those as string in case we run it like --propagate true (return string) as opposed to only --propagate\ntype EjectConfOptionsCLI = {\n  propagate: string | boolean | undefined;\n  override: string | boolean | undefined;\n};\n\nexport default class EjectConfCmd implements Command {\n  name = 'eject-conf <pattern>';\n  description = 'eject components configuration (create a `component.json` file)';\n  extendedDescription = `${PATTERN_HELP('eject-conf')}`;\n  alias = '';\n  group = 'development';\n  options = [\n    ['p', 'propagate', 'mark propagate true in the config file'],\n    ['o', 'override', 'override file if exist'],\n  ] as CommandOptions;\n\n  constructor(private workspace: Workspace) {}\n\n  async report(args: EjectConfArgs, options: EjectConfOptionsCLI): Promise<string> {\n    const ejectResult = await this.json(args, options);\n    const paths = ejectResult\n      .map((result) => result.configPath)\n      .map((p) => path.relative(this.workspace.path, p))\n      .join('\\n');\n    return chalk.green(`successfully ejected config in the following path(s)\n${chalk.bold(paths)}`);\n  }\n\n  async json([pattern]: EjectConfArgs, options: EjectConfOptionsCLI): Promise<EjectConfResult[]> {\n    const ejectOptions = options;\n    if (ejectOptions.propagate === 'true') {\n      ejectOptions.propagate = true;\n    }\n    if (ejectOptions.override === 'true') {\n      ejectOptions.override = true;\n    }\n\n    const componentIds = await this.workspace.idsByPattern(pattern);\n    const results = await this.workspace.ejectMultipleConfigs(componentIds, ejectOptions as EjectConfOptions);\n    return results;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAWe,MAAMA,YAAY,CAAoB;EAWnDC,WAAW,CAASC,SAAoB,EAAE;IAAA,KAAtBA,SAAoB,GAApBA,SAAoB;IAAA,8CAVjC,sBAAsB;IAAA,qDACf,iEAAiE;IAAA,6DACxD,GAAE,IAAAC,yBAAY,EAAC,YAAY,CAAE,EAAC;IAAA,+CAC7C,EAAE;IAAA,+CACF,aAAa;IAAA,iDACX,CACR,CAAC,GAAG,EAAE,WAAW,EAAE,wCAAwC,CAAC,EAC5D,CAAC,GAAG,EAAE,UAAU,EAAE,wBAAwB,CAAC,CAC5C;EAE0C;EAE3C,MAAMC,MAAM,CAACC,IAAmB,EAAEC,OAA4B,EAAmB;IAC/E,MAAMC,WAAW,GAAG,MAAM,IAAI,CAACC,IAAI,CAACH,IAAI,EAAEC,OAAO,CAAC;IAClD,MAAMG,KAAK,GAAGF,WAAW,CACtBG,GAAG,CAAEC,MAAM,IAAKA,MAAM,CAACC,UAAU,CAAC,CAClCF,GAAG,CAAEG,CAAC,IAAKC,eAAI,CAACC,QAAQ,CAAC,IAAI,CAACb,SAAS,CAACY,IAAI,EAAED,CAAC,CAAC,CAAC,CACjDG,IAAI,CAAC,IAAI,CAAC;IACb,OAAOC,gBAAK,CAACC,KAAK,CAAE;AACxB,EAAED,gBAAK,CAACE,IAAI,CAACV,KAAK,CAAE,EAAC,CAAC;EACpB;EAEA,MAAMD,IAAI,CAAC,CAACY,OAAO,CAAgB,EAAEd,OAA4B,EAA8B;IAC7F,MAAMe,YAAY,GAAGf,OAAO;IAC5B,IAAIe,YAAY,CAACC,SAAS,KAAK,MAAM,EAAE;MACrCD,YAAY,CAACC,SAAS,GAAG,IAAI;IAC/B;IACA,IAAID,YAAY,CAACE,QAAQ,KAAK,MAAM,EAAE;MACpCF,YAAY,CAACE,QAAQ,GAAG,IAAI;IAC9B;IAEA,MAAMC,YAAY,GAAG,MAAM,IAAI,CAACtB,SAAS,CAACuB,YAAY,CAACL,OAAO,CAAC;IAC/D,MAAMM,OAAO,GAAG,MAAM,IAAI,CAACxB,SAAS,CAACyB,oBAAoB,CAACH,YAAY,EAAEH,YAAY,CAAqB;IACzG,OAAOK,OAAO;EAChB;AACF;AAAC"}