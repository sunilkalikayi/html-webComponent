import { ComponentStatus as LegacyComponentStatus } from '@teambit/legacy/dist/consumer/component-ops/component-status-loader';
export declare type ModifyInfo = {
    hasModifiedFiles: boolean;
    hasModifiedDependencies: boolean;
};
export declare class ComponentStatus {
    /**
     * is the component modified.
     */
    readonly modifyInfo: ModifyInfo;
    /**
     * is the new component new.
     */
    readonly isNew: boolean;
    /**
     * is the component deleted from the workspace.
     */
    readonly isDeleted: boolean;
    /**
     * is the component staged.
     */
    readonly isStaged: boolean;
    /**
     * does the component exists in the workspace.
     */
    readonly isInWorkspace: boolean;
    /**
     * does the component exists in the scope.
     */
    readonly isInScope: boolean;
    /**
     * does the component is outdated (pending for update).
     */
    readonly isOutdated: boolean;
    /**
     *  the component is not authored and not imported.
     */
    readonly nested?: boolean | undefined;
    /**
     * does the component exist on the current lane
     */
    readonly isInCurrentLane?: boolean | undefined;
    constructor(
    /**
     * is the component modified.
     */
    modifyInfo: ModifyInfo, 
    /**
     * is the new component new.
     */
    isNew: boolean, 
    /**
     * is the component deleted from the workspace.
     */
    isDeleted: boolean, 
    /**
     * is the component staged.
     */
    isStaged: boolean, 
    /**
     * does the component exists in the workspace.
     */
    isInWorkspace: boolean, 
    /**
     * does the component exists in the scope.
     */
    isInScope: boolean, 
    /**
     * does the component is outdated (pending for update).
     */
    isOutdated: boolean, 
    /**
     *  the component is not authored and not imported.
     */
    nested?: boolean | undefined, 
    /**
     * does the component exist on the current lane
     */
    isInCurrentLane?: boolean | undefined);
    static fromLegacy(status: LegacyComponentStatus, hasModifiedDependencies: boolean, isOutdated: boolean, isInCurrentLane?: boolean): ComponentStatus;
}
