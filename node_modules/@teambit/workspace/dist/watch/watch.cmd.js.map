{"version":3,"names":["WatchCommand","constructor","pubsub","logger","watcher","onAll","event","path","console","onStart","onReady","workspace","watchPathsSortByComponent","verbose","clearOutdatedData","formatWatchPathsSortByComponent","chalk","yellow","config","name","moment","format","onChange","filePaths","buildResults","duration","failureMsg","files","join","length","formatCompileResults","onAdd","onUnlink","p","onError","err","type","CompilerErrorEvent","TYPE","data","error","registerToEvents","sub","CompilerAspect","id","eventsListener","report","cliArgs","watchCmdOpts","checkTypes","getCheckTypesEnum","undefined","CheckTypes","None","EntireProject","ChangedFile","Error","watchOpts","msgs","preCompile","skipPreCompilation","spawnTSServer","Boolean","watchAll","process","stdout","write"],"sources":["watch.cmd.tsx"],"sourcesContent":["import chalk from 'chalk';\nimport moment from 'moment';\nimport { Command, CommandOptions } from '@teambit/cli';\nimport type { Logger } from '@teambit/logger';\nimport type { BitBaseEvent, PubsubMain } from '@teambit/pubsub';\n\n// import IDs and events\nimport { CompilerAspect, CompilerErrorEvent } from '@teambit/compiler';\n\nimport { Watcher, WatchOptions } from './watcher';\nimport { formatCompileResults, formatWatchPathsSortByComponent } from './output-formatter';\nimport { OnComponentEventResult } from '../on-component-events';\nimport { CheckTypes } from './check-types';\n\nexport type WatchCmdOpts = {\n  verbose?: boolean;\n  skipPreCompilation?: boolean;\n  checkTypes?: string | boolean;\n};\n\nexport class WatchCommand implements Command {\n  msgs = {\n    onAll: (event: string, path: string) => this.logger.console(`Event: \"${event}\". Path: ${path}`),\n    onStart: () => {},\n    onReady: (workspace, watchPathsSortByComponent, verbose) => {\n      clearOutdatedData();\n      if (verbose) {\n        this.logger.console(formatWatchPathsSortByComponent(watchPathsSortByComponent));\n      }\n      this.logger.console(\n        chalk.yellow(\n          `Watching for component changes in workspace ${workspace.config.name} (${moment().format('HH:mm:ss')})...\\n`\n        )\n      );\n    },\n    onChange: (\n      filePaths: string[],\n      buildResults: OnComponentEventResult[],\n      verbose: boolean,\n      duration,\n      failureMsg?: string\n    ) => {\n      const files = filePaths.join(', ');\n      // clearOutdatedData();\n      if (!buildResults.length) {\n        failureMsg = failureMsg || `The files ${files} have been changed, but nothing to compile`;\n        this.logger.console(`${failureMsg}\\n\\n`);\n        return;\n      }\n      this.logger.console(`The file(s) ${files} have been changed.\\n\\n`);\n      this.logger.console(formatCompileResults(buildResults, verbose));\n      this.logger.console(`Finished. (${duration}ms)`);\n      this.logger.console(chalk.yellow(`Watching for component changes (${moment().format('HH:mm:ss')})...`));\n    },\n    onAdd: (\n      filePaths: string[],\n      buildResults: OnComponentEventResult[],\n      verbose: boolean,\n      duration,\n      failureMsg?: string\n    ) => {\n      const files = filePaths.join(', ');\n      // clearOutdatedData();\n      if (!buildResults.length) {\n        failureMsg = failureMsg || `The files ${files} have been added, but nothing to compile`;\n        this.logger.console(`${failureMsg}\\n\\n`);\n        return;\n      }\n      this.logger.console(`The file(s) ${filePaths} have been added.\\n\\n`);\n      this.logger.console(formatCompileResults(buildResults, verbose));\n      this.logger.console(`Finished. (${duration}ms)`);\n      this.logger.console(chalk.yellow(`Watching for component changes (${moment().format('HH:mm:ss')})...`));\n    },\n    onUnlink: (p) => {\n      this.logger.console(`file ${p} has been removed`);\n    },\n    onError: (err) => {\n      this.logger.console(`Watcher error ${err}`);\n    },\n  };\n\n  name = 'watch';\n  description = 'automatically recompile modified components (on save)';\n  alias = '';\n  group = 'development';\n  options = [\n    ['v', 'verbose', 'show npm verbose output for inspection and print the stack trace'],\n    ['', 'skip-pre-compilation', 'skip the compilation step before starting to watch'],\n    [\n      't',\n      'check-types [string]',\n      'EXPERIMENTAL. show errors/warnings for types. options are [file, project] to investigate only changed file or entire project. defaults to project',\n    ],\n  ] as CommandOptions;\n\n  constructor(\n    /**\n     * logger extension.\n     */\n    private pubsub: PubsubMain,\n\n    /**\n     * logger extension.\n     */\n    private logger: Logger,\n\n    /**\n     * watcher extension.\n     */\n    private watcher: Watcher\n  ) {\n    this.registerToEvents();\n  }\n\n  private registerToEvents() {\n    this.pubsub.sub(CompilerAspect.id, this.eventsListener);\n  }\n\n  private eventsListener = (event: BitBaseEvent<any>) => {\n    switch (event.type) {\n      case CompilerErrorEvent.TYPE:\n        this.logger.console(`Watcher error ${event.data.error}, 'error'`);\n        break;\n      default:\n    }\n  };\n\n  async report(cliArgs: [], watchCmdOpts: WatchCmdOpts) {\n    const { verbose, checkTypes } = watchCmdOpts;\n    const getCheckTypesEnum = () => {\n      switch (checkTypes) {\n        case undefined:\n        case false:\n          return CheckTypes.None;\n        case 'project':\n        case true: // project is the default\n          return CheckTypes.EntireProject;\n        case 'file':\n          return CheckTypes.ChangedFile;\n        default:\n          throw new Error(`check-types can be either \"file\" or \"project\". got \"${checkTypes}\"`);\n      }\n    };\n    const watchOpts: WatchOptions = {\n      msgs: this.msgs,\n      verbose,\n      preCompile: !watchCmdOpts.skipPreCompilation,\n      spawnTSServer: Boolean(checkTypes), // if check-types is enabled, it must spawn the tsserver.\n      checkTypes: getCheckTypesEnum(),\n    };\n    await this.watcher.watchAll(watchOpts);\n    return 'watcher terminated';\n  }\n}\n\n/**\n * with console.clear() all history is deleted from the console. this function preserver the history.\n */\nfunction clearOutdatedData() {\n  process.stdout.write('\\x1Bc');\n}\n"],"mappings":"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"}