{"version":3,"names":["DEBOUNCE_WAIT_MS","Watcher","constructor","workspace","pubsub","trackDirs","verbose","multipleWatchers","WatchQueue","consumer","watchAll","opts","msgs","watchOpts","pathsToWatch","getPathsToWatch","componentIds","Object","values","triggerOnPreWatch","createWatcher","watcher","fsWatcher","onStart","Promise","resolve","reject","process","env","BIT_LOG","onAll","on","onReady","filePath","startTime","Date","getTime","files","results","debounced","failureMsg","handleChange","initiator","duration","onChange","onAdd","p","onUnlink","err","onError","endsWith","BIT_MAP","bitMapChangesInProgress","buildResults","watchQueue","add","handleBitmapChanges","loader","stop","onIdle","componentId","getComponentIdByPath","logger","debug","compIdStr","toString","changedFilesPerComponent","push","sleep","triggerCompChanges","length","undefined","join","msg","error","console","message","ms","setTimeout","clearComponentCache","component","get","componentMap","state","_consumer","compFiles","filter","relativeFile","getRelativePathLinux","isCompFile","Boolean","getFilesRelativeToConsumer","find","executeWatchOperationsOnComponent","previewsTrackDirs","_reloadConsumer","setTrackDirs","newDirs","difference","keys","removedDirs","addResults","mapSeries","dir","flat","unwatch","executeWatchOperationsOnRemove","chalk","bold","pub","WorkspaceAspect","id","creatOnComponentRemovedEvent","triggerOnComponentRemove","isChange","isComponentWatchedExternally","idStr","creatOnComponentChangeEvent","creatOnComponentAddEvent","triggerOnComponentChange","triggerOnComponentAdd","OnComponentRemovedEvent","now","hook","OnComponentChangeEvent","OnComponentAddEvent","watcherData","m","isEqual","_legacy","compilerId","trackDir","findTrackDirByFilePathRecursively","pathNormalizeToLinux","getPathRelativeToConsumer","parentDir","dirname","chokidar","watch","ignoreInitial","ignored","path","includes","sep","persistent","useFsEvents","componentsFromBitMap","bitMap","getAllComponents","all","map","bitId","rootDir","getRootDir","Error","resolveComponentId","paths","pathsAbsolute","toAbsolutePath"],"sources":["watcher.ts"],"sourcesContent":["import { PubsubMain } from '@teambit/pubsub';\nimport { dirname, sep } from 'path';\nimport { difference } from 'lodash';\nimport { ComponentID } from '@teambit/component';\nimport { BitId } from '@teambit/legacy-bit-id';\nimport loader from '@teambit/legacy/dist/cli/loader';\nimport { BIT_MAP } from '@teambit/legacy/dist/constants';\nimport { Consumer } from '@teambit/legacy/dist/consumer';\nimport logger from '@teambit/legacy/dist/logger/logger';\nimport { pathNormalizeToLinux } from '@teambit/legacy/dist/utils';\nimport mapSeries from 'p-map-series';\nimport chalk from 'chalk';\nimport { ChildProcess } from 'child_process';\nimport chokidar, { FSWatcher } from 'chokidar';\nimport ComponentMap from '@teambit/legacy/dist/consumer/bit-map/component-map';\nimport { PathLinux, PathOsBasedAbsolute } from '@teambit/legacy/dist/utils/path';\nimport { CompilationInitiator } from '@teambit/compiler';\nimport { WorkspaceAspect } from '../';\nimport { OnComponentChangeEvent, OnComponentAddEvent, OnComponentRemovedEvent } from '../events';\nimport { Workspace } from '../workspace';\nimport { OnComponentEventResult } from '../on-component-events';\nimport { CheckTypes } from './check-types';\nimport { WatchQueue } from './watch-queue';\n\nexport type WatcherProcessData = { watchProcess: ChildProcess; compilerId: BitId; componentIds: BitId[] };\n\nexport type EventMessages = {\n  onAll: Function;\n  onStart: Function;\n  onReady: Function;\n  onChange: Function;\n  onAdd: Function;\n  onUnlink: Function;\n  onError: Function;\n};\n\nexport type WatchOptions = {\n  msgs?: EventMessages;\n  initiator?: CompilationInitiator;\n  verbose?: boolean; // print watch events to the console. (also ts-server events if spawnTSServer is true)\n  spawnTSServer?: boolean; // needed for check types and extract API/docs.\n  checkTypes?: CheckTypes; // if enabled, the spawnTSServer becomes true.\n  preCompile?: boolean; // whether compile all components before start watching\n};\n\nconst DEBOUNCE_WAIT_MS = 100;\n\nexport class Watcher {\n  private fsWatcher: FSWatcher;\n  private changedFilesPerComponent: { [componentId: string]: string[] } = {};\n  private watchQueue = new WatchQueue();\n  private bitMapChangesInProgress = false;\n  constructor(\n    private workspace: Workspace,\n    private pubsub: PubsubMain,\n    private trackDirs: { [dir: PathLinux]: ComponentID } = {},\n    private verbose = false,\n    private multipleWatchers: WatcherProcessData[] = []\n  ) {}\n\n  get consumer(): Consumer {\n    return this.workspace.consumer;\n  }\n\n  async watchAll(opts: WatchOptions) {\n    const { msgs, ...watchOpts } = opts;\n    // TODO: run build in the beginning of process (it's work like this in other envs)\n    const pathsToWatch = await this.getPathsToWatch();\n    const componentIds = Object.values(this.trackDirs);\n    await this.workspace.triggerOnPreWatch(componentIds, watchOpts);\n    await this.createWatcher(pathsToWatch);\n    const watcher = this.fsWatcher;\n    msgs?.onStart(this.workspace);\n\n    return new Promise((resolve, reject) => {\n      // prefix your command with \"BIT_LOG=*\" to see all watch events\n      if (process.env.BIT_LOG) {\n        // @ts-ignore\n        if (msgs?.onAll) watcher.on('all', msgs?.onAll);\n      }\n      watcher.on('ready', () => {\n        msgs?.onReady(this.workspace, this.trackDirs, this.verbose);\n      });\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      watcher.on('change', async (filePath) => {\n        const startTime = new Date().getTime();\n        const { files, results, debounced, failureMsg } = await this.handleChange(filePath, opts?.initiator);\n        if (debounced) {\n          return;\n        }\n        const duration = new Date().getTime() - startTime;\n        msgs?.onChange(files, results, this.verbose, duration, failureMsg);\n      });\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      watcher.on('add', async (filePath) => {\n        const startTime = new Date().getTime();\n        const { files, results, debounced, failureMsg } = await this.handleChange(filePath, opts?.initiator);\n        if (debounced) {\n          return;\n        }\n        const duration = new Date().getTime() - startTime;\n        msgs?.onAdd(files, results, this.verbose, duration, failureMsg);\n      });\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      watcher.on('unlink', async (p) => {\n        msgs?.onUnlink(p);\n        await this.handleChange(p);\n      });\n      watcher.on('error', (err) => {\n        msgs?.onError(err);\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * *** DEBOUNCING ***\n   * some actions trigger multiple files changes at (almost) the same time. e.g. \"git pull\".\n   * this causes some performance and instability issues. a debouncing mechanism was implemented to help with this.\n   * the way how it works is that the first file of the same component starts the execution with a delay (e.g. 200ms).\n   * if, in the meanwhile, another file of the same component was changed, it won't start a new execution, instead,\n   * it'll only add the file to `this.changedFilesPerComponent` prop.\n   * once the execution starts, it'll delete this component-id from the `this.changedFilesPerComponent` array,\n   * indicating the next file-change to start a new execution.\n   *\n   * implementation wise, `lodash.debounce` doesn't help here, because:\n   * A) it doesn't return the results, unless \"leading\" option is true. here, it must be false, otherwise, it'll start\n   * the execution immediately.\n   * B) it debounces the method regardless the param passes to it. so it'll disregard the component-id and will delay\n   * other components undesirably.\n   *\n   * *** QUEUE ***\n   * the debouncing helps to not execute the same component multiple times concurrently. however, multiple components\n   * and .bitmap changes execution can still be processed concurrently.\n   * the following example explains why this is an issue.\n   * compA is changed in the .bitmap file from version 0.0.1 to 0.0.2. its files were changed as well.\n   * all these changes get pulled at the same time by \"git pull\", as a result, the execution of compA and the .bitmap\n   * happen at the same time.\n   * during the execution of compA, the component id is parsed as compA@0.0.1, later, it asks for the Workspace for this\n   * id. while the workspace is looking for this id, the .bitmap execution reloaded the consumer and changed all versions.\n   * after this change, the workspace doesn't have this id anymore, which will trigger an error.\n   * to ensure this won't happen, we keep a flag to indicate whether the .bitmap execution is running, and if so, all\n   * other executions are paused until the queue is empty (this is done by awaiting for queue.onIdle).\n   * once the queue is empty, we know the .bitmap process was done and the workspace has all new ids.\n   * in the example above, at this stage, the id will be resolved to compA@0.0.2.\n   * one more thing, the queue is configured to have concurrency of 1. to make sure two components are not processed at\n   * the same time. (the same way is done when loading all components from the filesystem/scope).\n   * this way we can also ensure that if compA was started before the .bitmap execution, it will complete before the\n   * .bitmap execution starts.\n   */\n  private async handleChange(\n    filePath: string,\n    initiator?: CompilationInitiator\n  ): Promise<{\n    results: OnComponentEventResult[];\n    files?: string[];\n    failureMsg?: string;\n    debounced?: boolean;\n  }> {\n    try {\n      if (filePath.endsWith(BIT_MAP)) {\n        this.bitMapChangesInProgress = true;\n        const buildResults = await this.watchQueue.add(() => this.handleBitmapChanges());\n        this.bitMapChangesInProgress = false;\n        loader.stop();\n        return { results: buildResults, files: [filePath] };\n      }\n      if (this.bitMapChangesInProgress) {\n        await this.watchQueue.onIdle();\n      }\n      const componentId = this.getComponentIdByPath(filePath);\n      if (!componentId) {\n        const failureMsg = `file ${filePath} is not part of any component, ignoring it`;\n        logger.debug(failureMsg);\n        loader.stop();\n        return { results: [], files: [filePath], failureMsg };\n      }\n      const compIdStr = componentId.toString();\n      if (this.changedFilesPerComponent[compIdStr]) {\n        this.changedFilesPerComponent[compIdStr].push(filePath);\n        loader.stop();\n        return { results: [], debounced: true };\n      }\n      this.changedFilesPerComponent[compIdStr] = [filePath];\n      await this.sleep(DEBOUNCE_WAIT_MS);\n      const files = this.changedFilesPerComponent[compIdStr];\n      delete this.changedFilesPerComponent[compIdStr];\n\n      const buildResults = await this.watchQueue.add(() => this.triggerCompChanges(componentId, files, initiator));\n      const failureMsg = buildResults.length\n        ? undefined\n        : `files ${files.join(', ')} are inside the component ${compIdStr} but configured to be ignored`;\n      loader.stop();\n      return { results: buildResults, files, failureMsg };\n    } catch (err: any) {\n      const msg = `watcher found an error while handling ${filePath}`;\n      logger.error(msg, err);\n      logger.console(`${msg}, ${err.message}`);\n      loader.stop();\n      return { results: [], files: [filePath], failureMsg: err.message };\n    }\n  }\n\n  private async sleep(ms: number) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  /**\n   * if a file was added/remove, once the component is loaded, it changes .bitmap, and then the\n   * entire cache is invalidated and the consumer is reloaded.\n   * when a file just changed, no need to reload the consumer, it is enough to just delete the\n   * component from the cache (both, workspace and consumer)\n   */\n  private async triggerCompChanges(\n    componentId: ComponentID,\n    files: string[],\n    initiator?: CompilationInitiator\n  ): Promise<OnComponentEventResult[]> {\n    this.workspace.clearComponentCache(componentId);\n    const component = await this.workspace.get(componentId);\n    const componentMap: ComponentMap = component.state._consumer.componentMap;\n    const compFiles = files.filter((filePath) => {\n      const relativeFile = this.getRelativePathLinux(filePath);\n      const isCompFile = Boolean(componentMap.getFilesRelativeToConsumer().find((p) => p === relativeFile));\n      if (!isCompFile) {\n        logger.debug(`file ${filePath} is inside the component ${componentId.toString()} but configured to be ignored`);\n      }\n      return isCompFile;\n    });\n    if (!compFiles.length) {\n      return [];\n    }\n    const buildResults = await this.executeWatchOperationsOnComponent(componentId, compFiles, true, initiator);\n    return buildResults;\n  }\n\n  /**\n   * if .bitmap changed, it's possible that a new component has been added. trigger onComponentAdd.\n   */\n  private async handleBitmapChanges(): Promise<OnComponentEventResult[]> {\n    const previewsTrackDirs = { ...this.trackDirs };\n    await this.workspace._reloadConsumer();\n    await this.setTrackDirs();\n    const newDirs: string[] = difference(Object.keys(this.trackDirs), Object.keys(previewsTrackDirs));\n    const removedDirs: string[] = difference(Object.keys(previewsTrackDirs), Object.keys(this.trackDirs));\n    const results: OnComponentEventResult[] = [];\n    if (newDirs.length) {\n      this.fsWatcher.add(newDirs);\n      const addResults = await mapSeries(newDirs, async (dir) =>\n        this.executeWatchOperationsOnComponent(this.trackDirs[dir], [], false)\n      );\n      results.push(...addResults.flat());\n    }\n    if (removedDirs.length) {\n      await this.fsWatcher.unwatch(removedDirs);\n      await mapSeries(removedDirs, (dir) => this.executeWatchOperationsOnRemove(previewsTrackDirs[dir]));\n    }\n    return results;\n  }\n\n  private async executeWatchOperationsOnRemove(componentId: ComponentID) {\n    logger.debug(`running OnComponentRemove hook for ${chalk.bold(componentId.toString())}`);\n    this.pubsub.pub(WorkspaceAspect.id, this.creatOnComponentRemovedEvent(componentId.toString()));\n    await this.workspace.triggerOnComponentRemove(componentId);\n  }\n\n  private async executeWatchOperationsOnComponent(\n    componentId: ComponentID,\n    files: string[],\n    isChange = true,\n    initiator?: CompilationInitiator\n  ): Promise<OnComponentEventResult[]> {\n    if (this.isComponentWatchedExternally(componentId)) {\n      // update capsule, once done, it automatically triggers the external watcher\n      await this.workspace.get(componentId);\n      return [];\n    }\n    const idStr = componentId.toString();\n\n    if (isChange) {\n      logger.debug(`running OnComponentChange hook for ${chalk.bold(idStr)}`);\n      this.pubsub.pub(WorkspaceAspect.id, this.creatOnComponentChangeEvent(idStr, 'OnComponentChange'));\n    } else {\n      logger.debug(`running OnComponentAdd hook for ${chalk.bold(idStr)}`);\n      this.pubsub.pub(WorkspaceAspect.id, this.creatOnComponentAddEvent(idStr, 'OnComponentAdd'));\n    }\n\n    let buildResults: OnComponentEventResult[];\n    try {\n      buildResults = isChange\n        ? await this.workspace.triggerOnComponentChange(componentId, files, initiator)\n        : await this.workspace.triggerOnComponentAdd(componentId);\n    } catch (err: any) {\n      // do not exit the watch process on errors, just print them\n      const msg = `found an issue during onComponentChange or onComponentAdd hooks`;\n      logger.error(msg, err);\n      logger.console(`\\n${msg}: ${err.message || err}`);\n      return [];\n    }\n    return buildResults;\n  }\n\n  private creatOnComponentRemovedEvent(idStr) {\n    return new OnComponentRemovedEvent(Date.now(), idStr);\n  }\n\n  private creatOnComponentChangeEvent(idStr, hook) {\n    return new OnComponentChangeEvent(Date.now(), idStr, hook);\n  }\n\n  private creatOnComponentAddEvent(idStr, hook) {\n    return new OnComponentAddEvent(Date.now(), idStr, hook);\n  }\n\n  private isComponentWatchedExternally(componentId: ComponentID) {\n    const watcherData = this.multipleWatchers.find((m) => m.componentIds.find((id) => id.isEqual(componentId._legacy)));\n    if (watcherData) {\n      logger.debug(`${componentId.toString()} is watched by ${watcherData.compilerId.toString()}`);\n      return true;\n    }\n    return false;\n  }\n\n  private getComponentIdByPath(filePath: string): ComponentID | null {\n    const relativeFile = this.getRelativePathLinux(filePath);\n    const trackDir = this.findTrackDirByFilePathRecursively(relativeFile);\n    if (!trackDir) {\n      // the file is not part of any component. If it was a new component, or a new file of\n      // existing component, then, handleBitmapChanges() should deal with it.\n      return null;\n    }\n    return this.trackDirs[trackDir];\n  }\n\n  private getRelativePathLinux(filePath: string) {\n    return pathNormalizeToLinux(this.consumer.getPathRelativeToConsumer(filePath));\n  }\n\n  private findTrackDirByFilePathRecursively(filePath: string): string | null {\n    if (this.trackDirs[filePath]) return filePath;\n    const parentDir = dirname(filePath);\n    if (parentDir === filePath) return null;\n    return this.findTrackDirByFilePathRecursively(parentDir);\n  }\n\n  private async createWatcher(pathsToWatch: string[]) {\n    this.fsWatcher = chokidar.watch(pathsToWatch, {\n      ignoreInitial: true,\n      // Using the function way since the regular way not working as expected\n      // It might be solved when upgrading to chokidar > 3.0.0\n      // See:\n      // https://github.com/paulmillr/chokidar/issues/773\n      // https://github.com/paulmillr/chokidar/issues/492\n      // https://github.com/paulmillr/chokidar/issues/724\n      ignored: (path) => {\n        // Ignore package.json temporarily since it cerates endless loop since it's re-written after each build\n        if (path.includes(`${sep}node_modules${sep}`) || path.includes(`${sep}package.json`)) {\n          return true;\n        }\n        return false;\n      },\n      persistent: true,\n      useFsEvents: false,\n    });\n  }\n\n  async setTrackDirs() {\n    this.trackDirs = {};\n    const componentsFromBitMap = this.consumer.bitMap.getAllComponents();\n    await Promise.all(\n      componentsFromBitMap.map(async (componentMap) => {\n        const bitId = componentMap.id;\n        const rootDir = componentMap.getRootDir();\n        if (!rootDir) throw new Error(`${bitId.toString()} has no rootDir, which is invalid in Harmony`);\n        const componentId = await this.workspace.resolveComponentId(bitId);\n        this.trackDirs[rootDir] = componentId;\n      })\n    );\n  }\n\n  private async getPathsToWatch(): Promise<PathOsBasedAbsolute[]> {\n    await this.setTrackDirs();\n    const paths = [...Object.keys(this.trackDirs), BIT_MAP];\n    const pathsAbsolute = paths.map((dir) => this.consumer.toAbsolutePath(dir));\n    return pathsAbsolute;\n  }\n}\n"],"mappings":"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"}