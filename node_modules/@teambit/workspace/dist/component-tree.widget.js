"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ComponentTreeWidget = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _componentUi() {
  const data = require("@teambit/component.ui.component-status-resolver");
  _componentUi = function () {
    return data;
  };
  return data;
}
function _lanesHooks() {
  const data = require("@teambit/lanes.hooks.use-lanes");
  _lanesHooks = function () {
    return data;
  };
  return data;
}
function _react() {
  const data = _interopRequireWildcard(require("react"));
  _react = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
class ComponentTreeWidget {
  constructor() {
    (0, _defineProperty2().default)(this, "widget", ({
      component
    }) => {
      const {
        lanesModel
      } = (0, _lanesHooks().useLanes)();
      const isInCurrentLane = (0, _react().useMemo)(() => {
        return component.id && (lanesModel === null || lanesModel === void 0 ? void 0 : lanesModel.isComponentOnLaneButNotOnMain(component.id));
      }, [lanesModel === null || lanesModel === void 0 ? void 0 : lanesModel.viewedLane, component.id]);
      return /*#__PURE__*/_react().default.createElement(_componentUi().ComponentStatusResolver, {
        status: component.status,
        issuesCount: component.issuesCount,
        isInCurrentLane: isInCurrentLane
      });
    });
  }
}
exports.ComponentTreeWidget = ComponentTreeWidget;

//# sourceMappingURL=component-tree.widget.js.map