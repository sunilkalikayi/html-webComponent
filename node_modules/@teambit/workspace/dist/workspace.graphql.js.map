{"version":3,"names":["workspace","graphql","typeDefs","gql","resolvers","Subscription","componentAdded","subscribe","pubsub","asyncIterator","ComponentAdded","componentChanged","ComponentChanged","componentRemoved","ComponentRemoved","Component","status","wsComponent","getStatus","issuesCount","getIssues","count","issues","toObjectWithDataAsString","Workspace","path","ws","name","icon","components","offset","limit","list","getComponent","id","componentID","resolveComponentId","component","get","error","Query"],"sources":["workspace.graphql.ts"],"sourcesContent":["import { GraphqlMain } from '@teambit/graphql';\nimport gql from 'graphql-tag';\n\nimport { ComponentAdded, ComponentChanged, ComponentRemoved, Workspace } from './workspace';\nimport { WorkspaceComponent } from './workspace-component';\n\nexport default (workspace: Workspace, graphql: GraphqlMain) => {\n  return {\n    typeDefs: gql`\n      type ModifyInfo {\n        # is the component modified.\n        hasModifiedFiles: Boolean\n\n        # the component has Modified Dependencies\n        hasModifiedDependencies: Boolean\n      }\n\n      type ComponentStatus {\n        # component is pending to be tagged automatically.\n        modifyInfo: ModifyInfo\n\n        # is the new component new.\n        isNew: Boolean\n\n        # is the component deleted from the workspace.\n        isDeleted: Boolean\n\n        # is the component staged.\n        isStaged: Boolean\n\n        # does the component exists in the workspace.\n        isInWorkspace: Boolean\n\n        # does the component exists in the scope.\n        isInScope: Boolean\n\n        # does the component is outdated (pending for update).\n        isOutdated: Boolean\n      }\n\n      extend type Component {\n        status: ComponentStatus\n      }\n\n      type Issue {\n        type: String!\n        description: String!\n        solution: String\n        data: String\n      }\n\n      extend type Component {\n        # the count of errors in component in workspace\n        issuesCount: Int\n        issues: [Issue]\n      }\n\n      type Workspace {\n        name: String\n        path: String\n        icon: String\n        components(offset: Int, limit: Int): [Component]\n        getComponent(id: String!): Component\n      }\n\n      type Subscription {\n        componentAdded: ComponentAdded\n        componentChanged: ComponentChanged\n        componentRemoved: ComponentRemoved\n      }\n\n      type ComponentAdded {\n        component: Component\n      }\n\n      type ComponentChanged {\n        component: Component\n      }\n\n      type ComponentRemoved {\n        componentIds: [ComponentID]\n      }\n\n      type Query {\n        workspace: Workspace\n      }\n    `,\n    resolvers: {\n      Subscription: {\n        componentAdded: {\n          subscribe: () => graphql.pubsub.asyncIterator(ComponentAdded),\n        },\n        componentChanged: {\n          subscribe: () => graphql.pubsub.asyncIterator(ComponentChanged),\n        },\n        componentRemoved: {\n          subscribe: () => graphql.pubsub.asyncIterator(ComponentRemoved),\n        },\n      },\n      Component: {\n        status: async (wsComponent: WorkspaceComponent) => {\n          return wsComponent.getStatus();\n        },\n        issuesCount: (wsComponent: WorkspaceComponent): number => {\n          return wsComponent.getIssues()?.count || 0;\n        },\n        issues: (wsComponent: WorkspaceComponent) => {\n          return wsComponent.getIssues()?.toObjectWithDataAsString();\n        },\n      },\n      Workspace: {\n        path: (ws) => ws.path,\n        name: (ws) => ws.name,\n        icon: (ws) => ws.icon,\n        components: async (ws: Workspace, { offset, limit }: { offset: number; limit: number }) => {\n          return ws.list({ offset, limit });\n        },\n        getComponent: async (ws: Workspace, { id }: { id: string }) => {\n          try {\n            const componentID = await ws.resolveComponentId(id);\n            const component = await ws.get(componentID);\n            return component;\n          } catch (error: any) {\n            return null;\n          }\n        },\n      },\n      Query: {\n        workspace: () => workspace,\n      },\n    },\n  };\n};\n"],"mappings":";;;;;;;;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAA4F,eAG7E,CAACA,SAAoB,EAAEC,OAAoB,KAAK;EAC7D,OAAO;IACLC,QAAQ,EAAE,IAAAC,qBAAG,CAAC;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDC,SAAS,EAAE;MACTC,YAAY,EAAE;QACZC,cAAc,EAAE;UACdC,SAAS,EAAE,MAAMN,OAAO,CAACO,MAAM,CAACC,aAAa,CAACC,2BAAc;QAC9D,CAAC;QACDC,gBAAgB,EAAE;UAChBJ,SAAS,EAAE,MAAMN,OAAO,CAACO,MAAM,CAACC,aAAa,CAACG,6BAAgB;QAChE,CAAC;QACDC,gBAAgB,EAAE;UAChBN,SAAS,EAAE,MAAMN,OAAO,CAACO,MAAM,CAACC,aAAa,CAACK,6BAAgB;QAChE;MACF,CAAC;MACDC,SAAS,EAAE;QACTC,MAAM,EAAE,MAAOC,WAA+B,IAAK;UACjD,OAAOA,WAAW,CAACC,SAAS,EAAE;QAChC,CAAC;QACDC,WAAW,EAAGF,WAA+B,IAAa;UAAA;UACxD,OAAO,0BAAAA,WAAW,CAACG,SAAS,EAAE,0DAAvB,sBAAyBC,KAAK,KAAI,CAAC;QAC5C,CAAC;QACDC,MAAM,EAAGL,WAA+B,IAAK;UAAA;UAC3C,iCAAOA,WAAW,CAACG,SAAS,EAAE,2DAAvB,uBAAyBG,wBAAwB,EAAE;QAC5D;MACF,CAAC;MACDC,SAAS,EAAE;QACTC,IAAI,EAAGC,EAAE,IAAKA,EAAE,CAACD,IAAI;QACrBE,IAAI,EAAGD,EAAE,IAAKA,EAAE,CAACC,IAAI;QACrBC,IAAI,EAAGF,EAAE,IAAKA,EAAE,CAACE,IAAI;QACrBC,UAAU,EAAE,OAAOH,EAAa,EAAE;UAAEI,MAAM;UAAEC;QAAyC,CAAC,KAAK;UACzF,OAAOL,EAAE,CAACM,IAAI,CAAC;YAAEF,MAAM;YAAEC;UAAM,CAAC,CAAC;QACnC,CAAC;QACDE,YAAY,EAAE,OAAOP,EAAa,EAAE;UAAEQ;QAAmB,CAAC,KAAK;UAC7D,IAAI;YACF,MAAMC,WAAW,GAAG,MAAMT,EAAE,CAACU,kBAAkB,CAACF,EAAE,CAAC;YACnD,MAAMG,SAAS,GAAG,MAAMX,EAAE,CAACY,GAAG,CAACH,WAAW,CAAC;YAC3C,OAAOE,SAAS;UAClB,CAAC,CAAC,OAAOE,KAAU,EAAE;YACnB,OAAO,IAAI;UACb;QACF;MACF,CAAC;MACDC,KAAK,EAAE;QACLxC,SAAS,EAAE,MAAMA;MACnB;IACF;EACF,CAAC;AACH,CAAC;AAAA"}