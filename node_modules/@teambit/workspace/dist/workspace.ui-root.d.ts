import { BundlerMain } from '@teambit/bundler';
import { Component, ComponentID, ResolveAspectsOptions } from '@teambit/component';
import { UIRoot } from '@teambit/ui';
import { GetBitMapComponentOptions } from '@teambit/legacy/dist/consumer/bit-map/bit-map';
import { PathOsBased } from '@teambit/legacy/dist/utils/path';
import { Workspace } from './workspace';
export declare class WorkspaceUIRoot implements UIRoot {
    /**
     * workspace extension.
     */
    private workspace;
    /**
     * bundler extension
     */
    private bundler;
    constructor(
    /**
     * workspace extension.
     */
    workspace: Workspace, 
    /**
     * bundler extension
     */
    bundler: BundlerMain);
    priority: boolean;
    get name(): string;
    get path(): string;
    get configFile(): string;
    buildOptions: {
        ssr: boolean;
        launchBrowserOnStart: boolean;
    };
    resolveAspects(runtimeName: string, componentIds?: ComponentID[], opts?: ResolveAspectsOptions): Promise<import("@teambit/aspect-loader").AspectDefinition[]>;
    resolvePattern(pattern: string): Promise<Component[]>;
    getConfig(): {};
    /**
     * proxy to `workspace.componentDir()`
     */
    componentDir(componentId: ComponentID, bitMapOptions?: GetBitMapComponentOptions, options?: {
        relative: boolean;
    }): PathOsBased;
}
