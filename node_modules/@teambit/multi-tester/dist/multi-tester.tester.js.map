{"version":3,"names":["MultiTester","constructor","id","testers","displayConfig","map","tester","displayName","join","test","context","allResults","pMapSeries","merged","mergeTests","watch","version","tests","componentResultsMap","Map","compact","forEach","currentTests","components","currentComponentResults","currIdStr","componentId","toString","foundComponent","get","set","mergeComponentResults","Tests","Array","from","values","results1","results2","start","results","mergedTestsResults","TestsResult","testFiles","success","errors","loading"],"sources":["multi-tester.tester.ts"],"sourcesContent":["import pMapSeries from 'p-map-series';\nimport { Tester, TesterContext, Tests, ComponentsResults } from '@teambit/tester';\nimport { TestsResult } from '@teambit/tests-results';\nimport { compact } from 'lodash';\n\nexport type MultiCompilerOptions = {\n  targetExtension?: string;\n};\n\nexport class MultiTester implements Tester {\n  displayName = 'Multi tester';\n\n  constructor(readonly id: string, readonly testers: Tester[]) {}\n\n  displayConfig() {\n    return this.testers\n      .map((tester) => {\n        return `${tester.displayName}\\n${tester.displayConfig}\\n`;\n      })\n      .join('\\n');\n  }\n\n  async test(context: TesterContext): Promise<Tests> {\n    const allResults = await pMapSeries(this.testers, (tester) => {\n      return tester.test(context);\n    });\n    const merged = this.mergeTests(allResults);\n    return merged;\n  }\n\n  // TODO: not working properly yet\n  async watch(context: TesterContext): Promise<Tests> {\n    const allResults = await pMapSeries(this.testers, (tester) => {\n      return tester.watch ? tester.watch(context) : tester.test(context);\n    });\n    const merged = this.mergeTests(allResults);\n    return merged;\n  }\n\n  /**\n   * returns the version of all testers instance (e.g. '4.0.1').\n   */\n  version(): string {\n    return this.testers\n      .map((tester) => {\n        return `${tester.displayName}@${tester.version()}`;\n      })\n      .join('\\n');\n  }\n\n  private mergeTests(tests: Tests[]): Tests {\n    const componentResultsMap = new Map<string, ComponentsResults>();\n\n    compact(tests).forEach((currentTests) => {\n      currentTests.components.forEach((currentComponentResults) => {\n        const currIdStr = currentComponentResults.componentId.toString();\n        const foundComponent = componentResultsMap.get(currIdStr);\n        if (foundComponent) {\n          componentResultsMap.set(currIdStr, this.mergeComponentResults(foundComponent, currentComponentResults));\n        } else {\n          componentResultsMap.set(currIdStr, currentComponentResults);\n        }\n      });\n    });\n\n    return new Tests(Array.from(componentResultsMap.values()));\n  }\n\n  private mergeComponentResults(results1: ComponentsResults, results2: ComponentsResults): ComponentsResults {\n    const merged: ComponentsResults = {\n      componentId: results1.componentId,\n    };\n    let start;\n    if (!results1.results?.start) {\n      start = results2.results?.start;\n    } else if (!results2.results?.start) {\n      start = results1.results?.start;\n    } else {\n      // Take sooner start\n      start = results1.results?.start < results2.results?.start ? results1.results?.start : results2.results?.start;\n    }\n    const mergedTestsResults: TestsResult = new TestsResult(\n      [...(results1.results?.testFiles || []), ...(results2.results?.testFiles || [])],\n      results1.results?.success && results2.results?.success,\n      start\n    );\n    merged.results = mergedTestsResults;\n    merged.errors = [...(results1.errors || []), ...(results2.errors || [])];\n    merged.loading = results1.loading || results2.loading;\n    return merged;\n  }\n}\n"],"mappings":"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"}