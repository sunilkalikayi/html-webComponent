"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MultiTester = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _pMapSeries() {
  const data = _interopRequireDefault(require("p-map-series"));
  _pMapSeries = function () {
    return data;
  };
  return data;
}
function _tester() {
  const data = require("@teambit/tester");
  _tester = function () {
    return data;
  };
  return data;
}
function _testsResults() {
  const data = require("@teambit/tests-results");
  _testsResults = function () {
    return data;
  };
  return data;
}
function _lodash() {
  const data = require("lodash");
  _lodash = function () {
    return data;
  };
  return data;
}
class MultiTester {
  constructor(id, testers) {
    this.id = id;
    this.testers = testers;
    (0, _defineProperty2().default)(this, "displayName", 'Multi tester');
  }
  displayConfig() {
    return this.testers.map(tester => {
      return `${tester.displayName}\n${tester.displayConfig}\n`;
    }).join('\n');
  }
  async test(context) {
    const allResults = await (0, _pMapSeries().default)(this.testers, tester => {
      return tester.test(context);
    });
    const merged = this.mergeTests(allResults);
    return merged;
  }

  // TODO: not working properly yet
  async watch(context) {
    const allResults = await (0, _pMapSeries().default)(this.testers, tester => {
      return tester.watch ? tester.watch(context) : tester.test(context);
    });
    const merged = this.mergeTests(allResults);
    return merged;
  }

  /**
   * returns the version of all testers instance (e.g. '4.0.1').
   */
  version() {
    return this.testers.map(tester => {
      return `${tester.displayName}@${tester.version()}`;
    }).join('\n');
  }
  mergeTests(tests) {
    const componentResultsMap = new Map();
    (0, _lodash().compact)(tests).forEach(currentTests => {
      currentTests.components.forEach(currentComponentResults => {
        const currIdStr = currentComponentResults.componentId.toString();
        const foundComponent = componentResultsMap.get(currIdStr);
        if (foundComponent) {
          componentResultsMap.set(currIdStr, this.mergeComponentResults(foundComponent, currentComponentResults));
        } else {
          componentResultsMap.set(currIdStr, currentComponentResults);
        }
      });
    });
    return new (_tester().Tests)(Array.from(componentResultsMap.values()));
  }
  mergeComponentResults(results1, results2) {
    var _results1$results, _results2$results2, _results1$results5, _results2$results5, _results1$results6, _results2$results6;
    const merged = {
      componentId: results1.componentId
    };
    let start;
    if (!((_results1$results = results1.results) !== null && _results1$results !== void 0 && _results1$results.start)) {
      var _results2$results;
      start = (_results2$results = results2.results) === null || _results2$results === void 0 ? void 0 : _results2$results.start;
    } else if (!((_results2$results2 = results2.results) !== null && _results2$results2 !== void 0 && _results2$results2.start)) {
      var _results1$results2;
      start = (_results1$results2 = results1.results) === null || _results1$results2 === void 0 ? void 0 : _results1$results2.start;
    } else {
      var _results1$results3, _results2$results3, _results1$results4, _results2$results4;
      // Take sooner start
      start = ((_results1$results3 = results1.results) === null || _results1$results3 === void 0 ? void 0 : _results1$results3.start) < ((_results2$results3 = results2.results) === null || _results2$results3 === void 0 ? void 0 : _results2$results3.start) ? (_results1$results4 = results1.results) === null || _results1$results4 === void 0 ? void 0 : _results1$results4.start : (_results2$results4 = results2.results) === null || _results2$results4 === void 0 ? void 0 : _results2$results4.start;
    }
    const mergedTestsResults = new (_testsResults().TestsResult)([...(((_results1$results5 = results1.results) === null || _results1$results5 === void 0 ? void 0 : _results1$results5.testFiles) || []), ...(((_results2$results5 = results2.results) === null || _results2$results5 === void 0 ? void 0 : _results2$results5.testFiles) || [])], ((_results1$results6 = results1.results) === null || _results1$results6 === void 0 ? void 0 : _results1$results6.success) && ((_results2$results6 = results2.results) === null || _results2$results6 === void 0 ? void 0 : _results2$results6.success), start);
    merged.results = mergedTestsResults;
    merged.errors = [...(results1.errors || []), ...(results2.errors || [])];
    merged.loading = results1.loading || results2.loading;
    return merged;
  }
}
exports.MultiTester = MultiTester;

//# sourceMappingURL=multi-tester.tester.js.map