{"version":3,"names":[],"sources":["workspace-template.ts"],"sourcesContent":["import type { Component } from '@teambit/component';\n\nexport interface WorkspaceFile {\n  /**\n   * relative path of the file within the workspace.\n   */\n  relativePath: string;\n\n  /**\n   * file content\n   */\n  content: string;\n}\n\nexport interface WorkspaceContext {\n  /**\n   * workspace-name as entered by the user, e.g. `react-app`.\n   * it is used as the directory name for the workspace.\n   */\n  name: string;\n\n  /**\n   * default scope as entered by the user.\n   * it will be set in the workspace.jsonc and be used for components\n   */\n  defaultScope?: string;\n\n  /**\n   * whether user entered `--empty` flag in `bit new` to avoid creating components.\n   */\n  empty?: boolean;\n\n  /**\n   * in case the \"--aspect\" flag used to import a remote aspect, this is populated with that aspect.\n   * useful to get the aspect-id and other info.\n   */\n  aspectComponent?: Component;\n\n  /**\n   * the template the user selected to create the workspace.\n   */\n  template: WorkspaceTemplate;\n}\n\nexport interface ForkComponentInfo {\n  /**\n   * full component id\n   */\n  id: string;\n\n  /**\n   * path where to write the component\n   */\n  path?: string;\n\n  /**\n   * a new component name. if not specified, use the original id (without the scope)\n   */\n  targetName?: string;\n}\n\n/**\n * @deprecated use ForkComponentInfo instead.\n */\nexport type ComponentToImport = ForkComponentInfo;\n\nexport interface ImportComponentInfo {\n  /**\n   * full component id\n   */\n  id: string;\n\n  /**\n   * path where to write the component\n   */\n  path: string;\n}\n\nexport interface WorkspaceTemplate {\n  /**\n   * name of the workspace template. for example: `react-workspace`.\n   */\n  name: string;\n\n  /**\n   * name of an app created in the workspace. for example: `my-app`.\n   * This will be used to instruct the user to run `bit run <appName>` in the new workspace.\n   */\n  appName?: string;\n\n  /**\n   * short description of the template. shown in the `bit templates` command when outside of bit-workspace.\n   */\n  description?: string;\n\n  /**\n   * hide this template so that it is not listed with `bit templates`\n   */\n  hidden?: boolean;\n\n  /**\n   * template function for generating the template files,\n   */\n  generateFiles(context: WorkspaceContext): Promise<WorkspaceFile[]>;\n\n  /**\n   * @deprecated use `fork()` or `import()` instead\n   * this is working similarly to `fork()`\n   */\n  importComponents?: () => ForkComponentInfo[];\n\n  /**\n   * populate existing components into the new workspace and add them as new components.\n   * don't change their source code.\n   */\n  import?: () => ImportComponentInfo[];\n\n  /**\n   * populate existing components into the new workspace and add them as new components.\n   * change their source code and update the dependency names according to the new component names.\n   */\n  fork?: () => ForkComponentInfo[];\n}\n"],"mappings":""}