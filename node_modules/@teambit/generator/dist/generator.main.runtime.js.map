{"version":3,"names":["GeneratorMain","constructor","componentTemplateSlot","workspaceTemplateSlot","config","workspace","envs","aspectLoader","newComponentHelper","importer","registerComponentTemplate","templates","register","registerWorkspaceTemplate","listTemplates","getTemplateDescriptor","id","template","shouldBeHidden","hidden","hideCoreTemplates","isCoreAspect","aspectId","name","description","isRunningInsideWorkspace","getAllComponentTemplatesFlattened","map","getAllWorkspaceTemplatesFlattened","listComponentTemplates","Boolean","getComponentTemplateByAspect","get","getComponentTemplate","found","find","findTemplateInGlobalScope","globalScopeHarmony","components","loadAspectsFromGlobalScope","remoteGenerator","GeneratorAspect","aspect","fullAspectId","toString","fromGlobal","searchRegisteredWorkspaceTemplate","call","workspaceTemplate","findTemplateInOtherWorkspace","workspacePath","BitError","harmony","loadBit","WorkspaceAspect","err","Error","aspectComponentId","resolveComponentId","loadAspects","aspectFullId","generator","getWorkspaceTemplate","registeredTemplate","generateComponentTemplate","componentNames","templateName","options","ConsumerNotFound","namespace","templateWithId","componentIds","componentName","getNewComponentId","scope","componentGenerator","ComponentGenerator","generate","generateWorkspaceTemplate","workspaceName","loadFrom","aspectComponent","workspaceGenerator","WorkspaceGenerator","appName","templatesByAspects","toArray","flatMap","componentTemplates","workspaceTemplates","aspectLoaded","aspects","provider","cli","graphql","community","commands","CreateCmd","getDocsDomain","TemplatesCmd","NewCmd","generatorSchema","registerPlugins","StarterPlugin","componentGeneratorTemplate","starterTemplate","workspaceGeneratorTemplate","Slot","withType","CLIAspect","GraphqlAspect","EnvsAspect","AspectLoaderAspect","NewComponentHelperAspect","CommunityAspect","ImporterAspect","MainRuntime","addRuntime"],"sources":["generator.main.runtime.ts"],"sourcesContent":["import { GraphqlAspect, GraphqlMain } from '@teambit/graphql';\nimport { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport WorkspaceAspect, { Workspace } from '@teambit/workspace';\nimport { EnvsAspect, EnvsMain } from '@teambit/envs';\nimport { ConsumerNotFound } from '@teambit/legacy/dist/consumer/exceptions';\nimport { CommunityAspect } from '@teambit/community';\nimport type { CommunityMain } from '@teambit/community';\n\nimport { Component } from '@teambit/component';\nimport { isCoreAspect, loadBit } from '@teambit/bit';\nimport { Slot, SlotRegistry } from '@teambit/harmony';\nimport { BitError } from '@teambit/bit-error';\nimport AspectLoaderAspect, { AspectLoaderMain } from '@teambit/aspect-loader';\nimport NewComponentHelperAspect, { NewComponentHelperMain } from '@teambit/new-component-helper';\nimport ImporterAspect, { ImporterMain } from '@teambit/importer';\nimport { ComponentTemplate } from './component-template';\nimport { GeneratorAspect } from './generator.aspect';\nimport { CreateCmd, CreateOptions } from './create.cmd';\nimport { TemplatesCmd } from './templates.cmd';\nimport { generatorSchema } from './generator.graphql';\nimport { ComponentGenerator, GenerateResult } from './component-generator';\nimport { WorkspaceGenerator } from './workspace-generator';\nimport { WorkspaceTemplate } from './workspace-template';\nimport { NewCmd, NewOptions } from './new.cmd';\nimport { componentGeneratorTemplate } from './templates/component-generator';\nimport { workspaceGeneratorTemplate } from './templates/workspace-generator';\nimport { starterTemplate } from './templates/starter';\nimport { StarterPlugin } from './starter.plugin';\n\nexport type ComponentTemplateSlot = SlotRegistry<ComponentTemplate[]>;\nexport type WorkspaceTemplateSlot = SlotRegistry<WorkspaceTemplate[]>;\n\nexport type TemplateDescriptor = { aspectId: string; name: string; description?: string; hidden?: boolean };\nexport type GenerateWorkspaceTemplateResult = { workspacePath: string; appName?: string };\n\nexport type GeneratorConfig = {\n  /**\n   * array of aspects to include in the list of templates.\n   */\n  aspects: string[];\n\n  /**\n   * by default core templates are shown.\n   * use this to hide them unless `--show-all` flag of `bit templates` was used\n   */\n  hideCoreTemplates: boolean;\n};\n\nexport class GeneratorMain {\n  private aspectLoaded = false;\n  constructor(\n    private componentTemplateSlot: ComponentTemplateSlot,\n    private workspaceTemplateSlot: WorkspaceTemplateSlot,\n    private config: GeneratorConfig,\n    private workspace: Workspace,\n    private envs: EnvsMain,\n    private aspectLoader: AspectLoaderMain,\n    private newComponentHelper: NewComponentHelperMain,\n    private importer: ImporterMain\n  ) {}\n\n  /**\n   * register a new component template.\n   */\n  registerComponentTemplate(templates: ComponentTemplate[]) {\n    this.componentTemplateSlot.register(templates);\n    return this;\n  }\n\n  /**\n   * register a new component template.\n   */\n  registerWorkspaceTemplate(templates: WorkspaceTemplate[]) {\n    this.workspaceTemplateSlot.register(templates);\n    return this;\n  }\n\n  /**\n   * list all component templates registered in the workspace or workspace templates in case the\n   * workspace is not available\n   */\n  async listTemplates(): Promise<TemplateDescriptor[]> {\n    const getTemplateDescriptor = ({\n      id,\n      template,\n    }: {\n      id: string;\n      template: WorkspaceTemplate | ComponentTemplate;\n    }) => {\n      const shouldBeHidden = () => {\n        if (template.hidden) return true;\n        if (this.config.hideCoreTemplates && isCoreAspect(id)) return true;\n        return false;\n      };\n      return {\n        aspectId: id,\n        name: template.name,\n        description: template.description,\n        hidden: shouldBeHidden(),\n      };\n    };\n    return this.isRunningInsideWorkspace()\n      ? this.getAllComponentTemplatesFlattened().map(getTemplateDescriptor)\n      : this.getAllWorkspaceTemplatesFlattened().map(getTemplateDescriptor);\n  }\n\n  /**\n   * @deprecated use this.listTemplates()\n   */\n  async listComponentTemplates(): Promise<TemplateDescriptor[]> {\n    return this.listTemplates();\n  }\n\n  isRunningInsideWorkspace(): boolean {\n    return Boolean(this.workspace);\n  }\n\n  /**\n   * get all component templates registered by a specific aspect ID.\n   */\n  getComponentTemplateByAspect(aspectId: string): ComponentTemplate[] {\n    return this.componentTemplateSlot.get(aspectId) || [];\n  }\n\n  /**\n   * returns a specific component template.\n   */\n  getComponentTemplate(name: string, aspectId?: string): { id: string; template: ComponentTemplate } | undefined {\n    const templates = this.getAllComponentTemplatesFlattened();\n    const found = templates.find(({ id, template }) => {\n      if (aspectId && id !== aspectId) return false;\n      return template.name === name;\n    });\n    return found;\n  }\n\n  /**\n   * in the case the aspect-id is given and this aspect doesn't exist locally, import it to the\n   * global scope and load it from the capsule\n   */\n  async findTemplateInGlobalScope(\n    aspectId: string,\n    name?: string\n  ): Promise<{ workspaceTemplate?: WorkspaceTemplate; aspect?: Component }> {\n    const { globalScopeHarmony, components } = await this.aspectLoader.loadAspectsFromGlobalScope([aspectId]);\n    const remoteGenerator = globalScopeHarmony.get<GeneratorMain>(GeneratorAspect.id);\n    const aspect = components[0];\n    const fullAspectId = aspect.id.toString();\n    const fromGlobal = await remoteGenerator.searchRegisteredWorkspaceTemplate.call(\n      remoteGenerator,\n      name,\n      fullAspectId\n    );\n    return { workspaceTemplate: fromGlobal, aspect };\n  }\n\n  async findTemplateInOtherWorkspace(workspacePath: string, name: string, aspectId?: string) {\n    if (!aspectId)\n      throw new BitError(\n        `to load a template from a different workspace, please provide the aspect-id using --aspect flag`\n      );\n    const harmony = await loadBit(workspacePath);\n    let workspace: Workspace;\n    try {\n      workspace = harmony.get<Workspace>(WorkspaceAspect.id);\n    } catch (err: any) {\n      throw new Error(`fatal: \"${workspacePath}\" is not a valid Bit workspace, make sure the path is correct`);\n    }\n    const aspectComponentId = await workspace.resolveComponentId(aspectId);\n    await workspace.loadAspects([aspectId], true);\n    const aspectFullId = aspectComponentId.toString();\n    const generator = harmony.get<GeneratorMain>(GeneratorAspect.id);\n    return generator.searchRegisteredWorkspaceTemplate(name, aspectFullId);\n  }\n\n  /**\n   * returns a specific workspace template.\n   */\n  async getWorkspaceTemplate(\n    name: string,\n    aspectId?: string\n  ): Promise<{ workspaceTemplate: WorkspaceTemplate; aspect?: Component }> {\n    const registeredTemplate = await this.searchRegisteredWorkspaceTemplate(name, aspectId);\n    if (registeredTemplate) {\n      return { workspaceTemplate: registeredTemplate };\n    }\n    if (!aspectId) {\n      throw new BitError(`template \"${name}\" was not found, if this is a custom-template, please use --aspect flag`);\n    }\n\n    const { workspaceTemplate, aspect } = await this.findTemplateInGlobalScope(aspectId, name);\n    if (workspaceTemplate) {\n      return { workspaceTemplate, aspect };\n    }\n    throw new BitError(`template \"${name}\" was not found`);\n  }\n\n  async searchRegisteredWorkspaceTemplate(name?: string, aspectId?: string): Promise<WorkspaceTemplate | undefined> {\n    const templates = this.getAllWorkspaceTemplatesFlattened();\n    const found = templates.find(({ id, template }) => {\n      if (aspectId && name) return aspectId === id && name === template.name;\n      if (aspectId) return aspectId === id;\n      if (name) return name === template.name;\n      throw new Error(`searchRegisteredWorkspaceTemplate expects to get \"name\" or \"aspectId\"`);\n    });\n    return found?.template;\n  }\n\n  async generateComponentTemplate(\n    componentNames: string[],\n    templateName: string,\n    options: CreateOptions\n  ): Promise<GenerateResult[]> {\n    if (!this.workspace) throw new ConsumerNotFound();\n    await this.loadAspects();\n    const { namespace, aspect: aspectId } = options;\n    const templateWithId = this.getComponentTemplate(templateName, aspectId);\n    if (!templateWithId) throw new BitError(`template \"${templateName}\" was not found`);\n\n    const componentIds = componentNames.map((componentName) =>\n      this.newComponentHelper.getNewComponentId(componentName, namespace, options.scope)\n    );\n\n    const componentGenerator = new ComponentGenerator(\n      this.workspace,\n      componentIds,\n      options,\n      templateWithId.template,\n      this.envs,\n      this.newComponentHelper,\n      templateWithId.id\n    );\n    return componentGenerator.generate();\n  }\n\n  async generateWorkspaceTemplate(\n    workspaceName: string,\n    templateName: string,\n    options: NewOptions\n  ): Promise<GenerateWorkspaceTemplateResult> {\n    if (this.workspace) {\n      throw new BitError('Error: unable to generate a new workspace inside of an existing workspace');\n    }\n    const { aspect: aspectId, loadFrom } = options;\n    let template: WorkspaceTemplate | undefined;\n    let aspectComponent: Component | undefined;\n    if (loadFrom) {\n      template = await this.findTemplateInOtherWorkspace(loadFrom, templateName, aspectId);\n    } else {\n      const { workspaceTemplate, aspect } = await this.getWorkspaceTemplate(templateName, aspectId);\n      template = workspaceTemplate;\n      aspectComponent = aspect;\n    }\n    if (!template) throw new BitError(`template \"${templateName}\" was not found`);\n    const workspaceGenerator = new WorkspaceGenerator(workspaceName, options, template, aspectComponent);\n    const workspacePath = await workspaceGenerator.generate();\n\n    return { workspacePath, appName: template.appName };\n  }\n\n  private getAllComponentTemplatesFlattened(): Array<{ id: string; template: ComponentTemplate }> {\n    const templatesByAspects = this.componentTemplateSlot.toArray();\n    return templatesByAspects.flatMap(([id, componentTemplates]) => {\n      return componentTemplates.map((template) => ({\n        id,\n        template,\n      }));\n    });\n  }\n\n  private getAllWorkspaceTemplatesFlattened(): Array<{ id: string; template: WorkspaceTemplate }> {\n    const templatesByAspects = this.workspaceTemplateSlot.toArray();\n    return templatesByAspects.flatMap(([id, workspaceTemplates]) => {\n      return workspaceTemplates.map((template) => ({\n        id,\n        template,\n      }));\n    });\n  }\n\n  private async loadAspects() {\n    if (this.aspectLoaded) return;\n    await this.workspace.loadAspects(this.config.aspects);\n    this.aspectLoaded = true;\n  }\n\n  static slots = [Slot.withType<ComponentTemplate[]>(), Slot.withType<WorkspaceTemplate[]>()];\n\n  static dependencies = [\n    WorkspaceAspect,\n    CLIAspect,\n    GraphqlAspect,\n    EnvsAspect,\n    AspectLoaderAspect,\n    NewComponentHelperAspect,\n    CommunityAspect,\n    ImporterAspect,\n  ];\n\n  static runtime = MainRuntime;\n\n  static async provider(\n    [workspace, cli, graphql, envs, aspectLoader, newComponentHelper, community, importer]: [\n      Workspace,\n      CLIMain,\n      GraphqlMain,\n      EnvsMain,\n      AspectLoaderMain,\n      NewComponentHelperMain,\n      CommunityMain,\n      ImporterMain\n    ],\n    config: GeneratorConfig,\n    [componentTemplateSlot, workspaceTemplateSlot]: [ComponentTemplateSlot, WorkspaceTemplateSlot]\n  ) {\n    const generator = new GeneratorMain(\n      componentTemplateSlot,\n      workspaceTemplateSlot,\n      config,\n      workspace,\n      envs,\n      aspectLoader,\n      newComponentHelper,\n      importer\n    );\n    const commands = [\n      new CreateCmd(generator, community.getDocsDomain()),\n      new TemplatesCmd(generator),\n      new NewCmd(generator),\n    ];\n    cli.register(...commands);\n    graphql.register(generatorSchema(generator));\n    aspectLoader.registerPlugins([new StarterPlugin(generator)]);\n\n    generator.registerComponentTemplate([componentGeneratorTemplate, starterTemplate, workspaceGeneratorTemplate]);\n    return generator;\n  }\n}\n\nGeneratorAspect.addRuntime(GeneratorMain);\n"],"mappings":"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"}