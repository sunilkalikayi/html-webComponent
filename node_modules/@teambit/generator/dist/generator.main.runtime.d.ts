import { GraphqlMain } from '@teambit/graphql';
import { CLIMain } from '@teambit/cli';
import { Workspace } from '@teambit/workspace';
import { EnvsMain } from '@teambit/envs';
import type { CommunityMain } from '@teambit/community';
import { Component } from '@teambit/component';
import { SlotRegistry } from '@teambit/harmony';
import { AspectLoaderMain } from '@teambit/aspect-loader';
import { NewComponentHelperMain } from '@teambit/new-component-helper';
import { ImporterMain } from '@teambit/importer';
import { ComponentTemplate } from './component-template';
import { CreateOptions } from './create.cmd';
import { GenerateResult } from './component-generator';
import { WorkspaceTemplate } from './workspace-template';
import { NewOptions } from './new.cmd';
export declare type ComponentTemplateSlot = SlotRegistry<ComponentTemplate[]>;
export declare type WorkspaceTemplateSlot = SlotRegistry<WorkspaceTemplate[]>;
export declare type TemplateDescriptor = {
    aspectId: string;
    name: string;
    description?: string;
    hidden?: boolean;
};
export declare type GenerateWorkspaceTemplateResult = {
    workspacePath: string;
    appName?: string;
};
export declare type GeneratorConfig = {
    /**
     * array of aspects to include in the list of templates.
     */
    aspects: string[];
    /**
     * by default core templates are shown.
     * use this to hide them unless `--show-all` flag of `bit templates` was used
     */
    hideCoreTemplates: boolean;
};
export declare class GeneratorMain {
    private componentTemplateSlot;
    private workspaceTemplateSlot;
    private config;
    private workspace;
    private envs;
    private aspectLoader;
    private newComponentHelper;
    private importer;
    private aspectLoaded;
    constructor(componentTemplateSlot: ComponentTemplateSlot, workspaceTemplateSlot: WorkspaceTemplateSlot, config: GeneratorConfig, workspace: Workspace, envs: EnvsMain, aspectLoader: AspectLoaderMain, newComponentHelper: NewComponentHelperMain, importer: ImporterMain);
    /**
     * register a new component template.
     */
    registerComponentTemplate(templates: ComponentTemplate[]): this;
    /**
     * register a new component template.
     */
    registerWorkspaceTemplate(templates: WorkspaceTemplate[]): this;
    /**
     * list all component templates registered in the workspace or workspace templates in case the
     * workspace is not available
     */
    listTemplates(): Promise<TemplateDescriptor[]>;
    /**
     * @deprecated use this.listTemplates()
     */
    listComponentTemplates(): Promise<TemplateDescriptor[]>;
    isRunningInsideWorkspace(): boolean;
    /**
     * get all component templates registered by a specific aspect ID.
     */
    getComponentTemplateByAspect(aspectId: string): ComponentTemplate[];
    /**
     * returns a specific component template.
     */
    getComponentTemplate(name: string, aspectId?: string): {
        id: string;
        template: ComponentTemplate;
    } | undefined;
    /**
     * in the case the aspect-id is given and this aspect doesn't exist locally, import it to the
     * global scope and load it from the capsule
     */
    findTemplateInGlobalScope(aspectId: string, name?: string): Promise<{
        workspaceTemplate?: WorkspaceTemplate;
        aspect?: Component;
    }>;
    findTemplateInOtherWorkspace(workspacePath: string, name: string, aspectId?: string): Promise<WorkspaceTemplate | undefined>;
    /**
     * returns a specific workspace template.
     */
    getWorkspaceTemplate(name: string, aspectId?: string): Promise<{
        workspaceTemplate: WorkspaceTemplate;
        aspect?: Component;
    }>;
    searchRegisteredWorkspaceTemplate(name?: string, aspectId?: string): Promise<WorkspaceTemplate | undefined>;
    generateComponentTemplate(componentNames: string[], templateName: string, options: CreateOptions): Promise<GenerateResult[]>;
    generateWorkspaceTemplate(workspaceName: string, templateName: string, options: NewOptions): Promise<GenerateWorkspaceTemplateResult>;
    private getAllComponentTemplatesFlattened;
    private getAllWorkspaceTemplatesFlattened;
    private loadAspects;
    static slots: (((registerFn: () => string) => SlotRegistry<ComponentTemplate[]>) | ((registerFn: () => string) => SlotRegistry<WorkspaceTemplate[]>))[];
    static dependencies: import("@teambit/bit").Aspect[];
    static runtime: import("@teambit/bit").RuntimeDefinition;
    static provider([workspace, cli, graphql, envs, aspectLoader, newComponentHelper, community, importer]: [
        Workspace,
        CLIMain,
        GraphqlMain,
        EnvsMain,
        AspectLoaderMain,
        NewComponentHelperMain,
        CommunityMain,
        ImporterMain
    ], config: GeneratorConfig, [componentTemplateSlot, workspaceTemplateSlot]: [ComponentTemplateSlot, WorkspaceTemplateSlot]): Promise<GeneratorMain>;
}
