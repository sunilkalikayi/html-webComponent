"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generatorSchema = generatorSchema;
function _objectWithoutProperties2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
  _objectWithoutProperties2 = function () {
    return data;
  };
  return data;
}
function _graphqlTag() {
  const data = _interopRequireDefault(require("graphql-tag"));
  _graphqlTag = function () {
    return data;
  };
  return data;
}
function generatorSchema(generator) {
  return {
    typeDefs: (0, _graphqlTag().default)`
      type GenerateResult {
        id: String
        dir: String
        files: [String]
      }

      type Mutation {
        # create Component by template
        createComponent(
          name: String!
          templateName: String!
          scope: String
          namespace: String
          aspect: String
        ): [GenerateResult]
      }

      type TemplateDescriptor {
        aspectId: String!
        name: String!
      }

      type Generator {
        templates: [TemplateDescriptor]
      }

      type Query {
        generator: Generator
      }
    `,
    resolvers: {
      Mutation: {
        createComponent: async (req, _ref) => {
          let {
              name,
              templateName
            } = _ref,
            options = (0, _objectWithoutProperties2().default)(_ref, ["name", "templateName"]);
          const res = await generator.generateComponentTemplate([name], templateName, options);
          return res.map(component => ({
            id: component.id.toString(),
            dir: component.dir,
            files: component.files
          }));
        }
      },
      Generator: {
        templates: async () => {
          return generator.listTemplates();
        }
      },
      Query: {
        generator: () => generator
      }
    }
  };
}

//# sourceMappingURL=generator.graphql.js.map