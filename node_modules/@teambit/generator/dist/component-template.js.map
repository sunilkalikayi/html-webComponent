{"version":3,"names":[],"sources":["component-template.ts"],"sourcesContent":["import { ComponentID } from '@teambit/component-id';\n\nexport interface ComponentFile {\n  /**\n   * relative path of the file within the component.\n   */\n  relativePath: string;\n\n  /**\n   * file content\n   */\n  content: string;\n\n  /**\n   * whether this file will be tracked as the main file\n   */\n  isMain?: boolean;\n}\n\nexport interface ComponentContext {\n  /**\n   * component-name as entered by the user, e.g. `use-date`.\n   * without the scope and the namespace.\n   */\n  name: string;\n\n  /**\n   * component-name as upper camel case, e.g. `use-date` becomes `UseDate`.\n   * useful when generating the file content, for example for a class name.\n   */\n  namePascalCase: string;\n\n  /**\n   * component-name as lower camel case, e.g. `use-date` becomes `useDate`.\n   * useful when generating the file content, for example for a function/variable name.\n   */\n  nameCamelCase: string;\n\n  /**\n   * component id.\n   * the name is the name+namespace. the scope is the scope entered by --scope flag or the defaultScope\n   */\n  componentId: ComponentID;\n}\n\nexport interface ConfigContext {\n  /**\n   * Aspect id of the aspect that register the template itself\n   */\n  aspectId: string;\n}\n\nexport type ComponentConfig = { [aspectName: string]: any };\n\nexport interface ComponentTemplate {\n  /**\n   * name of the component template. for example: `hook`, `react-component` or `module`.\n   */\n  name: string;\n\n  /**\n   * short description of the template. shown in the `bit templates` command.\n   */\n  description?: string;\n\n  /**\n   * hide this template so that it is not listed with `bit templates`\n   */\n  hidden?: boolean;\n\n  /**\n   * template function for generating the file of a certain component.,\n   */\n  generateFiles(context: ComponentContext): ComponentFile[];\n\n  /**\n   * component config. gets saved in the .bitmap file and it overrides the workspace.jsonc config.\n   * for example, you can set the env that will be used for this component as follows:\n   * \"teambit.envs/envs\": {\n   *    \"env\": \"teambit.harmony/aspect\"\n   * },\n   */\n  config?: ComponentConfig | ((context: ConfigContext) => ComponentConfig);\n}\n"],"mappings":""}