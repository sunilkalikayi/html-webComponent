"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.symbol.description.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TemplatesCmd = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
function _lodash() {
  const data = require("lodash");
  _lodash = function () {
    return data;
  };
  return data;
}
class TemplatesCmd {
  constructor(generator) {
    this.generator = generator;
    (0, _defineProperty2().default)(this, "name", 'templates');
    (0, _defineProperty2().default)(this, "description", 'list templates for "bit create" and "bit new"');
    (0, _defineProperty2().default)(this, "extendedDescription", 'list components templates when inside bit-workspace (for bit-create), otherwise, list workspace templates (for bit-new)');
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "loader", true);
    (0, _defineProperty2().default)(this, "group", 'development');
    (0, _defineProperty2().default)(this, "options", [['s', 'show-all', 'show hidden templates']]);
  }

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  async report(args, templatesOptions) {
    let results = await this.generator.listTemplates();

    // Make sure that we don't list hidden templates
    if (!templatesOptions.showAll) {
      results = results.filter(template => !template.hidden);
    }
    const grouped = (0, _lodash().groupBy)(results, 'aspectId');
    const titleStr = this.generator.isRunningInsideWorkspace() ? `The following template(s) are available with the command bit create:  \nExample - bit create <template-name> <component-name>` : `The following template(s) are available with the command bit new: \nExample - bit new <template-name> <workspace-name>`;
    const title = _chalk().default.green(`\n${titleStr}\n`);
    const templateOutput = template => {
      const desc = template.description ? ` (${template.description})` : '';
      return `    ${template.name}${_chalk().default.dim(desc)}`;
    };
    const output = Object.keys(grouped).map(aspectId => {
      const names = grouped[aspectId].map(templateOutput).join('\n');
      return `${_chalk().default.blue.bold(aspectId)}\n${names}\n`;
    }).join('\n');
    return title + output;
  }
}
exports.TemplatesCmd = TemplatesCmd;

//# sourceMappingURL=templates.cmd.js.map