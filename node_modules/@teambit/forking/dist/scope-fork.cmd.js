"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScopeForkCmd = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
class ScopeForkCmd {
  constructor(forking) {
    this.forking = forking;
    (0, _defineProperty2().default)(this, "name", 'fork <original-scope> <new-scope>');
    (0, _defineProperty2().default)(this, "description", 'fork all components of the original-scope and refactor the source-code to use the new package names');
    (0, _defineProperty2().default)(this, "options", []);
    (0, _defineProperty2().default)(this, "group", 'development');
  }
  async report([originalScope, newScope]) {
    const forkedIds = await this.forking.forkScope(originalScope, newScope);
    const title = _chalk().default.green(`successfully forked ${_chalk().default.bold(originalScope)} into ${_chalk().default.bold(newScope)}. the following components were created`);
    return `${title}\n${forkedIds.map(id => id.toString()).join('\n')}`;
  }
}
exports.ScopeForkCmd = ScopeForkCmd;

//# sourceMappingURL=scope-fork.cmd.js.map