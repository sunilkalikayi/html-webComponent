"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ForkCmd = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
class ForkCmd {
  constructor(forking) {
    this.forking = forking;
    (0, _defineProperty2().default)(this, "name", 'fork <source-component-id> [target-component-name]');
    (0, _defineProperty2().default)(this, "description", 'EXPERIMENTAL. create a new component out of an existing one (copies source files and config)');
    (0, _defineProperty2().default)(this, "arguments", [{
      name: 'source-component-id',
      description: 'the component id of the source component'
    }, {
      name: 'target-component-name',
      description: "the name for the new component (component name without scope). to set a different scope, use the '--scope' flag"
    }]);
    (0, _defineProperty2().default)(this, "group", 'collaborate');
    (0, _defineProperty2().default)(this, "skipWorkspace", true);
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "options", [['s', 'scope <string>', 'default scope for the new component'], ['p', 'path <string>', 'relative path in the workspace for the new component. by default the path is `<scope>/<namespace>/<name>`'], ['r', 'refactor', 'update the import/require statements in all dependent components (in the same workspace)'], ['', 'skip-dependency-installation', 'do not install packages of the imported components']]);
    (0, _defineProperty2().default)(this, "example", void 0);
    (0, _defineProperty2().default)(this, "loader", true);
    (0, _defineProperty2().default)(this, "migration", true);
    (0, _defineProperty2().default)(this, "remoteOp", true);
  }
  async report([sourceId, targetId], options) {
    const results = await this.forking.fork(sourceId, targetId, options);
    const targetIdStr = results.toString();
    return _chalk().default.green(`successfully forked ${_chalk().default.bold(targetIdStr)} from ${_chalk().default.bold(sourceId)}`);
  }
}
exports.ForkCmd = ForkCmd;

//# sourceMappingURL=fork.cmd.js.map