{"version":3,"names":["ForkingMain","constructor","workspace","install","dependencyResolver","newComponentHelper","refactoring","pkg","fork","sourceId","targetId","options","ConsumerNotFound","sourceCompId","resolveComponentId","exists","existingInWorkspace","get","forkExistingInWorkspace","sourceIdWithScope","_legacy","scope","ComponentID","fromLegacy","BitId","parse","targetCompId","component","forkRemoteComponent","saveDeps","skipDependencyInstallation","installDeps","getForkInfo","forkConfig","state","aspects","ForkingAspect","id","config","forkedFrom","fromObject","forkMultipleFromRemote","componentsToFork","results","pMapSeries","path","refactorMultipleAndInstall","oldPackages","stringsToReplace","map","oldPackageName","getPackageName","push","newName","fullName","replace","scopeToReplace","newPackageName","oldStr","newStr","toStringWithoutVersion","flat","allComponents","list","refactor","changedComponents","replaceMultipleStrings","Promise","all","comp","write","forkedComponents","result","policy","extractDeps","policyFlatAndUnique","uniqBy","policyWithoutWorkspaceComps","filter","dep","includes","dependencyId","addToRootPolicy","updateExisting","persistConfig","forkScope","originalScope","newScope","idsFromOriginalScope","listRemoteScope","length","Error","workspaceIds","listIds","workspaceBitIds","BitIds","fromArray","forEach","existInWorkspace","searchWithoutScopeAndVersion","toString","multipleForkInfo","components","getManyRemoteComponents","getConfig","name","writeAndAddNewComp","info","existing","getNewComponentId","undefined","refactorDependencyName","BitError","targetName","getRemoteComponent","workspacePolicyEntries","dedupe","import","copyPeerToRuntimeOnRoot","copyPeerToRuntimeOnComponents","deps","getDependencies","source","lifecycleType","lifecycle","value","version","fromExisting","getConfigFromExistingToNewComponent","toObject","provider","cli","componentMain","graphql","forkingMain","register","ForkCmd","forkingSchema","registerShowFragments","ForkingFragment","scopeCommand","getCommand","commands","ScopeForkCmd","CLIAspect","WorkspaceAspect","DependencyResolverAspect","ComponentAspect","NewComponentHelperAspect","GraphqlAspect","RefactoringAspect","PkgAspect","InstallAspect","MainRuntime","addRuntime"],"sources":["forking.main.runtime.ts"],"sourcesContent":["import { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport { DependencyResolverAspect, DependencyResolverMain } from '@teambit/dependency-resolver';\nimport { BitId } from '@teambit/legacy-bit-id';\nimport WorkspaceAspect, { Workspace } from '@teambit/workspace';\nimport { BitIds } from '@teambit/legacy/dist/bit-id';\nimport { ConsumerNotFound } from '@teambit/legacy/dist/consumer/exceptions';\nimport { uniqBy } from 'lodash';\nimport ComponentAspect, { Component, ComponentID, ComponentMain } from '@teambit/component';\nimport { ComponentIdObj } from '@teambit/component-id';\nimport GraphqlAspect, { GraphqlMain } from '@teambit/graphql';\nimport RefactoringAspect, { MultipleStringsReplacement, RefactoringMain } from '@teambit/refactoring';\nimport pMapSeries from 'p-map-series';\nimport PkgAspect, { PkgMain } from '@teambit/pkg';\nimport { BitError } from '@teambit/bit-error';\nimport NewComponentHelperAspect, { NewComponentHelperMain } from '@teambit/new-component-helper';\nimport { InstallMain, InstallAspect } from '@teambit/install';\nimport { ForkCmd, ForkOptions } from './fork.cmd';\nimport { ForkingAspect } from './forking.aspect';\nimport { ForkingFragment } from './forking.fragment';\nimport { forkingSchema } from './forking.graphql';\nimport { ScopeForkCmd } from './scope-fork.cmd';\n\nexport type ForkInfo = {\n  forkedFrom: ComponentID;\n};\n\ntype MultipleForkInfo = {\n  targetCompId: ComponentID;\n  sourceId: string;\n  component: Component;\n};\n\ntype MultipleComponentsToFork = Array<{\n  sourceId: string;\n  targetId?: string; // if not specify, it'll be the same as the source\n  path?: string; // if not specify, use the default component path\n}>;\n\ntype MultipleForkOptions = {\n  refactor?: boolean;\n  scope?: string; // different scope-name than the original components\n  install?: boolean; // whether to run \"bit install\" once done.\n};\n\nexport class ForkingMain {\n  constructor(\n    private workspace: Workspace,\n    private install: InstallMain,\n    private dependencyResolver: DependencyResolverMain,\n    private newComponentHelper: NewComponentHelperMain,\n    private refactoring: RefactoringMain,\n    private pkg: PkgMain\n  ) {}\n\n  /**\n   * create a new copy of existing/remote component.\n   * the new component holds a reference to the old one for future reference.\n   * if refactor option is enable, change the source-code to update all dependencies with the new name.\n   */\n  async fork(sourceId: string, targetId?: string, options?: ForkOptions): Promise<ComponentID> {\n    if (!this.workspace) throw new ConsumerNotFound();\n    const sourceCompId = await this.workspace.resolveComponentId(sourceId);\n    const exists = this.workspace.exists(sourceCompId);\n    if (exists) {\n      const existingInWorkspace = await this.workspace.get(sourceCompId);\n      return this.forkExistingInWorkspace(existingInWorkspace, targetId, options);\n    }\n    const sourceIdWithScope = sourceCompId._legacy.scope\n      ? sourceCompId\n      : ComponentID.fromLegacy(BitId.parse(sourceId, true));\n    const { targetCompId, component } = await this.forkRemoteComponent(sourceIdWithScope, targetId, options);\n    await this.saveDeps(component);\n    if (!options?.skipDependencyInstallation) await this.installDeps();\n    return targetCompId;\n  }\n\n  /**\n   * get the forking data, such as the source where a component was forked from\n   */\n  getForkInfo(component: Component): ForkInfo | null {\n    const forkConfig = component.state.aspects.get(ForkingAspect.id)?.config as ForkConfig | undefined;\n    if (!forkConfig) return null;\n    return {\n      forkedFrom: ComponentID.fromObject(forkConfig.forkedFrom),\n    };\n  }\n\n  async forkMultipleFromRemote(componentsToFork: MultipleComponentsToFork, options: MultipleForkOptions = {}) {\n    const { scope } = options;\n    const results = await pMapSeries(componentsToFork, async ({ sourceId, targetId, path }) => {\n      const sourceCompId = await this.workspace.resolveComponentId(sourceId);\n      const sourceIdWithScope = sourceCompId._legacy.scope\n        ? sourceCompId\n        : ComponentID.fromLegacy(BitId.parse(sourceId, true));\n      const { targetCompId, component } = await this.forkRemoteComponent(sourceIdWithScope, targetId, { scope, path });\n      return { targetCompId, sourceId, component };\n    });\n    await this.refactorMultipleAndInstall(results, options);\n  }\n\n  private async refactorMultipleAndInstall(results: MultipleForkInfo[], options: MultipleForkOptions = {}) {\n    const oldPackages: string[] = [];\n    const stringsToReplace: MultipleStringsReplacement = results\n      .map(({ targetCompId, sourceId, component }) => {\n        const oldPackageName = this.pkg.getPackageName(component);\n        oldPackages.push(oldPackageName);\n        const newName = targetCompId.fullName.replace(/\\//g, '.');\n        const scopeToReplace = targetCompId.scope.replace('.', '/');\n        const newPackageName = `@${scopeToReplace}.${newName}`;\n        return [\n          { oldStr: oldPackageName, newStr: newPackageName },\n          { oldStr: sourceId, newStr: targetCompId.toStringWithoutVersion() },\n        ];\n      })\n      .flat();\n    const allComponents = await this.workspace.list();\n    if (options.refactor) {\n      const { changedComponents } = await this.refactoring.replaceMultipleStrings(allComponents, stringsToReplace);\n      await Promise.all(changedComponents.map((comp) => this.workspace.write(comp)));\n    }\n    const forkedComponents = results.map((result) => result.component);\n    const policy = await Promise.all(forkedComponents.map((comp) => this.extractDeps(comp)));\n    const policyFlatAndUnique = uniqBy(policy.flat(), 'dependencyId');\n    const policyWithoutWorkspaceComps = policyFlatAndUnique.filter((dep) => !oldPackages.includes(dep.dependencyId));\n    this.dependencyResolver.addToRootPolicy(policyWithoutWorkspaceComps, { updateExisting: true });\n    await this.dependencyResolver.persistConfig(this.workspace.path);\n    if (options.install) {\n      await this.installDeps();\n    }\n  }\n\n  /**\n   * fork all components of the given scope\n   */\n  async forkScope(originalScope: string, newScope: string): Promise<ComponentID[]> {\n    const idsFromOriginalScope = await this.workspace.scope.listRemoteScope(originalScope);\n    if (!idsFromOriginalScope.length) {\n      throw new Error(`unable to find components to fork from ${originalScope}`);\n    }\n    const workspaceIds = await this.workspace.listIds();\n    const workspaceBitIds = BitIds.fromArray(workspaceIds.map((id) => id._legacy));\n    idsFromOriginalScope.forEach((id) => {\n      const existInWorkspace = workspaceBitIds.searchWithoutScopeAndVersion(id._legacy);\n      if (existInWorkspace) {\n        throw new Error(\n          `unable to fork \"${id.toString()}\". the workspace has a component \"${existInWorkspace.toString()}\" with the same name`\n        );\n      }\n    });\n    const multipleForkInfo: MultipleForkInfo[] = [];\n    const components = await this.workspace.scope.getManyRemoteComponents(idsFromOriginalScope);\n    await pMapSeries(components, async (component) => {\n      const config = await this.getConfig(component);\n      const targetCompId = ComponentID.fromObject({ name: component.id.fullName }, newScope);\n      await this.newComponentHelper.writeAndAddNewComp(component, targetCompId, { scope: newScope }, config);\n      multipleForkInfo.push({ targetCompId, sourceId: component.id.toStringWithoutVersion(), component });\n    });\n    await this.refactorMultipleAndInstall(multipleForkInfo, { refactor: true, install: true });\n    return multipleForkInfo.map((info) => info.targetCompId);\n  }\n\n  private async forkExistingInWorkspace(existing: Component, targetId?: string, options?: ForkOptions) {\n    if (!targetId) {\n      throw new Error(`error: unable to create \"${existing.id.toStringWithoutVersion()}\" component, a component with the same name already exists.\nplease specify the target-id arg`);\n    }\n    const targetCompId = this.newComponentHelper.getNewComponentId(targetId, undefined, options?.scope);\n\n    const config = await this.getConfig(existing);\n    await this.newComponentHelper.writeAndAddNewComp(existing, targetCompId, options, config);\n    if (options?.refactor) {\n      const allComponents = await this.workspace.list();\n      const { changedComponents } = await this.refactoring.refactorDependencyName(allComponents, existing.id, targetId);\n      await Promise.all(changedComponents.map((comp) => this.workspace.write(comp)));\n    }\n    return targetCompId;\n  }\n\n  private async forkRemoteComponent(\n    sourceId: ComponentID,\n    targetId?: string,\n    options?: ForkOptions\n  ): Promise<{\n    targetCompId: ComponentID;\n    component: Component;\n  }> {\n    if (options?.refactor) {\n      throw new BitError(`the component ${sourceId.toStringWithoutVersion()} is not in the workspace, you can't use the --refactor flag.\nthe reason is that the refactor changes the components using ${sourceId.toStringWithoutVersion()}, since it's not in the workspace, no components were using it, so nothing to refactor`);\n    }\n    const targetName = targetId || sourceId.fullName;\n    const targetCompId = this.newComponentHelper.getNewComponentId(targetName, undefined, options?.scope);\n    const component = await this.workspace.scope.getRemoteComponent(sourceId);\n    await this.refactoring.replaceMultipleStrings(\n      [component],\n      [\n        {\n          oldStr: sourceId.toStringWithoutVersion(),\n          newStr: targetCompId.toStringWithoutVersion(),\n        },\n      ]\n    );\n    const config = await this.getConfig(component);\n    await this.newComponentHelper.writeAndAddNewComp(component, targetCompId, options, config);\n\n    return { targetCompId, component };\n  }\n\n  private async saveDeps(component: Component) {\n    const workspacePolicyEntries = await this.extractDeps(component);\n    this.dependencyResolver.addToRootPolicy(workspacePolicyEntries, { updateExisting: true });\n    await this.dependencyResolver.persistConfig(this.workspace.path);\n  }\n\n  private async installDeps() {\n    await this.install.install(undefined, {\n      dedupe: true,\n      import: false,\n      copyPeerToRuntimeOnRoot: true,\n      copyPeerToRuntimeOnComponents: false,\n      updateExisting: false,\n    });\n  }\n\n  private async extractDeps(component: Component) {\n    const deps = await this.dependencyResolver.getDependencies(component);\n    return deps\n      .filter((dep) => dep.source === 'auto')\n      .map((dep) => ({\n        dependencyId: dep.getPackageName?.() || dep.id,\n        lifecycleType: dep.lifecycle === 'dev' ? 'runtime' : dep.lifecycle,\n        value: {\n          version: dep.version,\n        },\n      }));\n  }\n\n  private async getConfig(comp: Component) {\n    const fromExisting = await this.newComponentHelper.getConfigFromExistingToNewComponent(comp);\n    return {\n      ...fromExisting,\n      [ForkingAspect.id]: {\n        forkedFrom: comp.id.toObject(),\n      },\n    };\n  }\n\n  static slots = [];\n  static dependencies = [\n    CLIAspect,\n    WorkspaceAspect,\n    DependencyResolverAspect,\n    ComponentAspect,\n    NewComponentHelperAspect,\n    GraphqlAspect,\n    RefactoringAspect,\n    PkgAspect,\n    InstallAspect,\n  ];\n  static runtime = MainRuntime;\n  static async provider([\n    cli,\n    workspace,\n    dependencyResolver,\n    componentMain,\n    newComponentHelper,\n    graphql,\n    refactoring,\n    pkg,\n    install,\n  ]: [\n    CLIMain,\n    Workspace,\n    DependencyResolverMain,\n    ComponentMain,\n    NewComponentHelperMain,\n    GraphqlMain,\n    RefactoringMain,\n    PkgMain,\n    InstallMain\n  ]) {\n    const forkingMain = new ForkingMain(workspace, install, dependencyResolver, newComponentHelper, refactoring, pkg);\n    cli.register(new ForkCmd(forkingMain));\n    graphql.register(forkingSchema(forkingMain));\n    componentMain.registerShowFragments([new ForkingFragment(forkingMain)]);\n\n    const scopeCommand = cli.getCommand('scope');\n    scopeCommand?.commands?.push(new ScopeForkCmd(forkingMain));\n\n    return forkingMain;\n  }\n}\n\nForkingAspect.addRuntime(ForkingMain);\n\nexport type ForkConfig = {\n  forkedFrom: ComponentIdObj;\n};\n"],"mappings":"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"}