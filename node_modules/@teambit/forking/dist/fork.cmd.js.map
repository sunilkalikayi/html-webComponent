{"version":3,"names":["ForkCmd","constructor","forking","name","description","report","sourceId","targetId","options","results","fork","targetIdStr","toString","chalk","green","bold"],"sources":["fork.cmd.ts"],"sourcesContent":["import chalk from 'chalk';\nimport { Command, CommandOptions } from '@teambit/cli';\nimport { ForkingMain } from '.';\n\nexport type ForkOptions = {\n  scope?: string;\n  path?: string;\n  refactor?: boolean;\n  skipDependencyInstallation?: boolean;\n};\n\nexport class ForkCmd implements Command {\n  name = 'fork <source-component-id> [target-component-name]';\n  description = 'EXPERIMENTAL. create a new component out of an existing one (copies source files and config)';\n  arguments = [\n    { name: 'source-component-id', description: 'the component id of the source component' },\n    {\n      name: 'target-component-name',\n      description:\n        \"the name for the new component (component name without scope). to set a different scope, use the '--scope' flag\",\n    },\n  ];\n  group = 'collaborate';\n  skipWorkspace = true;\n  alias = '';\n\n  options = [\n    ['s', 'scope <string>', 'default scope for the new component'],\n    [\n      'p',\n      'path <string>',\n      'relative path in the workspace for the new component. by default the path is `<scope>/<namespace>/<name>`',\n    ],\n    ['r', 'refactor', 'update the import/require statements in all dependent components (in the same workspace)'],\n    ['', 'skip-dependency-installation', 'do not install packages of the imported components'],\n  ] as CommandOptions;\n\n  example: [\n    {\n      cmd: 'fork teambit.base-ui/input/button ui/button';\n      description: \"create a component named 'ui/button' out of the remote 'input/button' component\";\n    }\n  ];\n  loader = true;\n  migration = true;\n  remoteOp = true;\n\n  constructor(private forking: ForkingMain) {}\n\n  async report([sourceId, targetId]: [string, string], options: ForkOptions): Promise<string> {\n    const results = await this.forking.fork(sourceId, targetId, options);\n    const targetIdStr = results.toString();\n    return chalk.green(`successfully forked ${chalk.bold(targetIdStr)} from ${chalk.bold(sourceId)}`);\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAWO,MAAMA,OAAO,CAAoB;EAoCtCC,WAAW,CAASC,OAAoB,EAAE;IAAA,KAAtBA,OAAoB,GAApBA,OAAoB;IAAA,8CAnCjC,oDAAoD;IAAA,qDAC7C,8FAA8F;IAAA,mDAChG,CACV;MAAEC,IAAI,EAAE,qBAAqB;MAAEC,WAAW,EAAE;IAA2C,CAAC,EACxF;MACED,IAAI,EAAE,uBAAuB;MAC7BC,WAAW,EACT;IACJ,CAAC,CACF;IAAA,+CACO,aAAa;IAAA,uDACL,IAAI;IAAA,+CACZ,EAAE;IAAA,iDAEA,CACR,CAAC,GAAG,EAAE,gBAAgB,EAAE,qCAAqC,CAAC,EAC9D,CACE,GAAG,EACH,eAAe,EACf,2GAA2G,CAC5G,EACD,CAAC,GAAG,EAAE,UAAU,EAAE,0FAA0F,CAAC,EAC7G,CAAC,EAAE,EAAE,8BAA8B,EAAE,oDAAoD,CAAC,CAC3F;IAAA;IAAA,gDAQQ,IAAI;IAAA,mDACD,IAAI;IAAA,kDACL,IAAI;EAE4B;EAE3C,MAAMC,MAAM,CAAC,CAACC,QAAQ,EAAEC,QAAQ,CAAmB,EAAEC,OAAoB,EAAmB;IAC1F,MAAMC,OAAO,GAAG,MAAM,IAAI,CAACP,OAAO,CAACQ,IAAI,CAACJ,QAAQ,EAAEC,QAAQ,EAAEC,OAAO,CAAC;IACpE,MAAMG,WAAW,GAAGF,OAAO,CAACG,QAAQ,EAAE;IACtC,OAAOC,gBAAK,CAACC,KAAK,CAAE,uBAAsBD,gBAAK,CAACE,IAAI,CAACJ,WAAW,CAAE,SAAQE,gBAAK,CAACE,IAAI,CAACT,QAAQ,CAAE,EAAC,CAAC;EACnG;AACF;AAAC"}