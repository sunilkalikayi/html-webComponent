import { CLIMain } from '@teambit/cli';
import { AspectLoaderMain } from '@teambit/aspect-loader';
import { SlotRegistry } from '@teambit/harmony';
import { Workspace } from '@teambit/workspace';
import { BuilderMain } from '@teambit/builder';
import { Logger, LoggerMain } from '@teambit/logger';
import { EnvsMain } from '@teambit/envs';
import { ComponentMain, ComponentID } from '@teambit/component';
import { ApplicationType } from './application-type';
import { Application } from './application';
import { DeploymentProvider } from './deployment-provider';
import { AppService } from './application.service';
export declare type ApplicationTypeSlot = SlotRegistry<ApplicationType<unknown>[]>;
export declare type ApplicationSlot = SlotRegistry<Application[]>;
export declare type DeploymentProviderSlot = SlotRegistry<DeploymentProvider[]>;
export declare type ApplicationAspectConfig = {};
export declare type ServeAppOptions = {
    /**
     * default port range used to serve applications.
     */
    defaultPortRange?: [start: number, end: number];
    /**
     * determine whether to start the application in dev mode.
     */
    dev: boolean;
    /**
     * actively watch and compile the workspace (like the bit watch command)
     * @default true
     */
    watch?: boolean;
    /**
     * determine whether to start the application in server side mode.
     * @default false
     */
    ssr?: boolean;
};
export declare class ApplicationMain {
    private appSlot;
    private appTypeSlot;
    private deploymentProviderSlot;
    private envs;
    private componentAspect;
    private appService;
    private aspectLoader;
    private workspace;
    private logger;
    constructor(appSlot: ApplicationSlot, appTypeSlot: ApplicationTypeSlot, deploymentProviderSlot: DeploymentProviderSlot, envs: EnvsMain, componentAspect: ComponentMain, appService: AppService, aspectLoader: AspectLoaderMain, workspace: Workspace, logger: Logger);
    /**
     * register a new app.
     */
    registerApp(app: Application): this;
    /**
     * list all registered apps.
     */
    listApps(): Application[];
    /**
     * map all apps by component ID.
     */
    mapApps(): [string, Application[]][];
    /**
     * list apps by a component id.
     */
    listAppsById(id?: ComponentID): Application[] | undefined;
    /**
     * get an application by a component id.
     */
    getAppById(id: ComponentID): Application | undefined;
    /**
     * get an app.
     */
    getApp(appName: string, id?: ComponentID): Application | undefined;
    getAppByNameOrId(appNameOrId: string): Application | undefined;
    /**
     * registers a new app and sets a plugin for it.
     */
    registerAppType<T>(appType: ApplicationType<T>): this;
    /**
     * get an app AspectId.
     */
    getAppAspect(appName: string): string | undefined;
    /**
     * get app to throw.
     */
    getAppOrThrow(appName: string): Application;
    defaultOpts: ServeAppOptions;
    private computeOptions;
    runApp(appName: string, options?: ServeAppOptions): Promise<{
        port?: number | undefined;
        errors?: Error[] | undefined;
        app: Application;
    } | {
        app: Application;
        port: number | void;
        errors: undefined;
    }>;
    /**
     * get the component ID of a certain app.
     */
    getAppIdOrThrow(appName: string): ComponentID;
    private createAppContext;
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static dependencies: import("@teambit/harmony").Aspect[];
    static slots: (((registerFn: () => string) => SlotRegistry<ApplicationType<unknown>[]>) | ((registerFn: () => string) => SlotRegistry<Application[]>) | ((registerFn: () => string) => SlotRegistry<DeploymentProvider[]>))[];
    static provider([cli, loggerAspect, builder, envs, component, aspectLoader, workspace]: [
        CLIMain,
        LoggerMain,
        BuilderMain,
        EnvsMain,
        ComponentMain,
        AspectLoaderMain,
        Workspace
    ], config: ApplicationAspectConfig, [appTypeSlot, appSlot, deploymentProviderSlot]: [ApplicationTypeSlot, ApplicationSlot, DeploymentProviderSlot]): Promise<ApplicationMain>;
}
