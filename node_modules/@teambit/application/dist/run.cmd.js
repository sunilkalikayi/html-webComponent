"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RunCmd = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _react() {
  const data = _interopRequireDefault(require("react"));
  _react = function () {
    return data;
  };
  return data;
}
function _pluralize() {
  const data = _interopRequireDefault(require("pluralize"));
  _pluralize = function () {
    return data;
  };
  return data;
}
function _ink() {
  const data = require("ink");
  _ink = function () {
    return data;
  };
  return data;
}
class RunCmd {
  constructor(
  /**
   * access to the extension instance.
   */
  application, logger) {
    this.application = application;
    this.logger = logger;
    (0, _defineProperty2().default)(this, "name", 'run <app-name>');
    (0, _defineProperty2().default)(this, "description", "run an app (independent of bit's dev server)");
    (0, _defineProperty2().default)(this, "arguments", [{
      name: 'app-name',
      description: "the app's name is registered by the app (run 'bit app list' to list the names of the available apps)"
    }]);
    (0, _defineProperty2().default)(this, "alias", 'c');
    (0, _defineProperty2().default)(this, "group", 'apps');
    (0, _defineProperty2().default)(this, "options", [['d', 'dev', 'start the application in dev mode.'], ['v', 'verbose', 'showing verbose output for inspection and prints stack trace'], ['', 'skip-watch', 'avoid running the watch process that compiles components in the background'], ['', 'ssr', 'run app in server side rendering mode.']]);
  }
  async render([appName], {
    dev,
    skipWatch,
    ssr
  }) {
    // remove wds logs until refactoring webpack to a worker through the Worker aspect.
    const {
      port,
      errors
    } = await this.application.runApp(appName, {
      dev,
      watch: !skipWatch,
      ssr
    });
    if (errors) {
      return {
        code: 1,
        data: /*#__PURE__*/_react().default.createElement(ShowErrors, {
          errors: errors
        })
      };
    }
    if (port) {
      return /*#__PURE__*/_react().default.createElement(_ink().Text, null, appName, " app is running on http://localhost:", port);
    }
    return /*#__PURE__*/_react().default.createElement(_ink().Text, null, appName, " app is running");
  }
}
exports.RunCmd = RunCmd;
function ShowErrors({
  errors
}) {
  return /*#__PURE__*/_react().default.createElement(_react().default.Fragment, null, /*#__PURE__*/_react().default.createElement(_ink().Newline, null), /*#__PURE__*/_react().default.createElement(_ink().Text, {
    underline: true
  }, "Fatal ", (0, _pluralize().default)('error', errors.length), ":"), errors.map((x, idx) => /*#__PURE__*/_react().default.createElement(_ink().Text, {
    key: idx
  }, x.toString())));
}

//# sourceMappingURL=run.cmd.js.map