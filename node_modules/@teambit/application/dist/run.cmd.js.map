{"version":3,"names":["RunCmd","constructor","application","logger","name","description","render","appName","dev","skipWatch","ssr","port","errors","runApp","watch","code","data","ShowErrors","pluralize","length","map","x","idx","toString"],"sources":["run.cmd.tsx"],"sourcesContent":["import React from 'react';\nimport pluralize from 'pluralize';\nimport { Command, CommandOptions } from '@teambit/cli';\nimport { Newline, Text } from 'ink';\nimport { Logger } from '@teambit/logger';\nimport type { RenderResult } from '@teambit/legacy/dist/cli/command';\nimport { ApplicationMain } from './application.main.runtime';\n\ntype RunOptions = {\n  dev: boolean;\n  verbose: boolean;\n  skipWatch: boolean;\n  ssr: boolean;\n};\n\nexport class RunCmd implements Command {\n  name = 'run <app-name>';\n  description = \"run an app (independent of bit's dev server)\";\n  arguments = [\n    {\n      name: 'app-name',\n      description:\n        \"the app's name is registered by the app (run 'bit app list' to list the names of the available apps)\",\n    },\n  ];\n  alias = 'c';\n  group = 'apps';\n  options = [\n    ['d', 'dev', 'start the application in dev mode.'],\n    ['v', 'verbose', 'showing verbose output for inspection and prints stack trace'],\n    ['', 'skip-watch', 'avoid running the watch process that compiles components in the background'],\n    ['', 'ssr', 'run app in server side rendering mode.'],\n  ] as CommandOptions;\n\n  constructor(\n    /**\n     * access to the extension instance.\n     */\n    private application: ApplicationMain,\n\n    private logger: Logger\n  ) {}\n\n  async render([appName]: [string], { dev, skipWatch, ssr }: RunOptions): Promise<React.ReactElement | RenderResult> {\n    // remove wds logs until refactoring webpack to a worker through the Worker aspect.\n    const { port, errors } = await this.application.runApp(appName, {\n      dev,\n      watch: !skipWatch,\n      ssr,\n    });\n\n    if (errors) {\n      return {\n        code: 1,\n        data: <ShowErrors errors={errors} />,\n      };\n    }\n\n    if (port) {\n      return (\n        <Text>\n          {appName} app is running on http://localhost:{port}\n        </Text>\n      );\n    }\n    return <Text>{appName} app is running</Text>;\n  }\n}\n\nfunction ShowErrors({ errors }: { errors: Error[] }) {\n  return (\n    <>\n      <Newline />\n      <Text underline>Fatal {pluralize('error', errors.length)}:</Text>\n      {errors.map((x, idx) => (\n        <Text key={idx}>{x.toString()}</Text>\n      ))}\n    </>\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAYO,MAAMA,MAAM,CAAoB;EAmBrCC,WAAW;EACT;AACJ;AACA;EACYC,WAA4B,EAE5BC,MAAc,EACtB;IAAA,KAHQD,WAA4B,GAA5BA,WAA4B;IAAA,KAE5BC,MAAc,GAAdA,MAAc;IAAA,8CAxBjB,gBAAgB;IAAA,qDACT,8CAA8C;IAAA,mDAChD,CACV;MACEC,IAAI,EAAE,UAAU;MAChBC,WAAW,EACT;IACJ,CAAC,CACF;IAAA,+CACO,GAAG;IAAA,+CACH,MAAM;IAAA,iDACJ,CACR,CAAC,GAAG,EAAE,KAAK,EAAE,oCAAoC,CAAC,EAClD,CAAC,GAAG,EAAE,SAAS,EAAE,8DAA8D,CAAC,EAChF,CAAC,EAAE,EAAE,YAAY,EAAE,4EAA4E,CAAC,EAChG,CAAC,EAAE,EAAE,KAAK,EAAE,wCAAwC,CAAC,CACtD;EASE;EAEH,MAAMC,MAAM,CAAC,CAACC,OAAO,CAAW,EAAE;IAAEC,GAAG;IAAEC,SAAS;IAAEC;EAAgB,CAAC,EAA8C;IACjH;IACA,MAAM;MAAEC,IAAI;MAAEC;IAAO,CAAC,GAAG,MAAM,IAAI,CAACV,WAAW,CAACW,MAAM,CAACN,OAAO,EAAE;MAC9DC,GAAG;MACHM,KAAK,EAAE,CAACL,SAAS;MACjBC;IACF,CAAC,CAAC;IAEF,IAAIE,MAAM,EAAE;MACV,OAAO;QACLG,IAAI,EAAE,CAAC;QACPC,IAAI,eAAE,+BAAC,UAAU;UAAC,MAAM,EAAEJ;QAAO;MACnC,CAAC;IACH;IAEA,IAAID,IAAI,EAAE;MACR,oBACE,+BAAC,WAAI,QACFJ,OAAO,0CAAsCI,IAAI,CAC7C;IAEX;IACA,oBAAO,+BAAC,WAAI,QAAEJ,OAAO,oBAAuB;EAC9C;AACF;AAAC;AAED,SAASU,UAAU,CAAC;EAAEL;AAA4B,CAAC,EAAE;EACnD,oBACE,6EACE,+BAAC,cAAO,OAAG,eACX,+BAAC,WAAI;IAAC,SAAS;EAAA,aAAQ,IAAAM,oBAAS,EAAC,OAAO,EAAEN,MAAM,CAACO,MAAM,CAAC,MAAS,EAChEP,MAAM,CAACQ,GAAG,CAAC,CAACC,CAAC,EAAEC,GAAG,kBACjB,+BAAC,WAAI;IAAC,GAAG,EAAEA;EAAI,GAAED,CAAC,CAACE,QAAQ,EAAE,CAC9B,CAAC,CACD;AAEP"}