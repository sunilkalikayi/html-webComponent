"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.flat.js");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.array.unscopables.flat.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MochaTester = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _tester() {
  const data = require("@teambit/tester");
  _tester = function () {
    return data;
  };
  return data;
}
function _mocha() {
  const data = _interopRequireDefault(require("mocha"));
  _mocha = function () {
    return data;
  };
  return data;
}
function _register() {
  const data = _interopRequireDefault(require("@babel/register"));
  _register = function () {
    return data;
  };
  return data;
}
function _testsResults() {
  const data = require("@teambit/tests-results");
  _testsResults = function () {
    return data;
  };
  return data;
}
function _pMapSeries() {
  const data = _interopRequireDefault(require("p-map-series"));
  _pMapSeries = function () {
    return data;
  };
  return data;
}
function _lodash() {
  const data = require("lodash");
  _lodash = function () {
    return data;
  };
  return data;
}
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
class MochaTester {
  constructor(id, logger, mochaConfig,
  /**
   * babel config are needed when the spec files are not native javascript and need to be compiled.
   * pass the same config you pass to your babel compiler if you're using one.
   */
  babelConfig, MochaModule) {
    this.id = id;
    this.logger = logger;
    this.mochaConfig = mochaConfig;
    this.babelConfig = babelConfig;
    this.MochaModule = MochaModule;
    (0, _defineProperty2().default)(this, "_callback", void 0);
    (0, _defineProperty2().default)(this, "displayName", 'Mocha');
  }
  async test(context) {
    const specsPerComp = context.specFiles.toArray();
    const allSpecsFiles = specsPerComp.map(([, specFiles]) => specFiles.map(specFile => specFile.path)).flat();
    (0, _register().default)(_objectSpread({
      only: [filePath => allSpecsFiles.includes(filePath)],
      extensions: ['.es6', '.es', '.jsx', '.js', '.mjs', '.ts', '.tsx']
    }, this.babelConfig || {}));
    const componentsResults = await (0, _pMapSeries().default)(specsPerComp, async ([component, files]) => {
      const testsFiles = await (0, _pMapSeries().default)(files, async file => {
        try {
          return await this.runMochaOnOneFile(file);
        } catch (err) {
          const errMsg = `Mocha found an error while working on "${file.path}". ${err.message}`;
          this.logger.error(errMsg, err);
          this.logger.consoleFailure(errMsg);
          return new (_testsResults().TestsFiles)(file.relative, [], 0, 0, 0, undefined, undefined, err);
        }
      });
      const allComponentErrors = testsFiles.map(testFile => testFile.error || testFile.tests.map(test => test.failureErrOrStr)).flat();
      return {
        componentId: component.id,
        results: new (_testsResults().TestsResult)(testsFiles),
        errors: (0, _lodash().compact)(allComponentErrors)
      };
    });
    return new (_tester().Tests)(componentsResults);
  }

  /**
   * @todo: make this work. currently, it doesn't update the UI upon changes.
   */
  async watch(context) {
    const results = await this.test(context);
    if (this._callback) {
      this._callback(results);
    }
    return results;
  }
  async onTestRunComplete(callback) {
    this._callback = callback;
  }
  async runMochaOnOneFile(file) {
    const mocha = new this.MochaModule(this.mochaConfig);
    mocha.addFile(file.path);
    const testResults = [];
    return new Promise(resolve => {
      const runner = mocha.run().on('test end', function (test) {
        const state = test.state;
        if (!state) throw new Error(`the test.state of "${test.title}", file "${file.path}" is neither passed nor failed`);
        testResults.push(new (_testsResults().TestResult)(test.titlePath(), test.title, state, test.duration, undefined, test.err));
      }).on('end', function () {
        const stats = runner.stats;
        if (!stats) throw new Error('stats is missing');
        const testsFile = new (_testsResults().TestsFiles)(file.relative, testResults, stats.passes, stats.failures, stats.pending, stats.duration);
        resolve(testsFile);
      });
    });
  }
  version() {
    // @ts-ignore
    return _mocha().default.prototype.version || 'N/A';
  }
}
exports.MochaTester = MochaTester;

//# sourceMappingURL=mocha.tester.js.map