{"version":3,"names":["tsconfig","require","AspectMain","constructor","aspectEnv","envs","workspace","compose","transformers","targetEnv","merge","listAspectsOfComponent","pattern","getIds","listIds","idsByPattern","componentIds","results","Promise","all","map","id","aspectSources","getAspectNamesForComponent","toString","babelConfig","componentFromScope","scope","get","beforeMerge","componentExtensions","forEach","source","extensions","ext","aspectName","name","extensionId","alreadySaved","find","_","push","origin","level","getLevelBySourceOrigin","setAspectsToComponents","aspectId","config","options","componentId","addSpecificComponentConfig","bitMap","write","unsetAspectsFromComponents","removeSpecificComponentConfig","getAspectsOfComponent","resolveComponentId","component","state","aspects","getAspectsOfComponentForDebugging","updateAspectsToComponents","aspectCompId","hasVersion","fromRemote","getRemoteComponent","changeVersion","version","err","BitError","allCompIds","allComps","getMany","alreadyUpToDate","updatedComponentIds","comp","aspect","toStringWithoutVersion","undefined","updated","compact","overrideDependencies","dependencyPolicy","override","getDependencies","reactDeps","mergeDeepLeft","provider","react","builder","aspectLoader","compiler","babel","generator","cli","babelCompiler","createCompiler","babelTransformOptions","distDir","distGlobPatterns","compilerOverride","getCompiler","transformer","mergeTsConfig","setArtifactName","setDistGlobPatterns","setShouldCopyNonSupportedFiles","tsCompiler","env","getCjsCompilerTask","compilerTasksOverride","overrideCompilerTasks","createTask","AspectEnv","reactEnv","coreExporterTask","CoreExporterTask","__dirname","includes","registerBuildTasks","registerEnv","registerComponentTemplate","aspectTemplate","aspectMain","aspectCmd","AspectCmd","commands","ListAspectCmd","GetAspectCmd","SetAspectCmd","UnsetAspectCmd","UpdateAspectCmd","register","MainRuntime","ReactAspect","EnvsAspect","BuilderAspect","AspectLoaderAspect","CompilerAspect","BabelAspect","GeneratorAspect","WorkspaceAspect","CLIAspect","AspectAspect","addRuntime"],"sources":["aspect.main.runtime.ts"],"sourcesContent":["import { AspectLoaderAspect, AspectLoaderMain } from '@teambit/aspect-loader';\nimport mergeDeepLeft from 'ramda/src/mergeDeepLeft';\nimport { BuilderAspect, BuilderMain } from '@teambit/builder';\nimport { compact } from 'lodash';\nimport { EnvPolicyConfigObject } from '@teambit/dependency-resolver';\nimport { BitError } from '@teambit/bit-error';\nimport { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport { Environment, EnvsAspect, EnvsMain, EnvTransformer } from '@teambit/envs';\nimport { ReactAspect, ReactMain } from '@teambit/react';\nimport { GeneratorAspect, GeneratorMain } from '@teambit/generator';\nimport { BabelAspect, BabelMain } from '@teambit/babel';\nimport { ComponentID } from '@teambit/component-id';\nimport { AspectList } from '@teambit/component';\nimport WorkspaceAspect, { ExtensionsOrigin, Workspace } from '@teambit/workspace';\nimport { CompilerAspect, CompilerMain } from '@teambit/compiler';\nimport { AspectAspect } from './aspect.aspect';\nimport { AspectEnv } from './aspect.env';\nimport { CoreExporterTask } from './core-exporter.task';\nimport { aspectTemplate } from './templates/aspect';\nimport { babelConfig } from './babel/babel-config';\nimport {\n  AspectCmd,\n  GetAspectCmd,\n  ListAspectCmd,\n  SetAspectCmd,\n  SetAspectOptions,\n  UnsetAspectCmd,\n  UpdateAspectCmd,\n} from './aspect.cmd';\n\nexport type AspectSource = { aspectName: string; source: string; level: string };\n\nconst tsconfig = require('./typescript/tsconfig.json');\n\nexport class AspectMain {\n  constructor(readonly aspectEnv: AspectEnv, private envs: EnvsMain, private workspace: Workspace) {}\n\n  /**\n   * compose your own aspect environment.\n   */\n  compose(transformers: EnvTransformer[] = [], targetEnv: Environment = {}) {\n    return this.envs.compose(this.envs.merge(targetEnv, this.aspectEnv), transformers);\n  }\n\n  async listAspectsOfComponent(pattern?: string): Promise<{ [component: string]: AspectSource[] }> {\n    const getIds = async () => {\n      if (!pattern) return this.workspace.listIds();\n      return this.workspace.idsByPattern(pattern);\n    };\n    const componentIds = await getIds();\n    const results = {};\n    await Promise.all(\n      componentIds.map(async (id) => {\n        const aspectSources = await this.getAspectNamesForComponent(id);\n        results[id.toString()] = aspectSources;\n      })\n    );\n    return results;\n  }\n\n  get babelConfig() {\n    return babelConfig;\n  }\n\n  private async getAspectNamesForComponent(id: ComponentID): Promise<AspectSource[]> {\n    const componentFromScope = await this.workspace.scope.get(id);\n    const { beforeMerge } = await this.workspace.componentExtensions(id, componentFromScope);\n    const aspectSources: AspectSource[] = [];\n    beforeMerge.forEach((source) => {\n      source.extensions.forEach((ext) => {\n        const aspectName = ext.name || ext.extensionId?.toString() || '<no-name>';\n        const alreadySaved = aspectSources.find((_) => _.aspectName === aspectName);\n        if (alreadySaved) return;\n        aspectSources.push({ aspectName, source: source.origin, level: this.getLevelBySourceOrigin(source.origin) });\n      });\n    });\n    return aspectSources;\n  }\n\n  private getLevelBySourceOrigin(origin: ExtensionsOrigin) {\n    switch (origin) {\n      case 'BitmapFile':\n      case 'ComponentJsonFile':\n      case 'ModelSpecific':\n        return 'component';\n      default:\n        return 'workspace';\n    }\n  }\n\n  async setAspectsToComponents(\n    pattern: string,\n    aspectId: string,\n    config: Record<string, any> = {},\n    options: SetAspectOptions = {}\n  ): Promise<ComponentID[]> {\n    const componentIds = await this.workspace.idsByPattern(pattern);\n    await Promise.all(\n      componentIds.map(async (componentId) => {\n        await this.workspace.addSpecificComponentConfig(componentId, aspectId, config, options.merge);\n      })\n    );\n    await this.workspace.bitMap.write();\n\n    return componentIds;\n  }\n\n  async unsetAspectsFromComponents(pattern: string, aspectId: string): Promise<ComponentID[]> {\n    const componentIds = await this.workspace.idsByPattern(pattern);\n    await Promise.all(\n      componentIds.map(async (componentId) => {\n        await this.workspace.removeSpecificComponentConfig(componentId, aspectId, true);\n      })\n    );\n    await this.workspace.bitMap.write();\n\n    return componentIds;\n  }\n\n  /**\n   * returns all aspects info of a component, include the config and the data.\n   */\n  async getAspectsOfComponent(id: string | ComponentID): Promise<AspectList> {\n    if (typeof id === 'string') {\n      id = await this.workspace.resolveComponentId(id);\n    }\n    const component = await this.workspace.get(id);\n    return component.state.aspects;\n  }\n\n  /**\n   * helps debugging why/how an aspect was set to a component\n   */\n  async getAspectsOfComponentForDebugging(id: string | ComponentID) {\n    if (typeof id === 'string') {\n      id = await this.workspace.resolveComponentId(id);\n    }\n    const componentFromScope = await this.workspace.scope.get(id);\n    const { extensions, beforeMerge } = await this.workspace.componentExtensions(id, componentFromScope);\n    const component = await this.workspace.get(id);\n    return {\n      aspects: component.state.aspects,\n      extensions,\n      beforeMerge,\n    };\n  }\n\n  async updateAspectsToComponents(\n    aspectId: string,\n    pattern?: string\n  ): Promise<{ updated: ComponentID[]; alreadyUpToDate: ComponentID[] }> {\n    let aspectCompId = await this.workspace.resolveComponentId(aspectId);\n    if (!aspectCompId.hasVersion()) {\n      try {\n        const fromRemote = await this.workspace.scope.getRemoteComponent(aspectCompId);\n        aspectCompId = aspectCompId.changeVersion(fromRemote.id.version);\n      } catch (err) {\n        throw new BitError(\n          `unable to find ${aspectId} in the remote. if this is a local aspect, please provide a version with your aspect (${aspectId}) to update to`\n        );\n      }\n    }\n    const allCompIds = pattern ? await this.workspace.idsByPattern(pattern) : await this.workspace.listIds();\n    const allComps = await this.workspace.getMany(allCompIds);\n    const alreadyUpToDate: ComponentID[] = [];\n    const updatedComponentIds = await Promise.all(\n      allComps.map(async (comp) => {\n        const aspect = comp.state.aspects.get(aspectCompId.toStringWithoutVersion());\n        if (!aspect) return undefined;\n        if (aspect.id.version === aspectCompId.version) {\n          // nothing to update\n          alreadyUpToDate.push(comp.id);\n          return undefined;\n        }\n        // don't mark with minus if not exist in .bitmap. it's not needed. when the component is loaded, the\n        // merge-operation of the aspects removes duplicate aspect-id with different versions.\n        await this.workspace.removeSpecificComponentConfig(comp.id, aspect.id.toString(), false);\n        await this.workspace.addSpecificComponentConfig(comp.id, aspectCompId.toString(), aspect.config);\n        return comp.id;\n      })\n    );\n    await this.workspace.bitMap.write();\n    return { updated: compact(updatedComponentIds), alreadyUpToDate };\n  }\n\n  /**\n   * override the dependency configuration of the component environment.\n   */\n  overrideDependencies(dependencyPolicy: EnvPolicyConfigObject) {\n    return this.envs.override({\n      getDependencies: async () => {\n        const reactDeps = await this.aspectEnv.getDependencies();\n        return mergeDeepLeft(dependencyPolicy, reactDeps);\n      },\n    });\n  }\n\n  static runtime = MainRuntime;\n  static dependencies = [\n    ReactAspect,\n    EnvsAspect,\n    BuilderAspect,\n    AspectLoaderAspect,\n    CompilerAspect,\n    BabelAspect,\n    GeneratorAspect,\n    WorkspaceAspect,\n    CLIAspect,\n  ];\n\n  static async provider([react, envs, builder, aspectLoader, compiler, babel, generator, workspace, cli]: [\n    ReactMain,\n    EnvsMain,\n    BuilderMain,\n    AspectLoaderMain,\n    CompilerMain,\n    BabelMain,\n    GeneratorMain,\n    Workspace,\n    CLIMain\n  ]) {\n    const babelCompiler = babel.createCompiler({\n      babelTransformOptions: babelConfig,\n      distDir: 'dist',\n      distGlobPatterns: [`dist/**`, `!dist/**/*.d.ts`, `!dist/tsconfig.tsbuildinfo`],\n    });\n    const compilerOverride = envs.override({\n      getCompiler: () => {\n        return babelCompiler;\n      },\n    });\n\n    const transformer = (config) => {\n      config\n        .mergeTsConfig(tsconfig)\n        .setArtifactName('declaration')\n        .setDistGlobPatterns([`dist/**/*.d.ts`])\n        .setShouldCopyNonSupportedFiles(false);\n      return config;\n    };\n    const tsCompiler = react.env.getCjsCompilerTask([transformer]);\n\n    const compilerTasksOverride = react.overrideCompilerTasks([\n      compiler.createTask('BabelCompiler', babelCompiler),\n      tsCompiler,\n    ]);\n\n    const aspectEnv = react.compose(\n      [compilerOverride, compilerTasksOverride],\n      new AspectEnv(react.reactEnv, aspectLoader)\n    );\n\n    const coreExporterTask = new CoreExporterTask(aspectEnv, aspectLoader);\n    if (!__dirname.includes('@teambit/bit')) {\n      builder.registerBuildTasks([coreExporterTask]);\n    }\n\n    envs.registerEnv(aspectEnv);\n    generator.registerComponentTemplate([aspectTemplate]);\n    const aspectMain = new AspectMain(aspectEnv as AspectEnv, envs, workspace);\n    const aspectCmd = new AspectCmd();\n    aspectCmd.commands = [\n      new ListAspectCmd(aspectMain),\n      new GetAspectCmd(aspectMain),\n      new SetAspectCmd(aspectMain),\n      new UnsetAspectCmd(aspectMain),\n      new UpdateAspectCmd(aspectMain),\n    ];\n    cli.register(aspectCmd);\n\n    return aspectMain;\n  }\n}\n\nAspectAspect.addRuntime(AspectMain);\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAGA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAYA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,4BAA4B,CAAC;AAE/C,MAAMC,UAAU,CAAC;EACtBC,WAAW,CAAUC,SAAoB,EAAUC,IAAc,EAAUC,SAAoB,EAAE;IAAA,KAA5EF,SAAoB,GAApBA,SAAoB;IAAA,KAAUC,IAAc,GAAdA,IAAc;IAAA,KAAUC,SAAoB,GAApBA,SAAoB;EAAG;;EAElG;AACF;AACA;EACEC,OAAO,CAACC,YAA8B,GAAG,EAAE,EAAEC,SAAsB,GAAG,CAAC,CAAC,EAAE;IACxE,OAAO,IAAI,CAACJ,IAAI,CAACE,OAAO,CAAC,IAAI,CAACF,IAAI,CAACK,KAAK,CAACD,SAAS,EAAE,IAAI,CAACL,SAAS,CAAC,EAAEI,YAAY,CAAC;EACpF;EAEA,MAAMG,sBAAsB,CAACC,OAAgB,EAAoD;IAC/F,MAAMC,MAAM,GAAG,YAAY;MACzB,IAAI,CAACD,OAAO,EAAE,OAAO,IAAI,CAACN,SAAS,CAACQ,OAAO,EAAE;MAC7C,OAAO,IAAI,CAACR,SAAS,CAACS,YAAY,CAACH,OAAO,CAAC;IAC7C,CAAC;IACD,MAAMI,YAAY,GAAG,MAAMH,MAAM,EAAE;IACnC,MAAMI,OAAO,GAAG,CAAC,CAAC;IAClB,MAAMC,OAAO,CAACC,GAAG,CACfH,YAAY,CAACI,GAAG,CAAC,MAAOC,EAAE,IAAK;MAC7B,MAAMC,aAAa,GAAG,MAAM,IAAI,CAACC,0BAA0B,CAACF,EAAE,CAAC;MAC/DJ,OAAO,CAACI,EAAE,CAACG,QAAQ,EAAE,CAAC,GAAGF,aAAa;IACxC,CAAC,CAAC,CACH;IACD,OAAOL,OAAO;EAChB;EAEA,IAAIQ,WAAW,GAAG;IAChB,OAAOA,0BAAW;EACpB;EAEA,MAAcF,0BAA0B,CAACF,EAAe,EAA2B;IACjF,MAAMK,kBAAkB,GAAG,MAAM,IAAI,CAACpB,SAAS,CAACqB,KAAK,CAACC,GAAG,CAACP,EAAE,CAAC;IAC7D,MAAM;MAAEQ;IAAY,CAAC,GAAG,MAAM,IAAI,CAACvB,SAAS,CAACwB,mBAAmB,CAACT,EAAE,EAAEK,kBAAkB,CAAC;IACxF,MAAMJ,aAA6B,GAAG,EAAE;IACxCO,WAAW,CAACE,OAAO,CAAEC,MAAM,IAAK;MAC9BA,MAAM,CAACC,UAAU,CAACF,OAAO,CAAEG,GAAG,IAAK;QAAA;QACjC,MAAMC,UAAU,GAAGD,GAAG,CAACE,IAAI,yBAAIF,GAAG,CAACG,WAAW,qDAAf,iBAAiBb,QAAQ,EAAE,KAAI,WAAW;QACzE,MAAMc,YAAY,GAAGhB,aAAa,CAACiB,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACL,UAAU,KAAKA,UAAU,CAAC;QAC3E,IAAIG,YAAY,EAAE;QAClBhB,aAAa,CAACmB,IAAI,CAAC;UAAEN,UAAU;UAAEH,MAAM,EAAEA,MAAM,CAACU,MAAM;UAAEC,KAAK,EAAE,IAAI,CAACC,sBAAsB,CAACZ,MAAM,CAACU,MAAM;QAAE,CAAC,CAAC;MAC9G,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,OAAOpB,aAAa;EACtB;EAEQsB,sBAAsB,CAACF,MAAwB,EAAE;IACvD,QAAQA,MAAM;MACZ,KAAK,YAAY;MACjB,KAAK,mBAAmB;MACxB,KAAK,eAAe;QAClB,OAAO,WAAW;MACpB;QACE,OAAO,WAAW;IAAC;EAEzB;EAEA,MAAMG,sBAAsB,CAC1BjC,OAAe,EACfkC,QAAgB,EAChBC,MAA2B,GAAG,CAAC,CAAC,EAChCC,OAAyB,GAAG,CAAC,CAAC,EACN;IACxB,MAAMhC,YAAY,GAAG,MAAM,IAAI,CAACV,SAAS,CAACS,YAAY,CAACH,OAAO,CAAC;IAC/D,MAAMM,OAAO,CAACC,GAAG,CACfH,YAAY,CAACI,GAAG,CAAC,MAAO6B,WAAW,IAAK;MACtC,MAAM,IAAI,CAAC3C,SAAS,CAAC4C,0BAA0B,CAACD,WAAW,EAAEH,QAAQ,EAAEC,MAAM,EAAEC,OAAO,CAACtC,KAAK,CAAC;IAC/F,CAAC,CAAC,CACH;IACD,MAAM,IAAI,CAACJ,SAAS,CAAC6C,MAAM,CAACC,KAAK,EAAE;IAEnC,OAAOpC,YAAY;EACrB;EAEA,MAAMqC,0BAA0B,CAACzC,OAAe,EAAEkC,QAAgB,EAA0B;IAC1F,MAAM9B,YAAY,GAAG,MAAM,IAAI,CAACV,SAAS,CAACS,YAAY,CAACH,OAAO,CAAC;IAC/D,MAAMM,OAAO,CAACC,GAAG,CACfH,YAAY,CAACI,GAAG,CAAC,MAAO6B,WAAW,IAAK;MACtC,MAAM,IAAI,CAAC3C,SAAS,CAACgD,6BAA6B,CAACL,WAAW,EAAEH,QAAQ,EAAE,IAAI,CAAC;IACjF,CAAC,CAAC,CACH;IACD,MAAM,IAAI,CAACxC,SAAS,CAAC6C,MAAM,CAACC,KAAK,EAAE;IAEnC,OAAOpC,YAAY;EACrB;;EAEA;AACF;AACA;EACE,MAAMuC,qBAAqB,CAAClC,EAAwB,EAAuB;IACzE,IAAI,OAAOA,EAAE,KAAK,QAAQ,EAAE;MAC1BA,EAAE,GAAG,MAAM,IAAI,CAACf,SAAS,CAACkD,kBAAkB,CAACnC,EAAE,CAAC;IAClD;IACA,MAAMoC,SAAS,GAAG,MAAM,IAAI,CAACnD,SAAS,CAACsB,GAAG,CAACP,EAAE,CAAC;IAC9C,OAAOoC,SAAS,CAACC,KAAK,CAACC,OAAO;EAChC;;EAEA;AACF;AACA;EACE,MAAMC,iCAAiC,CAACvC,EAAwB,EAAE;IAChE,IAAI,OAAOA,EAAE,KAAK,QAAQ,EAAE;MAC1BA,EAAE,GAAG,MAAM,IAAI,CAACf,SAAS,CAACkD,kBAAkB,CAACnC,EAAE,CAAC;IAClD;IACA,MAAMK,kBAAkB,GAAG,MAAM,IAAI,CAACpB,SAAS,CAACqB,KAAK,CAACC,GAAG,CAACP,EAAE,CAAC;IAC7D,MAAM;MAAEY,UAAU;MAAEJ;IAAY,CAAC,GAAG,MAAM,IAAI,CAACvB,SAAS,CAACwB,mBAAmB,CAACT,EAAE,EAAEK,kBAAkB,CAAC;IACpG,MAAM+B,SAAS,GAAG,MAAM,IAAI,CAACnD,SAAS,CAACsB,GAAG,CAACP,EAAE,CAAC;IAC9C,OAAO;MACLsC,OAAO,EAAEF,SAAS,CAACC,KAAK,CAACC,OAAO;MAChC1B,UAAU;MACVJ;IACF,CAAC;EACH;EAEA,MAAMgC,yBAAyB,CAC7Bf,QAAgB,EAChBlC,OAAgB,EACqD;IACrE,IAAIkD,YAAY,GAAG,MAAM,IAAI,CAACxD,SAAS,CAACkD,kBAAkB,CAACV,QAAQ,CAAC;IACpE,IAAI,CAACgB,YAAY,CAACC,UAAU,EAAE,EAAE;MAC9B,IAAI;QACF,MAAMC,UAAU,GAAG,MAAM,IAAI,CAAC1D,SAAS,CAACqB,KAAK,CAACsC,kBAAkB,CAACH,YAAY,CAAC;QAC9EA,YAAY,GAAGA,YAAY,CAACI,aAAa,CAACF,UAAU,CAAC3C,EAAE,CAAC8C,OAAO,CAAC;MAClE,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZ,MAAM,KAAIC,oBAAQ,EACf,kBAAiBvB,QAAS,yFAAwFA,QAAS,gBAAe,CAC5I;MACH;IACF;IACA,MAAMwB,UAAU,GAAG1D,OAAO,GAAG,MAAM,IAAI,CAACN,SAAS,CAACS,YAAY,CAACH,OAAO,CAAC,GAAG,MAAM,IAAI,CAACN,SAAS,CAACQ,OAAO,EAAE;IACxG,MAAMyD,QAAQ,GAAG,MAAM,IAAI,CAACjE,SAAS,CAACkE,OAAO,CAACF,UAAU,CAAC;IACzD,MAAMG,eAA8B,GAAG,EAAE;IACzC,MAAMC,mBAAmB,GAAG,MAAMxD,OAAO,CAACC,GAAG,CAC3CoD,QAAQ,CAACnD,GAAG,CAAC,MAAOuD,IAAI,IAAK;MAC3B,MAAMC,MAAM,GAAGD,IAAI,CAACjB,KAAK,CAACC,OAAO,CAAC/B,GAAG,CAACkC,YAAY,CAACe,sBAAsB,EAAE,CAAC;MAC5E,IAAI,CAACD,MAAM,EAAE,OAAOE,SAAS;MAC7B,IAAIF,MAAM,CAACvD,EAAE,CAAC8C,OAAO,KAAKL,YAAY,CAACK,OAAO,EAAE;QAC9C;QACAM,eAAe,CAAChC,IAAI,CAACkC,IAAI,CAACtD,EAAE,CAAC;QAC7B,OAAOyD,SAAS;MAClB;MACA;MACA;MACA,MAAM,IAAI,CAACxE,SAAS,CAACgD,6BAA6B,CAACqB,IAAI,CAACtD,EAAE,EAAEuD,MAAM,CAACvD,EAAE,CAACG,QAAQ,EAAE,EAAE,KAAK,CAAC;MACxF,MAAM,IAAI,CAAClB,SAAS,CAAC4C,0BAA0B,CAACyB,IAAI,CAACtD,EAAE,EAAEyC,YAAY,CAACtC,QAAQ,EAAE,EAAEoD,MAAM,CAAC7B,MAAM,CAAC;MAChG,OAAO4B,IAAI,CAACtD,EAAE;IAChB,CAAC,CAAC,CACH;IACD,MAAM,IAAI,CAACf,SAAS,CAAC6C,MAAM,CAACC,KAAK,EAAE;IACnC,OAAO;MAAE2B,OAAO,EAAE,IAAAC,iBAAO,EAACN,mBAAmB,CAAC;MAAED;IAAgB,CAAC;EACnE;;EAEA;AACF;AACA;EACEQ,oBAAoB,CAACC,gBAAuC,EAAE;IAC5D,OAAO,IAAI,CAAC7E,IAAI,CAAC8E,QAAQ,CAAC;MACxBC,eAAe,EAAE,YAAY;QAC3B,MAAMC,SAAS,GAAG,MAAM,IAAI,CAACjF,SAAS,CAACgF,eAAe,EAAE;QACxD,OAAO,IAAAE,wBAAa,EAACJ,gBAAgB,EAAEG,SAAS,CAAC;MACnD;IACF,CAAC,CAAC;EACJ;EAeA,aAAaE,QAAQ,CAAC,CAACC,KAAK,EAAEnF,IAAI,EAAEoF,OAAO,EAAEC,YAAY,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,SAAS,EAAEvF,SAAS,EAAEwF,GAAG,CAUpG,EAAE;IACD,MAAMC,aAAa,GAAGH,KAAK,CAACI,cAAc,CAAC;MACzCC,qBAAqB,EAAExE,0BAAW;MAClCyE,OAAO,EAAE,MAAM;MACfC,gBAAgB,EAAE,CAAE,SAAQ,EAAG,iBAAgB,EAAG,4BAA2B;IAC/E,CAAC,CAAC;IACF,MAAMC,gBAAgB,GAAG/F,IAAI,CAAC8E,QAAQ,CAAC;MACrCkB,WAAW,EAAE,MAAM;QACjB,OAAON,aAAa;MACtB;IACF,CAAC,CAAC;IAEF,MAAMO,WAAW,GAAIvD,MAAM,IAAK;MAC9BA,MAAM,CACHwD,aAAa,CAACvG,QAAQ,CAAC,CACvBwG,eAAe,CAAC,aAAa,CAAC,CAC9BC,mBAAmB,CAAC,CAAE,gBAAe,CAAC,CAAC,CACvCC,8BAA8B,CAAC,KAAK,CAAC;MACxC,OAAO3D,MAAM;IACf,CAAC;IACD,MAAM4D,UAAU,GAAGnB,KAAK,CAACoB,GAAG,CAACC,kBAAkB,CAAC,CAACP,WAAW,CAAC,CAAC;IAE9D,MAAMQ,qBAAqB,GAAGtB,KAAK,CAACuB,qBAAqB,CAAC,CACxDpB,QAAQ,CAACqB,UAAU,CAAC,eAAe,EAAEjB,aAAa,CAAC,EACnDY,UAAU,CACX,CAAC;IAEF,MAAMvG,SAAS,GAAGoF,KAAK,CAACjF,OAAO,CAC7B,CAAC6F,gBAAgB,EAAEU,qBAAqB,CAAC,EACzC,KAAIG,oBAAS,EAACzB,KAAK,CAAC0B,QAAQ,EAAExB,YAAY,CAAC,CAC5C;IAED,MAAMyB,gBAAgB,GAAG,KAAIC,gCAAgB,EAAChH,SAAS,EAAEsF,YAAY,CAAC;IACtE,IAAI,CAAC2B,SAAS,CAACC,QAAQ,CAAC,cAAc,CAAC,EAAE;MACvC7B,OAAO,CAAC8B,kBAAkB,CAAC,CAACJ,gBAAgB,CAAC,CAAC;IAChD;IAEA9G,IAAI,CAACmH,WAAW,CAACpH,SAAS,CAAC;IAC3ByF,SAAS,CAAC4B,yBAAyB,CAAC,CAACC,yBAAc,CAAC,CAAC;IACrD,MAAMC,UAAU,GAAG,IAAIzH,UAAU,CAACE,SAAS,EAAeC,IAAI,EAAEC,SAAS,CAAC;IAC1E,MAAMsH,SAAS,GAAG,KAAIC,oBAAS,GAAE;IACjCD,SAAS,CAACE,QAAQ,GAAG,CACnB,KAAIC,wBAAa,EAACJ,UAAU,CAAC,EAC7B,KAAIK,uBAAY,EAACL,UAAU,CAAC,EAC5B,KAAIM,uBAAY,EAACN,UAAU,CAAC,EAC5B,KAAIO,yBAAc,EAACP,UAAU,CAAC,EAC9B,KAAIQ,0BAAe,EAACR,UAAU,CAAC,CAChC;IACD7B,GAAG,CAACsC,QAAQ,CAACR,SAAS,CAAC;IAEvB,OAAOD,UAAU;EACnB;AACF;AAAC;AAAA,gCA9OYzH,UAAU,aAmKJmI,kBAAW;AAAA,gCAnKjBnI,UAAU,kBAoKC,CACpBoI,oBAAW,EACXC,kBAAU,EACVC,wBAAa,EACbC,kCAAkB,EAClBC,0BAAc,EACdC,oBAAW,EACXC,4BAAe,EACfC,oBAAe,EACfC,gBAAS,CACV;AAkEHC,sBAAY,CAACC,UAAU,CAAC9I,UAAU,CAAC"}