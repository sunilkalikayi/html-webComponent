"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CoreExporterTask = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _path() {
  const data = _interopRequireDefault(require("path"));
  _path = function () {
    return data;
  };
  return data;
}
function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));
  _fsExtra = function () {
    return data;
  };
  return data;
}
function _aspectLoader() {
  const data = require("@teambit/aspect-loader");
  _aspectLoader = function () {
    return data;
  };
  return data;
}
class CoreExporterTask {
  constructor(env, aspectLoader) {
    this.env = env;
    this.aspectLoader = aspectLoader;
    (0, _defineProperty2().default)(this, "location", 'start');
    (0, _defineProperty2().default)(this, "aspectId", 'teambit.harmony/aspect');
    (0, _defineProperty2().default)(this, "name", 'CoreExporter');
    (0, _defineProperty2().default)(this, "description", 'export all core aspects via the main aspects');
  }
  async execute(context) {
    const mainAspect = this.aspectLoader.mainAspect;
    const capsules = context.capsuleNetwork.seedersCapsules;
    const mainAspectCapsule = capsules.find(capsule => capsule.component.id.name === mainAspect.name);
    if (mainAspectCapsule) {
      const distDir = this.env.getCompiler().distDir;
      await this.addFolderForAllCoreAspects(mainAspectCapsule, distDir);
      await this.addFolderForHarmony(mainAspectCapsule, distDir);
      await this.addFolderForLegacy(mainAspectCapsule, distDir);
    }
    return {
      componentsResults: [],
      artifacts: []
    };
  }
  addFolderForAllCoreAspects(mainAspectCapsule, distDir) {
    const coreAspectsIds = this.aspectLoader.getCoreAspectIds();
    const coreAspectsNamesPackages = coreAspectsIds.map(id => {
      return {
        name: (0, _aspectLoader().getCoreAspectName)(id),
        packageName: (0, _aspectLoader().getCoreAspectPackageName)(id)
      };
    });
    const capsuleDir = mainAspectCapsule.path;
    const createBarrelFilesP = coreAspectsNamesPackages.map(async ({
      name,
      packageName
    }) => {
      const newDirPath = _path().default.join(capsuleDir, distDir, name);
      await _fsExtra().default.ensureDir(newDirPath);
      const barrelContent = generateBarrelFile(packageName);
      await _fsExtra().default.writeFile(_path().default.join(newDirPath, 'index.js'), barrelContent);
    });
    return Promise.all(createBarrelFilesP);
  }
  async addFolderForNonAspectCorePackages(mainAspectCapsule, distDir, name, packageName = `@teambit/${name}`) {
    const capsuleDir = mainAspectCapsule.path;
    const newDirPath = _path().default.join(capsuleDir, distDir, name);
    await _fsExtra().default.ensureDir(newDirPath);
    const barrelContent = generateBarrelFile(packageName);
    await _fsExtra().default.writeFile(_path().default.join(newDirPath, 'index.js'), barrelContent);
  }
  async addFolderForHarmony(mainAspectCapsule, distDir) {
    const name = 'harmony';
    await this.addFolderForNonAspectCorePackages(mainAspectCapsule, distDir, name);
  }
  async addFolderForLegacy(mainAspectCapsule, distDir) {
    const name = 'legacy';
    await this.addFolderForNonAspectCorePackages(mainAspectCapsule, distDir, name);
  }
}
exports.CoreExporterTask = CoreExporterTask;
function generateBarrelFile(packageName) {
  return `
Object.defineProperty(exports, "__esModule", { value: true });
// const aspect = require("${packageName}");
// module.exports = aspect;
module.exports.path = require.resolve("${packageName}");
`;
}

//# sourceMappingURL=core-exporter.task.js.map