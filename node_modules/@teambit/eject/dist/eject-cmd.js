"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EjectCmd = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _ejectTemplate() {
  const data = _interopRequireDefault(require("@teambit/legacy/dist/cli/templates/eject-template"));
  _ejectTemplate = function () {
    return data;
  };
  return data;
}
function _exceptions() {
  const data = require("@teambit/legacy/dist/consumer/exceptions");
  _exceptions = function () {
    return data;
  };
  return data;
}
function _componentsEjector() {
  const data = require("./components-ejector");
  _componentsEjector = function () {
    return data;
  };
  return data;
}
class EjectCmd {
  constructor(workspace, logger, install) {
    this.workspace = workspace;
    this.logger = logger;
    this.install = install;
    (0, _defineProperty2().default)(this, "name", 'eject <component-pattern>');
    (0, _defineProperty2().default)(this, "description", 'replace components maintained in the workspace with their corresponding packages');
    (0, _defineProperty2().default)(this, "arguments", [{
      name: 'component-pattern',
      description: 'component name, component id, or component pattern.\nuse component pattern to select multiple components. use comma to separate patterns and "!" to exclude. e.g. "ui/**, !ui/button"\nwrap the pattern with quotes'
    }]);
    (0, _defineProperty2().default)(this, "alias", 'E');
    (0, _defineProperty2().default)(this, "options", [['f', 'force', 'ignore local version. remove the components even when they are staged or modified'], ['j', 'json', 'print the results in JSON format'], ['', 'keep-files', 'keep the component files in the workspace intact']]);
    (0, _defineProperty2().default)(this, "loader", true);
    (0, _defineProperty2().default)(this, "migration", true);
    (0, _defineProperty2().default)(this, "group", 'development');
  }
  async report([pattern], {
    force = false,
    json = false,
    keepFiles = false
  }) {
    if (!this.workspace) throw new (_exceptions().ConsumerNotFound)();
    const componentIds = await this.workspace.idsByPattern(pattern);
    const componentEjector = new (_componentsEjector().ComponentsEjector)(this.workspace, this.install, this.logger, componentIds, {
      force,
      keepFiles
    });
    const ejectResults = await componentEjector.eject();
    if (json) return JSON.stringify(ejectResults, null, 2);
    return (0, _ejectTemplate().default)(ejectResults);
  }
}
exports.EjectCmd = EjectCmd;

//# sourceMappingURL=eject-cmd.js.map