/**
 * a classic use case of eject is when a user imports a component using `bit import` to update it,
 * but the user has no intention to have the code as part of the project source code.
 * the eject provides the option to delete the component locally and install it via the NPM client.
 *
 * an implementation note, the entire process is done with rollback in mind.
 * since installing the component via NPM client is an error prone process, we do it first, before
 * removing the component files, so then it's easier to rollback.
 */
import { Workspace } from '@teambit/workspace';
import { Consumer } from '@teambit/legacy/dist/consumer';
import { BitIds } from '@teambit/legacy/dist/bit-id';
import Component from '@teambit/legacy/dist/consumer/component/consumer-component';
import PackageJsonFile from '@teambit/legacy/dist/consumer/component/package-json-file';
import { Logger } from '@teambit/logger';
import { ComponentID } from '@teambit/component-id';
import { InstallMain } from '@teambit/install';
export declare type EjectResults = {
    ejectedComponents: BitIds;
    failedComponents: FailedComponents;
};
export declare type EjectOptions = {
    force: boolean;
    keepFiles: boolean;
};
declare type FailedComponents = {
    modifiedComponents: BitIds;
    stagedComponents: BitIds;
    notExportedComponents: BitIds;
    selfHostedExportedComponents: BitIds;
};
export declare class ComponentsEjector {
    private workspace;
    private install;
    private logger;
    private componentsIds;
    private ejectOptions;
    consumer: Consumer;
    idsToEject: BitIds;
    componentsToEject: Component[];
    notEjectedDependents: Array<{
        dependent: Component;
        ejectedDependencies: Component[];
    }>;
    failedComponents: FailedComponents;
    packageJsonFilesBeforeChanges: PackageJsonFile[];
    constructor(workspace: Workspace, install: InstallMain, logger: Logger, componentsIds: ComponentID[], ejectOptions: EjectOptions);
    eject(): Promise<EjectResults>;
    decideWhichComponentsToEject(): Promise<void>;
    loadComponentsToEject(): Promise<void>;
    removeComponentsFromNodeModules(): Promise<void>;
    installPackages(): Promise<void>;
    getPackagesToInstall(): string[];
    _buildExceptionMessageWithRollbackData(action: string): string;
    /**
     * as part of the 'eject' operation, a component is removed locally. as opposed to the remove
     * command, in this case, no need to remove the objects from the scope, only remove from the
     * filesystem, which means, delete the component files, untrack from .bitmap and clean
     * package.json and bit.json traces.
     */
    private removeComponentsFiles;
    private untrackComponents;
    throwEjectError(message: string, originalError: Error): void;
    _validateIdsHaveScopesAndVersions(): void;
}
export {};
