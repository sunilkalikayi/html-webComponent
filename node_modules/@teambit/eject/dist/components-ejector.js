"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ComponentsEjector = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _bitId() {
  const data = require("@teambit/legacy/dist/bit-id");
  _bitId = function () {
    return data;
  };
  return data;
}
function _defaultErrorHandler() {
  const data = _interopRequireDefault(require("@teambit/legacy/dist/cli/default-error-handler"));
  _defaultErrorHandler = function () {
    return data;
  };
  return data;
}
function _scopeRemotes() {
  const data = require("@teambit/legacy/dist/scope/scope-remotes");
  _scopeRemotes = function () {
    return data;
  };
  return data;
}
function _componentIdToPackageName() {
  const data = _interopRequireDefault(require("@teambit/legacy/dist/utils/bit/component-id-to-package-name"));
  _componentIdToPackageName = function () {
    return data;
  };
  return data;
}
function packageJsonUtils() {
  const data = _interopRequireWildcard(require("@teambit/legacy/dist/consumer/component/package-json-utils"));
  packageJsonUtils = function () {
    return data;
  };
  return data;
}
function _dataToPersist() {
  const data = _interopRequireDefault(require("@teambit/legacy/dist/consumer/component/sources/data-to-persist"));
  _dataToPersist = function () {
    return data;
  };
  return data;
}
function _removePath() {
  const data = _interopRequireDefault(require("@teambit/legacy/dist/consumer/component/sources/remove-path"));
  _removePath = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * a classic use case of eject is when a user imports a component using `bit import` to update it,
 * but the user has no intention to have the code as part of the project source code.
 * the eject provides the option to delete the component locally and install it via the NPM client.
 *
 * an implementation note, the entire process is done with rollback in mind.
 * since installing the component via NPM client is an error prone process, we do it first, before
 * removing the component files, so then it's easier to rollback.
 */

class ComponentsEjector {
  // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!

  // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
  // for rollback in case of errors
  constructor(workspace, install, logger, componentsIds, ejectOptions) {
    this.workspace = workspace;
    this.install = install;
    this.logger = logger;
    this.componentsIds = componentsIds;
    this.ejectOptions = ejectOptions;
    (0, _defineProperty2().default)(this, "consumer", void 0);
    (0, _defineProperty2().default)(this, "idsToEject", void 0);
    (0, _defineProperty2().default)(this, "componentsToEject", []);
    (0, _defineProperty2().default)(this, "notEjectedDependents", void 0);
    (0, _defineProperty2().default)(this, "failedComponents", void 0);
    (0, _defineProperty2().default)(this, "packageJsonFilesBeforeChanges", void 0);
    this.consumer = this.workspace.consumer;
    this.idsToEject = new (_bitId().BitIds)();
    this.failedComponents = {
      modifiedComponents: new (_bitId().BitIds)(),
      stagedComponents: new (_bitId().BitIds)(),
      notExportedComponents: new (_bitId().BitIds)(),
      selfHostedExportedComponents: new (_bitId().BitIds)()
    };
  }
  async eject() {
    await this.decideWhichComponentsToEject();
    this.logger.debug(`${this.idsToEject.length} to eject`);
    await this.loadComponentsToEject();
    if (this.idsToEject.length) {
      this._validateIdsHaveScopesAndVersions();
      await this.removeComponentsFromNodeModules();
      await this.untrackComponents();
      await this.installPackages();
      await this.removeComponentsFiles();
      await this.consumer.writeBitMap();
    }
    this.logger.debug('eject: completed successfully');
    return {
      ejectedComponents: this.idsToEject,
      failedComponents: this.failedComponents
    };
  }
  async decideWhichComponentsToEject() {
    this.logger.setStatusLine('Eject: getting the components status');
    if (!this.componentsIds.length) return;
    const remotes = await (0, _scopeRemotes().getScopeRemotes)(this.consumer.scope);
    const hubExportedComponents = new (_bitId().BitIds)();
    this.componentsIds.forEach(componentId => {
      const bitId = componentId._legacy;
      if (!bitId.hasScope()) this.failedComponents.notExportedComponents.push(bitId);else if (remotes.isHub(bitId.scope)) hubExportedComponents.push(bitId);else this.failedComponents.selfHostedExportedComponents.push(bitId);
    });
    if (this.ejectOptions.force) {
      this.idsToEject = hubExportedComponents;
    } else {
      await Promise.all(hubExportedComponents.map(async id => {
        try {
          const componentStatus = await this.consumer.getComponentStatusById(id);
          if (componentStatus.modified) this.failedComponents.modifiedComponents.push(id);else if (componentStatus.staged) this.failedComponents.stagedComponents.push(id);else this.idsToEject.push(id);
        } catch (err) {
          this.throwEjectError(`eject operation failed getting the status of ${id.toString()}, no action has been done.
            please fix the issue to continue.`, err);
        }
      }));
    }
    this.logger.consoleSuccess();
  }
  async loadComponentsToEject() {
    const {
      components
    } = await this.consumer.loadComponents(this.idsToEject);
    this.componentsToEject = components;
  }
  async removeComponentsFromNodeModules() {
    const action = 'Eject: removing the existing components from node_modules';
    this.logger.setStatusLine(action);
    this.logger.debug(action);
    await packageJsonUtils().removeComponentsFromNodeModules(this.consumer, this.componentsToEject);
    this.logger.consoleSuccess(action);
  }
  async installPackages() {
    this.logger.setStatusLine('Eject: installing packages using the package-manager');
    const packages = this.getPackagesToInstall();
    await this.install.install(packages);
  }
  getPackagesToInstall() {
    return this.componentsToEject.map(c => (0, _componentIdToPackageName().default)(c));
  }
  _buildExceptionMessageWithRollbackData(action) {
    return `eject failed ${action}.
your package.json (if existed) has been restored, however, some bit generated data may have been deleted, please run "bit link" to restore them.`;
  }

  /**
   * as part of the 'eject' operation, a component is removed locally. as opposed to the remove
   * command, in this case, no need to remove the objects from the scope, only remove from the
   * filesystem, which means, delete the component files, untrack from .bitmap and clean
   * package.json and bit.json traces.
   */
  async removeComponentsFiles() {
    if (this.ejectOptions.keepFiles) {
      return;
    }
    this.logger.setStatusLine('Eject: removing the components files from the filesystem');
    const dataToPersist = new (_dataToPersist().default)();
    this.componentsToEject.forEach(component => {
      const componentMap = component.componentMap;
      if (!componentMap) {
        throw new Error('ComponentEjector.removeComponentsFiles expect a component to have componentMap prop');
      }
      const rootDir = componentMap.rootDir;
      if (!rootDir) {
        throw new Error('ComponentEjector.removeComponentsFiles expect a componentMap to have rootDir');
      }
      dataToPersist.removePath(new (_removePath().default)(rootDir, true));
    });
    dataToPersist.addBasePath(this.consumer.getPath());
    await dataToPersist.persistAllToFS();
    this.logger.consoleSuccess();
  }
  async untrackComponents() {
    this.logger.debug('eject: removing the components from the .bitmap');
    await this.consumer.cleanFromBitMap(this.idsToEject);
  }
  throwEjectError(message, originalError) {
    const {
      message: originalErrorMessage
    } = (0, _defaultErrorHandler().default)(originalError);
    this.logger.error(`eject has stopped due to an error ${originalErrorMessage}`, originalError);
    throw new Error(`${message}

got the following error: ${originalErrorMessage}`);
  }
  _validateIdsHaveScopesAndVersions() {
    this.idsToEject.forEach(id => {
      if (!id.hasScope() || !id.hasVersion()) {
        throw new TypeError(`EjectComponents expects ids with scope and version, got ${id.toString()}`);
      }
    });
  }
}
exports.ComponentsEjector = ComponentsEjector;

//# sourceMappingURL=components-ejector.js.map