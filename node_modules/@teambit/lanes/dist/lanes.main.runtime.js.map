{"version":3,"names":["LanesMain","constructor","workspace","scope","merging","componentAspect","logger","importer","exporter","getLanes","name","remote","merged","showDefaultLane","notMerged","showMergeData","Boolean","consumer","remoteObj","getRemoteByName","lanes","listLanes","DEFAULT_LANE","defaultLane","getLaneDataOfDefaultLane","legacyScope","getLanesData","push","getCurrentLaneName","getCurrentLaneId","getCurrentLaneNameOrAlias","currentLaneId","trackingData","getLocalTrackedLaneByRemoteName","getDefaultLaneId","LaneId","from","setCurrentLane","laneId","alias","exported","createLane","remoteScope","BitError","throwForInvalidLaneName","defaultScope","trackLaneData","localLane","remoteLane","trackLane","scopeJson","setLaneAsNew","onDestroy","localName","remoteName","parseLaneIdFromString","lane","loadLane","beforeTrackData","getRemoteTrackedDataByLocalLane","beforeTrackDataCloned","undefined","afterTrackData","aliasLane","laneName","includes","LANE_REMOTE_DELIMITER","trackData","laneNameWithoutScope","split","removeTrackLane","changeScope","remoteScopeBefore","newLaneId","saveLane","bitMap","rename","currentName","newName","existingAliasWithNewName","remoteIdStr","objects","remoteLanes","renameRefByNewLaneName","currentLaneName","isExported","isLaneExported","clonedLaneToExport","clone","components","exportErr","exportLane","err","error","id","toString","message","exportMany","laneObject","ids","BitIds","idsWithFutureScope","allVersions","importLaneObject","persistIfNotExists","scopeComponentImporter","ScopeComponentsImporter","getInstance","results","importLanes","LaneNotFound","exists","fetchLaneWithItsComponents","debug","Error","importOptions","objectsOnly","verbose","writeConfig","override","installNpmPackages","laneIds","importedIds","importWithOptions","length","removeLanes","laneNames","force","laneResults","switchLanes","merge","getAll","skipDependencyInstallation","mergeStrategy","mergeOptions","Object","keys","MergeOptions","join","switchProps","existingOnWorkspaceOnly","checkoutProps","skipNpmInstall","ignorePackageJson","ignoreDist","isLane","promptMergeOptions","reset","all","LaneSwitcher","switch","getDiff","values","diffOptions","pattern","laneDiffGenerator","LaneDiffGenerator","generate","getLaneComponentModels","laneComponents","host","getHost","laneComponentIds","Promise","map","laneComponent","legacyIdWithVersion","changeVersion","head","resolveComponentId","getMany","getLaneReadmeComponent","laneReadmeComponent","readmeComponent","laneReadmeComponentId","get","removeLaneReadme","result","readmeComponentId","existingLaneConfig","getSpecificComponentConfig","LanesAspect","remoteLaneIdStr","toLaneId","readme","removeSpecificComponentConfig","addSpecificComponentConfig","setReadmeComponent","write","addLaneReadme","readmeComponentIdStr","readmeComponentBitId","_legacy","bitIds","scopeComponents","list","filter","component","getIdsOfDefaultLane","bitId","version","isMerged","hash","provider","cli","graphql","community","loggerMain","createLogger","lanesMain","switchCmd","SwitchCmd","laneCmd","LaneCmd","getDocsDomain","commands","LaneListCmd","LaneShowCmd","LaneCreateCmd","LaneRemoveCmd","LaneChangeScopeCmd","LaneAliasCmd","LaneRenameCmd","LaneDiffCmd","LaneAddReadmeCmd","LaneRemoveReadmeCmd","LaneImportCmd","register","lanesSchema","CLIAspect","ScopeAspect","WorkspaceAspect","GraphqlAspect","CommunityAspect","MergingAspect","ComponentAspect","LoggerAspect","ImporterAspect","ExportAspect","MainRuntime","addRuntime"],"sources":["lanes.main.runtime.ts"],"sourcesContent":["import { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport { ScopeMain, ScopeAspect } from '@teambit/scope';\nimport { GraphqlAspect, GraphqlMain } from '@teambit/graphql';\nimport { Workspace, WorkspaceAspect } from '@teambit/workspace';\nimport getRemoteByName from '@teambit/legacy/dist/remotes/get-remote-by-name';\nimport { LaneDiffCmd, LaneDiffGenerator, LaneDiffResults } from '@teambit/lanes.modules.diff';\nimport { LaneData } from '@teambit/legacy/dist/scope/lanes/lanes';\nimport { LaneId, DEFAULT_LANE, LANE_REMOTE_DELIMITER } from '@teambit/lane-id';\nimport { BitError } from '@teambit/bit-error';\nimport { Logger, LoggerAspect, LoggerMain } from '@teambit/logger';\nimport { DiffOptions } from '@teambit/legacy/dist/consumer/component-ops/components-diff';\nimport { MergeStrategy, MergeOptions } from '@teambit/legacy/dist/consumer/versions-ops/merge-version';\nimport { TrackLane } from '@teambit/legacy/dist/scope/scope-json';\nimport { ImporterAspect, ImporterMain, ImportOptions } from '@teambit/importer';\nimport { CommunityAspect } from '@teambit/community';\nimport type { CommunityMain } from '@teambit/community';\nimport ComponentAspect, { Component, ComponentMain } from '@teambit/component';\nimport removeLanes from '@teambit/legacy/dist/consumer/lanes/remove-lanes';\nimport { Lane } from '@teambit/legacy/dist/scope/models';\nimport { LaneNotFound } from '@teambit/legacy/dist/api/scope/lib/exceptions/lane-not-found';\nimport ScopeComponentsImporter from '@teambit/legacy/dist/scope/component-ops/scope-components-importer';\nimport { Scope as LegacyScope } from '@teambit/legacy/dist/scope';\nimport { BitId } from '@teambit/legacy-bit-id';\nimport { ExportAspect, ExportMain } from '@teambit/export';\nimport { BitIds } from '@teambit/legacy/dist/bit-id';\nimport { MergingMain, MergingAspect } from '@teambit/merging';\nimport { LanesAspect } from './lanes.aspect';\nimport {\n  LaneCmd,\n  LaneCreateCmd,\n  LaneImportCmd,\n  LaneListCmd,\n  LaneRemoveCmd,\n  LaneShowCmd,\n  LaneChangeScopeCmd,\n  LaneAliasCmd,\n  LaneRenameCmd,\n  LaneAddReadmeCmd,\n  LaneRemoveReadmeCmd,\n} from './lane.cmd';\nimport { lanesSchema } from './lanes.graphql';\nimport { SwitchCmd } from './switch.cmd';\nimport { LaneSwitcher } from './switch-lanes';\nimport { createLane, throwForInvalidLaneName } from './create-lane';\n\nexport { Lane };\n\nexport type LaneResults = {\n  lanes: LaneData[];\n  currentLane?: string | null;\n};\n\nexport type CreateLaneOptions = {\n  remoteScope?: string; // default to the defaultScope in workspace.jsonc\n  alias?: string; // default to the remote name\n};\n\nexport type SwitchLaneOptions = {\n  alias?: string;\n  merge?: MergeStrategy;\n  getAll?: boolean;\n  skipDependencyInstallation?: boolean;\n  verbose?: boolean;\n  override?: boolean;\n};\n\nexport class LanesMain {\n  constructor(\n    private workspace: Workspace | undefined,\n    private scope: ScopeMain,\n    private merging: MergingMain,\n    private componentAspect: ComponentMain,\n    public logger: Logger,\n    private importer: ImporterMain,\n    private exporter: ExportMain\n  ) {}\n\n  async getLanes({\n    name,\n    remote,\n    merged,\n    showDefaultLane,\n    notMerged,\n  }: {\n    name?: string;\n    remote?: string;\n    merged?: boolean;\n    showDefaultLane?: boolean;\n    notMerged?: boolean;\n  }): Promise<LaneData[]> {\n    const showMergeData = Boolean(merged || notMerged);\n    const consumer = this.workspace?.consumer;\n    if (remote) {\n      const remoteObj = await getRemoteByName(remote, consumer);\n      const lanes = await remoteObj.listLanes(name, showMergeData);\n      return lanes;\n    }\n\n    if (name === DEFAULT_LANE) {\n      const defaultLane = await this.getLaneDataOfDefaultLane();\n      return defaultLane ? [defaultLane] : [];\n    }\n\n    const lanes = await this.scope.legacyScope.lanes.getLanesData(this.scope.legacyScope, name, showMergeData);\n\n    if (showDefaultLane) {\n      const defaultLane = await this.getLaneDataOfDefaultLane();\n      if (defaultLane) lanes.push(defaultLane);\n    }\n\n    return lanes;\n  }\n\n  getCurrentLaneName(): string | null {\n    return this.getCurrentLaneId()?.name || null;\n  }\n\n  getCurrentLaneNameOrAlias(): string | null {\n    const currentLaneId = this.getCurrentLaneId();\n    if (!currentLaneId) return null;\n    const trackingData = this.scope.legacyScope.lanes.getLocalTrackedLaneByRemoteName(\n      currentLaneId.name,\n      currentLaneId.scope\n    );\n    return trackingData || currentLaneId.name;\n  }\n\n  getCurrentLaneId(): LaneId | null {\n    if (!this.workspace) return null;\n    return this.workspace.consumer.getCurrentLaneId();\n  }\n\n  getDefaultLaneId(): LaneId {\n    return LaneId.from(DEFAULT_LANE, this.scope.name);\n  }\n\n  setCurrentLane(laneId: LaneId, alias?: string, exported?: boolean) {\n    this.workspace?.consumer.setCurrentLane(laneId, exported);\n  }\n\n  async createLane(name: string, { remoteScope, alias }: CreateLaneOptions = {}): Promise<TrackLane> {\n    if (!this.workspace) {\n      throw new BitError(`unable to create a lane outside of Bit workspace`);\n    }\n    if (alias) {\n      throwForInvalidLaneName(alias);\n    }\n    const scope = remoteScope || this.workspace.defaultScope;\n    await createLane(this.workspace.consumer, name, scope);\n    const laneId = LaneId.from(name, scope);\n    this.setCurrentLane(laneId, alias, false);\n    const trackLaneData = {\n      localLane: alias || name,\n      remoteLane: name,\n      remoteScope: scope,\n    };\n    this.scope.legacyScope.lanes.trackLane(trackLaneData);\n    this.scope.legacyScope.scopeJson.setLaneAsNew(name);\n    await this.workspace.consumer.onDestroy();\n\n    return trackLaneData;\n  }\n\n  async trackLane(\n    localName: string,\n    remoteScope: string,\n    remoteName?: string\n  ): Promise<{ beforeTrackData?: TrackLane; afterTrackData: TrackLane }> {\n    if (!this.workspace) {\n      throw new BitError(`unable to track a lane outside of Bit workspace`);\n    }\n    const laneId = await this.scope.legacyScope.lanes.parseLaneIdFromString(localName);\n    const lane = await this.scope.legacyScope.lanes.loadLane(laneId);\n    if (!lane) {\n      throw new BitError(`unable to find a local lane \"${localName}\"`);\n    }\n    const beforeTrackData = this.scope.legacyScope.lanes.getRemoteTrackedDataByLocalLane(localName);\n    const beforeTrackDataCloned = beforeTrackData ? { ...beforeTrackData } : undefined;\n    const afterTrackData = {\n      localLane: localName,\n      remoteLane: remoteName || beforeTrackData?.remoteLane || localName,\n      remoteScope,\n    };\n    this.scope.legacyScope.lanes.trackLane(afterTrackData);\n    await this.workspace.consumer.onDestroy();\n\n    return { beforeTrackData: beforeTrackDataCloned, afterTrackData };\n  }\n\n  async aliasLane(laneName: string, alias: string): Promise<{ laneId: LaneId }> {\n    if (!this.workspace) {\n      throw new BitError(`unable to alias a lane outside of Bit workspace`);\n    }\n    if (alias.includes(LANE_REMOTE_DELIMITER)) {\n      throw new BitError(`an alias cannot include a delimiter \"${LANE_REMOTE_DELIMITER}\"`);\n    }\n    if (alias === laneName) {\n      throw new BitError(`an alias cannot be the same as the lane name`);\n    }\n    const laneId = await this.scope.legacyScope.lanes.parseLaneIdFromString(laneName);\n    const lane = await this.scope.legacyScope.lanes.loadLane(laneId);\n    if (!lane) {\n      throw new BitError(`unable to find a local lane \"${laneName}\"`);\n    }\n    const trackData = {\n      localLane: alias,\n      remoteLane: laneId.name,\n      remoteScope: laneId.scope,\n    };\n    const laneNameWithoutScope = laneName.includes(LANE_REMOTE_DELIMITER)\n      ? laneName.split(LANE_REMOTE_DELIMITER)[1]\n      : laneName;\n    this.scope.legacyScope.lanes.removeTrackLane(laneNameWithoutScope);\n    this.scope.legacyScope.lanes.trackLane(trackData);\n    await this.workspace.consumer.onDestroy();\n\n    return { laneId };\n  }\n\n  async changeScope(laneName: string, remoteScope: string): Promise<{ remoteScopeBefore: string }> {\n    if (!this.workspace) {\n      throw new BitError(`unable to change-scope of a lane outside of Bit workspace`);\n    }\n    const laneNameWithoutScope = laneName.includes(LANE_REMOTE_DELIMITER)\n      ? laneName.split(LANE_REMOTE_DELIMITER)[1]\n      : laneName;\n    const laneId = await this.scope.legacyScope.lanes.parseLaneIdFromString(laneName);\n    const lane = await this.scope.legacyScope.lanes.loadLane(laneId);\n    if (!lane) {\n      throw new BitError(`unable to find a local lane \"${laneName}\"`);\n    }\n    const remoteScopeBefore = lane.scope;\n    lane.scope = remoteScope;\n    const newLaneId = LaneId.from(laneId.name, remoteScope);\n    const trackData = {\n      localLane: laneNameWithoutScope,\n      remoteLane: laneId.name,\n      remoteScope,\n    };\n    this.scope.legacyScope.lanes.trackLane(trackData);\n    await this.scope.legacyScope.lanes.saveLane(lane);\n    this.workspace.consumer.bitMap.setCurrentLane(newLaneId, false);\n    await this.workspace.consumer.onDestroy();\n\n    return { remoteScopeBefore };\n  }\n\n  /**\n   * change a lane-name and if possible, export the lane to the remote\n   */\n  async rename(currentName: string, newName: string): Promise<{ exported: boolean; exportErr?: Error }> {\n    if (!this.workspace) {\n      throw new BitError(`unable to rename a lane outside of Bit workspace`);\n    }\n    throwForInvalidLaneName(newName);\n    const existingAliasWithNewName = this.scope.legacyScope.lanes.getRemoteTrackedDataByLocalLane(newName);\n    if (existingAliasWithNewName) {\n      const remoteIdStr = `${existingAliasWithNewName.remoteLane}/${existingAliasWithNewName.remoteScope}`;\n      throw new BitError(`unable to rename to ${newName}. this name is already used to track: ${remoteIdStr}`);\n    }\n    const laneNameWithoutScope = currentName.includes(LANE_REMOTE_DELIMITER)\n      ? currentName.split(LANE_REMOTE_DELIMITER)[1]\n      : currentName;\n    const laneId = await this.scope.legacyScope.lanes.parseLaneIdFromString(currentName);\n    const lane = await this.scope.legacyScope.lanes.loadLane(laneId);\n    if (!lane) {\n      throw new BitError(`unable to find a local lane \"${currentName}\"`);\n    }\n\n    // rename the ref file\n    await this.scope.legacyScope.objects.remoteLanes.renameRefByNewLaneName(laneNameWithoutScope, newName, lane.scope);\n\n    // change tracking data\n    const afterTrackData = {\n      localLane: newName,\n      remoteLane: newName,\n      remoteScope: lane.scope,\n    };\n    this.scope.legacyScope.lanes.trackLane(afterTrackData);\n    this.scope.legacyScope.lanes.removeTrackLane(laneNameWithoutScope);\n\n    // change the lane object\n    lane.name = newName;\n    await this.scope.legacyScope.lanes.saveLane(lane);\n\n    // change current-lane if needed\n    const currentLaneName = this.getCurrentLaneName();\n    if (currentLaneName === laneNameWithoutScope) {\n      const newLaneId = LaneId.from(newName, lane.scope);\n      const isExported = this.workspace.consumer.bitMap.isLaneExported;\n      this.setCurrentLane(newLaneId, undefined, isExported);\n    }\n\n    // export the lane with only the name-change\n    const clonedLaneToExport = lane.clone();\n    clonedLaneToExport.components = []; // otherwise, it'll export the changes done on the components.\n    let exported = false;\n    let exportErr: Error | undefined;\n    try {\n      await this.exportLane(clonedLaneToExport);\n      exported = true;\n    } catch (err: any) {\n      this.logger.error(`unable to export ${lane.id.toString()}: ${err.message}`);\n      exportErr = err;\n    }\n\n    await this.workspace.consumer.onDestroy();\n\n    return { exported, exportErr };\n  }\n\n  async exportLane(lane: Lane) {\n    await this.exporter.exportMany({\n      scope: this.scope.legacyScope,\n      laneObject: lane,\n      ids: new BitIds(),\n      idsWithFutureScope: new BitIds(),\n      allVersions: false,\n    });\n  }\n\n  /**\n   * get a Lane object from the remote.\n   * `persistIfNotExists` saves the object in the local scope only if the lane is not there yet.\n   * otherwise, it needs some merging mechanism, which is done differently whether it's export or import.\n   * see `sources.mergeLane()` for export and `import-components._saveLaneDataIfNeeded()` for import.\n   * in this case, because we only bring the lane object and not the components, it's not easy to do the merge.\n   */\n  async importLaneObject(laneId: LaneId, persistIfNotExists = true): Promise<Lane> {\n    const legacyScope = this.scope.legacyScope;\n    const scopeComponentImporter = ScopeComponentsImporter.getInstance(legacyScope);\n    const results = await scopeComponentImporter.importLanes([laneId]);\n    const laneObject = results[0];\n    if (!laneObject) throw new LaneNotFound(laneId.scope, laneId.name);\n\n    if (persistIfNotExists) {\n      const exists = await legacyScope.loadLane(laneId);\n      if (!exists) {\n        await legacyScope.lanes.saveLane(laneObject);\n      }\n    }\n\n    return laneObject;\n  }\n\n  /**\n   * fetch the lane object and its components from the remote.\n   * save the objects to the local scope.\n   * this method doesn't change anything in the workspace.\n   */\n  async fetchLaneWithItsComponents(laneId: LaneId): Promise<Lane> {\n    this.logger.debug(`fetching lane ${laneId.toString()}`);\n    if (!this.workspace) {\n      throw new BitError('unable to fetch lanes outside of Bit workspace');\n    }\n    const lane = await this.importLaneObject(laneId);\n    if (!lane) throw new Error(`unable to import lane ${laneId.toString()} from the remote`);\n    const importOptions: ImportOptions = {\n      ids: [],\n      objectsOnly: true,\n      verbose: false,\n      writeConfig: false,\n      override: false,\n      installNpmPackages: false,\n      lanes: { laneIds: [laneId], lanes: [lane] },\n    };\n    const { importedIds } = await this.importer.importWithOptions(importOptions);\n    this.logger.debug(`fetching lane ${laneId.toString()} done, fetched ${importedIds.length} components`);\n    return lane;\n  }\n\n  async removeLanes(laneNames: string[], { remote, force }: { remote: boolean; force: boolean }): Promise<string[]> {\n    const results = await removeLanes(this.workspace?.consumer, laneNames, remote, force);\n    if (this.workspace) await this.workspace.consumer.onDestroy();\n\n    return results.laneResults;\n  }\n\n  /**\n   * switch to a different local or remote lane.\n   * switching to a remote lane also imports and writes the components of that remote lane.\n   * by default, only the components existing on the workspace will be imported from that lane, unless the \"getAll\"\n   * flag is true.\n   */\n  async switchLanes(\n    laneName: string,\n    { alias, merge, getAll = false, skipDependencyInstallation = false }: SwitchLaneOptions\n  ) {\n    if (!this.workspace) {\n      throw new BitError(`unable to switch lanes outside of Bit workspace`);\n    }\n    let mergeStrategy;\n    if (merge && typeof merge === 'string') {\n      const mergeOptions = Object.keys(MergeOptions);\n      if (!mergeOptions.includes(merge)) {\n        throw new BitError(`merge must be one of the following: ${mergeOptions.join(', ')}`);\n      }\n      mergeStrategy = merge;\n    }\n    if (alias) {\n      throwForInvalidLaneName(alias);\n    }\n\n    const switchProps = {\n      laneName,\n      existingOnWorkspaceOnly: !getAll,\n      alias,\n    };\n    const checkoutProps = {\n      mergeStrategy,\n      skipNpmInstall: skipDependencyInstallation,\n      verbose: false, // not relevant in Harmony\n      ignorePackageJson: true, // not relevant in Harmony\n      ignoreDist: true, // not relevant in Harmony\n      isLane: true,\n      promptMergeOptions: false,\n      writeConfig: false,\n      reset: false,\n      all: false,\n    };\n    return new LaneSwitcher(this.workspace, this.logger, switchProps, checkoutProps, this).switch();\n  }\n\n  /**\n   * the values array may include zero to two values and will be processed as following:\n   * [] => diff between the current lane and default lane. (only inside workspace).\n   * [to] => diff between the current lane (or default-lane when in scope) and \"to\" lane.\n   * [from, to] => diff between \"from\" lane and \"to\" lane.\n   */\n  public async getDiff(values: string[], diffOptions: DiffOptions = {}, pattern?: string): Promise<LaneDiffResults> {\n    const laneDiffGenerator = new LaneDiffGenerator(this.workspace, this.scope);\n    return laneDiffGenerator.generate(values, diffOptions, pattern);\n  }\n\n  async getLaneComponentModels(lane: LaneData): Promise<Component[]> {\n    if (!lane) return [];\n\n    const laneComponents = lane.components;\n    const host = this.componentAspect.getHost();\n    const laneComponentIds = await Promise.all(\n      laneComponents.map((laneComponent) => {\n        const legacyIdWithVersion = laneComponent.id.changeVersion(laneComponent.head);\n        return host.resolveComponentId(legacyIdWithVersion);\n      })\n    );\n    const components = await host.getMany(laneComponentIds);\n    return components;\n  }\n\n  async getLaneReadmeComponent(lane: LaneData): Promise<Component | undefined> {\n    if (!lane) return undefined;\n    const laneReadmeComponent = lane.readmeComponent;\n    if (!laneReadmeComponent) return undefined;\n    const host = this.componentAspect.getHost();\n    const laneReadmeComponentId = await host.resolveComponentId(\n      laneReadmeComponent.id.changeVersion(laneReadmeComponent.head)\n    );\n    const readmeComponent = await host.get(laneReadmeComponentId);\n    return readmeComponent;\n  }\n\n  async removeLaneReadme(laneName?: string): Promise<{ result: boolean; message?: string }> {\n    if (!this.workspace) {\n      throw new BitError('unable to remove the lane readme component outside of Bit workspace');\n    }\n    const currentLaneName = this.getCurrentLaneName();\n\n    if (!laneName && !currentLaneName) {\n      return {\n        result: false,\n        message: 'unable to remove the lane readme component. Either pass a laneName or switch to a lane',\n      };\n    }\n\n    const scope: LegacyScope = this.workspace.scope.legacyScope;\n    const laneId: LaneId = laneName\n      ? await scope.lanes.parseLaneIdFromString(laneName)\n      : (this.getCurrentLaneId() as LaneId);\n    const lane: Lane | null | undefined = await scope.loadLane(laneId);\n\n    if (!lane?.readmeComponent) {\n      throw new BitError(`there is no readme component added to the lane ${laneName || currentLaneName}`);\n    }\n\n    const readmeComponentId = await this.workspace.resolveComponentId(lane.readmeComponent.id);\n    const existingLaneConfig =\n      (await this.workspace.getSpecificComponentConfig(readmeComponentId, LanesAspect.id)) || {};\n\n    const remoteLaneIdStr = lane.toLaneId().toString();\n\n    if (existingLaneConfig.readme) {\n      delete existingLaneConfig.readme[remoteLaneIdStr];\n      await this.workspace.removeSpecificComponentConfig(readmeComponentId, LanesAspect.id, false);\n      await this.workspace.addSpecificComponentConfig(readmeComponentId, LanesAspect.id, existingLaneConfig);\n    }\n\n    lane.setReadmeComponent(undefined);\n    await scope.lanes.saveLane(lane);\n    await this.workspace.bitMap.write();\n\n    return { result: true };\n  }\n\n  async addLaneReadme(readmeComponentIdStr: string, laneName?: string): Promise<{ result: boolean; message?: string }> {\n    if (!this.workspace) {\n      throw new BitError(`unable to track a lane readme component outside of Bit workspace`);\n    }\n    const readmeComponentId = await this.workspace.resolveComponentId(readmeComponentIdStr);\n\n    const readmeComponentBitId = readmeComponentId._legacy;\n    const scope: LegacyScope = this.workspace.scope.legacyScope;\n    const laneId: LaneId = laneName\n      ? await scope.lanes.parseLaneIdFromString(laneName)\n      : (this.getCurrentLaneId() as LaneId);\n\n    const lane: Lane | null | undefined = await scope.loadLane(laneId);\n\n    if (!lane) {\n      return { result: false, message: `cannot find lane ${laneName}` };\n    }\n\n    lane.setReadmeComponent(readmeComponentBitId);\n    await scope.lanes.saveLane(lane);\n\n    const existingLaneConfig =\n      (await this.workspace.getSpecificComponentConfig(readmeComponentId, LanesAspect.id)) || {};\n\n    const remoteLaneIdStr = lane.toLaneId().toString();\n\n    if (existingLaneConfig.readme) {\n      await this.workspace.addSpecificComponentConfig(readmeComponentId, LanesAspect.id, {\n        ...existingLaneConfig,\n        readme: {\n          ...existingLaneConfig.readme,\n          [remoteLaneIdStr]: true,\n        },\n      });\n    } else {\n      await this.workspace.addSpecificComponentConfig(readmeComponentId, LanesAspect.id, {\n        ...existingLaneConfig,\n        readme: {\n          [remoteLaneIdStr]: true,\n        },\n      });\n    }\n    await this.workspace.bitMap.write();\n    return { result: true };\n  }\n\n  private async getLaneDataOfDefaultLane(): Promise<LaneData | null> {\n    const consumer = this.workspace?.consumer;\n    let bitIds: BitId[] = [];\n    if (!consumer) {\n      const scopeComponents = await this.scope.list();\n      bitIds = scopeComponents.filter((component) => component.head).map((component) => component.id._legacy);\n    } else {\n      bitIds = await consumer.getIdsOfDefaultLane();\n    }\n\n    return {\n      name: DEFAULT_LANE,\n      remote: null,\n      id: this.getDefaultLaneId(),\n      components: bitIds.map((bitId) => ({ id: bitId, head: bitId.version as string })),\n      isMerged: null,\n      hash: '',\n    };\n  }\n\n  static slots = [];\n  static dependencies = [\n    CLIAspect,\n    ScopeAspect,\n    WorkspaceAspect,\n    GraphqlAspect,\n    CommunityAspect,\n    MergingAspect,\n    ComponentAspect,\n    LoggerAspect,\n    ImporterAspect,\n    ExportAspect,\n  ];\n  static runtime = MainRuntime;\n  static async provider([\n    cli,\n    scope,\n    workspace,\n    graphql,\n    community,\n    merging,\n    component,\n    loggerMain,\n    importer,\n    exporter,\n  ]: [\n    CLIMain,\n    ScopeMain,\n    Workspace,\n    GraphqlMain,\n    CommunityMain,\n    MergingMain,\n    ComponentMain,\n    LoggerMain,\n    ImporterMain,\n    ExportMain\n  ]) {\n    const logger = loggerMain.createLogger(LanesAspect.id);\n    const lanesMain = new LanesMain(workspace, scope, merging, component, logger, importer, exporter);\n    const switchCmd = new SwitchCmd(lanesMain);\n    const laneCmd = new LaneCmd(lanesMain, workspace, scope, community.getDocsDomain());\n    laneCmd.commands = [\n      new LaneListCmd(lanesMain, workspace, scope),\n      switchCmd,\n      new LaneShowCmd(lanesMain, workspace, scope),\n      new LaneCreateCmd(lanesMain),\n      new LaneRemoveCmd(lanesMain),\n      new LaneChangeScopeCmd(lanesMain),\n      new LaneAliasCmd(lanesMain),\n      new LaneRenameCmd(lanesMain),\n      new LaneDiffCmd(workspace, scope),\n      new LaneAddReadmeCmd(lanesMain),\n      new LaneRemoveReadmeCmd(lanesMain),\n      new LaneImportCmd(switchCmd),\n    ];\n    cli.register(laneCmd, switchCmd);\n    graphql.register(lanesSchema(lanesMain));\n    return lanesMain;\n  }\n}\n\nLanesAspect.addRuntime(LanesMain);\n\nexport default LanesMain;\n"],"mappings":"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"}