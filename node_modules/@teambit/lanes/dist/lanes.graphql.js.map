{"version":3,"names":["lanesSchema","lanesMainRuntime","typeDefs","gql","resolvers","Lanes","id","list","lanesMain","ids","limit","offset","lanes","length","getLanes","showDefaultLane","flatten","Promise","all","map","name","LaneId","parse","slice","current","currentLaneName","getCurrentLaneName","undefined","currentLane","diff","from","to","options","getDiffResults","getDiff","compsWithDiff","item","toString","Lane","lane","toObject","components","laneComponents","getLaneComponentModels","readmeComponent","laneReadmeComponent","getLaneReadmeComponent","Query"],"sources":["lanes.graphql.ts"],"sourcesContent":["import { Schema } from '@teambit/graphql';\nimport { LaneId } from '@teambit/lane-id';\nimport { LaneData } from '@teambit/legacy/dist/scope/lanes/lanes';\nimport gql from 'graphql-tag';\nimport { flatten, slice } from 'lodash';\n\nimport { LanesMain } from './lanes.main.runtime';\n\nexport function lanesSchema(lanesMainRuntime: LanesMain): Schema {\n  return {\n    typeDefs: gql`\n      type FileDiff {\n        filePath: String!\n        diffOutput: String\n      }\n\n      type FieldsDiff {\n        fieldName: String!\n        diffOutput: String\n      }\n\n      type DiffResults {\n        id: String\n        hasDiff: Boolean\n        filesDiff: [FileDiff]\n        fieldsDiff: [FieldsDiff]\n      }\n\n      type GetDiffResult {\n        newComps: [String]\n        compsWithNoChanges: [String]\n        toLaneName: String\n        compsWithDiff: [DiffResults]\n      }\n\n      input DiffOptions {\n        color: Boolean\n      }\n\n      type LaneId {\n        name: String!\n        scope: String!\n      }\n\n      type Lane {\n        id: LaneId!\n        hash: String\n        components(offset: Int, limit: Int): [Component!]!\n        readmeComponent: Component\n      }\n\n      # Lane API\n      type Lanes {\n        id: String!\n        list(ids: [String!], offset: Int, limit: Int): [Lane!]!\n        diff(from: String!, to: String!, options: DiffOptions): GetDiffResult\n        current: Lane\n      }\n\n      type Query {\n        lanes: Lanes\n      }\n    `,\n    resolvers: {\n      Lanes: {\n        // need this for Apollo InMemory Caching\n        id: () => 'lanes',\n        list: async (\n          lanesMain: LanesMain,\n          { ids, limit, offset }: { ids?: string[]; offset?: number; limit?: number }\n        ) => {\n          let lanes: LaneData[] = [];\n\n          if (!ids || ids.length === 0) {\n            lanes = await lanesMain.getLanes({ showDefaultLane: true });\n          } else {\n            lanes = flatten(await Promise.all(ids.map((id) => lanesMain.getLanes({ name: LaneId.parse(id).name }))));\n          }\n\n          if (limit || offset) {\n            lanes = slice(lanes, offset, limit && limit + (offset || 0));\n          }\n\n          return lanes;\n        },\n        current: async (lanesMain: LanesMain) => {\n          const currentLaneName = lanesMain.getCurrentLaneName();\n          if (!currentLaneName) return undefined;\n          const [currentLane] = await lanesMain.getLanes({ name: currentLaneName });\n          return currentLane;\n        },\n        diff: async (\n          lanesMain: LanesMain,\n          { from, to, options }: { to: string; from: string; options: { color?: boolean } }\n        ) => {\n          const getDiffResults = await lanesMain.getDiff([from, to], options);\n          return {\n            ...getDiffResults,\n            compsWithDiff: getDiffResults.compsWithDiff.map((item) => ({ ...item, id: item.id.toString() })),\n          };\n        },\n      },\n      Lane: {\n        id: (lane: LaneData) => lane.id.toObject(),\n        components: async (lane: LaneData) => {\n          const laneComponents = await lanesMainRuntime.getLaneComponentModels(lane);\n          return laneComponents;\n        },\n        readmeComponent: async (lane: LaneData) => {\n          const laneReadmeComponent = await lanesMainRuntime.getLaneReadmeComponent(lane);\n          return laneReadmeComponent;\n        },\n      },\n      Query: {\n        lanes: () => lanesMainRuntime,\n      },\n    },\n  };\n}\n"],"mappings":"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"}