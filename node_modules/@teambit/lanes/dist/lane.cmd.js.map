{"version":3,"names":["LaneListCmd","constructor","lanes","workspace","scope","report","args","laneOptions","details","remote","merged","notMerged","laneIdStr","laneId","alias","isDefault","name","toString","getLanes","showDefaultLane","mergedLanes","filter","l","isMerged","length","chalk","green","map","m","join","unmergedLanes","currentLane","getCurrentLaneId","getDefaultLaneId","laneDataOfCurrentLane","find","isEqual","id","undefined","currentAlias","currentLaneReadmeComponentStr","outputReadmeComponent","readmeComponent","currentLaneStr","currentLaneComponents","outputComponents","components","availableLanes","laneData","readmeComponentStr","laneTitle","bold","concat","outputFooter","footer","outputCurrentLane","outputAvailableLanes","json","getCurrentLaneNameOrAlias","LaneShowCmd","onlyLane","title","author","log","username","email","date","Date","parseInt","toLocaleString","LaneCreateCmd","description","createLaneOptions","result","createLane","remoteScopeOrDefaultScope","remoteScope","localLane","remoteScopeOutput","LaneAliasCmd","laneName","aliasLane","LaneChangeScopeCmd","localName","remoteScopeBefore","changeScope","LaneRenameCmd","currentName","newName","exported","exportErr","rename","exportedStr","message","LaneRemoveCmd","names","force","silent","removePromptResult","approveOperation","yn","shouldProceed","BitError","laneResults","removeLanes","LaneImportCmd","switchCmd","lane","skipDependencyInstallation","getAll","LaneCmd","docsDomain","LaneRemoveReadmeCmd","removeLaneReadme","getCurrentLaneName","red","LaneAddReadmeCmd","componentId","addLaneReadme","componentsTitle","componentsStr","c","head","component","yellow"],"sources":["lane.cmd.ts"],"sourcesContent":["// eslint-disable-next-line max-classes-per-file\nimport chalk from 'chalk';\nimport yn from 'yn';\nimport { ScopeMain } from '@teambit/scope';\nimport { LaneId } from '@teambit/lane-id';\nimport { Workspace } from '@teambit/workspace';\nimport { Command, CommandOptions } from '@teambit/cli';\nimport { LaneData } from '@teambit/legacy/dist/scope/lanes/lanes';\nimport { BitError } from '@teambit/bit-error';\nimport { approveOperation } from '@teambit/legacy/dist/prompts';\nimport { CreateLaneOptions, LanesMain } from './lanes.main.runtime';\nimport { SwitchCmd } from './switch.cmd';\n\ntype LaneOptions = {\n  details?: boolean;\n  remote?: string;\n  merged?: boolean;\n  notMerged?: boolean;\n  json?: boolean;\n};\n\nexport class LaneListCmd implements Command {\n  name = 'list';\n  description = `list lanes`;\n  alias = '';\n  options = [\n    ['d', 'details', 'show more details on the state of each component in each lane'],\n    ['j', 'json', 'show lanes details in a json format'],\n    ['r', 'remote <remote-scope-name>', 'show remote lanes'],\n    ['', 'merged', 'show merged lanes'],\n    ['', 'not-merged', 'show lanes that are not merged'],\n  ] as CommandOptions;\n  loader = true;\n  private = true;\n  migration = true;\n  remoteOp = true;\n  skipWorkspace = true;\n\n  constructor(private lanes: LanesMain, private workspace: Workspace, private scope: ScopeMain) {}\n\n  async report(args, laneOptions: LaneOptions): Promise<string> {\n    const { details, remote, merged, notMerged } = laneOptions;\n    const laneIdStr = (laneId: LaneId, alias?: string | null) => {\n      if (laneId.isDefault()) return laneId.name;\n      if (alias) return `${laneId.toString()} (${alias})`;\n      return laneId.toString();\n    };\n    const lanes = await this.lanes.getLanes({\n      remote,\n      merged,\n      notMerged,\n      showDefaultLane: true,\n    });\n    if (merged) {\n      const mergedLanes = lanes.filter((l) => l.isMerged);\n      if (!mergedLanes.length) return chalk.green('None of the lanes is merged');\n      return chalk.green(mergedLanes.map((m) => m.name).join('\\n'));\n    }\n    if (notMerged) {\n      const unmergedLanes = lanes.filter((l) => !l.isMerged);\n      if (!unmergedLanes.length) return chalk.green('All lanes are merged');\n      return chalk.green(unmergedLanes.map((m) => m.name).join('\\n'));\n    }\n    const currentLane = this.lanes.getCurrentLaneId() || this.lanes.getDefaultLaneId();\n    const laneDataOfCurrentLane = currentLane ? lanes.find((l) => currentLane.isEqual(l.id)) : undefined;\n    const currentAlias = laneDataOfCurrentLane ? laneDataOfCurrentLane.alias : undefined;\n    const currentLaneReadmeComponentStr = outputReadmeComponent(laneDataOfCurrentLane?.readmeComponent);\n    let currentLaneStr = `current lane - ${chalk.green.green(laneIdStr(currentLane, currentAlias))}`;\n    currentLaneStr += currentLaneReadmeComponentStr;\n\n    if (details) {\n      const currentLaneComponents = laneDataOfCurrentLane ? outputComponents(laneDataOfCurrentLane.components) : '';\n      if (currentLaneStr) {\n        currentLaneStr += `\\n${currentLaneComponents}`;\n      }\n    }\n\n    const availableLanes = lanes\n      .filter((l) => !currentLane.isEqual(l.id))\n      .map((laneData) => {\n        const readmeComponentStr = outputReadmeComponent(laneData.readmeComponent);\n        if (details) {\n          const laneTitle = `> ${chalk.bold(laneIdStr(laneData.id, laneData.alias))}\\n`;\n          const components = outputComponents(laneData.components);\n          return laneTitle + readmeComponentStr.concat('\\n') + components;\n        }\n        return `    > ${chalk.green(laneIdStr(laneData.id, laneData.alias))} (${\n          laneData.components.length\n        } components)${readmeComponentStr}`;\n      })\n      .join('\\n');\n\n    const outputFooter = () => {\n      let footer = '\\n';\n      if (details) {\n        footer += 'You can use --merged and --not-merged to see which of the lanes is fully merged.';\n      } else {\n        footer +=\n          \"to get more info on all lanes in workspace use 'bit lane list --details' or 'bit lane show <lane-name>' for a specific lane.\";\n      }\n      if (!remote && this.workspace) footer += `\\nswitch lanes using 'bit switch <name>'.`;\n\n      return footer;\n    };\n\n    return outputCurrentLane() + outputAvailableLanes() + outputFooter();\n\n    function outputCurrentLane() {\n      return currentLaneStr ? `${currentLaneStr}\\n` : '';\n    }\n\n    function outputAvailableLanes() {\n      if (!availableLanes) return '';\n      return remote ? `${availableLanes}\\n` : `\\nAvailable lanes:\\n${availableLanes}\\n`;\n    }\n  }\n  async json(args, laneOptions: LaneOptions) {\n    const { remote, merged = false, notMerged = false } = laneOptions;\n\n    const lanes = await this.lanes.getLanes({\n      remote,\n      showDefaultLane: true,\n      merged,\n      notMerged,\n    });\n    const currentLane = this.lanes.getCurrentLaneNameOrAlias();\n    return { lanes, currentLane };\n  }\n}\n\nexport class LaneShowCmd implements Command {\n  name = 'show <lane-name>';\n  description = `show lane details`;\n  alias = '';\n  options = [\n    ['j', 'json', 'show the lane details in json format'],\n    ['r', 'remote <string>', 'show remote lanes'],\n  ] as CommandOptions;\n  loader = true;\n  private = true;\n  migration = true;\n  remoteOp = true;\n  skipWorkspace = true;\n\n  constructor(private lanes: LanesMain, private workspace: Workspace, private scope: ScopeMain) {}\n\n  async report([name]: [string], laneOptions: LaneOptions): Promise<string> {\n    const { remote } = laneOptions;\n\n    const lanes = await this.lanes.getLanes({\n      name,\n      remote,\n    });\n\n    const onlyLane = lanes[0];\n    const title = `showing information for ${chalk.bold(onlyLane.id.toString())}\\n`;\n    const author = `author: ${onlyLane.log?.username || 'N/A'} <${onlyLane.log?.email || 'N/A'}>\\n`;\n    const date = onlyLane.log?.date ? `${new Date(parseInt(onlyLane.log.date)).toLocaleString()}\\n` : undefined;\n    return title + author + date + outputComponents(onlyLane.components);\n  }\n\n  async json([name]: [string], laneOptions: LaneOptions) {\n    const { remote } = laneOptions;\n\n    const lanes = await this.lanes.getLanes({\n      name,\n      remote,\n    });\n    return lanes[0];\n  }\n}\n\nexport class LaneCreateCmd implements Command {\n  name = 'create <lane-name>';\n  arguments = [\n    {\n      name: 'lane-name',\n      description: 'the name for the new lane',\n    },\n  ];\n  description = `creates a new lane and switches to it`;\n  extendedDescription = `a lane created from main (default-lane) is empty until components are snapped.\na lane created from another lane has all the components of the original lane.`;\n  alias = '';\n  options = [\n    [\n      '',\n      'remote-scope <scope-name>',\n      'remote scope where this lane will be exported to, default to the defaultScope (can be changed later with \"bit lane change-scope\")',\n    ],\n    [\n      '',\n      'alias <name>',\n      'a local alias to refer to this lane, defaults to the <lane-name> (can be added later with \"bit lane alias\")',\n    ],\n  ] as CommandOptions;\n  loader = true;\n  private = true;\n  migration = true;\n\n  constructor(private lanes: LanesMain) {}\n\n  async report([name]: [string], createLaneOptions: CreateLaneOptions): Promise<string> {\n    const result = await this.lanes.createLane(name, createLaneOptions);\n    const remoteScopeOrDefaultScope = createLaneOptions.remoteScope\n      ? `the remote scope ${chalk.bold(createLaneOptions.remoteScope)}`\n      : `the default-scope ${chalk.bold(result.remoteScope)}. to change it, please run \"bit lane change-scope\" command`;\n    const title = chalk.green(`successfully added and checked out to a new lane ${chalk.bold(result.localLane)}`);\n    const remoteScopeOutput = `this lane will be exported to ${remoteScopeOrDefaultScope}`;\n    return `${title}\\n${remoteScopeOutput}`;\n  }\n}\n\nexport class LaneAliasCmd implements Command {\n  name = 'alias <lane-name> <alias>';\n  description = 'adds an alias to a lane';\n  extendedDescription = `an alias is a name that can be used to refer to a lane. it is saved locally and never reach the remote.\nit is useful when having multiple lanes with the same name, but with different remote scopes.`;\n  alias = '';\n  options = [] as CommandOptions;\n  loader = true;\n  private = true;\n  migration = true;\n\n  constructor(private lanes: LanesMain) {}\n\n  async report([laneName, alias]: [string, string, string]): Promise<string> {\n    const { laneId } = await this.lanes.aliasLane(laneName, alias);\n    return `successfully added the alias ${chalk.bold(alias)} to the lane ${chalk.bold(laneId.toString())}`;\n  }\n}\n\nexport class LaneChangeScopeCmd implements Command {\n  name = 'change-scope <lane-name> <remote-scope-name>';\n  description = `changes the remote scope of a lane`;\n  alias = '';\n  options = [] as CommandOptions;\n  loader = true;\n  private = true;\n  migration = true;\n\n  constructor(private lanes: LanesMain) {}\n\n  async report([localName, remoteScope]: [string, string]): Promise<string> {\n    const { remoteScopeBefore } = await this.lanes.changeScope(localName, remoteScope);\n    return `the remote-scope of ${chalk.bold(localName)} has been changed from ${chalk.bold(\n      remoteScopeBefore\n    )} to ${chalk.bold(remoteScope)}`;\n  }\n}\n\nexport class LaneRenameCmd implements Command {\n  name = 'rename <current-name> <new-name>';\n  description = `EXPERIMENTAL. change the lane-name locally and on the remote (if exported)`;\n  alias = '';\n  options = [] as CommandOptions;\n  loader = true;\n  private = true;\n  migration = true;\n\n  constructor(private lanes: LanesMain) {}\n\n  async report([currentName, newName]: [string, string]): Promise<string> {\n    const { exported, exportErr } = await this.lanes.rename(currentName, newName);\n    const exportedStr = exported\n      ? `and have been exported successfully to the remote`\n      : `however if failed to export the renamed lane to the remote, due to an error: ${\n          exportErr?.message || 'unknown'\n        }`;\n    return `the lane ${chalk.bold(currentName)} has been changed to ${chalk.bold(newName)}, ${exportedStr}`;\n  }\n}\n\nexport class LaneRemoveCmd implements Command {\n  name = 'remove <lanes...>';\n  arguments = [{ name: 'lanes...', description: 'A list of lane names, separated by spaces' }];\n  description = `remove lanes`;\n  alias = '';\n  options = [\n    ['r', 'remote', 'remove a remote lane (in the lane arg, use remote/lane-id syntax)'],\n    ['f', 'force', 'removes the lane even when the lane was not merged yet'],\n    ['s', 'silent', 'skip confirmation'],\n  ] as CommandOptions;\n  loader = true;\n  private = true;\n  migration = true;\n\n  constructor(private lanes: LanesMain) {}\n\n  async report(\n    [names]: [string[]],\n    {\n      remote = false,\n      force = false,\n      silent = false,\n    }: {\n      remote: boolean;\n      force: boolean;\n      silent: boolean;\n    }\n  ): Promise<string> {\n    if (!silent) {\n      const removePromptResult = await approveOperation();\n      // @ts-ignore\n      if (!yn(removePromptResult.shouldProceed)) {\n        throw new BitError('the operation has been canceled');\n      }\n    }\n    const laneResults = await this.lanes.removeLanes(names, { remote, force });\n    return chalk.green(`successfully removed the following lane(s): ${chalk.bold(laneResults.join(', '))}`);\n  }\n}\n\nexport class LaneImportCmd implements Command {\n  name = 'import <lane>';\n  description = `import a remote lane to your workspace`;\n  arguments = [{ name: 'lane', description: 'the remote lane name' }];\n  alias = '';\n  options = [\n    ['', 'skip-dependency-installation', 'do not install packages of the imported components'],\n  ] as CommandOptions;\n  loader = true;\n  private = true;\n  migration = true;\n\n  constructor(private switchCmd: SwitchCmd) {}\n\n  async report(\n    [lane]: [string],\n    { skipDependencyInstallation = false }: { skipDependencyInstallation: boolean }\n  ): Promise<string> {\n    return this.switchCmd.report([lane], { getAll: true, skipDependencyInstallation });\n  }\n}\n\nexport class LaneCmd implements Command {\n  name = 'lane [lane-name]';\n  description = 'show lanes details';\n  alias = '';\n  options = [\n    ['d', 'details', 'show more details on the state of each component in each lane'],\n    ['j', 'json', 'show lanes details in json format'],\n    ['r', 'remote <string>', 'show remote lanes'],\n    ['', 'merged', 'show merged lanes'],\n    ['', 'not-merged', 'show not merged lanes'],\n  ] as CommandOptions;\n  loader = true;\n  private = true;\n  migration = true;\n  remoteOp = true;\n  skipWorkspace = true;\n  commands: Command[] = [];\n\n  constructor(private lanes: LanesMain, private workspace: Workspace, private scope: ScopeMain, docsDomain: string) {\n    this.description = `show lanes details\nhttps://${docsDomain}/components/lanes`;\n  }\n\n  async report([name]: [string], laneOptions: LaneOptions): Promise<string> {\n    return new LaneListCmd(this.lanes, this.workspace, this.scope).report([name], laneOptions);\n  }\n}\n\nexport class LaneRemoveReadmeCmd implements Command {\n  name = 'remove-readme [laneName]';\n  description = 'EXPERIMENTAL. remove lane readme component';\n  options = [] as CommandOptions;\n  loader = true;\n  private = true;\n  skipWorkspace = false;\n\n  constructor(private lanes: LanesMain) {}\n\n  async report([laneName]: [string]): Promise<string> {\n    const { result, message } = await this.lanes.removeLaneReadme(laneName);\n\n    if (result) {\n      return chalk.green(\n        `the readme component has been successfully removed from the lane ${\n          laneName || this.lanes.getCurrentLaneName()\n        }`\n      );\n    }\n\n    return chalk.red(`${message}\\n`);\n  }\n}\n\nexport class LaneAddReadmeCmd implements Command {\n  name = 'add-readme <component-name> [lane-name]';\n  description = 'EXPERIMENTAL. adds a readme component to a lane';\n  arguments = [\n    { name: 'component-id', description: \"the component name or id of the component to use as the lane's readme\" },\n    { name: 'lane-name', description: 'the lane to attach the readme to (defaults to the current lane)' },\n  ];\n  options = [] as CommandOptions;\n  loader = true;\n  private = true;\n  skipWorkspace = false;\n\n  constructor(private lanes: LanesMain) {}\n\n  async report([componentId, laneName]: [string, string]): Promise<string> {\n    const { result, message } = await this.lanes.addLaneReadme(componentId, laneName);\n\n    if (result)\n      return chalk.green(\n        `the component ${componentId} has been successfully added as the readme component for the lane ${\n          laneName || this.lanes.getCurrentLaneName()\n        }`\n      );\n\n    return chalk.red(\n      `${message || ''}\\nthe component ${componentId} could not be added as a readme component for the lane ${\n        laneName || this.lanes.getCurrentLaneName()\n      }`\n    );\n  }\n}\n\nfunction outputComponents(components: LaneData['components']): string {\n  const componentsTitle = `\\t${chalk.bold(`components (${components.length})`)}\\n`;\n  const componentsStr = components.map((c) => `\\t  ${c.id.toString()} - ${c.head}`).join('\\n');\n  return componentsTitle + componentsStr;\n}\n\nfunction outputReadmeComponent(component: LaneData['readmeComponent']): string {\n  if (!component) return '';\n  return `\\n\\t${`${chalk.yellow('readme component')}\\n\\t  ${component.id} - ${\n    component.head ||\n    `(unsnapped)\\n\\t(\"use bit snap ${component.id.name}\" to snap the readme component on the lane before exporting)`\n  }`}\\n`;\n}\n"],"mappings":"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"}