{"version":3,"names":["SwitchCmd","constructor","lanes","report","lane","alias","merge","getAll","skipDependencyInstallation","json","components","failedComponents","switchLanes","JSON","stringify","getFailureOutput","length","title","body","map","failedComponent","color","unchangedLegitimately","chalk","bold","id","toString","failureMessage","join","getSuccessfulOutput","laneSwitched","green","component","componentName","toStringWithoutVersion","version","applyVersionReport","componentsStr","failedOutput","successOutput"],"sources":["switch.cmd.ts"],"sourcesContent":["import chalk from 'chalk';\nimport { Command, CommandOptions } from '@teambit/cli';\nimport { MergeStrategy, applyVersionReport } from '@teambit/legacy/dist/consumer/versions-ops/merge-version';\nimport { LanesMain } from './lanes.main.runtime';\n\nexport class SwitchCmd implements Command {\n  name = 'switch <lane>';\n  description = `switch to the specified lane`;\n  private = true;\n  alias = '';\n  options = [\n    [\n      'n',\n      'alias <string>',\n      'relevant when the specified lane is a remote late. name a local lane differently than the remote lane',\n    ],\n    [\n      'm',\n      'merge [strategy]',\n      'merge local changes with the checked out version. strategy should be \"theirs\", \"ours\" or \"manual\"',\n    ],\n    ['a', 'get-all', 'checkout all components in a lane include ones that do not exist in the workspace'],\n    ['', 'skip-dependency-installation', 'do not install packages of the imported components'],\n    ['j', 'json', 'return the output as JSON'],\n  ] as CommandOptions;\n  loader = true;\n\n  constructor(private lanes: LanesMain) {}\n\n  async report(\n    [lane]: [string],\n    {\n      alias,\n      merge,\n      getAll = false,\n      skipDependencyInstallation = false,\n      json = false,\n    }: {\n      alias?: string;\n      merge?: MergeStrategy;\n      getAll?: boolean;\n      skipDependencyInstallation?: boolean;\n      override?: boolean;\n      json?: boolean;\n    }\n  ) {\n    const { components, failedComponents } = await this.lanes.switchLanes(lane, {\n      alias,\n      merge,\n      getAll,\n      skipDependencyInstallation,\n    });\n    if (json) {\n      return JSON.stringify({ components, failedComponents }, null, 4);\n    }\n    const getFailureOutput = () => {\n      if (!failedComponents || !failedComponents.length) return '';\n      const title = 'the switch has been canceled on the following component(s)';\n      const body = failedComponents\n        .map((failedComponent) => {\n          const color = failedComponent.unchangedLegitimately ? 'white' : 'red';\n          return `${chalk.bold(failedComponent.id.toString())} - ${chalk[color](failedComponent.failureMessage)}`;\n        })\n        .join('\\n');\n      return `${title}\\n${body}\\n\\n`;\n    };\n    const getSuccessfulOutput = () => {\n      const laneSwitched = chalk.green(`\\nsuccessfully set \"${chalk.bold(lane)}\" as the active lane`);\n      if (!components || !components.length) return `No component had been changed.${laneSwitched}`;\n      if (components.length === 1) {\n        const component = components[0];\n        const componentName = component.id.toStringWithoutVersion();\n        const title = `successfully switched ${chalk.bold(componentName)} to version ${chalk.bold(\n          component.id.version as string\n        )}\\n`;\n        return `${title} ${applyVersionReport(components, false)}${laneSwitched}`;\n      }\n      const title = `successfully switched the following components to the version of ${lane}\\n\\n`;\n      const componentsStr = applyVersionReport(components, true, false);\n      return title + componentsStr + laneSwitched;\n    };\n    const failedOutput = getFailureOutput();\n    const successOutput = getSuccessfulOutput();\n    return failedOutput + successOutput;\n  }\n}\n"],"mappings":"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"}