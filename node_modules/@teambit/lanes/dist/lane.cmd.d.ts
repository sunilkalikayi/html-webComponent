import { ScopeMain } from '@teambit/scope';
import { Workspace } from '@teambit/workspace';
import { Command, CommandOptions } from '@teambit/cli';
import { LaneData } from '@teambit/legacy/dist/scope/lanes/lanes';
import { CreateLaneOptions, LanesMain } from './lanes.main.runtime';
import { SwitchCmd } from './switch.cmd';
declare type LaneOptions = {
    details?: boolean;
    remote?: string;
    merged?: boolean;
    notMerged?: boolean;
    json?: boolean;
};
export declare class LaneListCmd implements Command {
    private lanes;
    private workspace;
    private scope;
    name: string;
    description: string;
    alias: string;
    options: CommandOptions;
    loader: boolean;
    private: boolean;
    migration: boolean;
    remoteOp: boolean;
    skipWorkspace: boolean;
    constructor(lanes: LanesMain, workspace: Workspace, scope: ScopeMain);
    report(args: any, laneOptions: LaneOptions): Promise<string>;
    json(args: any, laneOptions: LaneOptions): Promise<{
        lanes: LaneData[];
        currentLane: string | null;
    }>;
}
export declare class LaneShowCmd implements Command {
    private lanes;
    private workspace;
    private scope;
    name: string;
    description: string;
    alias: string;
    options: CommandOptions;
    loader: boolean;
    private: boolean;
    migration: boolean;
    remoteOp: boolean;
    skipWorkspace: boolean;
    constructor(lanes: LanesMain, workspace: Workspace, scope: ScopeMain);
    report([name]: [string], laneOptions: LaneOptions): Promise<string>;
    json([name]: [string], laneOptions: LaneOptions): Promise<LaneData>;
}
export declare class LaneCreateCmd implements Command {
    private lanes;
    name: string;
    arguments: {
        name: string;
        description: string;
    }[];
    description: string;
    extendedDescription: string;
    alias: string;
    options: CommandOptions;
    loader: boolean;
    private: boolean;
    migration: boolean;
    constructor(lanes: LanesMain);
    report([name]: [string], createLaneOptions: CreateLaneOptions): Promise<string>;
}
export declare class LaneAliasCmd implements Command {
    private lanes;
    name: string;
    description: string;
    extendedDescription: string;
    alias: string;
    options: CommandOptions;
    loader: boolean;
    private: boolean;
    migration: boolean;
    constructor(lanes: LanesMain);
    report([laneName, alias]: [string, string, string]): Promise<string>;
}
export declare class LaneChangeScopeCmd implements Command {
    private lanes;
    name: string;
    description: string;
    alias: string;
    options: CommandOptions;
    loader: boolean;
    private: boolean;
    migration: boolean;
    constructor(lanes: LanesMain);
    report([localName, remoteScope]: [string, string]): Promise<string>;
}
export declare class LaneRenameCmd implements Command {
    private lanes;
    name: string;
    description: string;
    alias: string;
    options: CommandOptions;
    loader: boolean;
    private: boolean;
    migration: boolean;
    constructor(lanes: LanesMain);
    report([currentName, newName]: [string, string]): Promise<string>;
}
export declare class LaneRemoveCmd implements Command {
    private lanes;
    name: string;
    arguments: {
        name: string;
        description: string;
    }[];
    description: string;
    alias: string;
    options: CommandOptions;
    loader: boolean;
    private: boolean;
    migration: boolean;
    constructor(lanes: LanesMain);
    report([names]: [string[]], { remote, force, silent, }: {
        remote: boolean;
        force: boolean;
        silent: boolean;
    }): Promise<string>;
}
export declare class LaneImportCmd implements Command {
    private switchCmd;
    name: string;
    description: string;
    arguments: {
        name: string;
        description: string;
    }[];
    alias: string;
    options: CommandOptions;
    loader: boolean;
    private: boolean;
    migration: boolean;
    constructor(switchCmd: SwitchCmd);
    report([lane]: [string], { skipDependencyInstallation }: {
        skipDependencyInstallation: boolean;
    }): Promise<string>;
}
export declare class LaneCmd implements Command {
    private lanes;
    private workspace;
    private scope;
    name: string;
    description: string;
    alias: string;
    options: CommandOptions;
    loader: boolean;
    private: boolean;
    migration: boolean;
    remoteOp: boolean;
    skipWorkspace: boolean;
    commands: Command[];
    constructor(lanes: LanesMain, workspace: Workspace, scope: ScopeMain, docsDomain: string);
    report([name]: [string], laneOptions: LaneOptions): Promise<string>;
}
export declare class LaneRemoveReadmeCmd implements Command {
    private lanes;
    name: string;
    description: string;
    options: CommandOptions;
    loader: boolean;
    private: boolean;
    skipWorkspace: boolean;
    constructor(lanes: LanesMain);
    report([laneName]: [string]): Promise<string>;
}
export declare class LaneAddReadmeCmd implements Command {
    private lanes;
    name: string;
    description: string;
    arguments: {
        name: string;
        description: string;
    }[];
    options: CommandOptions;
    loader: boolean;
    private: boolean;
    skipWorkspace: boolean;
    constructor(lanes: LanesMain);
    report([componentId, laneName]: [string, string]): Promise<string>;
}
export {};
