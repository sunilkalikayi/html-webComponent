"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.LanesUI = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _react() {
  const data = _interopRequireDefault(require("react"));
  _react = function () {
    return data;
  };
  return data;
}
function _reactRouterDom() {
  const data = require("react-router-dom");
  _reactRouterDom = function () {
    return data;
  };
  return data;
}
function _harmony() {
  const data = require("@teambit/harmony");
  _harmony = function () {
    return data;
  };
  return data;
}
function _ui() {
  const data = require("@teambit/ui");
  _ui = function () {
    return data;
  };
  return data;
}
function _lanes() {
  const data = require("@teambit/lanes");
  _lanes = function () {
    return data;
  };
  return data;
}
function _designUiPages() {
  const data = require("@teambit/design.ui.pages.not-found");
  _designUiPages = function () {
    return data;
  };
  return data;
}
function _scope() {
  const data = _interopRequireDefault(require("@teambit/scope"));
  _scope = function () {
    return data;
  };
  return data;
}
function _workspace() {
  const data = _interopRequireDefault(require("@teambit/workspace"));
  _workspace = function () {
    return data;
  };
  return data;
}
function _component() {
  const data = _interopRequireWildcard(require("@teambit/component"));
  _component = function () {
    return data;
  };
  return data;
}
function _sidebar() {
  const data = _interopRequireDefault(require("@teambit/sidebar"));
  _sidebar = function () {
    return data;
  };
  return data;
}
function _lanesUi() {
  const data = require("@teambit/lanes.ui.lane-overview");
  _lanesUi = function () {
    return data;
  };
  return data;
}
function _lanesUiMenus() {
  const data = require("@teambit/lanes.ui.menus.lanes-overview-menu");
  _lanesUiMenus = function () {
    return data;
  };
  return data;
}
function _lanesUiMenus2() {
  const data = require("@teambit/lanes.ui.menus.use-lanes-menu");
  _lanesUiMenus2 = function () {
    return data;
  };
  return data;
}
function _lanesUiModels() {
  const data = require("@teambit/lanes.ui.models.lanes-model");
  _lanesUiModels = function () {
    return data;
  };
  return data;
}
function _lanesHooks() {
  const data = require("@teambit/lanes.hooks.use-lanes");
  _lanesHooks = function () {
    return data;
  };
  return data;
}
function _lanesUiNavigation() {
  const data = require("@teambit/lanes.ui.navigation.lane-switcher");
  _lanesUiNavigation = function () {
    return data;
  };
  return data;
}
function _lanesHooks2() {
  const data = require("@teambit/lanes.hooks.use-viewed-lane-from-url");
  _lanesHooks2 = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
class LanesUI {
  constructor(componentUi, routeSlot, navSlot, menuWidgetSlot,
  /**
   * overview line slot to add new lines beneath the overview section
   */
  overviewSlot, workspace, scope) {
    this.componentUi = componentUi;
    this.routeSlot = routeSlot;
    this.navSlot = navSlot;
    this.menuWidgetSlot = menuWidgetSlot;
    this.overviewSlot = overviewSlot;
    this.workspace = workspace;
    this.scope = scope;
    (0, _defineProperty2().default)(this, "lanesHost", void 0);
    (0, _defineProperty2().default)(this, "hostAspect", void 0);
    (0, _defineProperty2().default)(this, "host", void 0);
    (0, _defineProperty2().default)(this, "getLaneComponentIdFromUrl", () => {
      const idFromLocation = (0, _component().useIdFromLocation)();
      const {
        lanesModel
      } = (0, _lanesHooks().useLanes)();
      const laneFromUrl = (0, _lanesHooks2().useViewedLaneFromUrl)();
      const laneComponentId = idFromLocation && !(laneFromUrl !== null && laneFromUrl !== void 0 && laneFromUrl.isDefault()) ? lanesModel === null || lanesModel === void 0 ? void 0 : lanesModel.resolveComponentByFullName(idFromLocation, laneFromUrl) : undefined;
      return laneComponentId;
    });
    (0, _defineProperty2().default)(this, "useComponentId", () => {
      var _this$getLaneComponen;
      return (_this$getLaneComponen = this.getLaneComponentIdFromUrl()) === null || _this$getLaneComponen === void 0 ? void 0 : _this$getLaneComponen.toString();
    });
    (0, _defineProperty2().default)(this, "useComponentFilters", () => {
      const laneComponentId = this.getLaneComponentIdFromUrl();
      return {
        log: laneComponentId && {
          logHead: laneComponentId.version
        }
      };
    });
    (0, _defineProperty2().default)(this, "renderContext", ({
      children
    }) => {
      return /*#__PURE__*/_react().default.createElement(_lanesHooks().LanesProvider, null, children);
    });
    this.hostAspect = workspace || scope;
    this.lanesHost = workspace ? 'workspace' : 'scope';
    this.host = workspace ? _workspace().default.id : _scope().default.id;
  }
  registerHostAspectRoutes() {
    if (!this.hostAspect) return;
    this.hostAspect.registerRoutes(this.getLaneRoutes());
    this.hostAspect.registerMenuRoutes(this.getMenuRoutes());
  }
  getLaneRoutes() {
    return [{
      path: _lanesUiModels().LanesModel.lanesPrefix,
      children: /*#__PURE__*/_react().default.createElement(_react().default.Fragment, null, /*#__PURE__*/_react().default.createElement(_reactRouterDom().Route, {
        path: _lanesUiModels().LanesModel.lanePath
      }, /*#__PURE__*/_react().default.createElement(_reactRouterDom().Route, {
        index: true,
        element: this.getLaneOverview()
      }), /*#__PURE__*/_react().default.createElement(_reactRouterDom().Route, {
        path: "~component/*",
        element: this.getLaneComponent()
      }), /*#__PURE__*/_react().default.createElement(_reactRouterDom().Route, {
        path: "*",
        element: /*#__PURE__*/_react().default.createElement(_designUiPages().NotFoundPage, null)
      })), /*#__PURE__*/_react().default.createElement(_reactRouterDom().Route, {
        path: "*",
        element: /*#__PURE__*/_react().default.createElement(_designUiPages().NotFoundPage, null)
      }))
    }];
  }
  overrideComputeLaneUrl(fn) {
    const {
      prefix,
      path,
      getLaneComponentUrl,
      getLaneIdFromPathname,
      getLaneUrl
    } = fn();
    _lanesUiModels().LanesModel.lanesPrefix = prefix;
    _lanesUiModels().LanesModel.lanePath = path;
    _lanesUiModels().LanesModel.getLaneComponentUrl = getLaneComponentUrl;
    _lanesUiModels().LanesModel.getLaneUrl = getLaneUrl;
    _lanesUiModels().LanesModel.getLaneIdFromPathname = getLaneIdFromPathname;
  }

  // getLaneReadme() {
  //   return <LaneReadmeOverview host={this.host} overviewSlot={this.overviewSlot} routeSlot={this.routeSlot} />;
  // }

  getLaneComponent() {
    return this.componentUi.getComponentUI(this.host, {
      componentId: this.useComponentId,
      useComponentFilters: this.useComponentFilters
    });
  }
  getLaneComponentMenu() {
    return this.componentUi.getMenu(this.host, {
      componentId: this.useComponentId,
      useComponentFilters: this.useComponentFilters
    });
  }
  getLaneOverview() {
    return /*#__PURE__*/_react().default.createElement(_lanesUi().LaneOverview, {
      routeSlot: this.routeSlot,
      overviewSlot: this.overviewSlot,
      host: this.lanesHost
    });
  }
  getMenuRoutes() {
    return [{
      path: _lanesUiModels().LanesModel.lanesPrefix,
      children: /*#__PURE__*/_react().default.createElement(_reactRouterDom().Route, {
        path: `${_lanesUiModels().LanesModel.lanePath}/*`
      }, /*#__PURE__*/_react().default.createElement(_reactRouterDom().Route, {
        path: "*",
        element: this.getLanesOverviewMenu()
      }), /*#__PURE__*/_react().default.createElement(_reactRouterDom().Route, {
        path: "~component/*",
        element: this.getLaneComponentMenu()
      }))
    }];
  }
  getLanesOverviewMenu() {
    return /*#__PURE__*/_react().default.createElement(_lanesUiMenus().LanesOverviewMenu, {
      navigationSlot: this.navSlot,
      widgetSlot: this.menuWidgetSlot
    });
  }
  registerMenuWidget(...menuItems) {
    this.menuWidgetSlot.register(menuItems);
  }
  registerLanesRoutes() {
    this.registerNavigation([
    // {
    //   props: {
    //     href: '.',
    //     exact: true,
    //     children: 'README',
    //   },
    //   order: 1,
    //   hide: () => {
    //     const { lanesModel } = useLanes();
    //     return !lanesModel?.viewedLane?.readmeComponent;
    //   },
    // },
    {
      props: {
        href: '.',
        exact: true,
        children: 'Overview'
      },
      order: 1
    }]);
  }
  registerRoutes() {
    this.registerHostAspectRoutes();
    this.registerLanesRoutes();
  }
  getLanesSwitcher() {
    const LanesSwitcher = /*#__PURE__*/_react().default.createElement(_lanesUiNavigation().LaneSwitcher, {
      groupByScope: this.lanesHost === 'workspace'
    });
    return LanesSwitcher;
  }
  getLanesProvider() {
    return _lanesHooks().LanesProvider;
  }
  getUseLanes() {
    return _lanesHooks().useLanes;
  }
  registerLanesDropdown() {
    var _this$hostAspect;
    const LanesSwitcher = this.getLanesSwitcher();
    (_this$hostAspect = this.hostAspect) === null || _this$hostAspect === void 0 ? void 0 : _this$hostAspect.registerSidebarLink({
      component: function Gallery() {
        return LanesSwitcher;
      },
      weight: 1000
    });
  }
  registerRoute(route) {
    this.routeSlot.register(route);
    return this;
  }

  /**
   * register a new line beneath the lane overview section.
   */
  registerOverviewLine(...lines) {
    this.overviewSlot.register(lines);
    return this;
  }
  registerNavigation(routes) {
    this.navSlot.register(routes);
  }
  static async provider([uiUi, componentUi, workspaceUi, scopeUi], _, [routeSlot, overviewSlot, navSlot, menuWidgetSlot], harmony) {
    const {
      config
    } = harmony;
    const host = String(config.get('teambit.harmony/bit'));
    let workspace;
    let scope;
    if (host === _workspace().default.id) {
      workspace = workspaceUi;
    }
    if (host === _scope().default.id) {
      scope = scopeUi;
    }
    const lanesUi = new LanesUI(componentUi, routeSlot, navSlot, overviewSlot, menuWidgetSlot, workspace, scope);
    if (uiUi) uiUi.registerRenderHooks({
      reactContext: lanesUi.renderContext
    });
    lanesUi.registerRoutes();
    lanesUi.registerMenuWidget(() => {
      const {
        lanesModel
      } = (0, _lanesHooks().useLanes)();
      if (!(lanesModel !== null && lanesModel !== void 0 && lanesModel.viewedLane)) return null;
      const {
        viewedLane,
        currentLane
      } = lanesModel;
      return /*#__PURE__*/_react().default.createElement(_lanesUiMenus2().UseLaneMenu, {
        host: lanesUi.lanesHost,
        viewedLaneId: viewedLane.id,
        currentLaneId: currentLane === null || currentLane === void 0 ? void 0 : currentLane.id
      });
    });
    lanesUi.registerLanesDropdown();
    return lanesUi;
  }
}
exports.LanesUI = LanesUI;
(0, _defineProperty2().default)(LanesUI, "dependencies", [_ui().UIAspect, _component().default, _workspace().default, _scope().default, _sidebar().default]);
(0, _defineProperty2().default)(LanesUI, "runtime", _ui().UIRuntime);
(0, _defineProperty2().default)(LanesUI, "slots", [_harmony().Slot.withType(), _harmony().Slot.withType(), _harmony().Slot.withType(), _harmony().Slot.withType()]);
var _default = LanesUI;
exports.default = _default;
_lanes().LanesAspect.addRuntime(LanesUI);

//# sourceMappingURL=lanes.ui.runtime.js.map