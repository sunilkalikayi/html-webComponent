{"version":3,"names":["createLane","consumer","laneName","scopeName","remoteLane","lanes","scope","listLanes","find","lane","name","BitError","throwForInvalidLaneName","getDataToPopulateLaneObjectIfNeeded","components","currentLaneObject","getCurrentLaneObject","forkedFrom","getLaneOrigin","newLane","Lane","from","hash","toString","log","create","dataToPopulate","setLaneComponents","saveLane","currentLaneId","bitMap","laneId","undefined","isLaneExported","currentLane","isValidLaneName","val","test"],"sources":["create-lane.ts"],"sourcesContent":["import { BitError } from '@teambit/bit-error';\nimport { LaneId } from '@teambit/lane-id';\nimport { Consumer } from '@teambit/legacy/dist/consumer';\n// import { BitIds } from '@teambit/legacy/dist/bit-id';\nimport Lane, { LaneComponent } from '@teambit/legacy/dist/scope/models/lane';\n\nexport async function createLane(\n  consumer: Consumer,\n  laneName: string,\n  scopeName: string,\n  remoteLane?: Lane\n): Promise<Lane> {\n  const lanes = await consumer.scope.listLanes();\n  if (lanes.find((lane) => lane.name === laneName)) {\n    throw new BitError(`lane \"${laneName}\" already exists, to switch to this lane, please use \"bit switch\" command`);\n  }\n  throwForInvalidLaneName(laneName);\n  const getDataToPopulateLaneObjectIfNeeded = async (): Promise<LaneComponent[]> => {\n    if (remoteLane) return remoteLane.components;\n    // when branching from one lane to another, copy components from the origin lane\n    // when branching from main, no need to copy anything\n    const currentLaneObject = await consumer.getCurrentLaneObject();\n    return currentLaneObject ? currentLaneObject.components : [];\n  };\n\n  const forkedFrom = await getLaneOrigin(consumer);\n  const newLane = remoteLane\n    ? Lane.from({\n        name: laneName,\n        hash: remoteLane.hash().toString(),\n        log: remoteLane.log,\n        scope: remoteLane.scope,\n        forkedFrom,\n      })\n    : Lane.create(laneName, scopeName, forkedFrom);\n  const dataToPopulate = await getDataToPopulateLaneObjectIfNeeded();\n  newLane.setLaneComponents(dataToPopulate);\n\n  await consumer.scope.lanes.saveLane(newLane);\n\n  return newLane;\n}\n\nasync function getLaneOrigin(consumer: Consumer): Promise<LaneId | undefined> {\n  const currentLaneId = consumer.bitMap.laneId;\n  if (!currentLaneId) return undefined;\n  if (consumer.bitMap.isLaneExported) {\n    return currentLaneId;\n  }\n  // current lane is new.\n  const currentLane = await consumer.getCurrentLaneObject();\n  return currentLane?.forkedFrom;\n}\n\nexport function throwForInvalidLaneName(laneName: string) {\n  if (!isValidLaneName(laneName)) {\n    throw new BitError(\n      `lane \"${laneName}\" has invalid characters. lane name can only contain alphanumeric, lowercase characters, and the following [\"-\", \"_\", \"$\", \"!\"]`\n    );\n  }\n}\n\nfunction isValidLaneName(val: unknown): boolean {\n  if (typeof val !== 'string') return false;\n  // @todo: should we allow slash? if so, we should probably replace the lane-delimiter with something else. (maybe \":\")\n  return /^[$\\-_!a-z0-9]+$/.test(val);\n}\n"],"mappings":";;;;;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAIA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AADA;;AAGO,eAAeA,UAAU,CAC9BC,QAAkB,EAClBC,QAAgB,EAChBC,SAAiB,EACjBC,UAAiB,EACF;EACf,MAAMC,KAAK,GAAG,MAAMJ,QAAQ,CAACK,KAAK,CAACC,SAAS,EAAE;EAC9C,IAAIF,KAAK,CAACG,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAKR,QAAQ,CAAC,EAAE;IAChD,MAAM,KAAIS,oBAAQ,EAAE,SAAQT,QAAS,2EAA0E,CAAC;EAClH;EACAU,uBAAuB,CAACV,QAAQ,CAAC;EACjC,MAAMW,mCAAmC,GAAG,YAAsC;IAChF,IAAIT,UAAU,EAAE,OAAOA,UAAU,CAACU,UAAU;IAC5C;IACA;IACA,MAAMC,iBAAiB,GAAG,MAAMd,QAAQ,CAACe,oBAAoB,EAAE;IAC/D,OAAOD,iBAAiB,GAAGA,iBAAiB,CAACD,UAAU,GAAG,EAAE;EAC9D,CAAC;EAED,MAAMG,UAAU,GAAG,MAAMC,aAAa,CAACjB,QAAQ,CAAC;EAChD,MAAMkB,OAAO,GAAGf,UAAU,GACtBgB,eAAI,CAACC,IAAI,CAAC;IACRX,IAAI,EAAER,QAAQ;IACdoB,IAAI,EAAElB,UAAU,CAACkB,IAAI,EAAE,CAACC,QAAQ,EAAE;IAClCC,GAAG,EAAEpB,UAAU,CAACoB,GAAG;IACnBlB,KAAK,EAAEF,UAAU,CAACE,KAAK;IACvBW;EACF,CAAC,CAAC,GACFG,eAAI,CAACK,MAAM,CAACvB,QAAQ,EAAEC,SAAS,EAAEc,UAAU,CAAC;EAChD,MAAMS,cAAc,GAAG,MAAMb,mCAAmC,EAAE;EAClEM,OAAO,CAACQ,iBAAiB,CAACD,cAAc,CAAC;EAEzC,MAAMzB,QAAQ,CAACK,KAAK,CAACD,KAAK,CAACuB,QAAQ,CAACT,OAAO,CAAC;EAE5C,OAAOA,OAAO;AAChB;AAEA,eAAeD,aAAa,CAACjB,QAAkB,EAA+B;EAC5E,MAAM4B,aAAa,GAAG5B,QAAQ,CAAC6B,MAAM,CAACC,MAAM;EAC5C,IAAI,CAACF,aAAa,EAAE,OAAOG,SAAS;EACpC,IAAI/B,QAAQ,CAAC6B,MAAM,CAACG,cAAc,EAAE;IAClC,OAAOJ,aAAa;EACtB;EACA;EACA,MAAMK,WAAW,GAAG,MAAMjC,QAAQ,CAACe,oBAAoB,EAAE;EACzD,OAAOkB,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEjB,UAAU;AAChC;AAEO,SAASL,uBAAuB,CAACV,QAAgB,EAAE;EACxD,IAAI,CAACiC,eAAe,CAACjC,QAAQ,CAAC,EAAE;IAC9B,MAAM,KAAIS,oBAAQ,EACf,SAAQT,QAAS,iIAAgI,CACnJ;EACH;AACF;AAEA,SAASiC,eAAe,CAACC,GAAY,EAAW;EAC9C,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE,OAAO,KAAK;EACzC;EACA,OAAO,kBAAkB,CAACC,IAAI,CAACD,GAAG,CAAC;AACrC"}