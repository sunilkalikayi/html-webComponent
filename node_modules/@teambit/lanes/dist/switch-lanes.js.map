{"version":3,"names":["LaneSwitcher","constructor","workspace","logger","switchProps","checkoutProps","Lanes","consumer","switch","setStatusLine","populateSwitchProps","allComponentsStatus","getAllComponentsStatus","componentWithConflict","find","component","mergeResults","hasConflicts","promptMergeOptions","mergeStrategy","GeneralError","id","toStringWithoutVersion","getMergeStrategyInteractive","failedComponents","filter","componentStatus","failureMessage","map","unchangedLegitimately","succeededComponents","componentsResults","mapSeries","componentFromFS","applyVersion","markFilesToBeRemovedIfNeeded","saveLanesData","componentsWithDependencies","c","manyComponentsWriter","ManyComponentsWriter","installNpmPackages","skipNpmInstall","override","verbose","writeConfig","writeAll","deleteFilesIfNeeded","appliedVersionComponents","applyVersionResult","onDestroy","components","laneId","scope","lanes","parseLaneIdFromString","laneName","localLane","loadLane","isDefault","populatePropsAccordingToDefaultLane","populatePropsAccordingToLocalLane","populatePropsAccordingToRemoteLane","remoteLaneId","laneIdToSwitch","debug","toString","getCurrentLaneId","isEqual","BitError","remoteLane","fetchLaneWithItsComponents","name","ids","l","changeVersion","head","localTrackedLane","getAliasByLaneId","undefined","laneToSwitchTo","isOnLane","getIdsOfDefaultLane","LaneId","from","DEFAULT_LANE","toLaneId","tmp","Tmp","componentsStatusP","getComponentStatus","componentsStatus","Promise","all","clear","err","localLaneName","alias","trackLane","remoteScope","setCurrentLane","isNew","bitMap","syncWithLanes","returnFailure","msg","modelComponent","getModelComponentIfExist","unmerged","objects","unmergedComponents","getEntry","version","existingBitMapId","getBitIdIfExist","ignoreVersion","componentOnLane","loadVersion","isRemoved","existingOnWorkspaceOnly","componentFromModel","hasVersion","currentlyUsedVersion","baseComponent","loadComponent","isModified","isComponentSourceCodeModified","isHeadSameAsMain","getHead","tagVersion","getTagOfRefIfExists","headVersion","otherComponent","threeWayMerge","otherLabel","currentComponent","currentLabel"],"sources":["switch-lanes.ts"],"sourcesContent":["import mapSeries from 'p-map-series';\nimport { Consumer } from '@teambit/legacy/dist/consumer';\nimport GeneralError from '@teambit/legacy/dist/error/general-error';\nimport { LaneId, DEFAULT_LANE } from '@teambit/lane-id';\nimport { BitId } from '@teambit/legacy-bit-id';\nimport { ComponentWithDependencies } from '@teambit/legacy/dist/scope';\nimport { Version, Lane } from '@teambit/legacy/dist/scope/models';\nimport { Tmp } from '@teambit/legacy/dist/scope/repositories';\nimport {\n  applyVersion,\n  ComponentStatus,\n  CheckoutProps,\n  deleteFilesIfNeeded,\n  markFilesToBeRemovedIfNeeded,\n} from '@teambit/legacy/dist/consumer/versions-ops/checkout-version';\nimport ManyComponentsWriter from '@teambit/legacy/dist/consumer/component-ops/many-components-writer';\nimport {\n  FailedComponents,\n  getMergeStrategyInteractive,\n  ApplyVersionResults,\n} from '@teambit/legacy/dist/consumer/versions-ops/merge-version';\nimport threeWayMerge, {\n  MergeResultsThreeWay,\n} from '@teambit/legacy/dist/consumer/versions-ops/merge-version/three-way-merge';\nimport { Workspace } from '@teambit/workspace';\nimport { Logger } from '@teambit/logger';\nimport { BitError } from '@teambit/bit-error';\nimport { LanesMain } from './lanes.main.runtime';\n\nexport type SwitchProps = {\n  laneName: string;\n  ids?: BitId[];\n  existingOnWorkspaceOnly: boolean;\n  remoteLane?: Lane;\n  localTrackedLane?: string;\n  alias?: string;\n};\n\nexport class LaneSwitcher {\n  private consumer: Consumer;\n  private laneIdToSwitch: LaneId; // populated by `this.populateSwitchProps()`\n  private laneToSwitchTo: Lane | undefined; // populated by `this.populateSwitchProps()`, if default-lane, it's undefined\n  constructor(\n    private workspace: Workspace,\n    private logger: Logger,\n    private switchProps: SwitchProps,\n    private checkoutProps: CheckoutProps,\n    private Lanes: LanesMain\n  ) {\n    this.consumer = this.workspace.consumer;\n  }\n\n  async switch(): Promise<ApplyVersionResults> {\n    this.logger.setStatusLine(`switching lanes`);\n    await this.populateSwitchProps();\n    const allComponentsStatus: ComponentStatus[] = await this.getAllComponentsStatus();\n    const componentWithConflict = allComponentsStatus.find(\n      (component) => component.mergeResults && component.mergeResults.hasConflicts\n    );\n    if (componentWithConflict) {\n      if (!this.checkoutProps.promptMergeOptions && !this.checkoutProps.mergeStrategy) {\n        throw new GeneralError(\n          `automatic merge has failed for component ${componentWithConflict.id.toStringWithoutVersion()}.\\nplease use \"--manual\" to manually merge changes or use \"--theirs / --ours\" to choose one of the conflicted versions`\n        );\n      }\n      if (!this.checkoutProps.mergeStrategy) this.checkoutProps.mergeStrategy = await getMergeStrategyInteractive();\n    }\n    const failedComponents: FailedComponents[] = allComponentsStatus\n      .filter((componentStatus) => componentStatus.failureMessage)\n      .map((componentStatus) => ({\n        id: componentStatus.id,\n        failureMessage: componentStatus.failureMessage as string,\n        unchangedLegitimately: componentStatus.unchangedLegitimately,\n      }));\n\n    const succeededComponents = allComponentsStatus.filter((componentStatus) => !componentStatus.failureMessage);\n    // do not use Promise.all for applyVersion. otherwise, it'll write all components in parallel,\n    // which can be an issue when some components are also dependencies of others\n    const componentsResults = await mapSeries(succeededComponents, ({ id, componentFromFS, mergeResults }) => {\n      return applyVersion(this.consumer, id, componentFromFS, mergeResults, this.checkoutProps);\n    });\n\n    markFilesToBeRemovedIfNeeded(succeededComponents, componentsResults);\n\n    await this.saveLanesData();\n\n    const componentsWithDependencies = componentsResults\n      .map((c) => c.component)\n      .filter((c) => c) as ComponentWithDependencies[];\n\n    const manyComponentsWriter = new ManyComponentsWriter({\n      consumer: this.consumer,\n      componentsWithDependencies,\n      installNpmPackages: !this.checkoutProps.skipNpmInstall,\n      override: true,\n      verbose: this.checkoutProps.verbose,\n      writeConfig: this.checkoutProps.writeConfig,\n    });\n    await manyComponentsWriter.writeAll();\n    await deleteFilesIfNeeded(componentsResults, this.consumer);\n\n    const appliedVersionComponents = componentsResults.map((c) => c.applyVersionResult);\n\n    await this.consumer.onDestroy();\n\n    return { components: appliedVersionComponents, failedComponents };\n  }\n\n  private async populateSwitchProps() {\n    const laneId = await this.consumer.scope.lanes.parseLaneIdFromString(this.switchProps.laneName);\n\n    const localLane = await this.consumer.scope.loadLane(laneId);\n    if (laneId.isDefault()) {\n      await this.populatePropsAccordingToDefaultLane();\n    } else if (localLane) {\n      this.populatePropsAccordingToLocalLane(localLane);\n    } else {\n      await this.populatePropsAccordingToRemoteLane(laneId);\n    }\n  }\n\n  private async populatePropsAccordingToRemoteLane(remoteLaneId: LaneId) {\n    this.laneIdToSwitch = remoteLaneId;\n    this.logger.debug(`populatePropsAccordingToRemoteLane, remoteLaneId: ${remoteLaneId.toString()}`);\n    if (this.consumer.getCurrentLaneId().isEqual(remoteLaneId)) {\n      throw new BitError(`already checked out to \"${remoteLaneId.toString()}\"`);\n    }\n    const remoteLane = await this.Lanes.fetchLaneWithItsComponents(remoteLaneId);\n    this.switchProps.laneName = remoteLaneId.name;\n    this.switchProps.ids = remoteLane.components.map((l) => l.id.changeVersion(l.head.toString()));\n    this.switchProps.localTrackedLane = this.consumer.scope.lanes.getAliasByLaneId(remoteLaneId) || undefined;\n    this.switchProps.remoteLane = remoteLane;\n    this.laneToSwitchTo = remoteLane;\n    this.logger.debug(`populatePropsAccordingToRemoteLane, completed`);\n  }\n\n  private async populatePropsAccordingToDefaultLane() {\n    if (!this.consumer.isOnLane()) {\n      throw new BitError(`already checked out to \"${this.switchProps.laneName}\"`);\n    }\n    this.switchProps.ids = await this.consumer.getIdsOfDefaultLane();\n    this.laneIdToSwitch = LaneId.from(DEFAULT_LANE, this.consumer.scope.name);\n  }\n\n  private populatePropsAccordingToLocalLane(localLane: Lane) {\n    if (this.consumer.getCurrentLaneId().name === this.switchProps.laneName) {\n      throw new BitError(`already checked out to \"${this.switchProps.laneName}\"`);\n    }\n    this.switchProps.ids = localLane.components.map((c) => c.id.changeVersion(c.head.toString()));\n    this.laneIdToSwitch = localLane.toLaneId();\n    this.laneToSwitchTo = localLane;\n  }\n\n  private async getAllComponentsStatus(): Promise<ComponentStatus[]> {\n    const { ids } = this.switchProps;\n    const tmp = new Tmp(this.consumer.scope);\n    try {\n      const componentsStatusP = (ids as BitId[]).map((id) => getComponentStatus(this.consumer, id, this.switchProps));\n      const componentsStatus = await Promise.all(componentsStatusP);\n      await tmp.clear();\n      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!\n      return componentsStatus;\n    } catch (err: any) {\n      await tmp.clear();\n      throw err;\n    }\n  }\n\n  private async saveLanesData() {\n    const localLaneName = this.switchProps.alias || this.laneIdToSwitch.name;\n    if (this.switchProps.remoteLane) {\n      if (!this.switchProps.localTrackedLane) {\n        this.consumer.scope.lanes.trackLane({\n          localLane: localLaneName,\n          remoteLane: this.laneIdToSwitch.name,\n          remoteScope: this.laneIdToSwitch.scope,\n        });\n      }\n    }\n\n    this.consumer.setCurrentLane(this.laneIdToSwitch, !this.laneToSwitchTo?.isNew);\n    this.consumer.bitMap.syncWithLanes(this.laneToSwitchTo);\n  }\n}\n\nasync function getComponentStatus(consumer: Consumer, id: BitId, switchProps: SwitchProps): Promise<ComponentStatus> {\n  const componentStatus: ComponentStatus = { id };\n  const returnFailure = (msg: string, unchangedLegitimately = false) => {\n    componentStatus.failureMessage = msg;\n    componentStatus.unchangedLegitimately = unchangedLegitimately;\n    return componentStatus;\n  };\n  const modelComponent = await consumer.scope.getModelComponentIfExist(id);\n  if (!modelComponent) {\n    return returnFailure(`component ${id.toString()} had never imported`, true);\n  }\n  const unmerged = consumer.scope.objects.unmergedComponents.getEntry(id.name);\n  if (unmerged) {\n    return returnFailure(\n      `component ${id.toStringWithoutVersion()} is in during-merge state, please snap/tag it first (or use bit merge --resolve/--abort)`\n    );\n  }\n  const version = id.version;\n  if (!version) {\n    return returnFailure(`component doesn't have any snaps on ${DEFAULT_LANE}`, true);\n  }\n  const existingBitMapId = consumer.bitMap.getBitIdIfExist(id, { ignoreVersion: true });\n  const componentOnLane: Version = await modelComponent.loadVersion(version, consumer.scope.objects);\n  if (componentOnLane.isRemoved()) {\n    return returnFailure(`component has been removed`, true);\n  }\n  if (!existingBitMapId) {\n    if (switchProps.existingOnWorkspaceOnly) {\n      return returnFailure(`component ${id.toStringWithoutVersion()} is not in the workspace`, true);\n    }\n    return { componentFromFS: undefined, componentFromModel: componentOnLane, id, mergeResults: null };\n  }\n  if (!existingBitMapId.hasVersion()) {\n    // happens when switching from main to a lane and a component was snapped on the lane.\n    // in the .bitmap file, the version is \"latest\" or empty. so we just need to write the component according to the\n    // model. we don't care about the componentFromFS\n    return { componentFromFS: undefined, componentFromModel: componentOnLane, id, mergeResults: null };\n  }\n  const currentlyUsedVersion = existingBitMapId.version;\n  if (currentlyUsedVersion === version) {\n    return returnFailure(`component ${id.toStringWithoutVersion()} is already at version ${version}`, true);\n  }\n  // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!\n  const baseComponent: Version = await modelComponent.loadVersion(currentlyUsedVersion, consumer.scope.objects);\n  const component = await consumer.loadComponent(existingBitMapId);\n  // don't use `consumer.isModified` here. otherwise, if there are dependency changes, the user can't discard them\n  // and won't be able to switch lanes.\n  const isModified = await consumer.isComponentSourceCodeModified(baseComponent, component);\n  let mergeResults: MergeResultsThreeWay | null | undefined;\n  const isHeadSameAsMain = () => {\n    const head = modelComponent.getHead();\n    if (!head) return false;\n    if (!existingBitMapId.version) return false;\n    const tagVersion = modelComponent.getTagOfRefIfExists(head);\n    const headVersion = tagVersion || head.toString();\n    return existingBitMapId.version === headVersion;\n  };\n  if (isModified) {\n    if (!isHeadSameAsMain()) {\n      throw new GeneralError(\n        `unable to checkout ${id.toStringWithoutVersion()}, the component is modified and belongs to another lane`\n      );\n    }\n\n    const otherComponent: Version = await modelComponent.loadVersion(\n      existingBitMapId.version as string, // we are here because the head is same as main. so, existingBitMapId.version must be set\n      consumer.scope.objects\n    );\n    mergeResults = await threeWayMerge({\n      consumer,\n      otherComponent,\n      otherLabel: version,\n      currentComponent: component,\n      currentLabel: `${currentlyUsedVersion} modified`,\n      baseComponent,\n    });\n  }\n  // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!\n  return { componentFromFS: component, componentFromModel: componentOnLane, id, mergeResults };\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAIA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAOA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAKA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAKA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAYO,MAAMA,YAAY,CAAC;EAEQ;EACU;EAC1CC,WAAW,CACDC,SAAoB,EACpBC,MAAc,EACdC,WAAwB,EACxBC,aAA4B,EAC5BC,KAAgB,EACxB;IAAA,KALQJ,SAAoB,GAApBA,SAAoB;IAAA,KACpBC,MAAc,GAAdA,MAAc;IAAA,KACdC,WAAwB,GAAxBA,WAAwB;IAAA,KACxBC,aAA4B,GAA5BA,aAA4B;IAAA,KAC5BC,KAAgB,GAAhBA,KAAgB;IAAA;IAAA;IAAA;IAExB,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACL,SAAS,CAACK,QAAQ;EACzC;EAEA,MAAMC,MAAM,GAAiC;IAC3C,IAAI,CAACL,MAAM,CAACM,aAAa,CAAE,iBAAgB,CAAC;IAC5C,MAAM,IAAI,CAACC,mBAAmB,EAAE;IAChC,MAAMC,mBAAsC,GAAG,MAAM,IAAI,CAACC,sBAAsB,EAAE;IAClF,MAAMC,qBAAqB,GAAGF,mBAAmB,CAACG,IAAI,CACnDC,SAAS,IAAKA,SAAS,CAACC,YAAY,IAAID,SAAS,CAACC,YAAY,CAACC,YAAY,CAC7E;IACD,IAAIJ,qBAAqB,EAAE;MACzB,IAAI,CAAC,IAAI,CAACR,aAAa,CAACa,kBAAkB,IAAI,CAAC,IAAI,CAACb,aAAa,CAACc,aAAa,EAAE;QAC/E,MAAM,KAAIC,uBAAY,EACnB,4CAA2CP,qBAAqB,CAACQ,EAAE,CAACC,sBAAsB,EAAG,wHAAuH,CACtN;MACH;MACA,IAAI,CAAC,IAAI,CAACjB,aAAa,CAACc,aAAa,EAAE,IAAI,CAACd,aAAa,CAACc,aAAa,GAAG,MAAM,IAAAI,2CAA2B,GAAE;IAC/G;IACA,MAAMC,gBAAoC,GAAGb,mBAAmB,CAC7Dc,MAAM,CAAEC,eAAe,IAAKA,eAAe,CAACC,cAAc,CAAC,CAC3DC,GAAG,CAAEF,eAAe,KAAM;MACzBL,EAAE,EAAEK,eAAe,CAACL,EAAE;MACtBM,cAAc,EAAED,eAAe,CAACC,cAAwB;MACxDE,qBAAqB,EAAEH,eAAe,CAACG;IACzC,CAAC,CAAC,CAAC;IAEL,MAAMC,mBAAmB,GAAGnB,mBAAmB,CAACc,MAAM,CAAEC,eAAe,IAAK,CAACA,eAAe,CAACC,cAAc,CAAC;IAC5G;IACA;IACA,MAAMI,iBAAiB,GAAG,MAAM,IAAAC,qBAAS,EAACF,mBAAmB,EAAE,CAAC;MAAET,EAAE;MAAEY,eAAe;MAAEjB;IAAa,CAAC,KAAK;MACxG,OAAO,IAAAkB,+BAAY,EAAC,IAAI,CAAC3B,QAAQ,EAAEc,EAAE,EAAEY,eAAe,EAAEjB,YAAY,EAAE,IAAI,CAACX,aAAa,CAAC;IAC3F,CAAC,CAAC;IAEF,IAAA8B,+CAA4B,EAACL,mBAAmB,EAAEC,iBAAiB,CAAC;IAEpE,MAAM,IAAI,CAACK,aAAa,EAAE;IAE1B,MAAMC,0BAA0B,GAAGN,iBAAiB,CACjDH,GAAG,CAAEU,CAAC,IAAKA,CAAC,CAACvB,SAAS,CAAC,CACvBU,MAAM,CAAEa,CAAC,IAAKA,CAAC,CAAgC;IAElD,MAAMC,oBAAoB,GAAG,KAAIC,+BAAoB,EAAC;MACpDjC,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvB8B,0BAA0B;MAC1BI,kBAAkB,EAAE,CAAC,IAAI,CAACpC,aAAa,CAACqC,cAAc;MACtDC,QAAQ,EAAE,IAAI;MACdC,OAAO,EAAE,IAAI,CAACvC,aAAa,CAACuC,OAAO;MACnCC,WAAW,EAAE,IAAI,CAACxC,aAAa,CAACwC;IAClC,CAAC,CAAC;IACF,MAAMN,oBAAoB,CAACO,QAAQ,EAAE;IACrC,MAAM,IAAAC,sCAAmB,EAAChB,iBAAiB,EAAE,IAAI,CAACxB,QAAQ,CAAC;IAE3D,MAAMyC,wBAAwB,GAAGjB,iBAAiB,CAACH,GAAG,CAAEU,CAAC,IAAKA,CAAC,CAACW,kBAAkB,CAAC;IAEnF,MAAM,IAAI,CAAC1C,QAAQ,CAAC2C,SAAS,EAAE;IAE/B,OAAO;MAAEC,UAAU,EAAEH,wBAAwB;MAAExB;IAAiB,CAAC;EACnE;EAEA,MAAcd,mBAAmB,GAAG;IAClC,MAAM0C,MAAM,GAAG,MAAM,IAAI,CAAC7C,QAAQ,CAAC8C,KAAK,CAACC,KAAK,CAACC,qBAAqB,CAAC,IAAI,CAACnD,WAAW,CAACoD,QAAQ,CAAC;IAE/F,MAAMC,SAAS,GAAG,MAAM,IAAI,CAAClD,QAAQ,CAAC8C,KAAK,CAACK,QAAQ,CAACN,MAAM,CAAC;IAC5D,IAAIA,MAAM,CAACO,SAAS,EAAE,EAAE;MACtB,MAAM,IAAI,CAACC,mCAAmC,EAAE;IAClD,CAAC,MAAM,IAAIH,SAAS,EAAE;MACpB,IAAI,CAACI,iCAAiC,CAACJ,SAAS,CAAC;IACnD,CAAC,MAAM;MACL,MAAM,IAAI,CAACK,kCAAkC,CAACV,MAAM,CAAC;IACvD;EACF;EAEA,MAAcU,kCAAkC,CAACC,YAAoB,EAAE;IACrE,IAAI,CAACC,cAAc,GAAGD,YAAY;IAClC,IAAI,CAAC5D,MAAM,CAAC8D,KAAK,CAAE,qDAAoDF,YAAY,CAACG,QAAQ,EAAG,EAAC,CAAC;IACjG,IAAI,IAAI,CAAC3D,QAAQ,CAAC4D,gBAAgB,EAAE,CAACC,OAAO,CAACL,YAAY,CAAC,EAAE;MAC1D,MAAM,KAAIM,oBAAQ,EAAE,2BAA0BN,YAAY,CAACG,QAAQ,EAAG,GAAE,CAAC;IAC3E;IACA,MAAMI,UAAU,GAAG,MAAM,IAAI,CAAChE,KAAK,CAACiE,0BAA0B,CAACR,YAAY,CAAC;IAC5E,IAAI,CAAC3D,WAAW,CAACoD,QAAQ,GAAGO,YAAY,CAACS,IAAI;IAC7C,IAAI,CAACpE,WAAW,CAACqE,GAAG,GAAGH,UAAU,CAACnB,UAAU,CAACvB,GAAG,CAAE8C,CAAC,IAAKA,CAAC,CAACrD,EAAE,CAACsD,aAAa,CAACD,CAAC,CAACE,IAAI,CAACV,QAAQ,EAAE,CAAC,CAAC;IAC9F,IAAI,CAAC9D,WAAW,CAACyE,gBAAgB,GAAG,IAAI,CAACtE,QAAQ,CAAC8C,KAAK,CAACC,KAAK,CAACwB,gBAAgB,CAACf,YAAY,CAAC,IAAIgB,SAAS;IACzG,IAAI,CAAC3E,WAAW,CAACkE,UAAU,GAAGA,UAAU;IACxC,IAAI,CAACU,cAAc,GAAGV,UAAU;IAChC,IAAI,CAACnE,MAAM,CAAC8D,KAAK,CAAE,+CAA8C,CAAC;EACpE;EAEA,MAAcL,mCAAmC,GAAG;IAClD,IAAI,CAAC,IAAI,CAACrD,QAAQ,CAAC0E,QAAQ,EAAE,EAAE;MAC7B,MAAM,KAAIZ,oBAAQ,EAAE,2BAA0B,IAAI,CAACjE,WAAW,CAACoD,QAAS,GAAE,CAAC;IAC7E;IACA,IAAI,CAACpD,WAAW,CAACqE,GAAG,GAAG,MAAM,IAAI,CAAClE,QAAQ,CAAC2E,mBAAmB,EAAE;IAChE,IAAI,CAAClB,cAAc,GAAGmB,gBAAM,CAACC,IAAI,CAACC,sBAAY,EAAE,IAAI,CAAC9E,QAAQ,CAAC8C,KAAK,CAACmB,IAAI,CAAC;EAC3E;EAEQX,iCAAiC,CAACJ,SAAe,EAAE;IACzD,IAAI,IAAI,CAAClD,QAAQ,CAAC4D,gBAAgB,EAAE,CAACK,IAAI,KAAK,IAAI,CAACpE,WAAW,CAACoD,QAAQ,EAAE;MACvE,MAAM,KAAIa,oBAAQ,EAAE,2BAA0B,IAAI,CAACjE,WAAW,CAACoD,QAAS,GAAE,CAAC;IAC7E;IACA,IAAI,CAACpD,WAAW,CAACqE,GAAG,GAAGhB,SAAS,CAACN,UAAU,CAACvB,GAAG,CAAEU,CAAC,IAAKA,CAAC,CAACjB,EAAE,CAACsD,aAAa,CAACrC,CAAC,CAACsC,IAAI,CAACV,QAAQ,EAAE,CAAC,CAAC;IAC7F,IAAI,CAACF,cAAc,GAAGP,SAAS,CAAC6B,QAAQ,EAAE;IAC1C,IAAI,CAACN,cAAc,GAAGvB,SAAS;EACjC;EAEA,MAAc7C,sBAAsB,GAA+B;IACjE,MAAM;MAAE6D;IAAI,CAAC,GAAG,IAAI,CAACrE,WAAW;IAChC,MAAMmF,GAAG,GAAG,KAAIC,mBAAG,EAAC,IAAI,CAACjF,QAAQ,CAAC8C,KAAK,CAAC;IACxC,IAAI;MACF,MAAMoC,iBAAiB,GAAIhB,GAAG,CAAa7C,GAAG,CAAEP,EAAE,IAAKqE,kBAAkB,CAAC,IAAI,CAACnF,QAAQ,EAAEc,EAAE,EAAE,IAAI,CAACjB,WAAW,CAAC,CAAC;MAC/G,MAAMuF,gBAAgB,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACJ,iBAAiB,CAAC;MAC7D,MAAMF,GAAG,CAACO,KAAK,EAAE;MACjB;MACA,OAAOH,gBAAgB;IACzB,CAAC,CAAC,OAAOI,GAAQ,EAAE;MACjB,MAAMR,GAAG,CAACO,KAAK,EAAE;MACjB,MAAMC,GAAG;IACX;EACF;EAEA,MAAc3D,aAAa,GAAG;IAAA;IAC5B,MAAM4D,aAAa,GAAG,IAAI,CAAC5F,WAAW,CAAC6F,KAAK,IAAI,IAAI,CAACjC,cAAc,CAACQ,IAAI;IACxE,IAAI,IAAI,CAACpE,WAAW,CAACkE,UAAU,EAAE;MAC/B,IAAI,CAAC,IAAI,CAAClE,WAAW,CAACyE,gBAAgB,EAAE;QACtC,IAAI,CAACtE,QAAQ,CAAC8C,KAAK,CAACC,KAAK,CAAC4C,SAAS,CAAC;UAClCzC,SAAS,EAAEuC,aAAa;UACxB1B,UAAU,EAAE,IAAI,CAACN,cAAc,CAACQ,IAAI;UACpC2B,WAAW,EAAE,IAAI,CAACnC,cAAc,CAACX;QACnC,CAAC,CAAC;MACJ;IACF;IAEA,IAAI,CAAC9C,QAAQ,CAAC6F,cAAc,CAAC,IAAI,CAACpC,cAAc,EAAE,0BAAC,IAAI,CAACgB,cAAc,iDAAnB,qBAAqBqB,KAAK,EAAC;IAC9E,IAAI,CAAC9F,QAAQ,CAAC+F,MAAM,CAACC,aAAa,CAAC,IAAI,CAACvB,cAAc,CAAC;EACzD;AACF;AAAC;AAED,eAAeU,kBAAkB,CAACnF,QAAkB,EAAEc,EAAS,EAAEjB,WAAwB,EAA4B;EACnH,MAAMsB,eAAgC,GAAG;IAAEL;EAAG,CAAC;EAC/C,MAAMmF,aAAa,GAAG,CAACC,GAAW,EAAE5E,qBAAqB,GAAG,KAAK,KAAK;IACpEH,eAAe,CAACC,cAAc,GAAG8E,GAAG;IACpC/E,eAAe,CAACG,qBAAqB,GAAGA,qBAAqB;IAC7D,OAAOH,eAAe;EACxB,CAAC;EACD,MAAMgF,cAAc,GAAG,MAAMnG,QAAQ,CAAC8C,KAAK,CAACsD,wBAAwB,CAACtF,EAAE,CAAC;EACxE,IAAI,CAACqF,cAAc,EAAE;IACnB,OAAOF,aAAa,CAAE,aAAYnF,EAAE,CAAC6C,QAAQ,EAAG,qBAAoB,EAAE,IAAI,CAAC;EAC7E;EACA,MAAM0C,QAAQ,GAAGrG,QAAQ,CAAC8C,KAAK,CAACwD,OAAO,CAACC,kBAAkB,CAACC,QAAQ,CAAC1F,EAAE,CAACmD,IAAI,CAAC;EAC5E,IAAIoC,QAAQ,EAAE;IACZ,OAAOJ,aAAa,CACjB,aAAYnF,EAAE,CAACC,sBAAsB,EAAG,0FAAyF,CACnI;EACH;EACA,MAAM0F,OAAO,GAAG3F,EAAE,CAAC2F,OAAO;EAC1B,IAAI,CAACA,OAAO,EAAE;IACZ,OAAOR,aAAa,CAAE,uCAAsCnB,sBAAa,EAAC,EAAE,IAAI,CAAC;EACnF;EACA,MAAM4B,gBAAgB,GAAG1G,QAAQ,CAAC+F,MAAM,CAACY,eAAe,CAAC7F,EAAE,EAAE;IAAE8F,aAAa,EAAE;EAAK,CAAC,CAAC;EACrF,MAAMC,eAAwB,GAAG,MAAMV,cAAc,CAACW,WAAW,CAACL,OAAO,EAAEzG,QAAQ,CAAC8C,KAAK,CAACwD,OAAO,CAAC;EAClG,IAAIO,eAAe,CAACE,SAAS,EAAE,EAAE;IAC/B,OAAOd,aAAa,CAAE,4BAA2B,EAAE,IAAI,CAAC;EAC1D;EACA,IAAI,CAACS,gBAAgB,EAAE;IACrB,IAAI7G,WAAW,CAACmH,uBAAuB,EAAE;MACvC,OAAOf,aAAa,CAAE,aAAYnF,EAAE,CAACC,sBAAsB,EAAG,0BAAyB,EAAE,IAAI,CAAC;IAChG;IACA,OAAO;MAAEW,eAAe,EAAE8C,SAAS;MAAEyC,kBAAkB,EAAEJ,eAAe;MAAE/F,EAAE;MAAEL,YAAY,EAAE;IAAK,CAAC;EACpG;EACA,IAAI,CAACiG,gBAAgB,CAACQ,UAAU,EAAE,EAAE;IAClC;IACA;IACA;IACA,OAAO;MAAExF,eAAe,EAAE8C,SAAS;MAAEyC,kBAAkB,EAAEJ,eAAe;MAAE/F,EAAE;MAAEL,YAAY,EAAE;IAAK,CAAC;EACpG;EACA,MAAM0G,oBAAoB,GAAGT,gBAAgB,CAACD,OAAO;EACrD,IAAIU,oBAAoB,KAAKV,OAAO,EAAE;IACpC,OAAOR,aAAa,CAAE,aAAYnF,EAAE,CAACC,sBAAsB,EAAG,0BAAyB0F,OAAQ,EAAC,EAAE,IAAI,CAAC;EACzG;EACA;EACA,MAAMW,aAAsB,GAAG,MAAMjB,cAAc,CAACW,WAAW,CAACK,oBAAoB,EAAEnH,QAAQ,CAAC8C,KAAK,CAACwD,OAAO,CAAC;EAC7G,MAAM9F,SAAS,GAAG,MAAMR,QAAQ,CAACqH,aAAa,CAACX,gBAAgB,CAAC;EAChE;EACA;EACA,MAAMY,UAAU,GAAG,MAAMtH,QAAQ,CAACuH,6BAA6B,CAACH,aAAa,EAAE5G,SAAS,CAAC;EACzF,IAAIC,YAAqD;EACzD,MAAM+G,gBAAgB,GAAG,MAAM;IAC7B,MAAMnD,IAAI,GAAG8B,cAAc,CAACsB,OAAO,EAAE;IACrC,IAAI,CAACpD,IAAI,EAAE,OAAO,KAAK;IACvB,IAAI,CAACqC,gBAAgB,CAACD,OAAO,EAAE,OAAO,KAAK;IAC3C,MAAMiB,UAAU,GAAGvB,cAAc,CAACwB,mBAAmB,CAACtD,IAAI,CAAC;IAC3D,MAAMuD,WAAW,GAAGF,UAAU,IAAIrD,IAAI,CAACV,QAAQ,EAAE;IACjD,OAAO+C,gBAAgB,CAACD,OAAO,KAAKmB,WAAW;EACjD,CAAC;EACD,IAAIN,UAAU,EAAE;IACd,IAAI,CAACE,gBAAgB,EAAE,EAAE;MACvB,MAAM,KAAI3G,uBAAY,EACnB,sBAAqBC,EAAE,CAACC,sBAAsB,EAAG,yDAAwD,CAC3G;IACH;IAEA,MAAM8G,cAAuB,GAAG,MAAM1B,cAAc,CAACW,WAAW,CAC9DJ,gBAAgB,CAACD,OAAO;IAAY;IACpCzG,QAAQ,CAAC8C,KAAK,CAACwD,OAAO,CACvB;IACD7F,YAAY,GAAG,MAAM,IAAAqH,wBAAa,EAAC;MACjC9H,QAAQ;MACR6H,cAAc;MACdE,UAAU,EAAEtB,OAAO;MACnBuB,gBAAgB,EAAExH,SAAS;MAC3ByH,YAAY,EAAG,GAAEd,oBAAqB,WAAU;MAChDC;IACF,CAAC,CAAC;EACJ;EACA;EACA,OAAO;IAAE1F,eAAe,EAAElB,SAAS;IAAEyG,kBAAkB,EAAEJ,eAAe;IAAE/F,EAAE;IAAEL;EAAa,CAAC;AAC9F"}