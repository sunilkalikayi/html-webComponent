/// <reference types="react" />
import { RouteProps } from 'react-router-dom';
import { Harmony } from '@teambit/harmony';
import { UiUI } from '@teambit/ui';
import { NavigationSlot, RouteSlot } from '@teambit/ui-foundation.ui.react-router.slot-router';
import { ScopeUI } from '@teambit/scope';
import { WorkspaceUI } from '@teambit/workspace';
import { ComponentID, ComponentUI } from '@teambit/component';
import { SidebarUI } from '@teambit/sidebar';
import { MenuWidget, MenuWidgetSlot } from '@teambit/ui-foundation.ui.menu';
import { LaneOverviewLine, LaneOverviewLineSlot } from '@teambit/lanes.ui.lane-overview';
import { LanesNavPlugin, LanesOrderedNavigationSlot } from '@teambit/lanes.ui.menus.lanes-overview-menu';
import { LanesProvider, useLanes } from '@teambit/lanes.hooks.use-lanes';
import { LaneId } from '@teambit/lane-id';
export declare class LanesUI {
    private componentUi;
    private routeSlot;
    private navSlot;
    private menuWidgetSlot;
    /**
     * overview line slot to add new lines beneath the overview section
     */
    private overviewSlot;
    private workspace?;
    private scope?;
    static dependencies: import("@teambit/harmony").Aspect[];
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static slots: (((registerFn: () => string) => import("@teambit/harmony").SlotRegistry<RouteProps>) | ((registerFn: () => string) => import("@teambit/harmony").SlotRegistry<NavigationSlot>) | ((registerFn: () => string) => import("@teambit/harmony").SlotRegistry<LaneOverviewLineSlot>))[];
    constructor(componentUi: ComponentUI, routeSlot: RouteSlot, navSlot: LanesOrderedNavigationSlot, menuWidgetSlot: MenuWidgetSlot, 
    /**
     * overview line slot to add new lines beneath the overview section
     */
    overviewSlot: LaneOverviewLineSlot, workspace?: WorkspaceUI | undefined, scope?: ScopeUI | undefined);
    private readonly lanesHost;
    private readonly hostAspect?;
    private readonly host;
    private registerHostAspectRoutes;
    getLaneRoutes(): {
        path: string;
        children: JSX.Element;
    }[];
    overrideComputeLaneUrl(fn: () => {
        prefix: string;
        path: string;
        getLaneIdFromPathname: (pathname: string) => LaneId | undefined;
        getLaneUrl: (laneId: LaneId, relative?: boolean) => string;
        getLaneComponentUrl: (componentId: ComponentID, laneId: LaneId) => string;
    }): void;
    getLaneComponentIdFromUrl: () => ComponentID | undefined;
    useComponentId: () => string | undefined;
    useComponentFilters: () => {
        log: {
            logHead: string | undefined;
        } | undefined;
    };
    getLaneComponent(): JSX.Element;
    getLaneComponentMenu(): JSX.Element;
    getLaneOverview(): JSX.Element;
    getMenuRoutes(): {
        path: string;
        children: JSX.Element;
    }[];
    getLanesOverviewMenu(): JSX.Element;
    registerMenuWidget(...menuItems: MenuWidget[]): void;
    private registerLanesRoutes;
    private registerRoutes;
    getLanesSwitcher(): JSX.Element;
    getLanesProvider(): typeof LanesProvider;
    getUseLanes(): typeof useLanes;
    private registerLanesDropdown;
    private renderContext;
    registerRoute(route: RouteProps): this;
    /**
     * register a new line beneath the lane overview section.
     */
    registerOverviewLine(...lines: LaneOverviewLine[]): this;
    registerNavigation(routes: LanesNavPlugin[]): void;
    static provider([uiUi, componentUi, workspaceUi, scopeUi]: [UiUI, ComponentUI, WorkspaceUI, ScopeUI, SidebarUI], _: any, [routeSlot, overviewSlot, navSlot, menuWidgetSlot]: [
        RouteSlot,
        LaneOverviewLineSlot,
        LanesOrderedNavigationSlot,
        MenuWidgetSlot
    ], harmony: Harmony): Promise<LanesUI>;
}
export default LanesUI;
