{"version":3,"names":["TesterMain","constructor","patterns","graphql","envs","workspace","service","task","devFiles","builder","test","components","opts","options","getOptions","envsRuntime","createEnvironment","env","runEnv","results","run","junit","generateJUnit","filePath","testsResults","map","envResult","data","flat","jUnit","testsResultsToJUnitFormat","compact","fs","outputFile","watch","onTestRunComplete","forEach","component","_testsResults","componentId","toString","uiWatch","list","debug","ui","getTestsResults","idHasVersion","entry","get","TesterAspect","id","isModified","getDataByAspect","tests","loading","getTestsResultsFromState","getPatterns","getComponentDevPatterns","calculateEnv","componentPatterns","getTestsDevPatterns","getDevPatternToRegister","bind","getTestFiles","detectTestFiles","defaults","merge","provider","cli","loggerAspect","config","logger","createLogger","testerService","TesterService","pubsub","registerService","tester","TesterTask","registerDevPattern","registerOnStart","watchOnStart","undefined","register","TestCmd","testerSchema","MainRuntime","CLIAspect","EnvsAspect","WorkspaceAspect","LoggerAspect","GraphqlAspect","UIAspect","DevFilesAspect","BuilderAspect","addRuntime"],"sources":["tester.main.runtime.ts"],"sourcesContent":["import fs from 'fs-extra';\nimport { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport { Component, IComponent } from '@teambit/component';\nimport compact from 'lodash.compact';\nimport { EnvsAspect, EnvsExecutionResult, EnvsMain } from '@teambit/envs';\nimport { LoggerAspect, LoggerMain } from '@teambit/logger';\nimport { Workspace, WorkspaceAspect } from '@teambit/workspace';\nimport { GraphqlAspect, GraphqlMain } from '@teambit/graphql';\nimport { BuilderAspect, BuilderMain } from '@teambit/builder';\nimport { UiMain, UIAspect } from '@teambit/ui';\nimport { merge } from 'lodash';\nimport DevFilesAspect, { DevFilesMain } from '@teambit/dev-files';\nimport { TestsResult } from '@teambit/tests-results';\nimport { ComponentsResults, CallbackFn, Tests } from './tester';\nimport { TestCmd } from './test.cmd';\nimport { TesterAspect } from './tester.aspect';\nimport { TesterService } from './tester.service';\nimport { TesterTask } from './tester.task';\nimport { detectTestFiles } from './utils';\nimport { testerSchema } from './tester.graphql';\nimport { testsResultsToJUnitFormat } from './utils/junit-generator';\n\nexport type TesterExtensionConfig = {\n  /**\n   * regex of the text environment.\n   */\n  testRegex: string;\n\n  /**\n   * determine whether to watch on start.\n   */\n  watchOnStart: boolean;\n  patterns: string[];\n};\n\nexport type TesterOptions = {\n  /**\n   * start the tester in watch mode.\n   */\n  watch: boolean;\n\n  /**\n   * start the tester in debug mode.\n   */\n  debug: boolean;\n\n  /**\n   * start the tester in debug mode.\n   */\n  ui?: boolean;\n\n  /**\n   * initiate the tester on given env.\n   */\n  env?: string;\n\n  /**\n   * generate JUnit files on the specified dir\n   */\n  junit?: string;\n\n  /**\n   * show code coverage\n   */\n  coverage?: boolean;\n\n  callback?: CallbackFn;\n};\n\nexport class TesterMain {\n  static runtime = MainRuntime;\n  static dependencies = [\n    CLIAspect,\n    EnvsAspect,\n    WorkspaceAspect,\n    LoggerAspect,\n    GraphqlAspect,\n    UIAspect,\n    DevFilesAspect,\n    BuilderAspect,\n  ];\n\n  constructor(\n    private patterns: string[],\n    /**\n     * graphql extension.\n     */\n    private graphql: GraphqlMain,\n\n    /**\n     * envs extension.\n     */\n    private envs: EnvsMain,\n\n    /**\n     * workspace extension.\n     */\n    private workspace: Workspace,\n\n    /**\n     * tester service.\n     */\n    readonly service: TesterService,\n\n    /**\n     * build task.\n     */\n    readonly task: TesterTask,\n\n    private devFiles: DevFilesMain,\n\n    private builder: BuilderMain\n  ) {}\n\n  _testsResults: { [componentId: string]: ComponentsResults } | undefined[] = [];\n\n  async test(components: Component[], opts?: TesterOptions): Promise<EnvsExecutionResult<Tests>> {\n    const options = this.getOptions(opts);\n    const envsRuntime = await this.envs.createEnvironment(components);\n    if (opts?.env) {\n      return envsRuntime.runEnv(opts.env, this.service, options);\n    }\n    const results = await envsRuntime.run(this.service, options);\n    if (opts?.junit) {\n      await this.generateJUnit(opts?.junit, results);\n    }\n    return results;\n  }\n\n  private async generateJUnit(filePath: string, testsResults: EnvsExecutionResult<Tests>) {\n    const components = testsResults.results.map((envResult) => envResult.data?.components).flat();\n    const jUnit = testsResultsToJUnitFormat(compact(components));\n    await fs.outputFile(filePath, jUnit);\n  }\n\n  /**\n   * watch all components for changes and test upon each.\n   */\n  async watch(components: Component[], opts?: TesterOptions) {\n    const options = this.getOptions(opts);\n    const envsRuntime = await this.envs.createEnvironment(components);\n    if (opts?.env) {\n      return envsRuntime.runEnv(opts.env, this.service, options);\n    }\n\n    this.service.onTestRunComplete((results) => {\n      results.components.forEach((component) => {\n        this._testsResults[component.componentId.toString()] = component;\n      });\n    });\n    return envsRuntime.run(this.service, options);\n  }\n\n  async uiWatch() {\n    const components = await this.workspace.list();\n    return this.watch(components, { watch: true, debug: false, ui: true });\n  }\n\n  async getTestsResults(\n    component: IComponent,\n    idHasVersion = true\n  ): Promise<{ testsResults?: TestsResult; loading: boolean } | undefined> {\n    const entry = component.get(TesterAspect.id);\n    const isModified = !idHasVersion && (await component.isModified());\n    const data = this.builder.getDataByAspect(component, TesterAspect.id) as { tests: TestsResult };\n    if ((entry || data) && !isModified) {\n      return { testsResults: data?.tests || entry?.data.tests, loading: false };\n    }\n    return this.getTestsResultsFromState(component);\n  }\n\n  private getTestsResultsFromState(component: IComponent) {\n    const tests = this._testsResults[component.id.toString()];\n    return { testsResults: tests?.results, loading: tests?.loading || false };\n  }\n\n  /**\n   * Get the tests patterns from the config. (used as default patterns in case the env does not provide them via getTestsDevPatterns)\n   * @returns\n   */\n  getPatterns() {\n    return this.patterns;\n  }\n\n  getComponentDevPatterns(component: Component) {\n    const env = this.envs.calculateEnv(component).env;\n    const componentPatterns: string[] = env.getTestsDevPatterns\n      ? env.getTestsDevPatterns(component)\n      : this.getPatterns();\n    return componentPatterns;\n  }\n\n  getDevPatternToRegister() {\n    return this.getComponentDevPatterns.bind(this);\n  }\n\n  /**\n   * get all test files of a component.\n   */\n  getTestFiles(component: Component) {\n    return detectTestFiles(component, this.devFiles);\n  }\n\n  private getOptions(options?: TesterOptions): TesterOptions {\n    const defaults = {\n      watch: false,\n      debug: false,\n    };\n\n    return merge(defaults, options);\n  }\n\n  static defaultConfig = {\n    /**\n     * default test regex for which files tester to apply on.\n     */\n    patterns: ['**/*.spec.+(js|ts|jsx|tsx)', '**/*.test.+(js|ts|jsx|tsx)'],\n\n    /**\n     * determine whether to watch on start.\n     */\n    watchOnStart: true,\n  };\n\n  static async provider(\n    [cli, envs, workspace, loggerAspect, graphql, ui, devFiles, builder]: [\n      CLIMain,\n      EnvsMain,\n      Workspace,\n      LoggerMain,\n      GraphqlMain,\n      UiMain,\n      DevFilesMain,\n      BuilderMain\n    ],\n    config: TesterExtensionConfig\n  ) {\n    const logger = loggerAspect.createLogger(TesterAspect.id);\n    const testerService = new TesterService(workspace, logger, graphql.pubsub, devFiles);\n    envs.registerService(testerService);\n    const tester = new TesterMain(\n      config.patterns,\n      graphql,\n      envs,\n      workspace,\n      testerService,\n      new TesterTask(TesterAspect.id, devFiles),\n      devFiles,\n      builder\n    );\n    devFiles.registerDevPattern(tester.getDevPatternToRegister());\n\n    if (workspace) {\n      ui.registerOnStart(async () => {\n        if (!config.watchOnStart) return undefined;\n        await tester.uiWatch();\n        return undefined;\n      });\n    }\n    cli.register(new TestCmd(tester, workspace, logger));\n\n    graphql.register(testerSchema(tester, graphql));\n\n    return tester;\n  }\n}\n\nTesterAspect.addRuntime(TesterMain);\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAGA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAiDO,MAAMA,UAAU,CAAC;EAatBC,WAAW,CACDC,QAAkB;EAC1B;AACJ;AACA;EACYC,OAAoB;EAE5B;AACJ;AACA;EACYC,IAAc;EAEtB;AACJ;AACA;EACYC,SAAoB;EAE5B;AACJ;AACA;EACaC,OAAsB;EAE/B;AACJ;AACA;EACaC,IAAgB,EAEjBC,QAAsB,EAEtBC,OAAoB,EAC5B;IAAA,KA7BQP,QAAkB,GAAlBA,QAAkB;IAAA,KAIlBC,OAAoB,GAApBA,OAAoB;IAAA,KAKpBC,IAAc,GAAdA,IAAc;IAAA,KAKdC,SAAoB,GAApBA,SAAoB;IAAA,KAKnBC,OAAsB,GAAtBA,OAAsB;IAAA,KAKtBC,IAAgB,GAAhBA,IAAgB;IAAA,KAEjBC,QAAsB,GAAtBA,QAAsB;IAAA,KAEtBC,OAAoB,GAApBA,OAAoB;IAAA,uDAG8C,EAAE;EAF3E;EAIH,MAAMC,IAAI,CAACC,UAAuB,EAAEC,IAAoB,EAAuC;IAC7F,MAAMC,OAAO,GAAG,IAAI,CAACC,UAAU,CAACF,IAAI,CAAC;IACrC,MAAMG,WAAW,GAAG,MAAM,IAAI,CAACX,IAAI,CAACY,iBAAiB,CAACL,UAAU,CAAC;IACjE,IAAIC,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEK,GAAG,EAAE;MACb,OAAOF,WAAW,CAACG,MAAM,CAACN,IAAI,CAACK,GAAG,EAAE,IAAI,CAACX,OAAO,EAAEO,OAAO,CAAC;IAC5D;IACA,MAAMM,OAAO,GAAG,MAAMJ,WAAW,CAACK,GAAG,CAAC,IAAI,CAACd,OAAO,EAAEO,OAAO,CAAC;IAC5D,IAAID,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAES,KAAK,EAAE;MACf,MAAM,IAAI,CAACC,aAAa,CAACV,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAES,KAAK,EAAEF,OAAO,CAAC;IAChD;IACA,OAAOA,OAAO;EAChB;EAEA,MAAcG,aAAa,CAACC,QAAgB,EAAEC,YAAwC,EAAE;IACtF,MAAMb,UAAU,GAAGa,YAAY,CAACL,OAAO,CAACM,GAAG,CAAEC,SAAS;MAAA;MAAA,0BAAKA,SAAS,CAACC,IAAI,oDAAd,gBAAgBhB,UAAU;IAAA,EAAC,CAACiB,IAAI,EAAE;IAC7F,MAAMC,KAAK,GAAG,IAAAC,2CAAyB,EAAC,IAAAC,iBAAO,EAACpB,UAAU,CAAC,CAAC;IAC5D,MAAMqB,kBAAE,CAACC,UAAU,CAACV,QAAQ,EAAEM,KAAK,CAAC;EACtC;;EAEA;AACF;AACA;EACE,MAAMK,KAAK,CAACvB,UAAuB,EAAEC,IAAoB,EAAE;IACzD,MAAMC,OAAO,GAAG,IAAI,CAACC,UAAU,CAACF,IAAI,CAAC;IACrC,MAAMG,WAAW,GAAG,MAAM,IAAI,CAACX,IAAI,CAACY,iBAAiB,CAACL,UAAU,CAAC;IACjE,IAAIC,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEK,GAAG,EAAE;MACb,OAAOF,WAAW,CAACG,MAAM,CAACN,IAAI,CAACK,GAAG,EAAE,IAAI,CAACX,OAAO,EAAEO,OAAO,CAAC;IAC5D;IAEA,IAAI,CAACP,OAAO,CAAC6B,iBAAiB,CAAEhB,OAAO,IAAK;MAC1CA,OAAO,CAACR,UAAU,CAACyB,OAAO,CAAEC,SAAS,IAAK;QACxC,IAAI,CAACC,aAAa,CAACD,SAAS,CAACE,WAAW,CAACC,QAAQ,EAAE,CAAC,GAAGH,SAAS;MAClE,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,OAAOtB,WAAW,CAACK,GAAG,CAAC,IAAI,CAACd,OAAO,EAAEO,OAAO,CAAC;EAC/C;EAEA,MAAM4B,OAAO,GAAG;IACd,MAAM9B,UAAU,GAAG,MAAM,IAAI,CAACN,SAAS,CAACqC,IAAI,EAAE;IAC9C,OAAO,IAAI,CAACR,KAAK,CAACvB,UAAU,EAAE;MAAEuB,KAAK,EAAE,IAAI;MAAES,KAAK,EAAE,KAAK;MAAEC,EAAE,EAAE;IAAK,CAAC,CAAC;EACxE;EAEA,MAAMC,eAAe,CACnBR,SAAqB,EACrBS,YAAY,GAAG,IAAI,EACoD;IACvE,MAAMC,KAAK,GAAGV,SAAS,CAACW,GAAG,CAACC,sBAAY,CAACC,EAAE,CAAC;IAC5C,MAAMC,UAAU,GAAG,CAACL,YAAY,KAAK,MAAMT,SAAS,CAACc,UAAU,EAAE,CAAC;IAClE,MAAMxB,IAAI,GAAG,IAAI,CAAClB,OAAO,CAAC2C,eAAe,CAACf,SAAS,EAAEY,sBAAY,CAACC,EAAE,CAA2B;IAC/F,IAAI,CAACH,KAAK,IAAIpB,IAAI,KAAK,CAACwB,UAAU,EAAE;MAClC,OAAO;QAAE3B,YAAY,EAAE,CAAAG,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAE0B,KAAK,MAAIN,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEpB,IAAI,CAAC0B,KAAK;QAAEC,OAAO,EAAE;MAAM,CAAC;IAC3E;IACA,OAAO,IAAI,CAACC,wBAAwB,CAAClB,SAAS,CAAC;EACjD;EAEQkB,wBAAwB,CAAClB,SAAqB,EAAE;IACtD,MAAMgB,KAAK,GAAG,IAAI,CAACf,aAAa,CAACD,SAAS,CAACa,EAAE,CAACV,QAAQ,EAAE,CAAC;IACzD,OAAO;MAAEhB,YAAY,EAAE6B,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAElC,OAAO;MAAEmC,OAAO,EAAE,CAAAD,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEC,OAAO,KAAI;IAAM,CAAC;EAC3E;;EAEA;AACF;AACA;AACA;EACEE,WAAW,GAAG;IACZ,OAAO,IAAI,CAACtD,QAAQ;EACtB;EAEAuD,uBAAuB,CAACpB,SAAoB,EAAE;IAC5C,MAAMpB,GAAG,GAAG,IAAI,CAACb,IAAI,CAACsD,YAAY,CAACrB,SAAS,CAAC,CAACpB,GAAG;IACjD,MAAM0C,iBAA2B,GAAG1C,GAAG,CAAC2C,mBAAmB,GACvD3C,GAAG,CAAC2C,mBAAmB,CAACvB,SAAS,CAAC,GAClC,IAAI,CAACmB,WAAW,EAAE;IACtB,OAAOG,iBAAiB;EAC1B;EAEAE,uBAAuB,GAAG;IACxB,OAAO,IAAI,CAACJ,uBAAuB,CAACK,IAAI,CAAC,IAAI,CAAC;EAChD;;EAEA;AACF;AACA;EACEC,YAAY,CAAC1B,SAAoB,EAAE;IACjC,OAAO,IAAA2B,wBAAe,EAAC3B,SAAS,EAAE,IAAI,CAAC7B,QAAQ,CAAC;EAClD;EAEQM,UAAU,CAACD,OAAuB,EAAiB;IACzD,MAAMoD,QAAQ,GAAG;MACf/B,KAAK,EAAE,KAAK;MACZS,KAAK,EAAE;IACT,CAAC;IAED,OAAO,IAAAuB,gBAAK,EAACD,QAAQ,EAAEpD,OAAO,CAAC;EACjC;EAcA,aAAasD,QAAQ,CACnB,CAACC,GAAG,EAAEhE,IAAI,EAAEC,SAAS,EAAEgE,YAAY,EAAElE,OAAO,EAAEyC,EAAE,EAAEpC,QAAQ,EAAEC,OAAO,CASlE,EACD6D,MAA6B,EAC7B;IACA,MAAMC,MAAM,GAAGF,YAAY,CAACG,YAAY,CAACvB,sBAAY,CAACC,EAAE,CAAC;IACzD,MAAMuB,aAAa,GAAG,KAAIC,wBAAa,EAACrE,SAAS,EAAEkE,MAAM,EAAEpE,OAAO,CAACwE,MAAM,EAAEnE,QAAQ,CAAC;IACpFJ,IAAI,CAACwE,eAAe,CAACH,aAAa,CAAC;IACnC,MAAMI,MAAM,GAAG,IAAI7E,UAAU,CAC3BsE,MAAM,CAACpE,QAAQ,EACfC,OAAO,EACPC,IAAI,EACJC,SAAS,EACToE,aAAa,EACb,KAAIK,qBAAU,EAAC7B,sBAAY,CAACC,EAAE,EAAE1C,QAAQ,CAAC,EACzCA,QAAQ,EACRC,OAAO,CACR;IACDD,QAAQ,CAACuE,kBAAkB,CAACF,MAAM,CAAChB,uBAAuB,EAAE,CAAC;IAE7D,IAAIxD,SAAS,EAAE;MACbuC,EAAE,CAACoC,eAAe,CAAC,YAAY;QAC7B,IAAI,CAACV,MAAM,CAACW,YAAY,EAAE,OAAOC,SAAS;QAC1C,MAAML,MAAM,CAACpC,OAAO,EAAE;QACtB,OAAOyC,SAAS;MAClB,CAAC,CAAC;IACJ;IACAd,GAAG,CAACe,QAAQ,CAAC,KAAIC,eAAO,EAACP,MAAM,EAAExE,SAAS,EAAEkE,MAAM,CAAC,CAAC;IAEpDpE,OAAO,CAACgF,QAAQ,CAAC,IAAAE,uBAAY,EAACR,MAAM,EAAE1E,OAAO,CAAC,CAAC;IAE/C,OAAO0E,MAAM;EACf;AACF;AAAC;AAAA,gCApMY7E,UAAU,aACJsF,kBAAW;AAAA,gCADjBtF,UAAU,kBAEC,CACpBuF,gBAAS,EACTC,kBAAU,EACVC,4BAAe,EACfC,sBAAY,EACZC,wBAAa,EACbC,cAAQ,EACRC,mBAAc,EACdC,wBAAa,CACd;AAAA,gCAXU9F,UAAU,mBA+IE;EACrB;AACJ;AACA;EACIE,QAAQ,EAAE,CAAC,4BAA4B,EAAE,4BAA4B,CAAC;EAEtE;AACJ;AACA;EACI+E,YAAY,EAAE;AAChB,CAAC;AA6CHhC,sBAAY,CAAC8C,UAAU,CAAC/F,UAAU,CAAC"}