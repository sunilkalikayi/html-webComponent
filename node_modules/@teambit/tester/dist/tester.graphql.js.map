{"version":3,"names":["testerSchema","tester","graphql","typeDefs","gql","resolvers","Subscription","testsChanged","subscribe","withFilter","pubsub","asyncIterator","OnTestsChanged","payload","variables","id","ComponentHost","getTests","host","componentId","resolveComponentId","idHasVersion","BitId","parse","hasVersion","component","get","testsResults","getTestsResults"],"sources":["tester.graphql.ts"],"sourcesContent":["import { GraphqlMain, Schema } from '@teambit/graphql';\nimport { ComponentFactory } from '@teambit/component';\nimport { withFilter } from 'graphql-subscriptions';\nimport { BitId } from '@teambit/legacy/dist/bit-id';\nimport gql from 'graphql-tag';\n\nimport { TesterMain } from './tester.main.runtime';\nimport { OnTestsChanged } from './tester.service';\n\nexport function testerSchema(tester: TesterMain, graphql: GraphqlMain): Schema {\n  return {\n    typeDefs: gql`\n      extend type ComponentHost {\n        getTests(id: String!): Tests\n      }\n\n      type Subscription {\n        testsChanged(id: String!): Tests\n      }\n\n      type Tests {\n        loading: Boolean!\n        testsResults: TestsResults\n      }\n\n      type TestsChanged {\n        testsResults: TestsResults\n      }\n\n      type TestsResults {\n        testFiles: [TestFiles]\n        success: Boolean\n        start: Int\n      }\n\n      type TestFiles {\n        file: String\n        tests: [Tests]\n        pass: Int\n        failed: Int\n        pending: Int\n        duration: Int\n        slow: Boolean\n        errorStr: String\n      }\n\n      type Tests {\n        ancestor: [String]\n        name: String\n        duration: String\n        status: String\n        error: String\n      }\n    `,\n    resolvers: {\n      Subscription: {\n        testsChanged: {\n          subscribe: withFilter(\n            () => graphql.pubsub.asyncIterator(OnTestsChanged),\n            (payload, variables) => {\n              return payload.testsChanged.id === variables.id;\n            }\n          ),\n        },\n      },\n\n      ComponentHost: {\n        getTests: async (host: ComponentFactory, { id }: { id: string }) => {\n          const componentId = await host.resolveComponentId(id);\n          const idHasVersion = BitId.parse(id).hasVersion();\n          const component = await host.get(componentId);\n          if (!component) return null;\n          const testsResults = await tester.getTestsResults(component, idHasVersion);\n          if (!testsResults) return null;\n          return testsResults;\n        },\n      },\n    },\n  };\n}\n"],"mappings":";;;;;;;;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAGA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEO,SAASA,YAAY,CAACC,MAAkB,EAAEC,OAAoB,EAAU;EAC7E,OAAO;IACLC,QAAQ,EAAE,IAAAC,qBAAG,CAAC;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACDC,SAAS,EAAE;MACTC,YAAY,EAAE;QACZC,YAAY,EAAE;UACZC,SAAS,EAAE,IAAAC,kCAAU,EACnB,MAAMP,OAAO,CAACQ,MAAM,CAACC,aAAa,CAACC,wBAAc,CAAC,EAClD,CAACC,OAAO,EAAEC,SAAS,KAAK;YACtB,OAAOD,OAAO,CAACN,YAAY,CAACQ,EAAE,KAAKD,SAAS,CAACC,EAAE;UACjD,CAAC;QAEL;MACF,CAAC;MAEDC,aAAa,EAAE;QACbC,QAAQ,EAAE,OAAOC,IAAsB,EAAE;UAAEH;QAAmB,CAAC,KAAK;UAClE,MAAMI,WAAW,GAAG,MAAMD,IAAI,CAACE,kBAAkB,CAACL,EAAE,CAAC;UACrD,MAAMM,YAAY,GAAGC,cAAK,CAACC,KAAK,CAACR,EAAE,CAAC,CAACS,UAAU,EAAE;UACjD,MAAMC,SAAS,GAAG,MAAMP,IAAI,CAACQ,GAAG,CAACP,WAAW,CAAC;UAC7C,IAAI,CAACM,SAAS,EAAE,OAAO,IAAI;UAC3B,MAAME,YAAY,GAAG,MAAM1B,MAAM,CAAC2B,eAAe,CAACH,SAAS,EAAEJ,YAAY,CAAC;UAC1E,IAAI,CAACM,YAAY,EAAE,OAAO,IAAI;UAC9B,OAAOA,YAAY;QACrB;MACF;IACF;EACF,CAAC;AACH"}