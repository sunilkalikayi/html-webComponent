{"version":3,"names":["TesterUI","constructor","component","emptyStateSlot","registerEmptyState","emptyStateComponent","register","provider","componentCompare","config","testerUi","section","TestsSection","testerCompareSection","TesterCompareSection","registerRoute","route","registerNavigation","navigationLink","order","props","registerRoutes","ComponentAspect","ComponentCompareAspect","UIRuntime","Slot","withType","TesterAspect","addRuntime"],"sources":["tester.ui.runtime.tsx"],"sourcesContent":["import { ComponentType } from 'react';\nimport { UIRuntime } from '@teambit/ui';\nimport { SlotRegistry, Slot } from '@teambit/harmony';\nimport { ComponentAspect, ComponentUI } from '@teambit/component';\nimport { ComponentCompareUI, ComponentCompareAspect } from '@teambit/component-compare';\nimport { TestsSection } from './tests.section';\nimport { TesterAspect } from './tester.aspect';\nimport { TesterCompareSection } from './tester.compare.section';\n\nexport type EmptyStateSlot = SlotRegistry<ComponentType>;\nexport class TesterUI {\n  static dependencies = [ComponentAspect, ComponentCompareAspect];\n\n  static runtime = UIRuntime;\n\n  stageKey?: string;\n\n  constructor(private component: ComponentUI, private emptyStateSlot: EmptyStateSlot) {}\n\n  /**\n   * register a new tester empty state. this allows to register a different empty state from each environment for example.\n   */\n  registerEmptyState(emptyStateComponent: ComponentType) {\n    this.emptyStateSlot.register(emptyStateComponent);\n    return this;\n  }\n\n  static slots = [Slot.withType<ComponentType>()];\n\n  static async provider(\n    [component, componentCompare]: [ComponentUI, ComponentCompareUI],\n    config,\n    [emptyStateSlot]: [EmptyStateSlot]\n  ) {\n    const testerUi = new TesterUI(component, emptyStateSlot);\n    const section = new TestsSection(emptyStateSlot);\n    const testerCompareSection = new TesterCompareSection(emptyStateSlot);\n    component.registerRoute(section.route);\n    component.registerNavigation(section.navigationLink, section.order);\n    componentCompare.registerNavigation({\n      props: testerCompareSection.navigationLink,\n      order: testerCompareSection.navigationLink.order,\n    });\n    componentCompare.registerRoutes([testerCompareSection.route]);\n    return testerUi;\n  }\n}\n\nexport default TesterUI;\n\nTesterAspect.addRuntime(TesterUI);\n"],"mappings":";;;;;;;;;;;;;;;;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAGO,MAAMA,QAAQ,CAAC;EAOpBC,WAAW,CAASC,SAAsB,EAAUC,cAA8B,EAAE;IAAA,KAAhED,SAAsB,GAAtBA,SAAsB;IAAA,KAAUC,cAA8B,GAA9BA,cAA8B;IAAA;EAAG;;EAErF;AACF;AACA;EACEC,kBAAkB,CAACC,mBAAkC,EAAE;IACrD,IAAI,CAACF,cAAc,CAACG,QAAQ,CAACD,mBAAmB,CAAC;IACjD,OAAO,IAAI;EACb;EAIA,aAAaE,QAAQ,CACnB,CAACL,SAAS,EAAEM,gBAAgB,CAAoC,EAChEC,MAAM,EACN,CAACN,cAAc,CAAmB,EAClC;IACA,MAAMO,QAAQ,GAAG,IAAIV,QAAQ,CAACE,SAAS,EAAEC,cAAc,CAAC;IACxD,MAAMQ,OAAO,GAAG,KAAIC,qBAAY,EAACT,cAAc,CAAC;IAChD,MAAMU,oBAAoB,GAAG,KAAIC,qCAAoB,EAACX,cAAc,CAAC;IACrED,SAAS,CAACa,aAAa,CAACJ,OAAO,CAACK,KAAK,CAAC;IACtCd,SAAS,CAACe,kBAAkB,CAACN,OAAO,CAACO,cAAc,EAAEP,OAAO,CAACQ,KAAK,CAAC;IACnEX,gBAAgB,CAACS,kBAAkB,CAAC;MAClCG,KAAK,EAAEP,oBAAoB,CAACK,cAAc;MAC1CC,KAAK,EAAEN,oBAAoB,CAACK,cAAc,CAACC;IAC7C,CAAC,CAAC;IACFX,gBAAgB,CAACa,cAAc,CAAC,CAACR,oBAAoB,CAACG,KAAK,CAAC,CAAC;IAC7D,OAAON,QAAQ;EACjB;AACF;AAAC;AAAA,gCApCYV,QAAQ,kBACG,CAACsB,4BAAe,EAAEC,0CAAsB,CAAC;AAAA,gCADpDvB,QAAQ,aAGFwB,eAAS;AAAA,gCAHfxB,QAAQ,WAiBJ,CAACyB,eAAI,CAACC,QAAQ,EAAiB,CAAC;AAAA,eAqBlC1B,QAAQ;AAAA;AAEvB2B,sBAAY,CAACC,UAAU,CAAC5B,QAAQ,CAAC"}