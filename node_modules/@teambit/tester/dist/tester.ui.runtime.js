"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TesterUI = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _ui() {
  const data = require("@teambit/ui");
  _ui = function () {
    return data;
  };
  return data;
}
function _harmony() {
  const data = require("@teambit/harmony");
  _harmony = function () {
    return data;
  };
  return data;
}
function _component() {
  const data = require("@teambit/component");
  _component = function () {
    return data;
  };
  return data;
}
function _componentCompare() {
  const data = require("@teambit/component-compare");
  _componentCompare = function () {
    return data;
  };
  return data;
}
function _tests() {
  const data = require("./tests.section");
  _tests = function () {
    return data;
  };
  return data;
}
function _tester() {
  const data = require("./tester.aspect");
  _tester = function () {
    return data;
  };
  return data;
}
function _testerCompare() {
  const data = require("./tester.compare.section");
  _testerCompare = function () {
    return data;
  };
  return data;
}
class TesterUI {
  constructor(component, emptyStateSlot) {
    this.component = component;
    this.emptyStateSlot = emptyStateSlot;
    (0, _defineProperty2().default)(this, "stageKey", void 0);
  }

  /**
   * register a new tester empty state. this allows to register a different empty state from each environment for example.
   */
  registerEmptyState(emptyStateComponent) {
    this.emptyStateSlot.register(emptyStateComponent);
    return this;
  }
  static async provider([component, componentCompare], config, [emptyStateSlot]) {
    const testerUi = new TesterUI(component, emptyStateSlot);
    const section = new (_tests().TestsSection)(emptyStateSlot);
    const testerCompareSection = new (_testerCompare().TesterCompareSection)(emptyStateSlot);
    component.registerRoute(section.route);
    component.registerNavigation(section.navigationLink, section.order);
    componentCompare.registerNavigation({
      props: testerCompareSection.navigationLink,
      order: testerCompareSection.navigationLink.order
    });
    componentCompare.registerRoutes([testerCompareSection.route]);
    return testerUi;
  }
}
exports.TesterUI = TesterUI;
(0, _defineProperty2().default)(TesterUI, "dependencies", [_component().ComponentAspect, _componentCompare().ComponentCompareAspect]);
(0, _defineProperty2().default)(TesterUI, "runtime", _ui().UIRuntime);
(0, _defineProperty2().default)(TesterUI, "slots", [_harmony().Slot.withType()]);
var _default = TesterUI;
exports.default = _default;
_tester().TesterAspect.addRuntime(TesterUI);

//# sourceMappingURL=tester.ui.runtime.js.map