{"version":3,"names":["TestCmd","constructor","tester","workspace","logger","name","description","COMPONENT_PATTERN_HELP","render","userPattern","watch","debug","all","env","scope","junit","coverage","timer","Timer","create","scopeName","undefined","consoleWarning","start","ConsumerNotFound","getPatternWithScope","pattern","patternWithScope","components","getComponentsByUserInput","length","code","data","console","chalk","cyan","off","tests","test","hasErrors","seconds","stop"],"sources":["test.cmd.tsx"],"sourcesContent":["import { Command, CommandOptions } from '@teambit/cli';\nimport chalk from 'chalk';\nimport { Logger } from '@teambit/logger';\nimport { Workspace } from '@teambit/workspace';\nimport { ConsumerNotFound } from '@teambit/legacy/dist/consumer/exceptions';\nimport { Timer } from '@teambit/legacy/dist/toolbox/timer';\nimport { COMPONENT_PATTERN_HELP } from '@teambit/legacy/dist/constants';\nimport { Box, Text } from 'ink';\nimport React from 'react';\nimport type { TesterMain } from './tester.main.runtime';\n\ntype TestFlags = {\n  watch: boolean;\n  debug: boolean;\n  all: boolean;\n  env?: string;\n  scope?: string;\n  junit?: string;\n  coverage?: boolean;\n};\n\nexport class TestCmd implements Command {\n  name = 'test [component-pattern]';\n  description = 'test components in the workspace';\n  arguments = [\n    {\n      name: 'component-pattern',\n      description: COMPONENT_PATTERN_HELP,\n    },\n  ];\n  alias = 'at';\n  group = 'development';\n  options = [\n    ['w', 'watch', 'start the tester in watch mode.'],\n    ['d', 'debug', 'start the tester in debug mode.'],\n    ['a', 'all', 'test all components, not only new and modified'],\n    ['', 'junit <filepath>', 'write tests results as JUnit XML format into the specified file path'],\n    ['', 'coverage', 'show code coverage data'],\n    ['e', 'env <id>', 'test only the given env'],\n    [\n      's',\n      'scope <scope-name>',\n      'DEPRECATED. (use the pattern instead, e.g. \"scopeName/**\"). name of the scope to test',\n    ],\n    // TODO: we need to reduce this redundant casting every time.\n  ] as CommandOptions;\n\n  constructor(private tester: TesterMain, private workspace: Workspace, private logger: Logger) {}\n\n  async render(\n    [userPattern]: [string],\n    { watch = false, debug = false, all = false, env, scope, junit, coverage = false }: TestFlags\n  ) {\n    const timer = Timer.create();\n    const scopeName = typeof scope === 'string' ? scope : undefined;\n    if (scopeName) {\n      this.logger.consoleWarning(\n        `--scope is deprecated, use the pattern argument instead. e.g. \"scopeName/**\" for the entire scope`\n      );\n    }\n    timer.start();\n    if (!this.workspace) throw new ConsumerNotFound();\n\n    const getPatternWithScope = () => {\n      if (!userPattern && !scope) return undefined;\n      const pattern = userPattern || '**';\n      return scopeName ? `${scopeName}/${pattern}` : pattern;\n    };\n    const patternWithScope = getPatternWithScope();\n    const components = await this.workspace.getComponentsByUserInput(all, patternWithScope, true);\n    if (!components.length) {\n      return {\n        code: 0,\n        data: (\n          <Box>\n            <Text bold>\n              no components found to test. use \"--all\" flag to test all components or specify the ids to test,\n              otherwise, only new and modified components will be tested{' '}\n            </Text>\n          </Box>\n        ),\n      };\n    }\n\n    this.logger.console(\n      `testing total of ${components.length} components in workspace '${chalk.cyan(this.workspace.name)}'`\n    );\n\n    let code = 0;\n    if (watch && !debug) {\n      // avoid turning off the logger for non-watch scenario. otherwise, when this aspect throws errors, they'll be\n      // swallowed. (Jest errors are shown regardless via Jest, but if the tester is unable to run Jest in the first\n      // place, these errors won't be shown)\n      this.logger.off();\n      await this.tester.watch(components, {\n        watch,\n        debug,\n        env,\n        coverage,\n      });\n    } else {\n      const tests = await this.tester.test(components, {\n        watch,\n        debug,\n        env,\n        junit,\n        coverage,\n      });\n      if (tests.hasErrors()) code = 1;\n    }\n    const { seconds } = timer.stop();\n\n    if (watch) return <Box></Box>;\n    return {\n      code,\n      data: (\n        <Box>\n          <Text>test has been completed in </Text>\n          <Text color=\"cyan\">{seconds} </Text>\n          <Text>seconds.</Text>\n        </Box>\n      ),\n    };\n  }\n}\n"],"mappings":"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"}