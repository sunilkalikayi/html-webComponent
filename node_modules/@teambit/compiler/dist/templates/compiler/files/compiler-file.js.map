{"version":3,"names":["compilerFile","namePascalCase"],"sources":["compiler-file.ts"],"sourcesContent":["import { ComponentContext } from '@teambit/generator';\n\nexport function compilerFile({ namePascalCase }: ComponentContext) {\n  return `import {\n  BuildContext,\n  BuiltTaskResult,\n  ComponentResult,\n} from '@teambit/builder';\nimport {\n  Compiler,\n  CompilerMain,\n  TranspileFileParams,\n  TranspileFileOutput,\n} from '@teambit/compiler';\n\nexport class ${namePascalCase} implements Compiler {\n\n    constructor(readonly id: string, readonly distDir, private compiler: CompilerMain) {}\n\n    /**\n     * Detemines whether unsupported files (such as assets)\n     * should be copied by Compiler aspect into the 'dist' directory\n     */\n    shouldCopyNonSupportedFiles = true;\n\n    /* The name of the compiler being used. For example, TypeScript, Babel, etc. */\n    displayName = '';\n\n    /* The version of the compiler being used. For example '1.0.0' */\n    version(): string {};\n\n    /**\n     * Use this for compilation in the workspace.\n     * This will compile one file content at a time (alternatively, use 'transpileComponent') */\n    transpileFile( fileContent: string, transpileFileParams: TranspileFileParams): TranspileFileOutput {}\n\n\n    async build(context: BuildContext): Promise<BuiltTaskResult> {\n        let componentsResults: ComponentResult[] = [];\n        return {\n            /* Sets the files to persist as the Component's artifacts,\n            and describes them. */\n            artifacts: [\n                {\n                    generatedBy: this.id,\n                    name: 'compilation output',\n                    globPatterns: [\\`\\${this.distDir}/**\\`],\n                },\n            ],\n             componentsResults,\n        };\n    }\n\n    /* This is optional but recommended.\n    Not using it will require consumers of your compiler to use two APIs and have two depndencies\n    to their Envs - your compiler\n    */\n    createTask() {\n        return this.compiler.createTask('${namePascalCase}', this);\n    }\n\n    /**\n     * Given a source file, return its parallel in the dists. e.g. index.ts => dist/index.js.\n     * Needed by aspects such as Pkg to determine the main prop.\n     */\n    getDistPathBySrcPath(srcPath: string): string {}\n\n    /**\n     * Returns a boolean indicating whether a file is supported by the compiler or not.\n     * For example, this API is used by Compiler aspect to copy unsupported files to the dist directory.\n     */\n    isFileSupported(filePath: string): boolean {}\n}\n  `;\n}\n"],"mappings":";;;;;;AAEO,SAASA,YAAY,CAAC;EAAEC;AAAiC,CAAC,EAAE;EACjE,OAAQ;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeA,cAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2CA,cAAe;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH"}