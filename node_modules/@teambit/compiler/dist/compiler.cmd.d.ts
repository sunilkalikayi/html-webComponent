import { Command, CommandOptions } from '@teambit/cli';
import { Logger } from '@teambit/logger';
import type { PubsubMain } from '@teambit/pubsub';
import { Component } from '@teambit/component';
import { CompileError, WorkspaceCompiler, CompileOptions } from './workspace-compiler';
export declare type ComponentsStatus = {
    buildResults: string[];
    component: Component;
    errors: CompileError[];
};
export declare class CompileCmd implements Command {
    private compile;
    private logger;
    private pubsub;
    componentsStatus: ComponentsStatus[];
    name: string;
    description: string;
    arguments: {
        name: string;
        description: string;
    }[];
    alias: string;
    group: string;
    options: CommandOptions;
    constructor(compile: WorkspaceCompiler, logger: Logger, pubsub: PubsubMain);
    report([components]: [string[]], compilerOptions: CompileOptions): Promise<{
        data: string;
        code: number;
    }>;
    json([components]: [string[]], compilerOptions: CompileOptions): Promise<{
        data: import("./workspace-compiler").BuildResult[];
        code: number;
    }>;
    private failedComponents;
    private getSummaryIcon;
    private getExitCode;
    private getStatusLine;
    private onComponentCompilationDone;
}
