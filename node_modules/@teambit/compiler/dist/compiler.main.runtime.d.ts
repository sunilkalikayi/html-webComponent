import { AspectLoaderMain } from '@teambit/aspect-loader';
import { BuilderMain } from '@teambit/builder';
import { CLIMain } from '@teambit/cli';
import { Component, ComponentID } from '@teambit/component';
import { EnvsMain } from '@teambit/envs';
import { BitId } from '@teambit/legacy-bit-id';
import { DependencyResolverMain } from '@teambit/dependency-resolver';
import { LoggerMain } from '@teambit/logger';
import { GeneratorMain } from '@teambit/generator';
import { PubsubMain } from '@teambit/pubsub';
import { UiMain } from '@teambit/ui';
import { Workspace } from '@teambit/workspace';
import { CompilerTask } from './compiler.task';
import { DistArtifact } from './dist-artifact';
import { Compiler } from './types';
import { CompileOptions, WorkspaceCompiler } from './workspace-compiler';
export declare class CompilerMain {
    private pubsub;
    private workspaceCompiler;
    private envs;
    private builder;
    private workspace;
    private dependencyResolver;
    constructor(pubsub: PubsubMain, workspaceCompiler: WorkspaceCompiler, envs: EnvsMain, builder: BuilderMain, workspace: Workspace, dependencyResolver: DependencyResolverMain);
    /**
     * Run compilation on `bit new` and when new components are imported
     */
    compileOnWorkspace(componentsIds?: string[] | BitId[] | ComponentID[], // when empty, it compiles all
    options?: CompileOptions): Promise<import("./workspace-compiler").BuildResult[]>;
    /**
     * API to create a new compiler task, it facilitates the usage of multiple compilers.
     * with this method you can create any number of compilers and add them to the buildPipeline.
     */
    createTask(name: string, compiler: Compiler): CompilerTask;
    /**
     * find the compiler configured on the workspace and ask for the dist path.
     */
    getDistPathBySrcPath(component: Component, srcPath: string): string | null;
    /**
     * find the compiler configured on the workspace and ask for the dist folder path.
     */
    getRelativeDistFolder(component: Component): string;
    /**
     * Check if the dist folder (in the component package under node_modules) exist
     * @param component
     * @returns
     */
    isDistDirExists(component: Component): boolean;
    getDistsFiles(component: Component): Promise<DistArtifact>;
    addMissingDistsIssue(component: Component): Promise<undefined>;
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static dependencies: import("@teambit/harmony").Aspect[];
    static provider([cli, workspace, envs, loggerMain, pubsub, aspectLoader, builder, ui, generator, dependencyResolver,]: [
        CLIMain,
        Workspace,
        EnvsMain,
        LoggerMain,
        PubsubMain,
        AspectLoaderMain,
        BuilderMain,
        UiMain,
        GeneratorMain,
        DependencyResolverMain
    ]): Promise<CompilerMain>;
}
export default CompilerMain;
