import { Component, ComponentID } from '@teambit/component';
import { EnvsMain } from '@teambit/envs';
import type { PubsubMain } from '@teambit/pubsub';
import { SerializableResults, Workspace, WatchOptions } from '@teambit/workspace';
import { BitId } from '@teambit/legacy-bit-id';
import { Logger } from '@teambit/logger';
import { Dist } from '@teambit/legacy/dist/consumer/component/sources';
import { AspectLoaderMain } from '@teambit/aspect-loader';
import { DependencyResolverMain } from '@teambit/dependency-resolver';
import { UiMain } from '@teambit/ui';
import type { PreStartOpts } from '@teambit/ui';
import { Compiler, CompilationInitiator } from './types';
export declare type BuildResult = {
    component: string;
    buildResults: string[] | null | undefined;
};
export declare type CompileOptions = {
    changed?: boolean;
    verbose?: boolean;
    /**
     * whether the dist root dir should be deleted before writing new dists.
     * defaults to true for `bit compile` and false everywhere else, such as `bit watch` and `bit
     * start` to avoid webpack "EINTR" error.
     */
    deleteDistDir?: boolean;
    initiator: CompilationInitiator;
};
export declare type CompileError = {
    path: string;
    error: Error;
};
export declare class ComponentCompiler {
    private pubsub;
    private workspace;
    private component;
    private compilerInstance;
    private compilerId;
    private logger;
    private dependencyResolver;
    private dists;
    private compileErrors;
    constructor(pubsub: PubsubMain, workspace: Workspace, component: Component, compilerInstance: Compiler, compilerId: string, logger: Logger, dependencyResolver: DependencyResolverMain, dists?: Dist[], compileErrors?: CompileError[]);
    compile(noThrow: boolean | undefined, options: CompileOptions): Promise<BuildResult>;
    private throwOnCompileErrors;
    private distDirs;
    private getInjectedDirs;
    private get componentDir();
    private compileOneFile;
    private compileAllFiles;
}
export declare class WorkspaceCompiler {
    private workspace;
    private envs;
    private pubsub;
    private aspectLoader;
    private ui;
    private logger;
    private dependencyResolver;
    constructor(workspace: Workspace, envs: EnvsMain, pubsub: PubsubMain, aspectLoader: AspectLoaderMain, ui: UiMain, logger: Logger, dependencyResolver: DependencyResolverMain);
    onPreStart(preStartOpts: PreStartOpts): Promise<void>;
    onAspectLoadFail(err: Error & {
        code?: string;
    }, id: ComponentID): Promise<boolean>;
    onComponentChange(component: Component, files: string[], initiator?: CompilationInitiator): Promise<SerializableResults>;
    onPreWatch(components: Component[], watchOpts: WatchOptions): Promise<void>;
    compileComponents(componentsIds: string[] | BitId[] | ComponentID[], // when empty, it compiles new+modified (unless options.all is set),
    options: CompileOptions, noThrow?: boolean): Promise<BuildResult[]>;
    private getIdsToCompile;
}
