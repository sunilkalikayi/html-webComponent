{"version":3,"names":["CompilerTask","constructor","aspectId","name","compilerInstance","dependencyResolver","artifactName","description","preBuild","context","Promise","all","capsuleNetwork","seedersCapsules","map","capsule","copyNonSupportedFiles","execute","buildResults","build","_hardLinkBuildArtifactsOnCapsules","relCompDir","path","relative","capsulesRootDir","replace","injectedDirs","getInjectedDirs","getPackageName","component","hardLinkDirectory","injectedDir","join","postBuild","tasksResults","compiler","shouldCopyNonSupportedFiles","filesystem","files","file","isFileSupported","content","contents","fs","outputFile","distDir"],"sources":["compiler.task.ts"],"sourcesContent":["import { BuildContext, BuiltTaskResult, BuildTask, TaskResultsList } from '@teambit/builder';\nimport { Capsule } from '@teambit/isolator';\nimport { hardLinkDirectory } from '@teambit/toolbox.fs.hard-link-directory';\nimport { DependencyResolverMain } from '@teambit/dependency-resolver';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { Compiler } from './types';\n\n/**\n * compiler build task. Allows to compile components during component build.\n */\nexport class CompilerTask implements BuildTask {\n  readonly description = 'compile components';\n  constructor(\n    readonly aspectId: string,\n    readonly name: string,\n    private compilerInstance: Compiler,\n    private dependencyResolver: DependencyResolverMain\n  ) {\n    if (compilerInstance.artifactName) {\n      this.description += ` for artifact ${compilerInstance.artifactName}`;\n    }\n  }\n\n  async preBuild(context: BuildContext) {\n    await Promise.all(\n      context.capsuleNetwork.seedersCapsules.map((capsule) =>\n        this.copyNonSupportedFiles(capsule, this.compilerInstance)\n      )\n    );\n    if (!this.compilerInstance.preBuild) return;\n    await this.compilerInstance.preBuild(context);\n  }\n\n  async execute(context: BuildContext): Promise<BuiltTaskResult> {\n    const buildResults = await this.compilerInstance.build(context);\n    await this._hardLinkBuildArtifactsOnCapsules(context);\n    return buildResults;\n  }\n\n  /**\n   * This function hard links the compiled artifacts to the `node_modules` of other component capsules.\n   * For instance, if we have a `button` component that is a dependency of the `card` component,\n   * then the `dist` folder of the `button` component will be copied to `<card_capsule>/node_modules/button/dist`.\n   */\n  private async _hardLinkBuildArtifactsOnCapsules(context: BuildContext): Promise<void> {\n    await Promise.all(\n      context.capsuleNetwork.seedersCapsules.map(async (capsule) => {\n        const relCompDir = path.relative(context.capsuleNetwork.capsulesRootDir, capsule.path).replace(/\\\\/g, '/');\n        const injectedDirs = await this.dependencyResolver.getInjectedDirs(\n          context.capsuleNetwork.capsulesRootDir,\n          relCompDir,\n          this.dependencyResolver.getPackageName(capsule.component)\n        );\n        return hardLinkDirectory(\n          capsule.path,\n          injectedDirs.map((injectedDir) => path.join(context.capsuleNetwork.capsulesRootDir, injectedDir))\n        );\n      })\n    );\n  }\n\n  async postBuild?(context: BuildContext, tasksResults: TaskResultsList): Promise<void> {\n    if (!this.compilerInstance.postBuild) return;\n    await this.compilerInstance.postBuild(context, tasksResults);\n  }\n\n  async copyNonSupportedFiles(capsule: Capsule, compiler: Compiler) {\n    if (!compiler.shouldCopyNonSupportedFiles) {\n      return;\n    }\n    const component = capsule.component;\n    await Promise.all(\n      component.filesystem.files.map(async (file) => {\n        if (compiler.isFileSupported(file.path)) return;\n        const content = file.contents;\n        await fs.outputFile(path.join(capsule.path, compiler.distDir, file.relative), content);\n      })\n    );\n  }\n}\n"],"mappings":"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"}