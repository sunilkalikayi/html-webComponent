{"version":3,"names":["CompilationInitiator"],"sources":["types.ts"],"sourcesContent":["import { BuildContext, BuildTask, BuiltTaskResult, TaskResultsList } from '@teambit/builder';\nimport type { Component } from '@teambit/component';\n\nexport type TranspileFileParams = {\n  componentDir: string; // absolute path of the component's root directory\n  filePath: string; // relative path of the file inside the component directory\n};\n\nexport enum CompilationInitiator {\n  CmdReport,\n  CmdJson,\n  PreStart,\n  PreWatch,\n  Start,\n  ComponentChanged,\n  AspectLoadFail,\n  ComponentAdded,\n  Install,\n}\n\nexport type TranspileComponentParams = {\n  component: Component;\n  componentDir: string; // absolute path of the component's root directory\n  outputDir: string; // absolute path of the component's output directory\n  initiator: CompilationInitiator; // origin of the compilation's request\n};\n\nexport type TranspileFileOutput =\n  | {\n      outputText: string;\n      outputPath: string;\n    }[]\n  | null;\n\nexport interface CompilerOptions {\n  /**\n   * name of the compiler.\n   */\n  name?: string;\n\n  /**\n   * relative path of the dist directory inside the capsule. e.g. \"dist\".\n   */\n  distDir: string;\n\n  /**\n   * determines which ones of the generated files will be saved in the bit objects when tagging.\n   * e.g. distGlobPatterns = [`${this.distDir}/**`, `!${this.distDir}/tsconfig.tsbuildinfo`];\n   * see https://github.com/mrmlnc/fast-glob for the supported glob patters syntax.\n   */\n  distGlobPatterns?: string[];\n\n  /**\n   * whether or not unsupported files (such as assets) should be copied into the dist directory\n   */\n  shouldCopyNonSupportedFiles?: boolean;\n\n  /**\n   * optional. default to \"dist\".\n   * useful when the build pipeline has multiple compiler tasks of the same compiler.\n   * e.g. using the same Babel compiler for two different tasks, one for creating \"es5\" files, and\n   * the second for creating \"esm\". the artifact names would be \"es5\" and \"esm\" accordingly.\n   */\n  artifactName?: string;\n}\n\nexport interface Compiler extends CompilerOptions {\n  /**\n   * id of the compiler.\n   */\n  id: string;\n\n  /**\n   * Delete dist folder before writing the new compiled files\n   */\n  deleteDistDir?: boolean;\n\n  /**\n   * serialized config of the compiler.\n   */\n  displayConfig?(): string;\n\n  /**\n   * transpile a single file that gets saved into the workspace, used by `bit compile` and during\n   * development\n   */\n  transpileFile?: (fileContent: string, params: TranspileFileParams) => TranspileFileOutput;\n\n  /**\n   * transpile all the files of a component, use this when you can't use `transpileFile`\n   */\n  transpileComponent?: (params: TranspileComponentParams) => Promise<void>;\n\n  /**\n   * compile components inside isolated capsules. this being used during tag for the release.\n   * meaning, the final package of the component has the dists generated by this method.\n   */\n  build(context: BuildContext): Promise<BuiltTaskResult>;\n\n  /**\n   * return the dist dir of the compiled files (relative path from the component root dir)\n   */\n  getDistDir?(): string;\n\n  /**\n   * given a source file, return its parallel in the dists. e.g. \"index.ts\" => \"dist/index.js\"\n   * both, the return path and the given path are relative paths.\n   */\n  getDistPathBySrcPath(srcPath: string): string;\n\n  /**\n   * given a component, returns the path to the source folder to use for the preview, uses the one\n   * in node_modules by default\n   */\n  getPreviewComponentRootPath?(component: Component): string;\n\n  /**\n   * only supported files matching get compiled. others, are copied to the dist dir.\n   */\n  isFileSupported(filePath: string): boolean;\n\n  /**\n   * sugar to create a Compiler task via the concrete compiler\n   */\n  createTask?(name?: string): BuildTask;\n\n  /**\n   * run before the build pipeline has started. this is useful when some preparation are needed to\n   * be done on all envs before the build starts.\n   */\n  preBuild?(context: BuildContext): Promise<void>;\n\n  /**\n   * run after the build pipeline completed for all envs. useful for some cleanups\n   */\n  postBuild?(context: BuildContext, tasksResults: TaskResultsList): Promise<void>;\n\n  /**\n   * returns the version of the current compiler instance (e.g. '4.0.1').\n   */\n  version(): string;\n\n  /**\n   * returns the display name of the current compiler instance (e.g. 'TypeScript')\n   */\n  displayName: string;\n}\n"],"mappings":";;;;;;IAQYA,oBAAoB;AAAA;AAAA,WAApBA,oBAAoB;EAApBA,oBAAoB,CAApBA,oBAAoB;EAApBA,oBAAoB,CAApBA,oBAAoB;EAApBA,oBAAoB,CAApBA,oBAAoB;EAApBA,oBAAoB,CAApBA,oBAAoB;EAApBA,oBAAoB,CAApBA,oBAAoB;EAApBA,oBAAoB,CAApBA,oBAAoB;EAApBA,oBAAoB,CAApBA,oBAAoB;EAApBA,oBAAoB,CAApBA,oBAAoB;EAApBA,oBAAoB,CAApBA,oBAAoB;AAAA,GAApBA,oBAAoB,oCAApBA,oBAAoB"}