import { BitBaseEvent } from '@teambit/pubsub';
import { Component } from '@teambit/component';
import { CompileError } from '../workspace-compiler';
declare class ComponentCompilationOnDoneEventData {
    readonly errors: Array<CompileError>;
    readonly component: Component;
    readonly buildResults: string[];
    constructor(errors: Array<CompileError>, component: Component, buildResults: string[]);
}
export declare class ComponentCompilationOnDoneEvent extends BitBaseEvent<ComponentCompilationOnDoneEventData> {
    readonly errors: Array<CompileError>;
    readonly component: Component;
    readonly buildResults: string[];
    readonly timestamp: number;
    static readonly TYPE = "component-compilation-on-done";
    constructor(errors: Array<CompileError>, component: Component, buildResults: string[], timestamp?: number);
}
export {};
