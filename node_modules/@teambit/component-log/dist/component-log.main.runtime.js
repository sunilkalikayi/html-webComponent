"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ComponentLogMain = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _cli() {
  const data = require("@teambit/cli");
  _cli = function () {
    return data;
  };
  return data;
}
function _legacyBitId() {
  const data = require("@teambit/legacy-bit-id");
  _legacyBitId = function () {
    return data;
  };
  return data;
}
function _workspace() {
  const data = _interopRequireDefault(require("@teambit/workspace"));
  _workspace = function () {
    return data;
  };
  return data;
}
function _community() {
  const data = require("@teambit/community");
  _community = function () {
    return data;
  };
  return data;
}
function _exceptions() {
  const data = require("@teambit/legacy/dist/consumer/exceptions");
  _exceptions = function () {
    return data;
  };
  return data;
}
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
function _getRemoteByName() {
  const data = _interopRequireDefault(require("@teambit/legacy/dist/remotes/get-remote-by-name"));
  _getRemoteByName = function () {
    return data;
  };
  return data;
}
function _componentLog() {
  const data = require("./component-log.aspect");
  _componentLog = function () {
    return data;
  };
  return data;
}
function _logCmd() {
  const data = _interopRequireDefault(require("./log-cmd"));
  _logCmd = function () {
    return data;
  };
  return data;
}
function _snapGraph() {
  const data = require("./snap-graph");
  _snapGraph = function () {
    return data;
  };
  return data;
}
class ComponentLogMain {
  constructor(workspace) {
    this.workspace = workspace;
  }
  async getLogs(id, isRemote, shortHash = false) {
    if (isRemote) {
      var _this$workspace;
      const consumer = (_this$workspace = this.workspace) === null || _this$workspace === void 0 ? void 0 : _this$workspace.consumer;
      const bitId = _legacyBitId().BitId.parse(id, true);
      const remote = await (0, _getRemoteByName().default)(bitId.scope, consumer);
      return remote.log(bitId);
    }
    if (!this.workspace) throw new (_exceptions().ConsumerNotFound)();
    const componentId = await this.workspace.resolveComponentId(id);
    const logs = await this.workspace.scope.getLogs(componentId, shortHash);
    logs.forEach(log => {
      log.date = log.date ? new Date(parseInt(log.date)).toLocaleString() : undefined;
    });
    return logs;
  }
  async getLogsWithParents(id) {
    const logs = await this.getLogs(id, false, true);
    const graph = (0, _snapGraph().buildSnapGraph)(logs);
    const sorted = graph.toposort();
    return sorted.map(node => this.stringifyLogInfoOneLine(node.attr));
  }
  stringifyLogInfoOneLine(logInfo) {
    const parents = logInfo.parents.length ? `Parent(s): ${logInfo.parents.join(', ')}` : '<N/A>';
    return `${_chalk().default.yellow(logInfo.hash)} ${logInfo.username || ''} ${logInfo.date || ''} ${logInfo.message}, ${parents}`;
  }
  static async provider([cli, workspace, community]) {
    const componentLog = new ComponentLogMain(workspace);
    cli.register(new (_logCmd().default)(componentLog, community.getDocsDomain()));
    return componentLog;
  }
}
exports.ComponentLogMain = ComponentLogMain;
(0, _defineProperty2().default)(ComponentLogMain, "slots", []);
(0, _defineProperty2().default)(ComponentLogMain, "dependencies", [_cli().CLIAspect, _workspace().default, _community().CommunityAspect]);
(0, _defineProperty2().default)(ComponentLogMain, "runtime", _cli().MainRuntime);
_componentLog().ComponentLogAspect.addRuntime(ComponentLogMain);

//# sourceMappingURL=component-log.main.runtime.js.map