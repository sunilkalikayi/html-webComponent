"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FormatterMain = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _cli() {
  const data = require("@teambit/cli");
  _cli = function () {
    return data;
  };
  return data;
}
function _component() {
  const data = require("@teambit/component");
  _component = function () {
    return data;
  };
  return data;
}
function _envs() {
  const data = require("@teambit/envs");
  _envs = function () {
    return data;
  };
  return data;
}
function _logger() {
  const data = require("@teambit/logger");
  _logger = function () {
    return data;
  };
  return data;
}
function _workspace() {
  const data = require("@teambit/workspace");
  _workspace = function () {
    return data;
  };
  return data;
}
function _formatter() {
  const data = require("./formatter.aspect");
  _formatter = function () {
    return data;
  };
  return data;
}
function _formatter2() {
  const data = require("./formatter.service");
  _formatter2 = function () {
    return data;
  };
  return data;
}
function _format() {
  const data = require("./format.task");
  _format = function () {
    return data;
  };
  return data;
}
function _format2() {
  const data = require("./format.cmd");
  _format2 = function () {
    return data;
  };
  return data;
}
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
class FormatterMain {
  constructor(envs, formatterService) {
    this.envs = envs;
    this.formatterService = formatterService;
  }

  /**
   * format an array of components.
   */
  async format(components, opts) {
    const envsRuntime = await this.envs.createEnvironment(components);
    const formatResults = envsRuntime.run(this.formatterService, this.toFormatServiceOptions(opts, false));
    return formatResults;
  }

  /**
   * check format an array of components.
   */
  async check(components, opts) {
    const envsRuntime = await this.envs.createEnvironment(components);
    const formatResults = envsRuntime.run(this.formatterService, this.toFormatServiceOptions(opts, true));
    return formatResults;
  }
  toFormatServiceOptions(opts, check = false) {
    return _objectSpread(_objectSpread({}, opts), {}, {
      check
    });
  }

  /**
   * create a format task for build pipelines.
   * @param name name of the task.
   */
  createTask(name) {
    return new (_format().FormatTask)(_formatter().FormatterAspect.id, name);
  }
  static async provider([envs, cli, component, loggerAspect, workspace], config) {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const logger = loggerAspect.createLogger(_formatter().FormatterAspect.id);
    const formatterService = new (_formatter2().FormatterService)(config);
    const formatterAspect = new FormatterMain(envs, formatterService);
    envs.registerService(formatterService);
    cli.register(new (_format2().FormatCmd)(formatterAspect, component.getHost(), workspace));
    return formatterAspect;
  }
}
exports.FormatterMain = FormatterMain;
(0, _defineProperty2().default)(FormatterMain, "runtime", _cli().MainRuntime);
(0, _defineProperty2().default)(FormatterMain, "dependencies", [_envs().EnvsAspect, _cli().CLIAspect, _component().ComponentAspect, _logger().LoggerAspect, _workspace().WorkspaceAspect]);
(0, _defineProperty2().default)(FormatterMain, "defaultConfig", {});
_formatter().FormatterAspect.addRuntime(FormatterMain);

//# sourceMappingURL=formatter.main.runtime.js.map