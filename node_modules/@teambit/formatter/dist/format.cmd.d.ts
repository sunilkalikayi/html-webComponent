import { TimerResponse } from '@teambit/legacy/dist/toolbox/timer';
import { Command, CommandOptions } from '@teambit/cli';
import { ComponentFactory, ComponentID } from '@teambit/component';
import { Workspace } from '@teambit/workspace';
import { FormatterMain } from './formatter.main.runtime';
import { ComponentFormatResult, FormatResults } from './formatter';
export declare type FormatCmdOptions = {
    changed?: boolean;
    json?: boolean;
    check?: boolean;
};
/**
 * A type for result with componentId instead of the entire component, as when output to console, we don't want to print all the component
 */
export declare type JsonComponentFormatResult = Omit<ComponentFormatResult, 'component'> & {
    componentId: ComponentID;
};
export declare type JsonFormatDataResults = Omit<FormatResults, 'results'> & {
    results: JsonComponentFormatResult[];
};
/**
 * A type for result with componentId instead of the entire component, as when output to console, we don't want to print all the component
 */
export declare type JsonFormatResults = {
    duration: TimerResponse;
    data: JsonFormatDataResults;
    componentsIdsToFormat: string[];
};
export declare class FormatCmd implements Command {
    private formatter;
    private componentHost;
    private workspace;
    name: string;
    description: string;
    group: string;
    options: CommandOptions;
    constructor(formatter: FormatterMain, componentHost: ComponentFactory, workspace: Workspace);
    report([components]: [string[]], formatterOptions: FormatCmdOptions): Promise<string>;
    json([components]: [string[]], formatterCmdOptions: FormatCmdOptions): Promise<JsonFormatResults>;
    private getIdsToFormat;
    private getAllComponentsResultOutput;
    private getOneComponentResultOutput;
    private getOneComponentFileResultOutput;
}
