{"version":3,"names":["FormatCmd","constructor","formatter","componentHost","workspace","report","components","formatterOptions","duration","data","componentsIdsToFormat","json","title","chalk","bold","cyan","length","toString","name","componentsOutputs","getAllComponentsResultOutput","results","check","seconds","summery","formatterCmdOptions","timer","Timer","create","start","componentsIds","getIdsToFormat","changed","componentsToFormat","getMany","opts","formatterResults","format","jsonFormatterResults","toJsonFormatResults","timerResponse","stop","map","comp","id","resolveMultipleComponentIds","getNewAndModifiedIds","listIds","componentsResult","context","allResults","getOneComponentResultOutput","join","componentResult","componentId","ignoreVersion","filesWithIssues","filter","fileResult","hasIssues","green","subTitle","red","files","getOneComponentFileResultOutput","filePath","newResults","res","resultsWithoutComponent","result","component","compact","flatten","errors"],"sources":["format.cmd.ts"],"sourcesContent":["import { TimerResponse, Timer } from '@teambit/legacy/dist/toolbox/timer';\nimport { Command, CommandOptions } from '@teambit/cli';\nimport { ComponentFactory, ComponentID } from '@teambit/component';\nimport chalk from 'chalk';\nimport { EnvsExecutionResult } from '@teambit/envs';\nimport { Workspace } from '@teambit/workspace';\nimport { compact, flatten } from 'lodash';\nimport { FormatterMain } from './formatter.main.runtime';\nimport { ComponentFormatResult, FormatResults, FileFormatResult } from './formatter';\nimport { FormatterOptions } from './formatter-context';\n\nexport type FormatCmdOptions = {\n  changed?: boolean;\n  json?: boolean;\n  check?: boolean;\n};\n\ntype OutputContext = {\n  check?: boolean;\n};\n\n/**\n * A type for result with componentId instead of the entire component, as when output to console, we don't want to print all the component\n */\nexport type JsonComponentFormatResult = Omit<ComponentFormatResult, 'component'> & {\n  componentId: ComponentID;\n};\n\nexport type JsonFormatDataResults = Omit<FormatResults, 'results'> & { results: JsonComponentFormatResult[] };\n/**\n * A type for result with componentId instead of the entire component, as when output to console, we don't want to print all the component\n */\nexport type JsonFormatResults = {\n  duration: TimerResponse;\n  data: JsonFormatDataResults;\n  componentsIdsToFormat: string[];\n};\n\nexport class FormatCmd implements Command {\n  name = 'format [component...]';\n  description = 'format components in the development workspace';\n  group = 'development';\n  options = [\n    ['c', 'changed', 'format only new and modified components'],\n    ['', 'check', 'will output a human-friendly message and a list of unformatted files, if any'],\n    ['j', 'json', 'return the format results in json format'],\n  ] as CommandOptions;\n\n  constructor(\n    private formatter: FormatterMain,\n    private componentHost: ComponentFactory,\n    private workspace: Workspace\n  ) {}\n\n  async report([components = []]: [string[]], formatterOptions: FormatCmdOptions) {\n    const { duration, data, componentsIdsToFormat } = await this.json([components], formatterOptions);\n\n    const title = chalk.bold(\n      `formatting total of ${chalk.cyan(\n        componentsIdsToFormat.length.toString()\n      )} component(s) in workspace '${chalk.cyan(this.componentHost.name)}`\n    );\n\n    const componentsOutputs = this.getAllComponentsResultOutput(data.results, { check: formatterOptions.check });\n\n    const { seconds } = duration;\n    const summery = `formatted ${chalk.cyan(componentsIdsToFormat.length.toString())} components in ${chalk.cyan(\n      seconds.toString()\n    )}.`;\n\n    return `${title}\\n\\n${componentsOutputs}\\n\\n${summery}`;\n  }\n\n  async json([components = []]: [string[]], formatterCmdOptions: FormatCmdOptions): Promise<JsonFormatResults> {\n    const timer = Timer.create();\n    timer.start();\n    const componentsIds = await this.getIdsToFormat(components, formatterCmdOptions.changed);\n    const componentsToFormat = await this.workspace.getMany(componentsIds);\n    const opts: FormatterOptions = {};\n    const formatterResults = formatterCmdOptions.check\n      ? await this.formatter.check(componentsToFormat, opts)\n      : await this.formatter.format(componentsToFormat, opts);\n    const jsonFormatterResults = toJsonFormatResults(formatterResults);\n    const timerResponse = timer.stop();\n    return {\n      duration: timerResponse,\n      data: jsonFormatterResults,\n      componentsIdsToFormat: componentsToFormat.map((comp) => comp.id.toString()),\n    };\n  }\n\n  private async getIdsToFormat(components: string[], changed = false): Promise<ComponentID[]> {\n    if (components.length) {\n      return this.workspace.resolveMultipleComponentIds(components);\n    }\n    if (changed) {\n      return this.workspace.getNewAndModifiedIds();\n    }\n    return this.componentHost.listIds();\n  }\n\n  private getAllComponentsResultOutput(componentsResult: JsonComponentFormatResult[], context: OutputContext) {\n    const allResults = componentsResult.map((comp) => this.getOneComponentResultOutput(comp, context));\n    return allResults.join('\\n\\n');\n  }\n\n  private getOneComponentResultOutput(componentResult: JsonComponentFormatResult, context: OutputContext) {\n    const title = chalk.bold.cyan(componentResult.componentId.toString({ ignoreVersion: true }));\n    const filesWithIssues = componentResult.results.filter((fileResult) => fileResult.hasIssues);\n    if (!filesWithIssues || !filesWithIssues.length) {\n      return `${title}\\n${chalk.green('no issues found')}`;\n    }\n    let subTitle = chalk.green('the following files have been re-formatted:');\n    if (context.check) {\n      subTitle = chalk.red('issues found in the following files:');\n    }\n    const files = filesWithIssues.map(this.getOneComponentFileResultOutput);\n    return `${title}\\n${subTitle}\\n${files.join('\\n')}`;\n  }\n\n  private getOneComponentFileResultOutput(fileResult: FileFormatResult) {\n    return fileResult.filePath;\n  }\n}\n\nfunction toJsonFormatResults(results: EnvsExecutionResult<FormatResults>): JsonFormatDataResults {\n  const newResults = results.results.map((res) => {\n    const resultsWithoutComponent = res.data?.results.map((result) => {\n      return {\n        componentId: result.component.id,\n        results: result.results,\n      };\n    });\n    return compact(resultsWithoutComponent);\n  });\n  return {\n    results: compact(flatten(newResults)),\n    errors: results?.errors,\n  };\n}\n"],"mappings":"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"}