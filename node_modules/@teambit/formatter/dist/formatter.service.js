"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FormatterService = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _lodash() {
  const data = require("lodash");
  _lodash = function () {
    return data;
  };
  return data;
}
function _react() {
  const data = _interopRequireDefault(require("react"));
  _react = function () {
    return data;
  };
  return data;
}
function _ink() {
  const data = require("ink");
  _ink = function () {
    return data;
  };
  return data;
}
function _cliHighlight() {
  const data = _interopRequireDefault(require("cli-highlight"));
  _cliHighlight = function () {
    return data;
  };
  return data;
}
class FormatterService {
  constructor(formatterConfig) {
    this.formatterConfig = formatterConfig;
    (0, _defineProperty2().default)(this, "name", 'formatter');
  }
  async run(context, options) {
    const mergedOpts = this.optionsWithDefaults(options);
    const formatterContext = this.mergeContext(mergedOpts, context);
    const formatter = context.env.getFormatter(formatterContext);
    const results = options.check ? await formatter.check(formatterContext) : await formatter.format(formatterContext);
    return results;
  }
  optionsWithDefaults(options) {
    return (0, _lodash().defaults)(options, this.formatterConfig);
  }
  mergeContext(options, context) {
    const formatterContext = Object.assign({}, options, context);
    return formatterContext;
  }
  render(env) {
    const descriptor = this.getDescriptor(env);
    return /*#__PURE__*/_react().default.createElement(_ink().Text, {
      key: descriptor === null || descriptor === void 0 ? void 0 : descriptor.id
    }, /*#__PURE__*/_react().default.createElement(_ink().Text, {
      color: "cyan"
    }, "configured formatter: "), /*#__PURE__*/_react().default.createElement(_ink().Text, null, descriptor === null || descriptor === void 0 ? void 0 : descriptor.id, " (", descriptor === null || descriptor === void 0 ? void 0 : descriptor.displayName, " @ ", descriptor === null || descriptor === void 0 ? void 0 : descriptor.version, ")"), /*#__PURE__*/_react().default.createElement(_ink().Newline, null), /*#__PURE__*/_react().default.createElement(_ink().Text, {
      color: "cyan"
    }, "formatter config:"), /*#__PURE__*/_react().default.createElement(_ink().Newline, null), /*#__PURE__*/_react().default.createElement(_ink().Text, null, (descriptor === null || descriptor === void 0 ? void 0 : descriptor.config) && (0, _cliHighlight().default)(descriptor === null || descriptor === void 0 ? void 0 : descriptor.config, {
      language: 'javascript',
      ignoreIllegals: true
    })), /*#__PURE__*/_react().default.createElement(_ink().Newline, null));
  }
  getDescriptor(env) {
    if (!env.env.getFormatter) return undefined;
    const mergedOpts = this.optionsWithDefaults({});
    const formatterContext = this.mergeContext(mergedOpts);
    const formatter = env.env.getFormatter(formatterContext);
    return {
      id: formatter.id,
      icon: formatter.icon,
      config: formatter.displayConfig ? formatter.displayConfig() : undefined,
      version: formatter.version ? formatter.version() : '?',
      displayName: formatter.displayName ? formatter.displayName : '?'
    };
  }
}
exports.FormatterService = FormatterService;

//# sourceMappingURL=formatter.service.js.map