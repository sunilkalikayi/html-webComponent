"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScopeRenameCmd = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
class ScopeRenameCmd {
  constructor(renaming) {
    this.renaming = renaming;
    (0, _defineProperty2().default)(this, "name", 'rename <current-scope-name> <new-scope-name>');
    (0, _defineProperty2().default)(this, "description", "Renames the scope name for all components with the specified 'current scope name'");
    (0, _defineProperty2().default)(this, "arguments", [{
      name: 'current-scope-name',
      description: 'the scope name to be replaced by another scope name'
    }, {
      name: 'new-scope-name',
      description: 'a new scope name to replace the current scope name'
    }]);
    (0, _defineProperty2().default)(this, "options", [['r', 'refactor', 'update the import statements in all dependent components to the new package name (that contains the new scope name)']]);
    (0, _defineProperty2().default)(this, "group", 'development');
  }
  async report([oldName, newName], {
    refactor
  }) {
    const {
      scopeRenamedComponentIds,
      refactoredIds
    } = await this.renaming.renameScope(oldName, newName, {
      refactor
    });
    const title = _chalk().default.green(`successfully replaced "${oldName}" scope with "${newName}"`);
    const renamedIdsStr = scopeRenamedComponentIds.length ? `\n${_chalk().default.bold('the following components were affected by this scope-name change:')}\n${scopeRenamedComponentIds.map(c => c.changeScope(newName)).join('\n')}` : '';
    const refactoredStr = refactoredIds.length ? `\n\n${_chalk().default.bold('the following components have been refactored:')}\n${refactoredIds.join('\n')}` : '';
    return `${title}\n${renamedIdsStr}${refactoredStr}`;
  }
}
exports.ScopeRenameCmd = ScopeRenameCmd;

//# sourceMappingURL=scope-rename.cmd.js.map