"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RenameCmd = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
class RenameCmd {
  constructor(renaming) {
    this.renaming = renaming;
    (0, _defineProperty2().default)(this, "name", 'rename <current-name> <new-name>');
    (0, _defineProperty2().default)(this, "description", 'EXPERIMENTAL. rename component. if tagged/exported, create a new component and deprecate the original component');
    (0, _defineProperty2().default)(this, "arguments", [{
      name: 'current-name',
      description: 'the current component name (without its scope name)'
    }, {
      name: 'new-name',
      description: 'the new component name (without its scope name)'
    }]);
    (0, _defineProperty2().default)(this, "group", 'collaborate');
    (0, _defineProperty2().default)(this, "skipWorkspace", true);
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "options", [['s', 'scope <scope-name>', 'default scope for the newly created component'], ['p', 'path <relative-path>', 'relative path in the workspace. by default the path is `<scope>/<namespace>/<name>`'], ['r', 'refactor', 'update the import/require statements in all dependent components (in the same workspace)']]);
    (0, _defineProperty2().default)(this, "loader", true);
    (0, _defineProperty2().default)(this, "migration", true);
    (0, _defineProperty2().default)(this, "remoteOp", true);
  }
  async report([sourceId, targetId], options) {
    const results = await this.renaming.rename(sourceId, targetId, options);
    return _chalk().default.green(`successfully renamed ${_chalk().default.bold(results.sourceId.toString())} to ${_chalk().default.bold(results.targetId.toString())}`);
  }
}
exports.RenameCmd = RenameCmd;

//# sourceMappingURL=rename.cmd.js.map