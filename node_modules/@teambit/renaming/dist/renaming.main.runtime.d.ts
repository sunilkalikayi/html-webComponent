import { ConfigMain } from '@teambit/config';
import { CLIMain } from '@teambit/cli';
import { Component, ComponentID, ComponentMain } from '@teambit/component';
import { DeprecationMain } from '@teambit/deprecation';
import { GraphqlMain } from '@teambit/graphql';
import { NewComponentHelperMain } from '@teambit/new-component-helper';
import { RefactoringMain } from '@teambit/refactoring';
import { Workspace } from '@teambit/workspace';
import { InstallMain } from '@teambit/install';
import { RenameOptions } from './rename.cmd';
export declare class RenamingMain {
    private workspace;
    private install;
    private newComponentHelper;
    private deprecation;
    private refactoring;
    private config;
    constructor(workspace: Workspace, install: InstallMain, newComponentHelper: NewComponentHelperMain, deprecation: DeprecationMain, refactoring: RefactoringMain, config: ConfigMain);
    rename(sourceIdStr: string, targetIdStr: string, options: RenameOptions): Promise<RenameDependencyNameResult>;
    getRenamingInfo(component: Component): RenamingInfo | null;
    /**
     * change the default-scope for new components. optionally (if refactor is true), change the source code to match the
     * new scope-name.
     * keep in mind that this is working for new components only, for tagged/exported it's impossible. See the errors
     * thrown in such cases in this method.
     */
    renameScope(oldScope: string, newScope: string, options: {
        refactor?: boolean;
    }): Promise<RenameScopeResult>;
    private renameScopeOfAspectIdsInWorkspaceConfig;
    private getConfig;
    static slots: never[];
    static dependencies: import("@teambit/harmony").Aspect[];
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static provider([cli, workspace, deprecation, newComponentHelper, componentMain, graphql, refactoring, install, config,]: [
        CLIMain,
        Workspace,
        DeprecationMain,
        NewComponentHelperMain,
        ComponentMain,
        GraphqlMain,
        RefactoringMain,
        InstallMain,
        ConfigMain
    ]): Promise<RenamingMain>;
}
export declare type RenameDependencyNameResult = {
    sourceId: ComponentID;
    targetId: ComponentID;
};
export declare type RenamingInfo = {
    renamedFrom: ComponentID;
};
export declare type RenameScopeResult = {
    scopeRenamedComponentIds: ComponentID[];
    refactoredIds: ComponentID[];
};
