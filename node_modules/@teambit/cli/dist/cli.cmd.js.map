{"version":3,"names":["CliGenerateCmd","constructor","cliMain","report","args","metadata","GenerateCommandsDoc","commands","generate","json","generateJson","CliCmd","docsDomain","logger","isDaemon","rl","readline","createInterface","input","process","stdin","output","stdout","prompt","completer","line","cb","cliParser","CLIParser","groups","undefined","Promise","resolve","on","cmd","trim","split","parse","err","handleErrorAndExit","lineSplit","values","length","completeCommand","loadConsumerIfExist","then","consumer","comps","bitmapIdsFromCurrentLane","map","id","toStringWithoutVersion","filter","c","includes","catch","name","startsWith"],"sources":["cli.cmd.ts"],"sourcesContent":["// eslint-disable-next-line max-classes-per-file\nimport { Command, CommandOptions } from '@teambit/cli';\nimport logger from '@teambit/legacy/dist/logger/logger';\nimport { handleErrorAndExit } from '@teambit/legacy/dist/cli/handle-errors';\nimport { loadConsumerIfExist } from '@teambit/legacy/dist/consumer';\nimport readline from 'readline';\nimport { CLIParser } from './cli-parser';\nimport { CLIMain } from './cli.main.runtime';\nimport { GenerateCommandsDoc, GenerateOpts } from './generate-doc-md';\n\nexport class CliGenerateCmd implements Command {\n  name = 'generate';\n  description = 'EXPERIMENTAL. generate an .md file with all commands details';\n  alias = '';\n  loader = false;\n  group = 'general';\n  options = [\n    [\n      '',\n      'metadata',\n      'metadata/front-matter to place at the top of the .md file, enter as an object e.g. --metadata.id=cli --metadata.title=commands',\n    ],\n    ['j', 'json', 'output the commands info as JSON'],\n  ] as CommandOptions;\n\n  constructor(private cliMain: CLIMain) {}\n\n  async report(args, { metadata }: GenerateOpts): Promise<string> {\n    return new GenerateCommandsDoc(this.cliMain.commands, { metadata }).generate();\n  }\n\n  async json() {\n    return new GenerateCommandsDoc(this.cliMain.commands, {}).generateJson();\n  }\n}\n\nexport class CliCmd implements Command {\n  name = 'cli';\n  description = 'EXPERIMENTAL. enters bit cli program and generates commands list';\n  alias = '';\n  commands: Command[] = [];\n  loader = false;\n  group = 'general';\n  options = [] as CommandOptions;\n\n  constructor(private cliMain: CLIMain, private docsDomain: string) {}\n\n  async report(): Promise<string> {\n    logger.isDaemon = true;\n    const rl = readline.createInterface({\n      input: process.stdin,\n      output: process.stdout,\n      prompt: 'bit > ',\n      completer: (line, cb) => completer(line, cb, this.cliMain),\n    });\n\n    const cliParser = new CLIParser(this.cliMain.commands, this.cliMain.groups, undefined, this.docsDomain);\n\n    rl.prompt();\n\n    return new Promise((resolve) => {\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      rl.on('line', async (line) => {\n        const cmd = line.trim().split(' ');\n        try {\n          await cliParser.parse(cmd);\n        } catch (err: any) {\n          await handleErrorAndExit(err, cmd[0]);\n        }\n        rl.prompt();\n      }).on('close', () => {\n        resolve('Have a great day!');\n      });\n    });\n  }\n}\n\nfunction completer(line: string, cb: Function, cliMain: CLIMain) {\n  const lineSplit = line.split(' ');\n  let values: string[] = [];\n  if (lineSplit.length <= 1) {\n    values = completeCommand(line, cliMain);\n    cb(null, [values, line]);\n  }\n  loadConsumerIfExist()\n    .then((consumer) => {\n      const comps = consumer?.bitmapIdsFromCurrentLane.map((id) => id.toStringWithoutVersion()) || [];\n      values = comps.filter((c) => c.includes(lineSplit[1]));\n      // eslint-disable-next-line promise/no-callback-in-promise\n      cb(null, [values, line]);\n    })\n    .catch((err) => {\n      // eslint-disable-next-line promise/no-callback-in-promise\n      cb(err, [[], line]);\n    });\n}\n\nfunction completeCommand(line: string, cliMain: CLIMain): string[] {\n  const commands = cliMain.commands.filter((cmd) => cmd.name.startsWith(line));\n  return commands.map((c) => c.name).map((name) => name.split(' ')[0]);\n}\n"],"mappings":"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"}