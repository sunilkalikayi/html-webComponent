{"version":3,"names":["CLIMain","constructor","commandsSlot","onStartSlot","community","logger","clone","groups","register","commands","forEach","command","setDefaults","cmd","unregister","commandName","toArray","aspectId","filteredCommands","filter","getCommandId","name","map","set","values","flat","getCommand","find","registerGroup","description","consoleWarning","registerOnStart","onStartFn","run","hasWorkspace","invokeOnStart","CliParser","CLIParser","undefined","getDocsDomain","parse","onStartFns","promises","onStart","Promise","all","alias","extendedDescription","group","options","private","loader","internal","helpUrl","isFullUrl","provider","loggerMain","config","createLogger","CLIAspect","id","cliMain","legacyRegistry","buildRegistry","ensureWorkspaceAndScope","legacyCommands","legacyCommandsAdapters","LegacyCommandAdapter","cliGenerateCmd","CliGenerateCmd","cliCmd","CliCmd","helpCmd","HelpCmd","push","CompletionCmd","CommunityAspect","LoggerAspect","MainRuntime","Slot","withType","addRuntime","loadConsumerIfExist","err","url","startsWith"],"sources":["cli.main.runtime.ts"],"sourcesContent":["import { Slot, SlotRegistry } from '@teambit/harmony';\nimport { buildRegistry } from '@teambit/legacy/dist/cli';\nimport { Command } from '@teambit/legacy/dist/cli/command';\nimport { CommunityAspect } from '@teambit/community';\nimport type { CommunityMain } from '@teambit/community';\n\nimport { groups, GroupsType } from '@teambit/legacy/dist/cli/command-groups';\nimport { loadConsumerIfExist } from '@teambit/legacy/dist/consumer';\nimport { Logger, LoggerAspect, LoggerMain } from '@teambit/logger';\nimport { clone } from 'lodash';\nimport { CLIAspect, MainRuntime } from './cli.aspect';\nimport { getCommandId } from './get-command-id';\nimport { LegacyCommandAdapter } from './legacy-command-adapter';\nimport { CLIParser } from './cli-parser';\nimport { CompletionCmd } from './completion.cmd';\nimport { CliCmd, CliGenerateCmd } from './cli.cmd';\nimport { HelpCmd } from './help.cmd';\n\nexport type CommandList = Array<Command>;\nexport type OnStart = (hasWorkspace: boolean) => Promise<void>;\n\nexport type OnStartSlot = SlotRegistry<OnStart>;\nexport type CommandsSlot = SlotRegistry<CommandList>;\n\nexport class CLIMain {\n  public groups: GroupsType = clone(groups); // if it's not cloned, it is cached across loadBit() instances\n  constructor(\n    private commandsSlot: CommandsSlot,\n    private onStartSlot: OnStartSlot,\n    private community: CommunityMain,\n    private logger: Logger\n  ) {}\n\n  /**\n   * registers a new command in to the CLI.\n   */\n  register(...commands: CommandList) {\n    commands.forEach((command) => {\n      this.setDefaults(command);\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      command.commands!.forEach((cmd) => this.setDefaults(cmd));\n    });\n    this.commandsSlot.register(commands);\n  }\n\n  /**\n   * helpful for having the same command name in different environments (e.g. legacy and non-legacy).\n   * for example `cli.unregister('tag');` removes the \"bit tag\" command.\n   */\n  unregister(commandName: string) {\n    this.commandsSlot.toArray().forEach(([aspectId, commands]) => {\n      const filteredCommands = commands.filter((command) => {\n        return getCommandId(command.name) !== commandName;\n      });\n      this.commandsSlot.map.set(aspectId, filteredCommands);\n    });\n  }\n\n  /**\n   * list of all registered commands. (legacy and new).\n   */\n  get commands(): CommandList {\n    return this.commandsSlot.values().flat();\n  }\n\n  /**\n   * get an instance of a registered command. (useful for aspects to modify and extend existing commands)\n   */\n  getCommand(name: string): Command | undefined {\n    return this.commands.find((command) => getCommandId(command.name) === name);\n  }\n\n  /**\n   * when running `bit help`, commands are grouped by categories.\n   * this method helps registering a new group by providing its name and a description.\n   * the name is what needs to be assigned to the `group` property of the Command interface.\n   * the description is what shown in the `bit help` output.\n   */\n  registerGroup(name: string, description: string) {\n    if (this.groups[name]) {\n      this.logger.consoleWarning(`CLI group \"${name}\" is already registered`);\n    } else {\n      this.groups[name] = description;\n    }\n  }\n\n  registerOnStart(onStartFn: OnStart) {\n    this.onStartSlot.register(onStartFn);\n    return this;\n  }\n\n  /**\n   * execute commands registered to this aspect.\n   */\n  async run(hasWorkspace: boolean) {\n    await this.invokeOnStart(hasWorkspace);\n    const CliParser = new CLIParser(this.commands, this.groups, undefined, this.community.getDocsDomain());\n    await CliParser.parse();\n  }\n\n  private async invokeOnStart(hasWorkspace: boolean) {\n    const onStartFns = this.onStartSlot.values();\n    const promises = onStartFns.map(async (onStart) => onStart(hasWorkspace));\n    return Promise.all(promises);\n  }\n\n  private setDefaults(command: Command) {\n    command.alias = command.alias || '';\n    command.description = command.description || '';\n    command.extendedDescription = command.extendedDescription || '';\n    command.group = command.group || 'ungrouped';\n    command.options = command.options || [];\n    command.private = command.private || false;\n    command.commands = command.commands || [];\n    if (command.loader === undefined) {\n      if (command.internal) {\n        command.loader = false;\n      } else {\n        command.loader = true;\n      }\n    }\n    if (command.helpUrl && !isFullUrl(command.helpUrl)) {\n      command.helpUrl = `https://${this.community.getDocsDomain()}/${command.helpUrl}`;\n    }\n  }\n\n  static dependencies = [CommunityAspect, LoggerAspect];\n  static runtime = MainRuntime;\n  static slots = [Slot.withType<CommandList>(), Slot.withType<OnStart>()];\n\n  static async provider(\n    [community, loggerMain]: [CommunityMain, LoggerMain],\n    config,\n    [commandsSlot, onStartSlot]: [CommandsSlot, OnStartSlot]\n  ) {\n    const logger = loggerMain.createLogger(CLIAspect.id);\n    const cliMain = new CLIMain(commandsSlot, onStartSlot, community, logger);\n    const legacyRegistry = buildRegistry();\n    await ensureWorkspaceAndScope();\n    const legacyCommands = legacyRegistry.commands;\n    const legacyCommandsAdapters = legacyCommands.map((command) => new LegacyCommandAdapter(command, cliMain));\n    const cliGenerateCmd = new CliGenerateCmd(cliMain);\n    const cliCmd = new CliCmd(cliMain, community.getDocsDomain());\n    const helpCmd = new HelpCmd(cliMain, community.getDocsDomain());\n    cliCmd.commands.push(cliGenerateCmd);\n    cliMain.register(...legacyCommandsAdapters, new CompletionCmd(), cliCmd, helpCmd);\n    return cliMain;\n  }\n}\n\nCLIAspect.addRuntime(CLIMain);\n\n/**\n * kind of a hack.\n * in the legacy, this is running at the beginning and it take care of issues when Bit files are missing,\n * such as \".bit\".\n * (to make this process better, you can easily remove it and run the e2e-tests. you'll see some failing)\n */\nasync function ensureWorkspaceAndScope() {\n  try {\n    await loadConsumerIfExist();\n  } catch (err) {\n    // do nothing. it could fail for example with ScopeNotFound error, which is taken care of in \"bit init\".\n  }\n}\n\nfunction isFullUrl(url: string) {\n  return url.startsWith('http://') || url.startsWith('https://');\n}\n"],"mappings":"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"}