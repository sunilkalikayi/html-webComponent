"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.symbol.description.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatHelp = formatHelp;
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
function _padRight() {
  const data = _interopRequireDefault(require("pad-right"));
  _padRight = function () {
    return data;
  };
  return data;
}
function _lodash() {
  const data = require("lodash");
  _lodash = function () {
    return data;
  };
  return data;
}
function _getCommandId() {
  const data = require("./get-command-id");
  _getCommandId = function () {
    return data;
  };
  return data;
}
const SPACE = ' ';
const TITLE_LEFT_SPACES_NUMBER = 2;
const COMMAND_LEFT_SPACES_NUMBER = 4;
const NAME_WITH_SPACES_LENGTH = 15;
function formatHelp(commands, groups, docsDomain) {
  const helpProps = groupCommands(commands, groups);
  const commandsStr = formatCommandsHelp(helpProps);
  return `${getHeader(docsDomain)}

${commandsStr}

${getFooter()}`;
}
function groupCommands(commands, groups) {
  const help = commands.filter(command => !command.private && command.description).reduce(function (partialHelp, command) {
    const groupName = command.group; // at this stage, it must be set
    partialHelp[groupName] = partialHelp[groupName] || {
      commands: {},
      description: groups[groupName] || (0, _lodash().capitalize)(command.group)
    };
    const cmdId = (0, _getCommandId().getCommandId)(command.name);
    partialHelp[groupName].commands[cmdId] = command.description;
    return partialHelp;
  }, {});
  return help;
}
function formatCommandsHelp(helpProps) {
  return Object.keys(helpProps).map(groupName => commandsSectionTemplate(helpProps[groupName])).join('\n\n');
}
function commandsSectionTemplate(section) {
  const titleSpace = SPACE.repeat(TITLE_LEFT_SPACES_NUMBER);
  const title = `${titleSpace}${_chalk().default.underline.bold.blue(section.description)}`;
  const commands = Object.keys(section.commands).map(cmdName => commandTemplate(cmdName, section.commands[cmdName])).join('\n');
  const res = `${title}\n${commands}`;
  return res;
}
function commandTemplate(name, description) {
  const nameSpace = SPACE.repeat(COMMAND_LEFT_SPACES_NUMBER);
  const nameWithRightSpace = (0, _padRight().default)(name, NAME_WITH_SPACES_LENGTH, SPACE);
  const res = `${nameSpace}${_chalk().default.green(nameWithRightSpace)}${description}`;
  return res;
}
function getHeader(docsDomain) {
  return `${_chalk().default.bold('usage: bit [--version] [--help] <command> [<args>]')}

${_chalk().default.yellow(`bit documentation: https://${docsDomain}`)}`;
}
function getFooter() {
  return `${_chalk().default.yellow("please use 'bit <command> --help' for more information and guides on specific commands.")}`;
}

//# sourceMappingURL=help.js.map