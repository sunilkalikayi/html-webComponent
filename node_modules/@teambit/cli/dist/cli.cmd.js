"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.string.trim.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CliGenerateCmd = exports.CliCmd = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _logger() {
  const data = _interopRequireDefault(require("@teambit/legacy/dist/logger/logger"));
  _logger = function () {
    return data;
  };
  return data;
}
function _handleErrors() {
  const data = require("@teambit/legacy/dist/cli/handle-errors");
  _handleErrors = function () {
    return data;
  };
  return data;
}
function _consumer() {
  const data = require("@teambit/legacy/dist/consumer");
  _consumer = function () {
    return data;
  };
  return data;
}
function _readline() {
  const data = _interopRequireDefault(require("readline"));
  _readline = function () {
    return data;
  };
  return data;
}
function _cliParser() {
  const data = require("./cli-parser");
  _cliParser = function () {
    return data;
  };
  return data;
}
function _generateDocMd() {
  const data = require("./generate-doc-md");
  _generateDocMd = function () {
    return data;
  };
  return data;
}
// eslint-disable-next-line max-classes-per-file

class CliGenerateCmd {
  constructor(cliMain) {
    this.cliMain = cliMain;
    (0, _defineProperty2().default)(this, "name", 'generate');
    (0, _defineProperty2().default)(this, "description", 'EXPERIMENTAL. generate an .md file with all commands details');
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "loader", false);
    (0, _defineProperty2().default)(this, "group", 'general');
    (0, _defineProperty2().default)(this, "options", [['', 'metadata', 'metadata/front-matter to place at the top of the .md file, enter as an object e.g. --metadata.id=cli --metadata.title=commands'], ['j', 'json', 'output the commands info as JSON']]);
  }
  async report(args, {
    metadata
  }) {
    return new (_generateDocMd().GenerateCommandsDoc)(this.cliMain.commands, {
      metadata
    }).generate();
  }
  async json() {
    return new (_generateDocMd().GenerateCommandsDoc)(this.cliMain.commands, {}).generateJson();
  }
}
exports.CliGenerateCmd = CliGenerateCmd;
class CliCmd {
  constructor(cliMain, docsDomain) {
    this.cliMain = cliMain;
    this.docsDomain = docsDomain;
    (0, _defineProperty2().default)(this, "name", 'cli');
    (0, _defineProperty2().default)(this, "description", 'EXPERIMENTAL. enters bit cli program and generates commands list');
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "commands", []);
    (0, _defineProperty2().default)(this, "loader", false);
    (0, _defineProperty2().default)(this, "group", 'general');
    (0, _defineProperty2().default)(this, "options", []);
  }
  async report() {
    _logger().default.isDaemon = true;
    const rl = _readline().default.createInterface({
      input: process.stdin,
      output: process.stdout,
      prompt: 'bit > ',
      completer: (line, cb) => completer(line, cb, this.cliMain)
    });
    const cliParser = new (_cliParser().CLIParser)(this.cliMain.commands, this.cliMain.groups, undefined, this.docsDomain);
    rl.prompt();
    return new Promise(resolve => {
      // eslint-disable-next-line @typescript-eslint/no-misused-promises
      rl.on('line', async line => {
        const cmd = line.trim().split(' ');
        try {
          await cliParser.parse(cmd);
        } catch (err) {
          await (0, _handleErrors().handleErrorAndExit)(err, cmd[0]);
        }
        rl.prompt();
      }).on('close', () => {
        resolve('Have a great day!');
      });
    });
  }
}
exports.CliCmd = CliCmd;
function completer(line, cb, cliMain) {
  const lineSplit = line.split(' ');
  let values = [];
  if (lineSplit.length <= 1) {
    values = completeCommand(line, cliMain);
    cb(null, [values, line]);
  }
  (0, _consumer().loadConsumerIfExist)().then(consumer => {
    const comps = (consumer === null || consumer === void 0 ? void 0 : consumer.bitmapIdsFromCurrentLane.map(id => id.toStringWithoutVersion())) || [];
    values = comps.filter(c => c.includes(lineSplit[1]));
    // eslint-disable-next-line promise/no-callback-in-promise
    cb(null, [values, line]);
  }).catch(err => {
    // eslint-disable-next-line promise/no-callback-in-promise
    cb(err, [[], line]);
  });
}
function completeCommand(line, cliMain) {
  const commands = cliMain.commands.filter(cmd => cmd.name.startsWith(line));
  return commands.map(c => c.name).map(name => name.split(' ')[0]);
}

//# sourceMappingURL=cli.cmd.js.map