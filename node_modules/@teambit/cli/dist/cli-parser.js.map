{"version":3,"names":["CLIParser","constructor","commands","groups","parser","yargs","docsDomain","parse","args","process","argv","slice","throwForNonExistsCommand","logger","debug","join","help","configureParser","forEach","command","length","parseCommandWithSubCommands","yargsCommand","getYargsCommand","configureGlobalFlags","setHelpMiddleware","handleCommandFailure","configureCompletion","strict","wrap","middleware","_","printHelp","exit","loader","off","showHelp","logCommandHelp","bind","isDaemon","fail","msg","err","stop","isHelpFlagEntered","includes","isMsgAboutMissingArgs","startsWith","console","log","chalk","yellow","commandsToShowComponentIdsForCompletion","completion","current","completionFilter","done","consumer","loadConsumerIfExist","bitmapIdsFromCurrentLane","map","id","toStringWithoutVersion","formatHelp","parserConfiguration","yarnCommand","builderFunc","cmd","subCommand","options","YargsAdapter","getGlobalOptions","builder","handler","option","alias","describe","group","GLOBAL_GROUP","global","commandName","commandsNames","c","getCommandId","name","aliases","filter","a","existingGlobalFlags","validCommands","commandExist","didYouMean","returnFirstMatch","suggestions","private","suggestion","Array","isArray","CommandNotFound","findCommandByArgv","replacer","p1","p2","green","lines","split","linesWithoutEmpty","compact","cmdLine","description","globalOptions","subCommands","examples","optionsStarted","globalStarted","subCommandsStarted","positionalsStarted","examplesStarted","i","currentLine","STANDARD_GROUP","push","optionsColored","opt","replace","argsColored","arg","argName","optionsStr","argumentsStr","examplesStr","subCommandsStr","descriptionColored","desc","bold","extendedDescription","helpUrl","underline","descriptionStr","globalOptionsStr","finalOutput","enteredCommand","enteredSubCommand","undefined","isCommandMatch","str","find"],"sources":["cli-parser.ts"],"sourcesContent":["import didYouMean from 'didyoumean';\nimport yargs from 'yargs';\nimport { Command } from '@teambit/legacy/dist/cli/command';\nimport { GroupsType } from '@teambit/legacy/dist/cli/command-groups';\nimport { compact } from 'lodash';\nimport { loadConsumerIfExist } from '@teambit/legacy/dist/consumer';\nimport logger from '@teambit/legacy/dist/logger/logger';\nimport loader from '@teambit/legacy/dist/cli/loader';\nimport chalk from 'chalk';\nimport { getCommandId } from './get-command-id';\nimport { formatHelp } from './help';\nimport { GLOBAL_GROUP, STANDARD_GROUP, YargsAdapter } from './yargs-adapter';\nimport { CommandNotFound } from './exceptions/command-not-found';\n\nexport class CLIParser {\n  constructor(\n    private commands: Command[],\n    private groups: GroupsType,\n    public parser = yargs,\n    private docsDomain: string\n  ) {}\n\n  async parse(args = process.argv.slice(2)) {\n    this.throwForNonExistsCommand(args[0]);\n    logger.debug(`[+] CLI-INPUT: ${args.join(' ')}`);\n    yargs(args);\n    yargs.help(false);\n    this.configureParser();\n    this.commands.forEach((command: Command) => {\n      if (command.commands && command.commands.length) {\n        this.parseCommandWithSubCommands(command);\n      } else {\n        const yargsCommand = this.getYargsCommand(command);\n        yargs.command(yargsCommand);\n      }\n    });\n    this.configureGlobalFlags();\n    this.setHelpMiddleware();\n    this.handleCommandFailure();\n    this.configureCompletion();\n    yargs.strict(); // don't allow non-exist flags and non-exist commands\n\n    yargs\n      // .recommendCommands() // don't use it, it brings the global help of yargs, we have a custom one\n      .wrap(null);\n\n    await yargs.parse();\n  }\n\n  private setHelpMiddleware() {\n    yargs.middleware((argv) => {\n      if (argv._.length === 0 && argv.help) {\n        // this is the main help page\n        this.printHelp();\n        process.exit(0);\n      }\n      if (argv.help) {\n        loader.off(); // stop the \"loading bit...\" before showing help if needed\n        // this is a command help page\n        yargs.showHelp(this.logCommandHelp.bind(this));\n        if (!logger.isDaemon) process.exit(0);\n      }\n    }, true);\n  }\n\n  private handleCommandFailure() {\n    yargs.fail((msg, err) => {\n      loader.stop();\n      if (err) {\n        throw err;\n      }\n      yargs.showHelp(this.logCommandHelp.bind(this));\n      const args = process.argv.slice(2);\n      const isHelpFlagEntered = args.includes('--help') || args.includes('-h');\n      const isMsgAboutMissingArgs = msg.startsWith('Not enough non-option arguments');\n      // avoid showing the \"Not enough non-option arguments\" message when the user is trying to get the command help\n      if (!isMsgAboutMissingArgs || !isHelpFlagEntered) {\n        // eslint-disable-next-line no-console\n        console.log(`\\n${chalk.yellow(msg)}`);\n      }\n      if (!logger.isDaemon) process.exit(1);\n    });\n  }\n\n  private configureCompletion() {\n    const commandsToShowComponentIdsForCompletion = [\n      'show',\n      'diff',\n      'tag',\n      'export',\n      'env',\n      'envs',\n      'compile',\n      'build',\n      'test',\n      'lint',\n      'log',\n      'dependents',\n      'dependencies',\n    ];\n    // @ts-ignore\n    yargs.completion('completion', async function (current, argv, completionFilter, done) {\n      if (!current.startsWith('-') && commandsToShowComponentIdsForCompletion.includes(argv._[1])) {\n        const consumer = await loadConsumerIfExist();\n        done(consumer?.bitmapIdsFromCurrentLane.map((id) => id.toStringWithoutVersion()));\n      } else {\n        completionFilter();\n      }\n    });\n  }\n\n  private printHelp() {\n    const help = formatHelp(this.commands, this.groups, this.docsDomain);\n    // eslint-disable-next-line no-console\n    console.log(help);\n  }\n\n  private configureParser() {\n    yargs.parserConfiguration({\n      // 'strip-dashed': true, // we can't enable it, otherwise, the completion doesn't work\n      'strip-aliased': true,\n      'boolean-negation': false,\n      'populate--': true,\n    });\n  }\n\n  private parseCommandWithSubCommands(command: Command) {\n    const yarnCommand = this.getYargsCommand(command);\n    const builderFunc = () => {\n      command.commands?.forEach((cmd) => {\n        const subCommand = this.getYargsCommand(cmd);\n        yargs.command(subCommand);\n      });\n      // since the \"builder\" method is overridden, the global flags of the main command are gone, this fixes it.\n      yargs.options(YargsAdapter.getGlobalOptions(command));\n      return yargs;\n    };\n    yarnCommand.builder = builderFunc;\n    yargs.command(yarnCommand);\n  }\n\n  private getYargsCommand(command: Command): YargsAdapter {\n    const yarnCommand = new YargsAdapter(command);\n    yarnCommand.builder = yarnCommand.builder.bind(yarnCommand);\n    yarnCommand.handler = yarnCommand.handler.bind(yarnCommand);\n\n    return yarnCommand;\n  }\n\n  private configureGlobalFlags() {\n    yargs\n      .option('help', {\n        alias: 'h',\n        describe: 'show help',\n        group: GLOBAL_GROUP,\n      })\n      .option('version', {\n        global: false,\n        alias: 'v',\n        describe: 'show version',\n        group: GLOBAL_GROUP,\n      });\n  }\n\n  private throwForNonExistsCommand(commandName: string) {\n    if (!commandName || commandName.startsWith('-')) {\n      return;\n    }\n    const commandsNames = this.commands.map((c) => getCommandId(c.name));\n    const aliases = this.commands.map((c) => c.alias).filter((a) => a);\n    const existingGlobalFlags = ['-V', '--version'];\n    const validCommands = [...commandsNames, ...aliases, ...existingGlobalFlags];\n    const commandExist = validCommands.includes(commandName);\n\n    if (!commandExist) {\n      didYouMean.returnFirstMatch = true;\n      const suggestions = didYouMean(\n        commandName,\n        this.commands.filter((c) => !c.private).map((c) => getCommandId(c.name))\n      );\n      const suggestion = suggestions && Array.isArray(suggestions) ? suggestions[0] : suggestions;\n\n      throw new CommandNotFound(commandName, suggestion as string);\n    }\n  }\n\n  /**\n   * manipulate the command help output. there is no API from Yarn to do any of this, so it needs to be done manually.\n   * see https://github.com/yargs/yargs/issues/1956\n   *\n   * the original order of the output:\n   * description\n   * Options\n   * Commands\n   * Global\n   * Positionals\n   * Examples\n   */\n  private logCommandHelp(help: string) {\n    const command = this.findCommandByArgv();\n\n    const replacer = (_, p1, p2) => `${p1}${chalk.green(p2)}`;\n    const lines = help.split('\\n');\n    const linesWithoutEmpty = compact(lines);\n    const cmdLine = linesWithoutEmpty[0];\n    const description: string[] = [];\n    const options: string[] = [];\n    const globalOptions: string[] = [];\n    const subCommands: string[] = [];\n    const args: string[] = [];\n    const examples: string[] = [];\n\n    let optionsStarted = false;\n    let globalStarted = false;\n    let subCommandsStarted = false;\n    let positionalsStarted = false;\n    let examplesStarted = false;\n    for (let i = 1; i < linesWithoutEmpty.length; i += 1) {\n      const currentLine = linesWithoutEmpty[i];\n      if (currentLine === STANDARD_GROUP) {\n        optionsStarted = true;\n      } else if (currentLine === GLOBAL_GROUP) {\n        globalStarted = true;\n      } else if (currentLine === 'Commands:') {\n        subCommandsStarted = true;\n      } else if (currentLine === 'Positionals:') {\n        positionalsStarted = true;\n      } else if (currentLine === 'Examples:') {\n        examplesStarted = true;\n      } else if (examplesStarted) {\n        examples.push(currentLine);\n      } else if (positionalsStarted) {\n        args.push(currentLine);\n      } else if (globalStarted) {\n        globalOptions.push(currentLine);\n      } else if (optionsStarted) {\n        options.push(currentLine);\n      } else if (subCommandsStarted) {\n        subCommands.push(currentLine);\n      } else {\n        description.push(currentLine);\n      }\n    }\n\n    // show the flags in green\n    const optionsColored = options.map((opt) => opt.replace(/(--)([\\w-]+)/, replacer).replace(/(-)([\\w-]+)/, replacer));\n    const argsColored = args.map((arg) => arg.replace(/^ {2}\\S+/, (argName) => chalk.green(argName))); // regex: two spaces then the first word until a white space\n    const optionsStr = options.length ? `\\n${STANDARD_GROUP}\\n${optionsColored.join('\\n')}\\n` : '';\n    const argumentsStr = args.length ? `\\nArguments:\\n${argsColored.join('\\n')}\\n` : '';\n    const examplesStr = examples.length ? `\\nExamples:\\n${examples.join('\\n')}\\n` : '';\n    const subCommandsStr = subCommands.length ? `\\n${'Commands:'}\\n${subCommands.join('\\n')}\\n` : '';\n    // show the description in bold\n    const descriptionColored = description.map((desc) => chalk.bold(desc));\n    if (command?.extendedDescription) {\n      descriptionColored.push(command?.extendedDescription);\n    }\n    if (command?.helpUrl) {\n      descriptionColored.push(`for more info, visit: ${chalk.underline(command.helpUrl)}`);\n    }\n    const descriptionStr = descriptionColored.join('\\n');\n    const globalOptionsStr = globalOptions.join('\\n');\n\n    const finalOutput = `${cmdLine}\n\n${descriptionStr}\n${argumentsStr}${subCommandsStr}${optionsStr}${examplesStr}\n${GLOBAL_GROUP}\n${globalOptionsStr}`;\n\n    // eslint-disable-next-line no-console\n    console.log(finalOutput);\n  }\n\n  private findCommandByArgv(): Command | undefined {\n    const args = process.argv.slice(2);\n    const enteredCommand = args[0];\n    const enteredSubCommand = args[1];\n    if (!enteredCommand) {\n      return undefined;\n    }\n    const isCommandMatch = (cmd: Command, str: string) => {\n      return (\n        cmd.name.startsWith(`${str} `) || // e.g. \"tag <id>\".startsWith(\"tag \")\n        cmd.name === str || // e.g. \"globals\" === \"globals\"\n        cmd.alias === str\n      ); // e.g. \"t\" === \"t\"\n    };\n    const command = this.commands.find((cmd) => isCommandMatch(cmd, enteredCommand));\n    if (!command) {\n      return undefined;\n    }\n    if (!command.commands || !enteredSubCommand) {\n      return command; // no sub-commands.\n    }\n    const subCommand = command.commands.find((cmd) => isCommandMatch(cmd, enteredSubCommand));\n    return subCommand || command;\n  }\n}\n"],"mappings":"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"}