import { Command } from '@teambit/legacy/dist/cli/command';
export declare type GenerateOpts = {
    metadata?: Record<string, string>;
};
declare type CommandObject = ReturnType<typeof oneCommandToObject> & {
    commands?: any;
};
export declare class GenerateCommandsDoc {
    private commands;
    private options;
    constructor(commands: Command[], options: GenerateOpts);
    generate(): string;
    generateJson(): CommandObject[];
    private commandsToObjects;
    private getFrontmatter;
    private getAllPublicCommandsSorted;
    private generateCommand;
    private generateSubCommands;
    private generateOptions;
    private formatStringToMD;
    private formatDescription;
}
declare function oneCommandToObject(command: Command): Pick<Command, "name" | "alias" | "options" | "description" | "extendedDescription" | "group" | "private" | "internal" | "remoteOp" | "skipWorkspace" | "arguments" | "examples">;
export {};
