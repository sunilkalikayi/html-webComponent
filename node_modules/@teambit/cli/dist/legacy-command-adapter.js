"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.symbol.description.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LegacyCommandAdapter = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
class LegacyCommandAdapter {
  constructor(cmd, cliExtension) {
    this.cmd = cmd;
    (0, _defineProperty2().default)(this, "alias", void 0);
    (0, _defineProperty2().default)(this, "name", void 0);
    (0, _defineProperty2().default)(this, "description", void 0);
    (0, _defineProperty2().default)(this, "options", void 0);
    (0, _defineProperty2().default)(this, "extendedDescription", void 0);
    (0, _defineProperty2().default)(this, "group", void 0);
    (0, _defineProperty2().default)(this, "loader", void 0);
    (0, _defineProperty2().default)(this, "commands", void 0);
    (0, _defineProperty2().default)(this, "private", void 0);
    (0, _defineProperty2().default)(this, "migration", void 0);
    (0, _defineProperty2().default)(this, "internal", void 0);
    (0, _defineProperty2().default)(this, "skipWorkspace", void 0);
    (0, _defineProperty2().default)(this, "helpUrl", void 0);
    (0, _defineProperty2().default)(this, "_packageManagerArgs", void 0);
    this.name = cmd.name;
    this.description = cmd.description;
    this.helpUrl = cmd.helpUrl;
    this.options = cmd.opts || [];
    this.alias = cmd.alias;
    this.extendedDescription = cmd.extendedDescription;
    this.skipWorkspace = cmd.skipWorkspace;
    this.group = cmd.group;
    this.loader = cmd.loader;
    this.private = cmd.private;
    this.migration = cmd.migration;
    this.internal = cmd.internal;
    this.commands = (cmd.commands || []).map(sub => new LegacyCommandAdapter(sub, cliExtension));
  }
  async action(params, options) {
    const res = await this.cmd.action(params, options, this._packageManagerArgs);
    let data = res;
    let code = 0;
    if (res && res.__code !== undefined) {
      data = res.data;
      code = res.__code;
    }
    const report = this.cmd.report(data, params, options);
    return {
      code,
      report
    };
  }
  async report(params, options) {
    const actionResult = await this.action(params, options);
    return {
      data: actionResult.report,
      code: actionResult.code
    };
  }
  async json(params, options) {
    const actionResult = await this.action(params, options);
    return {
      data: JSON.parse(actionResult.report),
      code: actionResult.code
    };
  }
}
exports.LegacyCommandAdapter = LegacyCommandAdapter;

//# sourceMappingURL=legacy-command-adapter.js.map