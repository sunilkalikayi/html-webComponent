{"version":3,"names":["GLOBAL_GROUP","STANDARD_GROUP","YargsAdapter","constructor","commanderCommand","command","name","describe","description","aliases","alias","builder","yargs","options","optionsToBuilder","option","arguments","forEach","arg","positional","examples","example","cmd","handler","argv","enteredArgs","getArgsFromCommandName","argsValues","map","a","flags","Object","keys","reduce","acc","current","val","_packageManagerArgs","commandRunner","CommandRunner","runCommand","opt","desc","optName","split","group","type","includes","requiresArg","globalOptions","getGlobalOptions","remoteOp","TOKEN_FLAG","internal","log","commandName","commandSplit","shift","existArg","trimmed","trim","startsWith","endsWith","Error","withoutBrackets","slice","camelCase"],"sources":["yargs-adapter.ts"],"sourcesContent":["import { Command } from '@teambit/legacy/dist/cli/command';\nimport { Arguments, CommandModule, Argv, Options } from 'yargs';\nimport { TOKEN_FLAG } from '@teambit/legacy/dist/constants';\nimport { camelCase } from 'lodash';\nimport { CommandRunner } from './command-runner';\n\nexport const GLOBAL_GROUP = 'Global';\nexport const STANDARD_GROUP = 'Options';\n\nexport class YargsAdapter implements CommandModule {\n  command: string;\n  describe?: string;\n  aliases?: string;\n  constructor(private commanderCommand: Command) {\n    this.command = commanderCommand.name;\n    this.describe = commanderCommand.description;\n    this.aliases = commanderCommand.alias;\n  }\n\n  builder(yargs: Argv) {\n    const options = YargsAdapter.optionsToBuilder(this.commanderCommand);\n    yargs.option(options);\n    this.commanderCommand.arguments?.forEach((arg) => {\n      yargs.positional(arg.name, { description: arg.description });\n    });\n    this.commanderCommand.examples?.forEach((example) => {\n      yargs.example(example.cmd, example.description);\n    });\n\n    return yargs;\n  }\n\n  handler(argv: Arguments) {\n    const enteredArgs = getArgsFromCommandName(this.commanderCommand.name);\n    const argsValues = enteredArgs.map((a) => argv[a]) as any[];\n    // a workaround to get a flag syntax such as \"--all [version]\" work with yargs.\n    const flags = Object.keys(argv).reduce((acc, current) => {\n      if (current === '_' || current === '$0' || current === '--') return acc;\n      // const flagName = current.split(' ')[0];\n      const val = typeof argv[current] === 'string' && !argv[current] ? true : argv[current];\n      acc[current] = val;\n      return acc;\n    }, {});\n    this.commanderCommand._packageManagerArgs = (argv['--'] || []) as string[];\n\n    const commandRunner = new CommandRunner(this.commanderCommand, argsValues, flags);\n    return commandRunner.runCommand();\n  }\n\n  get positional() {\n    return this.commanderCommand.arguments;\n  }\n\n  static optionsToBuilder(command: Command): { [key: string]: Options } {\n    const option = command.options.reduce((acc, [alias, opt, desc]) => {\n      const optName = opt.split(' ')[0];\n      acc[optName] = {\n        alias,\n        describe: desc,\n        group: STANDARD_GROUP,\n        type: opt.includes(' ') ? 'string' : 'boolean',\n        requiresArg: opt.includes('<'),\n      } as Options;\n      return acc;\n    }, {});\n    const globalOptions = YargsAdapter.getGlobalOptions(command);\n\n    return { ...option, ...globalOptions };\n  }\n\n  static getGlobalOptions(command: Command): Record<string, any> {\n    const globalOptions: Record<string, any> = {};\n    if (command.remoteOp) {\n      globalOptions[TOKEN_FLAG] = {\n        describe: 'authentication token',\n        group: GLOBAL_GROUP,\n      };\n    }\n    if (!command.internal) {\n      globalOptions.log = {\n        describe:\n          'print log messages to the screen, options are: [trace, debug, info, warn, error, fatal], the default is info',\n        group: GLOBAL_GROUP,\n      };\n      globalOptions['safe-mode'] = {\n        describe:\n          'bootstrap the bare-minimum with only the CLI aspect. useful mainly for low-level commands when bit refuses to load',\n        group: GLOBAL_GROUP,\n      };\n    }\n    return globalOptions;\n  }\n}\n\nfunction getArgsFromCommandName(commandName: string) {\n  const commandSplit = commandName.split(' ');\n  commandSplit.shift(); // remove the first element, it's the command-name\n\n  return commandSplit.map((existArg) => {\n    const trimmed = existArg.trim();\n    if ((!trimmed.startsWith('<') && !trimmed.startsWith('[')) || (!trimmed.endsWith('>') && !trimmed.endsWith(']'))) {\n      throw new Error(`expect arg \"${trimmed}\" of \"${commandName}\" to be wrapped with \"[]\" or \"<>\"`);\n    }\n    // remove the opening and closing brackets\n    const withoutBrackets = trimmed.slice(1, -1);\n\n    return camelCase(withoutBrackets);\n  });\n}\n"],"mappings":"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"}