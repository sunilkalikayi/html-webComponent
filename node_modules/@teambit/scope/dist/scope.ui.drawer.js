"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scopeDrawer = void 0;
function _extends2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
  _extends2 = function () {
    return data;
  };
  return data;
}
function _react() {
  const data = _interopRequireWildcard(require("react"));
  _react = function () {
    return data;
  };
  return data;
}
function _componentUi() {
  const data = require("@teambit/component.ui.component-drawer");
  _componentUi = function () {
    return data;
  };
  return data;
}
function _uiFoundationUi() {
  const data = require("@teambit/ui-foundation.ui.side-bar");
  _uiFoundationUi = function () {
    return data;
  };
  return data;
}
function _lanesHooks() {
  const data = require("@teambit/lanes.hooks.use-lanes");
  _lanesHooks = function () {
    return data;
  };
  return data;
}
function _lanesHooks2() {
  const data = require("@teambit/lanes.hooks.use-lane-components");
  _lanesHooks2 = function () {
    return data;
  };
  return data;
}
function _scopeUiHooks() {
  const data = require("@teambit/scope.ui.hooks.scope-context");
  _scopeUiHooks = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const scopeDrawer = ({
  treeWidgets,
  filtersSlot,
  drawerWidgetSlot,
  assumeScopeInUrl = false,
  overrideUseComponents
}) => {
  const customScopeTreeNodeRenderer = (treeNodeSlot, host) => function TreeNode(props) {
    const children = props.node.children;
    if (!children) return /*#__PURE__*/_react().default.createElement(_uiFoundationUi().ComponentView, (0, _extends2().default)({}, props, {
      treeNodeSlot: treeNodeSlot
    }));

    // skip over scope node and render only children
    if (props.node.payload instanceof _uiFoundationUi().ScopePayload) {
      const scopeNameFromNode = props.node.id.slice(0, -1);
      const scope = host === null || host === void 0 ? void 0 : host.name;

      /**
       * this is only valid when viewing component from a lane
       * if the lane component is from a different scope than the current scope
       * show the scope node
       */
      if (scopeNameFromNode !== scope) {
        return /*#__PURE__*/_react().default.createElement(_uiFoundationUi().ScopeTreeNode, props);
      }
      return /*#__PURE__*/_react().default.createElement(_react().default.Fragment, null, children.map(childNode => /*#__PURE__*/_react().default.createElement(TreeNode, (0, _extends2().default)({
        key: childNode.id
      }, props, {
        node: childNode
      }))));
    }
    return /*#__PURE__*/_react().default.createElement(_uiFoundationUi().NamespaceTreeNode, props);
  };
  return new (_componentUi().ComponentsDrawer)({
    assumeScopeInUrl,
    order: 0,
    id: 'scope-components-drawer',
    name: 'COMPONENTS',
    plugins: {
      tree: {
        widgets: treeWidgets,
        customRenderer: customScopeTreeNodeRenderer
      },
      filters: filtersSlot,
      drawerWidgets: drawerWidgetSlot
    },
    useHost: () => (0, _scopeUiHooks().useScope)(),
    emptyMessage: 'Scope is empty',
    // TODO: create an interface for Component host.
    transformTree: host => {
      return rootNode => {
        var _rootNode$children;
        const thisScopeIndex = (_rootNode$children = rootNode.children) === null || _rootNode$children === void 0 ? void 0 : _rootNode$children.findIndex(node => {
          if (!(node.payload instanceof _uiFoundationUi().ScopePayload)) return undefined;
          const scopeNameFromNode = node.id.slice(0, -1);
          return scopeNameFromNode === (host === null || host === void 0 ? void 0 : host.name);
        });
        const thisScope = rootNode.children && thisScopeIndex !== undefined ? rootNode.children[thisScopeIndex] : undefined;
        if (thisScope && thisScope.children && rootNode.children) {
          delete rootNode.children[thisScopeIndex];
          const children = rootNode.children.concat(thisScope.children);
          rootNode.children = children;
        }
        return rootNode;
      };
    },
    useComponents: overrideUseComponents || (() => {
      var _lanesModel$viewedLan;
      const {
        lanesModel,
        loading: lanesLoading
      } = (0, _lanesHooks().useLanes)();
      const viewedLaneId = lanesModel === null || lanesModel === void 0 ? void 0 : (_lanesModel$viewedLan = lanesModel.viewedLane) === null || _lanesModel$viewedLan === void 0 ? void 0 : _lanesModel$viewedLan.id;
      const {
        components: laneComponents = [],
        loading: laneCompsLoading
      } = (0, _lanesHooks2().useLaneComponents)(viewedLaneId !== null && viewedLaneId !== void 0 && viewedLaneId.isDefault() ? undefined : viewedLaneId);
      const {
        components: mainComponents
      } = (0, _react().useContext)(_scopeUiHooks().ScopeContext);
      // lane components + main components
      const components = mergeComponents(mainComponents, laneComponents);
      return {
        loading: lanesLoading || laneCompsLoading,
        components
      };
    })
  });
};
exports.scopeDrawer = scopeDrawer;
function mergeComponents(mainComponents, laneComponents) {
  const mainComponentsThatAreNotOnLane = mainComponents.filter(mainComponent => {
    return !laneComponents.find(laneComponent => laneComponent.id.toStringWithoutVersion() === mainComponent.id.toStringWithoutVersion());
  });
  return laneComponents.concat(mainComponentsThatAreNotOnLane);
}

//# sourceMappingURL=scope.ui.drawer.js.map