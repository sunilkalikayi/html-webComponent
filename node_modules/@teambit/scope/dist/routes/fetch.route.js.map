{"version":3,"names":["FetchRoute","constructor","scope","logger","Verb","READ","req","res","setTimeout","config","httpTimeOut","preFetchHookP","preFetchObjects","values","map","fn","ids","body","fetchOptions","headers","Promise","all","catch","err","error","readable","fetch","path","pack","ObjectList","fromObjectStreamToTar","name","pipelinePromise","promisify","pipeline","info","aborted","warn"],"sources":["fetch.route.ts"],"sourcesContent":["import { Route, Verb, Request, Response } from '@teambit/express';\nimport { fetch } from '@teambit/legacy/dist/api/scope';\nimport { ObjectList } from '@teambit/legacy/dist/scope/objects/object-list';\nimport { Logger } from '@teambit/logger';\nimport { promisify } from 'util';\nimport { pipeline } from 'stream';\nimport { ScopeMain } from '../scope.main.runtime';\n\nexport class FetchRoute implements Route {\n  constructor(private scope: ScopeMain, private logger: Logger) {}\n\n  route = '/scope/fetch';\n  method = 'post';\n  verb = Verb.READ;\n  middlewares = [\n    async (req: Request, res: Response) => {\n      req.setTimeout(this.scope.config.httpTimeOut);\n      const preFetchHookP = this.scope.preFetchObjects\n        .values()\n        .map((fn) => fn({ ids: req.body.ids, fetchOptions: req.body.fetchOptions }, { headers: req.headers }));\n\n      Promise.all(preFetchHookP).catch((err) => {\n        this.logger.error('fatal: onPreFetchObjects encountered an error (this error does not stop the process)', err);\n      });\n\n      const readable = await fetch(this.scope.path, req.body.ids, req.body.fetchOptions);\n      const pack = ObjectList.fromObjectStreamToTar(readable, this.scope.name);\n      const pipelinePromise = promisify(pipeline);\n      try {\n        await pipelinePromise(pack, res);\n        this.logger.info('fetch.router, the response has been sent successfully to the client', req.headers);\n      } catch (err: any) {\n        if (req.aborted) {\n          this.logger.warn('FetchRoute, the client aborted the request', err);\n        } else {\n          this.logger.error(\n            `FetchRoute encountered an error during the pipeline streaming, this should never happen.\n  make sure the error is caught in fromObjectStreamToTar and it streamed using the name \"ERROR\"`,\n            err\n          );\n        }\n      }\n    },\n  ];\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAGO,MAAMA,UAAU,CAAkB;EACvCC,WAAW,CAASC,KAAgB,EAAUC,MAAc,EAAE;IAAA,KAA1CD,KAAgB,GAAhBA,KAAgB;IAAA,KAAUC,MAAc,GAAdA,MAAc;IAAA,+CAEpD,cAAc;IAAA,gDACb,MAAM;IAAA,8CACRC,eAAI,CAACC,IAAI;IAAA,qDACF,CACZ,OAAOC,GAAY,EAAEC,GAAa,KAAK;MACrCD,GAAG,CAACE,UAAU,CAAC,IAAI,CAACN,KAAK,CAACO,MAAM,CAACC,WAAW,CAAC;MAC7C,MAAMC,aAAa,GAAG,IAAI,CAACT,KAAK,CAACU,eAAe,CAC7CC,MAAM,EAAE,CACRC,GAAG,CAAEC,EAAE,IAAKA,EAAE,CAAC;QAAEC,GAAG,EAAEV,GAAG,CAACW,IAAI,CAACD,GAAG;QAAEE,YAAY,EAAEZ,GAAG,CAACW,IAAI,CAACC;MAAa,CAAC,EAAE;QAAEC,OAAO,EAAEb,GAAG,CAACa;MAAQ,CAAC,CAAC,CAAC;MAExGC,OAAO,CAACC,GAAG,CAACV,aAAa,CAAC,CAACW,KAAK,CAAEC,GAAG,IAAK;QACxC,IAAI,CAACpB,MAAM,CAACqB,KAAK,CAAC,sFAAsF,EAAED,GAAG,CAAC;MAChH,CAAC,CAAC;MAEF,MAAME,QAAQ,GAAG,MAAM,IAAAC,cAAK,EAAC,IAAI,CAACxB,KAAK,CAACyB,IAAI,EAAErB,GAAG,CAACW,IAAI,CAACD,GAAG,EAAEV,GAAG,CAACW,IAAI,CAACC,YAAY,CAAC;MAClF,MAAMU,IAAI,GAAGC,wBAAU,CAACC,qBAAqB,CAACL,QAAQ,EAAE,IAAI,CAACvB,KAAK,CAAC6B,IAAI,CAAC;MACxE,MAAMC,eAAe,GAAG,IAAAC,iBAAS,EAACC,kBAAQ,CAAC;MAC3C,IAAI;QACF,MAAMF,eAAe,CAACJ,IAAI,EAAErB,GAAG,CAAC;QAChC,IAAI,CAACJ,MAAM,CAACgC,IAAI,CAAC,qEAAqE,EAAE7B,GAAG,CAACa,OAAO,CAAC;MACtG,CAAC,CAAC,OAAOI,GAAQ,EAAE;QACjB,IAAIjB,GAAG,CAAC8B,OAAO,EAAE;UACf,IAAI,CAACjC,MAAM,CAACkC,IAAI,CAAC,4CAA4C,EAAEd,GAAG,CAAC;QACrE,CAAC,MAAM;UACL,IAAI,CAACpB,MAAM,CAACqB,KAAK,CACd;AACb,gGAAgG,EACpFD,GAAG,CACJ;QACH;MACF;IACF,CAAC,CACF;EAlC8D;AAmCjE;AAAC"}