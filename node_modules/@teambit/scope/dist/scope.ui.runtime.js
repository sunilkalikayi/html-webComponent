"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.array.sort.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ScopeUI = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _lodash() {
  const data = require("lodash");
  _lodash = function () {
    return data;
  };
  return data;
}
function _component() {
  const data = require("@teambit/component");
  _component = function () {
    return data;
  };
  return data;
}
function _harmony() {
  const data = require("@teambit/harmony");
  _harmony = function () {
    return data;
  };
  return data;
}
function _sidebar() {
  const data = require("@teambit/sidebar");
  _sidebar = function () {
    return data;
  };
  return data;
}
function _ui() {
  const data = require("@teambit/ui");
  _ui = function () {
    return data;
  };
  return data;
}
function _react() {
  const data = _interopRequireDefault(require("react"));
  _react = function () {
    return data;
  };
  return data;
}
function _designUiSurfacesMenu() {
  const data = require("@teambit/design.ui.surfaces.menu.link-item");
  _designUiSurfacesMenu = function () {
    return data;
  };
  return data;
}
function _commandBar() {
  const data = _interopRequireDefault(require("@teambit/command-bar"));
  _commandBar = function () {
    return data;
  };
  return data;
}
function _componentUi() {
  const data = require("@teambit/component.ui.component-drawer");
  _componentUi = function () {
    return data;
  };
  return data;
}
function _componentUiComponentFilters() {
  const data = require("@teambit/component.ui.component-filters.deprecate-filter");
  _componentUiComponentFilters = function () {
    return data;
  };
  return data;
}
function _componentUiComponentFilters2() {
  const data = require("@teambit/component.ui.component-filters.env-filter");
  _componentUiComponentFilters2 = function () {
    return data;
  };
  return data;
}
function _componentModules() {
  const data = require("@teambit/component.modules.component-url");
  _componentModules = function () {
    return data;
  };
  return data;
}
function _componentUiComponentFilters3() {
  const data = require("@teambit/component.ui.component-filters.show-main-filter");
  _componentUiComponentFilters3 = function () {
    return data;
  };
  return data;
}
function _menu() {
  const data = require("./ui/menu");
  _menu = function () {
    return data;
  };
  return data;
}
function _scope() {
  const data = require("./scope.aspect");
  _scope = function () {
    return data;
  };
  return data;
}
function _scope2() {
  const data = require("./ui/scope");
  _scope2 = function () {
    return data;
  };
  return data;
}
function _scopeUi() {
  const data = require("./scope.ui.drawer");
  _scopeUi = function () {
    return data;
  };
  return data;
}
class ScopeUI {
  constructor(
  /**
   * route slot.
   */
  routeSlot,
  /**
   * component ui extension.
   */
  componentUi,
  /**
   * menu slot
   */
  menuSlot, sidebar, sidebarSlot, commandBarUI, scopeBadgeSlot, menuWidgetSlot,
  /**
   * sidebar link slot
   */
  sidebarItemSlot,
  /**
   * main dropdown item slot
   */
  menuItemSlot,
  /**
   * corner slot
   */
  cornerSlot,
  /**
   * overview line slot to add new lines beneath the overview section
   */
  overviewSlot,
  /**
   * add a new context to ui
   */
  contextSlot, drawerWidgetSlot, drawerComponentsFiltersSlot) {
    this.routeSlot = routeSlot;
    this.componentUi = componentUi;
    this.menuSlot = menuSlot;
    this.sidebar = sidebar;
    this.sidebarSlot = sidebarSlot;
    this.commandBarUI = commandBarUI;
    this.scopeBadgeSlot = scopeBadgeSlot;
    this.menuWidgetSlot = menuWidgetSlot;
    this.sidebarItemSlot = sidebarItemSlot;
    this.menuItemSlot = menuItemSlot;
    this.cornerSlot = cornerSlot;
    this.overviewSlot = overviewSlot;
    this.contextSlot = contextSlot;
    this.drawerWidgetSlot = drawerWidgetSlot;
    this.drawerComponentsFiltersSlot = drawerComponentsFiltersSlot;
    (0, _defineProperty2().default)(this, "setSidebarToggle", () => {});
    (0, _defineProperty2().default)(this, "registerMenuRoutes", routes => {
      this.menuSlot.register(routes);
      return this;
    });
    (0, _defineProperty2().default)(this, "componentUrlFunc", void 0);
    (0, _defineProperty2().default)(this, "registerMenuItem", menuItems => {
      this.menuItemSlot.register(menuItems);
    });
    (0, _defineProperty2().default)(this, "registerSidebarWidget", componentTreeNodes => {
      componentTreeNodes.map(componentTreeNode => this.sidebarSlot.register(componentTreeNode));
      return this;
    });
    (0, _defineProperty2().default)(this, "registerSidebarLink", (...links) => {
      this.sidebarItemSlot.register(links);
    });
    (0, _defineProperty2().default)(this, "registerDrawers", (...drawer) => {
      this.sidebar.registerDrawer(...drawer);
      return this;
    });
    (0, _defineProperty2().default)(this, "registerDrawerComponentFilters", filters => {
      this.drawerComponentsFiltersSlot.register(filters);
    });
    (0, _defineProperty2().default)(this, "registerDrawerWidgets", widgets => {
      this.drawerWidgetSlot.register(widgets);
    });
    (0, _defineProperty2().default)(this, "setComponents", components => {
      this.componentUi.updateComponents(components);
    });
    (0, _defineProperty2().default)(this, "menuItems", [{
      category: 'general',
      title: 'Open command bar',
      keyChar: 'mod+k',
      handler: () => {
        var _this$commandBarUI;
        return (_this$commandBarUI = this.commandBarUI) === null || _this$commandBarUI === void 0 ? void 0 : _this$commandBarUI.run('command-bar.open');
      }
    }, {
      category: 'general',
      title: 'Toggle component list',
      keyChar: 'alt+s',
      handler: () => {
        var _this$commandBarUI2;
        return (_this$commandBarUI2 = this.commandBarUI) === null || _this$commandBarUI2 === void 0 ? void 0 : _this$commandBarUI2.run('sidebar.toggle');
      }
    }]);
  }
  /**
   * register a new badge into the scope overview.
   */
  registerBadge(...badges) {
    this.scopeBadgeSlot.register(badges);
    return this;
  }
  getScope(options) {
    return /*#__PURE__*/_react().default.createElement(_scope2().Scope, {
      TargetScopeOverview: options.TargetScopeOverview,
      scopeClassName: options.scopeClassName,
      TargetCorner: options.Corner,
      routeSlot: this.routeSlot,
      menuSlot: this.menuSlot,
      sidebar: /*#__PURE__*/_react().default.createElement(this.sidebar.render, {
        items: this.listSidebarLinks()
      }),
      scopeUi: this,
      userUseScopeQuery: options.useScope,
      badgeSlot: this.scopeBadgeSlot,
      overviewLineSlot: this.overviewSlot,
      context: this.getContext(),
      onSidebarTogglerChange: this.setSidebarToggle,
      cornerSlot: this.cornerSlot,
      paneClassName: options.paneClassName,
      PaneWrapper: options.PaneWrapper
    });
  }

  /**
   * register a new line beneath the scope overview section.
   */
  registerOverviewLine(...lines) {
    this.overviewSlot.register(lines);
    return this;
  }

  /**
   * register a route to the scope.
   */
  registerRoutes(routes) {
    this.routeSlot.register(routes);
    return this;
  }
  applyMenuRoutes() {
    this.registerMenuRoutes([{
      path: this.componentUi.routePath,
      element: this.componentUi.getMenu(_scope().ScopeAspect.id)
    }, {
      path: '/',
      element: this.getScopeMenu()
    }]);
  }
  getScopeMenu() {
    return /*#__PURE__*/_react().default.createElement(_menu().ScopeMenu, {
      widgetSlot: this.menuWidgetSlot,
      menuItemSlot: this.menuItemSlot
    });
  }
  registerExplicitRoutes() {
    this.applyMenuRoutes();
    this.registerRoutes([{
      path: this.componentUi.routePath,
      element: this.componentUi.getComponentUI(_scope().ScopeAspect.id)
    }]);
  }
  registerMenuWidget(...menuItems) {
    this.menuWidgetSlot.register(menuItems);
  }
  registerCorner(corner) {
    this.cornerSlot.register(corner);
  }
  registerComponentUrl(func) {
    this.componentUrlFunc = func;
  }

  /**
   * register a scope overview.
   */
  replaceOverview() {}

  /**
   * register description.
   */
  replaceDescription() {}

  /**
   * register metadata section.
   */
  replaceMetadataSection() {}

  /**
   * register a metadata item.
   */
  registerMetadataItem() {}
  replaceComponentGrid() {}

  /**
   * register metadata.
   */
  registerMetadata() {}

  /**
   * add a new context to the scope.
   */
  addContext(...context) {
    this.contextSlot.register(context);
    return this;
  }
  getContext() {
    const contexts = this.contextSlot.values();
    // eslint-disable-next-line react/prop-types
    const ComponentUrlFuncProvider = ({
      children
    }) => /*#__PURE__*/_react().default.createElement(_componentModules().ComponentUrlProvider, {
      value: this.componentUrlFunc
    }, children);
    return (0, _lodash().flatten)(contexts).concat(ComponentUrlFuncProvider);
  }
  registerDefaultDrawers(assumeScopeInUrl = false, overrideUseComponents) {
    this.sidebar.registerDrawer((0, _scopeUi().scopeDrawer)({
      treeWidgets: this.sidebarSlot,
      filtersSlot: this.drawerComponentsFiltersSlot,
      drawerWidgetSlot: this.drawerWidgetSlot,
      assumeScopeInUrl,
      overrideUseComponents
    }));
  }
  uiRoot() {
    this.registerDefaultDrawers();
    const [setKeyBindHandler] = this.commandBarUI.addCommand({
      id: 'sidebar.toggle',
      // TODO - extract to a component!
      action: () => {},
      displayName: 'Toggle component list',
      keybinding: 'alt+s'
    });
    this.setSidebarToggle = setKeyBindHandler;
    return {
      routes: [{
        path: '/*',
        element: /*#__PURE__*/_react().default.createElement(_scope2().Scope, {
          routeSlot: this.routeSlot,
          menuSlot: this.menuSlot,
          sidebar: /*#__PURE__*/_react().default.createElement(this.sidebar.render, {
            items: this.listSidebarLinks()
          }),
          scopeUi: this,
          badgeSlot: this.scopeBadgeSlot,
          overviewLineSlot: this.overviewSlot,
          context: this.getContext(),
          onSidebarTogglerChange: this.setSidebarToggle,
          cornerSlot: this.cornerSlot
        })
      }]
    };
  }
  listSidebarLinks() {
    const links = (0, _lodash().flatten)(this.sidebarItemSlot.values());
    const sorted = links.sort((a, b) => {
      const aWeight = (a === null || a === void 0 ? void 0 : a.weight) || 0;
      const bWeight = (b === null || b === void 0 ? void 0 : b.weight) || 0;
      return aWeight - bWeight;
    });
    return (0, _lodash().compact)(sorted.map(link => {
      return link.component;
    }));
  }

  /** registers available components */

  static async provider([ui, componentUi, sidebar, commandBarUI], config, [routeSlot, menuSlot, sidebarSlot, scopeBadgeSlot, menuWidgetSlot, menuItemSlot, sidebarItemSlot, cornerSlot, overviewSlot, contextSlot, drawerWidgetSlot, componentFiltersSlot]) {
    const scopeUi = new ScopeUI(routeSlot, componentUi, menuSlot, sidebar, sidebarSlot, commandBarUI, scopeBadgeSlot, menuWidgetSlot, sidebarItemSlot, menuItemSlot, cornerSlot, overviewSlot, contextSlot, drawerWidgetSlot, componentFiltersSlot);
    scopeUi.registerDrawerComponentFilters([_componentUiComponentFilters().DeprecateFilter, _componentUiComponentFilters2().EnvsFilter, (0, _componentUiComponentFilters3().ShowMainFilter)(false)]);
    scopeUi.registerDrawerWidgets([/*#__PURE__*/_react().default.createElement(_componentUi().FilterWidget, {
      key: 'workspace-filter-widget'
    }), /*#__PURE__*/_react().default.createElement(_componentUi().TreeToggleWidget, {
      key: 'workspace-tree-toggle-widget'
    })]);
    if (ui) ui.registerRoot(scopeUi.uiRoot.bind(scopeUi));
    scopeUi.registerMenuItem(scopeUi.menuItems);
    scopeUi.registerMenuWidget(() => /*#__PURE__*/_react().default.createElement(_menu().ScopeUseBox, null));
    if (config.showGallery) scopeUi.registerSidebarLink({
      component: function Gallery() {
        return /*#__PURE__*/_react().default.createElement(_designUiSurfacesMenu().MenuLinkItem, {
          exact: true,
          href: "/",
          icon: "comps"
        }, "Overview");
      }
    });
    if (ui) scopeUi.registerExplicitRoutes();
    return scopeUi;
  }
}
exports.ScopeUI = ScopeUI;
(0, _defineProperty2().default)(ScopeUI, "dependencies", [_ui().UIAspect, _component().ComponentAspect, _sidebar().SidebarAspect, _commandBar().default]);
(0, _defineProperty2().default)(ScopeUI, "runtime", _ui().UIRuntime);
(0, _defineProperty2().default)(ScopeUI, "slots", [_harmony().Slot.withType(), _harmony().Slot.withType(), _harmony().Slot.withType(), _harmony().Slot.withType(), _harmony().Slot.withType(), _harmony().Slot.withType(), _harmony().Slot.withType(), _harmony().Slot.withType(), _harmony().Slot.withType(), _harmony().Slot.withType(), _harmony().Slot.withType(), _harmony().Slot.withType(), _harmony().Slot.withType()]);
(0, _defineProperty2().default)(ScopeUI, "defaultConfig", {
  showGallery: true
});
var _default = ScopeUI;
exports.default = _default;
_scope().ScopeAspect.addRuntime(ScopeUI);

//# sourceMappingURL=scope.ui.runtime.js.map