import type { ComponentUI, ComponentModel } from '@teambit/component';
import { SlotRegistry } from '@teambit/harmony';
import { RouteSlot } from '@teambit/ui-foundation.ui.react-router.slot-router';
import { SidebarUI, SidebarItem, SidebarItemSlot } from '@teambit/sidebar';
import { ComponentTreeNode } from '@teambit/component-tree';
import { UIRootUI as UIRoot, UiUI } from '@teambit/ui';
import React, { ComponentType, ReactNode } from 'react';
import { MenuItemSlot, MenuItem } from '@teambit/ui-foundation.ui.main-dropdown';
import { RouteProps } from 'react-router-dom';
import { MenuWidget, MenuWidgetSlot } from '@teambit/ui-foundation.ui.menu';
import { CommandBarUI } from '@teambit/command-bar';
import { ScopeModel } from '@teambit/scope.models.scope-model';
import { DrawerType } from '@teambit/ui-foundation.ui.tree.drawer';
import { DrawerWidgetSlot, ComponentFiltersSlot } from '@teambit/component.ui.component-drawer';
import { ComponentFilters } from '@teambit/component.ui.component-filters.component-filter-context';
import { ComponentUrlResolver } from '@teambit/component.modules.component-url';
import { GetScopeOptions } from './get-scope-options';
export declare type ScopeBadge = ComponentType;
export declare type ScopeBadgeSlot = SlotRegistry<ScopeBadge[]>;
export declare type ContextSlot = SlotRegistry<ScopeContextType[]>;
export declare type ScopeContextType = ComponentType<{
    scope: ScopeModel;
    children: ReactNode;
}>;
export declare type SidebarSlot = SlotRegistry<ComponentTreeNode>;
export declare type ScopeOverview = ComponentType;
export declare type ScopeOverviewSlot = SlotRegistry<ScopeOverview>;
export declare type Corner = ComponentType;
export declare type CornerSlot = SlotRegistry<Corner>;
export declare type OverviewLine = ComponentType;
export declare type OverviewLineSlot = SlotRegistry<OverviewLine[]>;
export declare type ScopeUIConfig = {
    showGallery: boolean;
};
export declare class ScopeUI {
    /**
     * route slot.
     */
    private routeSlot;
    /**
     * component ui extension.
     */
    private componentUi;
    /**
     * menu slot
     */
    private menuSlot;
    private sidebar;
    private sidebarSlot;
    private commandBarUI;
    private scopeBadgeSlot;
    private menuWidgetSlot;
    /**
     * sidebar link slot
     */
    private sidebarItemSlot;
    /**
     * main dropdown item slot
     */
    private menuItemSlot;
    /**
     * corner slot
     */
    private cornerSlot;
    /**
     * overview line slot to add new lines beneath the overview section
     */
    private overviewSlot;
    /**
     * add a new context to ui
     */
    private contextSlot;
    private drawerWidgetSlot;
    private drawerComponentsFiltersSlot;
    constructor(
    /**
     * route slot.
     */
    routeSlot: RouteSlot, 
    /**
     * component ui extension.
     */
    componentUi: ComponentUI, 
    /**
     * menu slot
     */
    menuSlot: RouteSlot, sidebar: SidebarUI, sidebarSlot: SidebarSlot, commandBarUI: CommandBarUI, scopeBadgeSlot: ScopeBadgeSlot, menuWidgetSlot: MenuWidgetSlot, 
    /**
     * sidebar link slot
     */
    sidebarItemSlot: SidebarItemSlot, 
    /**
     * main dropdown item slot
     */
    menuItemSlot: MenuItemSlot, 
    /**
     * corner slot
     */
    cornerSlot: CornerSlot, 
    /**
     * overview line slot to add new lines beneath the overview section
     */
    overviewSlot: OverviewLineSlot, 
    /**
     * add a new context to ui
     */
    contextSlot: ContextSlot, drawerWidgetSlot: DrawerWidgetSlot, drawerComponentsFiltersSlot: ComponentFiltersSlot);
    private setSidebarToggle;
    /**
     * register a new badge into the scope overview.
     */
    registerBadge(...badges: ScopeBadge[]): this;
    getScope(options: GetScopeOptions): JSX.Element;
    /**
     * register a new line beneath the scope overview section.
     */
    registerOverviewLine(...lines: OverviewLine[]): this;
    /**
     * register a route to the scope.
     */
    registerRoutes(routes: RouteProps[]): this;
    registerMenuRoutes: (routes: RouteProps[]) => this;
    private applyMenuRoutes;
    getScopeMenu(): JSX.Element;
    private registerExplicitRoutes;
    registerMenuWidget(...menuItems: MenuWidget[]): void;
    registerCorner(corner: Corner): void;
    private componentUrlFunc;
    registerComponentUrl(func: ComponentUrlResolver): void;
    /**
     * register a scope overview.
     */
    replaceOverview(): void;
    /**
     * register description.
     */
    replaceDescription(): void;
    /**
     * register metadata section.
     */
    replaceMetadataSection(): void;
    /**
     * register a metadata item.
     */
    registerMetadataItem(): void;
    replaceComponentGrid(): void;
    /**
     * register metadata.
     */
    registerMetadata(): void;
    /**
     * add a new context to the scope.
     */
    addContext(...context: ScopeContextType[]): this;
    private getContext;
    registerMenuItem: (menuItems: MenuItem[]) => void;
    /**
     * register a sidebar Widget for the scope
     */
    registerSidebarWidget: (componentTreeNodes: ComponentTreeNode[]) => this;
    /**
     * register a sidebar link to the section above the drawers
     */
    registerSidebarLink: (...links: SidebarItem[]) => void;
    registerDrawers: (...drawer: DrawerType[]) => this;
    /**
     * register component filters
     */
    registerDrawerComponentFilters: (filters: ComponentFilters) => void;
    registerDrawerWidgets: (widgets: ReactNode[]) => void;
    registerDefaultDrawers(assumeScopeInUrl?: boolean, overrideUseComponents?: () => {
        components: ComponentModel[];
    }): void;
    uiRoot(): UIRoot;
    listSidebarLinks(): (React.ComponentClass<{}, any> | React.FunctionComponent<{}>)[];
    /** registers available components */
    setComponents: (components: ComponentModel[]) => void;
    private menuItems;
    static dependencies: import("@teambit/harmony").Aspect[];
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static slots: (((registerFn: () => string) => SlotRegistry<RouteProps>) | ((registerFn: () => string) => SlotRegistry<ComponentTreeNode>) | ((registerFn: () => string) => SlotRegistry<DrawerWidgetSlot>) | ((registerFn: () => string) => SlotRegistry<ScopeBadge>) | ((registerFn: () => string) => SlotRegistry<MenuWidget[]>) | ((registerFn: () => string) => SlotRegistry<CornerSlot>))[];
    static defaultConfig: {
        showGallery: boolean;
    };
    static provider([ui, componentUi, sidebar, commandBarUI]: [UiUI, ComponentUI, SidebarUI, CommandBarUI], config: ScopeUIConfig, [routeSlot, menuSlot, sidebarSlot, scopeBadgeSlot, menuWidgetSlot, menuItemSlot, sidebarItemSlot, cornerSlot, overviewSlot, contextSlot, drawerWidgetSlot, componentFiltersSlot,]: [
        RouteSlot,
        RouteSlot,
        SidebarSlot,
        ScopeBadgeSlot,
        MenuWidgetSlot,
        MenuItemSlot,
        SidebarItemSlot,
        CornerSlot,
        OverviewLineSlot,
        ContextSlot,
        DrawerWidgetSlot,
        ComponentFiltersSlot
    ]): Promise<ScopeUI>;
}
export default ScopeUI;
