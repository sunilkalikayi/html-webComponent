import { Component } from './component';
import { ComponentFactory } from './component-factory';
import { ComponentMain } from './component.main.runtime';
export declare function componentSchema(componentExtension: ComponentMain): {
    typeDefs: import("graphql").DocumentNode;
    resolvers: {
        JSONObject: import("graphql").GraphQLScalarType;
        Component: {
            id: (component: Component) => import("@teambit/component-id").ComponentIdObj;
            displayName: (component: Component) => string;
            fs: (component: Component) => string[];
            getFile: (component: Component, { path }: {
                path: string;
            }) => string | undefined;
            mainFile: (component: Component) => any;
            headTag: (component: Component) => import(".").TagProps | undefined;
            latest: (component: Component) => string | undefined;
            tags: (component: any) => any;
            aspects: (component: Component, { include }: {
                include?: string[] | undefined;
            }) => import("./component-interface").RawComponentMetadata[];
            logs: (component: Component, filter?: {
                type?: string | undefined;
                offset?: number | undefined;
                limit?: number | undefined;
                head?: string | undefined;
                sort?: string | undefined;
                takeHeadFromComponent: boolean;
            } | undefined) => Promise<{
                id: string;
                message: string;
                username?: string | undefined;
                email?: string | undefined;
                date?: string | undefined;
                hash: string;
                tag?: string | undefined;
                parents: string[];
                onLane?: boolean | undefined;
            }[]>;
        };
        ComponentHost: {
            get: (host: ComponentFactory, { id }: {
                id: string;
            }) => Promise<Component | null | undefined>;
            snaps: (host: ComponentFactory, { id }: {
                id: string;
            }) => Promise<import("@teambit/legacy/scopes/component/legacy-component-log").LegacyComponentLog[]>;
            list: (host: ComponentFactory, filter?: {
                offset: number;
                limit: number;
            } | undefined) => Promise<Component[]>;
            listInvalid: (host: ComponentFactory) => Promise<{
                id: import("@teambit/component-id").ComponentID;
                errorName: string;
                errorMessage: string;
            }[]>;
            id: (host: ComponentFactory) => Promise<string>;
            name: (host: ComponentFactory) => Promise<string>;
        };
        Query: {
            getHost: (componentExt: ComponentMain, { id }: {
                id: string;
            }) => ComponentFactory;
        };
    };
};
