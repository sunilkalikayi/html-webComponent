{"version":3,"names":["AspectList","constructor","entries","addEntry","aspectId","data","extensionDataEntry","ExtensionDataEntry","undefined","_legacy","entry","AspectEntry","push","withoutEntries","aspectIds","filter","includes","legacy","stringId","ids","list","map","id","toString","get","find","toStringWithoutVersion","ignoreVersion","aspectEntry","isEqual","predicate","pmap","entriesP","Promise","all","toConfigObject","res","forEach","config","removeInternalConfigFields","serialize","serializedEntries","length","toLegacy","legacyEntries","ExtensionDataList","fromArray","stringIds","clone","fromLegacyExtensions","legacyDataList","scope","newEntries","getAspectId","extensionId","name","ComponentID","fromString","fromLegacy","Error"],"sources":["aspect-list.ts"],"sourcesContent":["import {\n  ExtensionDataList,\n  ExtensionDataEntry,\n  removeInternalConfigFields,\n} from '@teambit/legacy/dist/consumer/config/extension-data';\nimport { ComponentID } from '@teambit/component-id';\nimport { AspectEntry, SerializableMap } from './aspect-entry';\n\n/**\n * list of aspects, each may have data and artifacts saved per component.\n */\nexport class AspectList {\n  constructor(readonly entries: AspectEntry[]) {}\n\n  addEntry(aspectId: ComponentID, data: SerializableMap = {}) {\n    const extensionDataEntry = new ExtensionDataEntry(undefined, aspectId._legacy, undefined, {}, data);\n    const entry = new AspectEntry(aspectId, extensionDataEntry);\n    this.entries.push(entry);\n    return entry;\n  }\n\n  /**\n   * transform an aspect list into a new one without the given aspect ids\n   */\n  withoutEntries(aspectIds: string[]): AspectList {\n    const entries = this.entries.filter((entry) => !aspectIds.includes(entry.legacy.stringId));\n    return new AspectList(entries);\n  }\n\n  /**\n   * get all ids as strings from the aspect list.\n   */\n  get ids(): string[] {\n    const list = this.entries.map((entry) => entry.id.toString());\n    return list;\n  }\n\n  /**\n   * get an aspect from the list using a serialized ID.\n   */\n  get(id: string): AspectEntry | undefined {\n    return this.entries.find((entry) => {\n      return entry.legacy.stringId === id || entry.id.toStringWithoutVersion() === id;\n    });\n  }\n\n  /**\n   * find aspect by component ID.\n   */\n  find(id: ComponentID, ignoreVersion = false): AspectEntry | undefined {\n    return this.entries.find((aspectEntry) => {\n      return id.isEqual(aspectEntry.id, { ignoreVersion });\n    });\n  }\n\n  /**\n   * transform an aspect list into a new one.\n   */\n  map(predicate: (entry: AspectEntry) => AspectEntry) {\n    const entries = this.entries.map(predicate);\n    return new AspectList(entries);\n  }\n\n  /**\n   * transform an aspect list into a new one.\n   */\n  async pmap(predicate: (entry: AspectEntry) => Promise<AspectEntry>) {\n    const entriesP = this.entries.map(predicate);\n    const entries = await Promise.all(entriesP);\n    return new AspectList(entries);\n  }\n\n  toConfigObject() {\n    const res = {};\n    this.entries.forEach((entry) => {\n      if (entry.config) {\n        res[entry.id.toString()] = removeInternalConfigFields(entry.config);\n      }\n    });\n    return res;\n  }\n\n  serialize() {\n    const serializedEntries = this.entries.map((entry) => entry.serialize());\n    return serializedEntries;\n  }\n\n  filter(ids?: string[]): AspectList {\n    if (!ids?.length) return new AspectList(this.entries);\n    const entries = this.entries.filter((aspectEntry) => {\n      return ids?.includes(aspectEntry.id.toStringWithoutVersion());\n    });\n    return new AspectList(entries);\n  }\n\n  toLegacy(): ExtensionDataList {\n    const legacyEntries = this.entries.map((entry) => entry.legacy);\n    return ExtensionDataList.fromArray(legacyEntries);\n  }\n\n  stringIds(): string[] {\n    const ids = this.entries.map((entry) => entry.id.toString());\n    return ids;\n  }\n\n  clone(): AspectList {\n    return new AspectList(this.entries.map((entry) => entry.clone()));\n  }\n\n  static fromLegacyExtensions(legacyDataList: ExtensionDataList, scope?: string): AspectList {\n    const newEntries = legacyDataList.map((entry) => {\n      return new AspectEntry(getAspectId(entry, scope), entry);\n    });\n\n    return new AspectList(newEntries);\n  }\n}\n\nfunction getAspectId(entry: ExtensionDataEntry, scope?: string) {\n  if (!entry.extensionId && entry.name) return ComponentID.fromString(entry.name);\n  if (entry.extensionId) return ComponentID.fromLegacy(entry.extensionId, scope);\n  throw new Error('aspect cannot be loaded without setting an ID');\n}\n"],"mappings":"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"}