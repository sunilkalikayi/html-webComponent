"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ComponentUI = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _react() {
  const data = _interopRequireDefault(require("react"));
  _react = function () {
    return data;
  };
  return data;
}
function _lodash() {
  const data = _interopRequireDefault(require("lodash.flatten"));
  _lodash = function () {
    return data;
  };
  return data;
}
function _copyToClipboard() {
  const data = _interopRequireDefault(require("copy-to-clipboard"));
  _copyToClipboard = function () {
    return data;
  };
  return data;
}
function _commandBar() {
  const data = _interopRequireDefault(require("@teambit/command-bar"));
  _commandBar = function () {
    return data;
  };
  return data;
}
function _componentUi() {
  const data = require("@teambit/component.ui.deprecation-icon");
  _componentUi = function () {
    return data;
  };
  return data;
}
function _harmony() {
  const data = require("@teambit/harmony");
  _harmony = function () {
    return data;
  };
  return data;
}
function _preview() {
  const data = _interopRequireWildcard(require("@teambit/preview"));
  _preview = function () {
    return data;
  };
  return data;
}
function _pubsub() {
  const data = _interopRequireDefault(require("@teambit/pubsub"));
  _pubsub = function () {
    return data;
  };
  return data;
}
function _reactRouter() {
  const data = _interopRequireDefault(require("@teambit/react-router"));
  _reactRouter = function () {
    return data;
  };
  return data;
}
function _ui() {
  const data = require("@teambit/ui");
  _ui = function () {
    return data;
  };
  return data;
}
function _uiFoundationUi() {
  const data = require("@teambit/ui-foundation.ui.is-browser");
  _uiFoundationUi = function () {
    return data;
  };
  return data;
}
function _uiFoundationUiUseBox() {
  const data = require("@teambit/ui-foundation.ui.use-box.menu");
  _uiFoundationUiUseBox = function () {
    return data;
  };
  return data;
}
function _aspect() {
  const data = require("./aspect.section");
  _aspect = function () {
    return data;
  };
  return data;
}
function _component() {
  const data = require("./component.aspect");
  _component = function () {
    return data;
  };
  return data;
}
function _component2() {
  const data = require("./ui/component");
  _component2 = function () {
    return data;
  };
  return data;
}
function _componentSearcher() {
  const data = require("./ui/component-searcher");
  _componentSearcher = function () {
    return data;
  };
  return data;
}
function _menu() {
  const data = require("./ui/menu");
  _menu = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
class ComponentUI {
  constructor(
  /**
   * Pubsub aspects
   */
  pubsub, routeSlot, navSlot, consumeMethodSlot,
  /**
   * slot for registering a new widget to the menu.
   */
  widgetSlot, menuItemSlot, pageItemSlot, componentSearchResultSlot, commandBarUI, reactRouterUi) {
    this.pubsub = pubsub;
    this.routeSlot = routeSlot;
    this.navSlot = navSlot;
    this.consumeMethodSlot = consumeMethodSlot;
    this.widgetSlot = widgetSlot;
    this.menuItemSlot = menuItemSlot;
    this.pageItemSlot = pageItemSlot;
    this.componentSearchResultSlot = componentSearchResultSlot;
    this.commandBarUI = commandBarUI;
    (0, _defineProperty2().default)(this, "routePath", `/*`);
    (0, _defineProperty2().default)(this, "componentSearcher", void 0);
    (0, _defineProperty2().default)(this, "activeComponent", void 0);
    (0, _defineProperty2().default)(this, "copyNpmId", () => {
      var _this$activeComponent;
      const packageName = (_this$activeComponent = this.activeComponent) === null || _this$activeComponent === void 0 ? void 0 : _this$activeComponent.packageName;
      if (packageName) {
        var _this$activeComponent2;
        const version = (_this$activeComponent2 = this.activeComponent) === null || _this$activeComponent2 === void 0 ? void 0 : _this$activeComponent2.id.version;
        const versionString = version ? `@${version}` : '';
        (0, _copyToClipboard().default)(`${packageName}${versionString}`);
      }
    });
    (0, _defineProperty2().default)(this, "keyBindings", [{
      id: 'component.copyBitId',
      // TODO - extract to a component!
      action: () => {
        var _this$activeComponent3;
        (0, _copyToClipboard().default)(((_this$activeComponent3 = this.activeComponent) === null || _this$activeComponent3 === void 0 ? void 0 : _this$activeComponent3.id.toString()) || '');
      },
      displayName: 'Copy component ID',
      keybinding: '.'
    }, {
      id: 'component.copyNpmId',
      // TODO - extract to a component!
      action: this.copyNpmId,
      displayName: 'Copy component package name',
      keybinding: ','
    }]);
    (0, _defineProperty2().default)(this, "menuItems", [{
      category: 'general',
      title: 'Open command bar',
      keyChar: 'mod+k',
      handler: () => {
        var _this$commandBarUI;
        return (_this$commandBarUI = this.commandBarUI) === null || _this$commandBarUI === void 0 ? void 0 : _this$commandBarUI.run('command-bar.open');
      }
    }, {
      category: 'general',
      title: 'Toggle component list',
      keyChar: 'alt+s',
      handler: () => {
        var _this$commandBarUI2;
        return (_this$commandBarUI2 = this.commandBarUI) === null || _this$commandBarUI2 === void 0 ? void 0 : _this$commandBarUI2.run('sidebar.toggle');
      }
    }, {
      category: 'workflow',
      title: 'Copy component ID',
      keyChar: '.',
      handler: () => {
        var _this$commandBarUI3;
        return (_this$commandBarUI3 = this.commandBarUI) === null || _this$commandBarUI3 === void 0 ? void 0 : _this$commandBarUI3.run('component.copyBitId');
      }
    }, {
      category: 'workflow',
      title: 'Copy component package name',
      keyChar: ',',
      handler: () => {
        var _this$commandBarUI4;
        return (_this$commandBarUI4 = this.commandBarUI) === null || _this$commandBarUI4 === void 0 ? void 0 : _this$commandBarUI4.run('component.copyNpmId');
      }
    }]);
    (0, _defineProperty2().default)(this, "bitMethod", (comp, options) => {
      const version = comp.version === comp.latest ? '' : `@${comp.version}`;
      return {
        Title: /*#__PURE__*/_react().default.createElement("img", {
          style: {
            width: '20px'
          },
          src: "https://static.bit.dev/brands/bit-logo-text.svg"
        }),
        Component: /*#__PURE__*/_react().default.createElement(_uiFoundationUiUseBox().Import, {
          componentId: `${comp.id.toString({
            ignoreVersion: true
          })}${version}`,
          packageName: `${comp.packageName}${version}`,
          componentName: comp.id.name,
          showInstallMethod: !(options !== null && options !== void 0 && options.currentLane)
        }),
        order: 0
      };
    });
    (0, _defineProperty2().default)(this, "handleComponentChange", activeComponent => {
      this.activeComponent = activeComponent;
    });
    (0, _defineProperty2().default)(this, "registerMenuItem", menuItems => {
      this.menuItemSlot.register(menuItems);
    });
    (0, _defineProperty2().default)(this, "registerPageItem", (...items) => {
      this.pageItemSlot.register(items);
    });
    (0, _defineProperty2().default)(this, "registerSearchResultWidget", (...items) => {
      this.componentSearchResultSlot.register(items);
      const totalPlugins = (0, _lodash().default)(this.componentSearchResultSlot.values());
      this.componentSearcher.updatePlugins(totalPlugins);
    });
    (0, _defineProperty2().default)(this, "updateComponents", components => {
      this.componentSearcher.update(components || []);
    });
    this.componentSearcher = new (_componentSearcher().ComponentSearcher)({
      navigate: reactRouterUi.navigateTo
    });
    if (_uiFoundationUi().isBrowser) this.registerPubSub();
  }

  /**
   * the current visible component
   */

  registerPubSub() {
    this.pubsub.sub(_preview().default.id, be => {
      if (be.type === _preview().ClickInsideAnIframeEvent.TYPE) {
        const event = new MouseEvent('mousedown', {
          view: window,
          bubbles: true,
          cancelable: true
        });
        const body = document.body;
        body === null || body === void 0 ? void 0 : body.dispatchEvent(event);
      }
    });
  }
  getComponentUI(host, options = {}) {
    return /*#__PURE__*/_react().default.createElement(_component2().Component, {
      routeSlot: this.routeSlot,
      containerSlot: this.pageItemSlot,
      onComponentChange: this.handleComponentChange,
      host: host,
      path: options.path,
      useComponent: options.useComponent,
      componentIdStr: options.componentId,
      useComponentFilters: options.useComponentFilters
    });
  }
  getMenu(host, options = {}) {
    return /*#__PURE__*/_react().default.createElement(_menu().ComponentMenu, {
      navigationSlot: this.navSlot,
      consumeMethodSlot: this.consumeMethodSlot,
      widgetSlot: this.widgetSlot,
      host: host,
      menuItemSlot: this.menuItemSlot,
      useComponent: options.useComponent,
      path: options.path,
      componentIdStr: options.componentId,
      useComponentFilters: options.useComponentFilters
    });
  }
  registerRoute(routes) {
    this.routeSlot.register(routes);
    return this;
  }
  registerNavigation(nav, order) {
    this.navSlot.register({
      props: nav,
      order
    });
  }
  registerConsumeMethod(...consumeMethods) {
    this.consumeMethodSlot.register(consumeMethods);
  }
  registerWidget(widget, order) {
    this.widgetSlot.register({
      props: widget,
      order
    });
  }
  static async provider([pubsub, commandBarUI, reactRouterUI], config, [routeSlot, navSlot, consumeMethodSlot, widgetSlot, menuItemSlot, pageSlot, componentSearchResultSlot]) {
    // TODO: refactor ComponentHost to a separate extension (including sidebar, host, graphql, etc.)
    // TODO: add contextual hook for ComponentHost @uri/@oded
    const componentUI = new ComponentUI(pubsub, routeSlot, navSlot, consumeMethodSlot, widgetSlot, menuItemSlot, pageSlot, componentSearchResultSlot, commandBarUI, reactRouterUI);
    const aspectSection = new (_aspect().AspectSection)();
    // @ts-ignore
    componentUI.registerSearchResultWidget({
      key: 'deprecation',
      end: _componentUi().DeprecationIcon
    });
    if (componentUI.commandBarUI && config.commandBar) {
      componentUI.commandBarUI.addCommand(...componentUI.keyBindings);
      commandBarUI.addSearcher(componentUI.componentSearcher);
    }
    componentUI.registerMenuItem(componentUI.menuItems);
    componentUI.registerRoute(aspectSection.route);
    componentUI.registerWidget(aspectSection.navigationLink, aspectSection.order);
    componentUI.registerConsumeMethod(componentUI.bitMethod);
    return componentUI;
  }
}
exports.ComponentUI = ComponentUI;
(0, _defineProperty2().default)(ComponentUI, "dependencies", [_pubsub().default, _commandBar().default, _reactRouter().default]);
(0, _defineProperty2().default)(ComponentUI, "runtime", _ui().UIRuntime);
(0, _defineProperty2().default)(ComponentUI, "slots", [_harmony().Slot.withType(), _harmony().Slot.withType(), _harmony().Slot.withType(), _harmony().Slot.withType(), _harmony().Slot.withType(), _harmony().Slot.withType(), _harmony().Slot.withType()]);
(0, _defineProperty2().default)(ComponentUI, "defaultConfig", {
  commandBar: true
});
var _default = ComponentUI;
exports.default = _default;
_component().ComponentAspect.addRuntime(ComponentUI);

//# sourceMappingURL=component.ui.runtime.js.map