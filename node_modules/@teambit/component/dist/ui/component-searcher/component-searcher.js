"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ComponentSearcher = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _react() {
  const data = _interopRequireDefault(require("react"));
  _react = function () {
    return data;
  };
  return data;
}
function _explorerUi() {
  const data = require("@teambit/explorer.ui.command-bar");
  _explorerUi = function () {
    return data;
  };
  return data;
}
function _componentResult() {
  const data = require("./component-result");
  _componentResult = function () {
    return data;
  };
  return data;
}
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
const searchKeys = ['displayName', 'name'];
class ComponentSearcher extends _explorerUi().FuzzySearcher {
  constructor(options) {
    super({
      searchKeys
    });
    this.options = options;
    (0, _defineProperty2().default)(this, "toSearchResult", ({
      item
    }) => {
      const {
        navigate,
        resultPlugins
      } = this.options;
      const {
        component
      } = item;
      return {
        id: component.id.fullName,
        action: () => navigate(`/${component.id.fullName}`),
        children: /*#__PURE__*/_react().default.createElement(_componentResult().ComponentResult, {
          component: component,
          plugins: resultPlugins
        })
      };
    });
  }
  updatePlugins(plugins) {
    this.options = _objectSpread(_objectSpread({}, this.options), {}, {
      resultPlugins: plugins
    });
  }
  test(term) {
    return !term.startsWith('>') && term.length > 0;
  }
  toSearchableItem(item) {
    return {
      name: item.id.name,
      displayName: item.id.fullName,
      component: item
    };
  }
}
exports.ComponentSearcher = ComponentSearcher;

//# sourceMappingURL=component-searcher.js.map