import { ComponentDescriptor } from '@teambit/component-descriptor';
import { ComponentModel } from './component-model';
import { ComponentError } from './component-error';
export declare const componentIdFields: import("@apollo/client").DocumentNode;
export declare const componentOverviewFields: import("@apollo/client").DocumentNode;
export declare const componentFields: import("@apollo/client").DocumentNode;
export declare type Filters = {
    log?: {
        logType?: string;
        logOffset?: number;
        logLimit?: number;
        logHead?: string;
        logSort?: string;
    };
};
/** provides data to component ui page, making sure both variables and return value are safely typed and memoized */
export declare function useComponentQuery(componentId: string, host: string, filters?: Filters): {
    client: import("@apollo/client").ApolloClient<any>;
    observable: import("@apollo/client").ObservableQuery<any, {
        logType?: string | undefined;
        logOffset?: number | undefined;
        logLimit?: number | undefined;
        logHead?: string | undefined;
        logSort?: string | undefined;
        id: string;
        extensionId: string;
    }>;
    previousData?: any;
    networkStatus: import("@apollo/client").NetworkStatus;
    called: boolean;
    startPolling: (pollInterval: number) => void;
    stopPolling: () => void;
    updateQuery: <TVars = {
        logType?: string | undefined;
        logOffset?: number | undefined;
        logLimit?: number | undefined;
        logHead?: string | undefined;
        logSort?: string | undefined;
        id: string;
        extensionId: string;
    }>(mapFn: (previousQueryResult: any, options: Pick<import("@apollo/client").WatchQueryOptions<TVars, any>, "variables">) => any) => void;
    refetch: (variables?: Partial<{
        logType?: string | undefined;
        logOffset?: number | undefined;
        logLimit?: number | undefined;
        logHead?: string | undefined;
        logSort?: string | undefined;
        id: string;
        extensionId: string;
    }> | undefined) => Promise<import("@apollo/client").ApolloQueryResult<any>>;
    reobserve: (newOptions?: Partial<import("@apollo/client").WatchQueryOptions<{
        logType?: string | undefined;
        logOffset?: number | undefined;
        logLimit?: number | undefined;
        logHead?: string | undefined;
        logSort?: string | undefined;
        id: string;
        extensionId: string;
    }, any>> | undefined, newNetworkStatus?: import("@apollo/client").NetworkStatus | undefined) => Promise<import("@apollo/client").ApolloQueryResult<any>>;
    variables: {
        logType?: string | undefined;
        logOffset?: number | undefined;
        logLimit?: number | undefined;
        logHead?: string | undefined;
        logSort?: string | undefined;
        id: string;
        extensionId: string;
    } | undefined;
    fetchMore: <TFetchData = any, TFetchVars = {
        logType?: string | undefined;
        logOffset?: number | undefined;
        logLimit?: number | undefined;
        logHead?: string | undefined;
        logSort?: string | undefined;
        id: string;
        extensionId: string;
    }>(fetchMoreOptions: import("@apollo/client").FetchMoreQueryOptions<TFetchVars, TFetchData> & {
        updateQuery?: ((previousQueryResult: any, options: {
            fetchMoreResult: TFetchData;
            variables: TFetchVars;
        }) => any) | undefined;
    }) => Promise<import("@apollo/client").ApolloQueryResult<TFetchData>>;
    componentDescriptor: ComponentDescriptor | undefined;
    component: ComponentModel | undefined;
    error: ComponentError | undefined;
    loading: boolean;
};
