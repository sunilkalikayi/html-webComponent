"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.componentOverviewFields = exports.componentIdFields = exports.componentFields = void 0;
exports.useComponentQuery = useComponentQuery;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _objectWithoutProperties2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
  _objectWithoutProperties2 = function () {
    return data;
  };
  return data;
}
function _react() {
  const data = require("react");
  _react = function () {
    return data;
  };
  return data;
}
function _client() {
  const data = require("@apollo/client");
  _client = function () {
    return data;
  };
  return data;
}
function _uiFoundationUiHooks() {
  const data = require("@teambit/ui-foundation.ui.hooks.use-data-query");
  _uiFoundationUiHooks = function () {
    return data;
  };
  return data;
}
function _componentId() {
  const data = require("@teambit/component-id");
  _componentId = function () {
    return data;
  };
  return data;
}
function _componentDescriptor() {
  const data = require("@teambit/component-descriptor");
  _componentDescriptor = function () {
    return data;
  };
  return data;
}
function _componentModel() {
  const data = require("./component-model");
  _componentModel = function () {
    return data;
  };
  return data;
}
function _componentError() {
  const data = require("./component-error");
  _componentError = function () {
    return data;
  };
  return data;
}
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
const componentIdFields = (0, _client().gql)`
  fragment componentIdFields on ComponentID {
    name
    version
    scope
  }
`;
exports.componentIdFields = componentIdFields;
const componentOverviewFields = (0, _client().gql)`
  fragment componentOverviewFields on Component {
    id {
      ...componentIdFields
    }
    aspects(include: ["teambit.preview/preview", "teambit.envs/envs"]) {
      # 'id' property in gql refers to a *global* identifier and used for caching.
      # this makes aspect data cache under the same key, even when they are under different components.
      # renaming the property fixes that.
      id
      data
    }
    elementsUrl
    description
    deprecation {
      isDeprecate
      newId
    }
    labels
    displayName
    server {
      env
      url
    }
    buildStatus
    env {
      id
      icon
    }
    size {
      compressedTotal
    }
    preview {
      includesEnvTemplate
      legacyHeader
      isScaling
    }
    compositions {
      identifier
      displayName
    }
  }
  ${componentIdFields}
`;
exports.componentOverviewFields = componentOverviewFields;
const componentFields = (0, _client().gql)`
  fragment componentFields on Component {
    id {
      ...componentIdFields
    }
    ...componentOverviewFields
    packageName
    latest
    compositions {
      identifier
      displayName
    }
    tags {
      version
    }
    logs(type: $logType, offset: $logOffset, limit: $logLimit, head: $logHead, sort: $logSort) {
      id
      message
      username
      email
      date
      hash
      tag
    }
  }
  ${componentIdFields}
  ${componentOverviewFields}
`;
exports.componentFields = componentFields;
const GET_COMPONENT = (0, _client().gql)`
  query Component(
    $id: String!
    $extensionId: String!
    $logType: String
    $logOffset: Int
    $logLimit: Int
    $logHead: String
    $logSort: String
  ) {
    getHost(id: $extensionId) {
      id # used for GQL caching
      get(id: $id) {
        ...componentFields
      }
    }
  }
  ${componentFields}
`;
const SUB_SUBSCRIPTION_ADDED = (0, _client().gql)`
  subscription OnComponentAdded($logType: String, $logOffset: Int, $logLimit: Int, $logHead: String, $logSort: String) {
    componentAdded {
      component {
        ...componentFields
      }
    }
  }
  ${componentFields}
`;
const SUB_COMPONENT_CHANGED = (0, _client().gql)`
  subscription OnComponentChanged(
    $logType: String
    $logOffset: Int
    $logLimit: Int
    $logHead: String
    $logSort: String
  ) {
    componentChanged {
      component {
        ...componentFields
      }
    }
  }
  ${componentFields}
`;
const SUB_COMPONENT_REMOVED = (0, _client().gql)`
  subscription OnComponentRemoved {
    componentRemoved {
      componentIds {
        ...componentIdFields
      }
    }
  }
  ${componentIdFields}
`;
/** provides data to component ui page, making sure both variables and return value are safely typed and memoized */
function useComponentQuery(componentId, host, filters) {
  var _data$getHost;
  const idRef = (0, _react().useRef)(componentId);
  idRef.current = componentId;
  const _useDataQuery = (0, _uiFoundationUiHooks().useDataQuery)(GET_COMPONENT, {
      variables: _objectSpread({
        id: componentId,
        extensionId: host
      }, (filters === null || filters === void 0 ? void 0 : filters.log) || {})
    }),
    {
      data,
      error,
      loading,
      subscribeToMore
    } = _useDataQuery,
    rest = (0, _objectWithoutProperties2().default)(_useDataQuery, ["data", "error", "loading", "subscribeToMore"]);
  (0, _react().useEffect)(() => {
    // @TODO @Kutner fix subscription for scope
    if (host !== 'teambit.workspace/workspace') {
      return () => {};
    }
    const unsubAddition = subscribeToMore({
      document: SUB_SUBSCRIPTION_ADDED,
      updateQuery: (prev, {
        subscriptionData
      }) => {
        var _prev$getHost, _subscriptionData$dat, _subscriptionData$dat2;
        const prevComponent = prev === null || prev === void 0 ? void 0 : (_prev$getHost = prev.getHost) === null || _prev$getHost === void 0 ? void 0 : _prev$getHost.get;
        const addedComponent = subscriptionData === null || subscriptionData === void 0 ? void 0 : (_subscriptionData$dat = subscriptionData.data) === null || _subscriptionData$dat === void 0 ? void 0 : (_subscriptionData$dat2 = _subscriptionData$dat.componentAdded) === null || _subscriptionData$dat2 === void 0 ? void 0 : _subscriptionData$dat2.component;
        if (!addedComponent || prevComponent) return prev;
        if (idRef.current === addedComponent.id.name) {
          return _objectSpread(_objectSpread({}, prev), {}, {
            getHost: _objectSpread(_objectSpread({}, prev.getHost), {}, {
              get: addedComponent
            })
          });
        }
        return prev;
      }
    });
    const unsubChanges = subscribeToMore({
      document: SUB_COMPONENT_CHANGED,
      updateQuery: (prev, {
        subscriptionData
      }) => {
        var _prev$getHost2, _subscriptionData$dat3, _subscriptionData$dat4;
        if (!subscriptionData.data) return prev;
        const prevComponent = prev === null || prev === void 0 ? void 0 : (_prev$getHost2 = prev.getHost) === null || _prev$getHost2 === void 0 ? void 0 : _prev$getHost2.get;
        const updatedComponent = subscriptionData === null || subscriptionData === void 0 ? void 0 : (_subscriptionData$dat3 = subscriptionData.data) === null || _subscriptionData$dat3 === void 0 ? void 0 : (_subscriptionData$dat4 = _subscriptionData$dat3.componentChanged) === null || _subscriptionData$dat4 === void 0 ? void 0 : _subscriptionData$dat4.component;
        const isUpdated = updatedComponent && _componentId().ComponentID.isEqualObj(prevComponent === null || prevComponent === void 0 ? void 0 : prevComponent.id, updatedComponent === null || updatedComponent === void 0 ? void 0 : updatedComponent.id);
        if (isUpdated) {
          return _objectSpread(_objectSpread({}, prev), {}, {
            getHost: _objectSpread(_objectSpread({}, prev.getHost), {}, {
              get: updatedComponent
            })
          });
        }
        return prev;
      }
    });
    const unsubRemoval = subscribeToMore({
      document: SUB_COMPONENT_REMOVED,
      updateQuery: (prev, {
        subscriptionData
      }) => {
        var _prev$getHost3, _subscriptionData$dat5, _subscriptionData$dat6;
        if (!subscriptionData.data) return prev;
        const prevComponent = prev === null || prev === void 0 ? void 0 : (_prev$getHost3 = prev.getHost) === null || _prev$getHost3 === void 0 ? void 0 : _prev$getHost3.get;
        const removedIds = subscriptionData === null || subscriptionData === void 0 ? void 0 : (_subscriptionData$dat5 = subscriptionData.data) === null || _subscriptionData$dat5 === void 0 ? void 0 : (_subscriptionData$dat6 = _subscriptionData$dat5.componentRemoved) === null || _subscriptionData$dat6 === void 0 ? void 0 : _subscriptionData$dat6.componentIds;
        if (!prevComponent || !(removedIds !== null && removedIds !== void 0 && removedIds.length)) return prev;
        const isRemoved = removedIds.some(removedId => _componentId().ComponentID.isEqualObj(removedId, prevComponent.id));
        if (isRemoved) {
          return _objectSpread(_objectSpread({}, prev), {}, {
            getHost: _objectSpread(_objectSpread({}, prev.getHost), {}, {
              get: null
            })
          });
        }
        return prev;
      }
    });
    return () => {
      unsubChanges();
      unsubAddition();
      unsubRemoval();
    };
  }, []);
  const rawComponent = data === null || data === void 0 ? void 0 : (_data$getHost = data.getHost) === null || _data$getHost === void 0 ? void 0 : _data$getHost.get;
  return (0, _react().useMemo)(() => {
    const aspectList = {
      entries: rawComponent === null || rawComponent === void 0 ? void 0 : rawComponent.aspects.map(aspectObject => {
        return _objectSpread(_objectSpread({}, aspectObject), {}, {
          aspectId: aspectObject.id,
          aspectData: aspectObject.data
        });
      })
    };
    const id = rawComponent && _componentId().ComponentID.fromObject(rawComponent.id);
    return _objectSpread({
      componentDescriptor: id ? _componentDescriptor().ComponentDescriptor.fromObject({
        id: id.toString(),
        aspectList
      }) : undefined,
      component: rawComponent ? _componentModel().ComponentModel.from(_objectSpread(_objectSpread({}, rawComponent), {}, {
        host
      })) : undefined,
      // eslint-disable-next-line
      error: error ? new (_componentError().ComponentError)(500, error.message) : !rawComponent && !loading ? new (_componentError().ComponentError)(404) : undefined,
      loading
    }, rest);
  }, [rawComponent, host, error]);
}

//# sourceMappingURL=use-component-query.js.map