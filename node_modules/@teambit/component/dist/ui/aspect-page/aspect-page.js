"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AspectPage = AspectPage;
function _harmonyUi() {
  const data = require("@teambit/harmony.ui.aspect-box");
  _harmonyUi = function () {
    return data;
  };
  return data;
}
function _component() {
  const data = require("@teambit/component");
  _component = function () {
    return data;
  };
  return data;
}
function _react() {
  const data = _interopRequireWildcard(require("react"));
  _react = function () {
    return data;
  };
  return data;
}
function _uiFoundationUiHooks() {
  const data = require("@teambit/ui-foundation.ui.hooks.use-data-query");
  _uiFoundationUiHooks = function () {
    return data;
  };
  return data;
}
function _client() {
  const data = require("@apollo/client");
  _client = function () {
    return data;
  };
  return data;
}
function _designUi() {
  const data = require("@teambit/design.ui.empty-box");
  _designUi = function () {
    return data;
  };
  return data;
}
function _documenterUi() {
  const data = require("@teambit/documenter.ui.heading");
  _documenterUi = function () {
    return data;
  };
  return data;
}
function _documenterUi2() {
  const data = require("@teambit/documenter.ui.separator");
  _documenterUi2 = function () {
    return data;
  };
  return data;
}
function _aspectPageModule() {
  const data = _interopRequireDefault(require("./aspect-page.module.scss"));
  _aspectPageModule = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const GET_COMPONENT = (0, _client().gql)`
  query ($id: String!) {
    getHost {
      get(id: $id) {
        aspects {
          id
          config
          data
          icon
        }
      }
    }
  }
`;

// TODO: get the docs domain from the community aspect and pass it here as a prop
function AspectPage() {
  var _data$getHost, _data$getHost$get;
  const component = (0, _react().useContext)(_component().ComponentContext);
  const {
    data
  } = (0, _uiFoundationUiHooks().useDataQuery)(GET_COMPONENT, {
    variables: {
      id: component.id.toString()
    }
  });
  const aspectList = data === null || data === void 0 ? void 0 : (_data$getHost = data.getHost) === null || _data$getHost === void 0 ? void 0 : (_data$getHost$get = _data$getHost.get) === null || _data$getHost$get === void 0 ? void 0 : _data$getHost$get.aspects;
  if (aspectList && aspectList.length === 0) {
    return /*#__PURE__*/_react().default.createElement(_designUi().EmptyBox, {
      title: "This component is new and doesn\u2019t have any aspects.",
      linkText: "Learn more about component aspects",
      link: `https://bit.dev/docs/extending-bit/aspect-overview`
    });
  }
  return /*#__PURE__*/_react().default.createElement("div", {
    className: _aspectPageModule().default.aspectPage
  }, /*#__PURE__*/_react().default.createElement("div", null, /*#__PURE__*/_react().default.createElement(_documenterUi().H1, {
    className: _aspectPageModule().default.title
  }, "Configuration"), /*#__PURE__*/_react().default.createElement(_documenterUi2().Separator, {
    className: _aspectPageModule().default.separator
  }), aspectList && aspectList.map(aspect => {
    return /*#__PURE__*/_react().default.createElement(_harmonyUi().AspectBox, {
      key: aspect.id,
      className: _aspectPageModule().default.aspectBox,
      name: aspect.id,
      icon: aspect.icon,
      config: aspect.config,
      data: aspect.data
    });
  })));
}

//# sourceMappingURL=aspect-page.js.map