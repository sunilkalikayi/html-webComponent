"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.regexp.exec.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TopBarNav = TopBarNav;
function _extends2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
  _extends2 = function () {
    return data;
  };
  return data;
}
function _objectWithoutProperties2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
  _objectWithoutProperties2 = function () {
    return data;
  };
  return data;
}
function _react() {
  const data = _interopRequireDefault(require("react"));
  _react = function () {
    return data;
  };
  return data;
}
function _classnames() {
  const data = _interopRequireDefault(require("classnames"));
  _classnames = function () {
    return data;
  };
  return data;
}
function _reactRouterDom() {
  const data = require("react-router-dom");
  _reactRouterDom = function () {
    return data;
  };
  return data;
}
function _baseReactNavigation() {
  const data = require("@teambit/base-react.navigation.link");
  _baseReactNavigation = function () {
    return data;
  };
  return data;
}
function _topBarNavModule() {
  const data = _interopRequireDefault(require("./top-bar-nav.module.scss"));
  _topBarNavModule = function () {
    return data;
  };
  return data;
}
function TopBarNav(_ref) {
  let {
      href,
      className,
      activeClassName,
      children,
      displayName
    } = _ref,
    rest = (0, _objectWithoutProperties2().default)(_ref, ["href", "className", "activeClassName", "children", "displayName"]);
  const {
    search
  } = (0, _reactRouterDom().useLocation)(); // sticky query params

  // @hack - this is so that the displayName will not pass to the link and cause a warning in the console.
  // it is used for component page nav link widgets (code, aspects etc),
  // but not for regular menu links (overview, compositions, etc).
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const preventPassingDisplayNameToLink = displayName;
  const target = `${href}${search}`;
  return /*#__PURE__*/_react().default.createElement(_baseReactNavigation().Link, (0, _extends2().default)({}, rest, {
    className: (0, _classnames().default)(className, _topBarNavModule().default.topBarLink),
    activeClassName: (0, _classnames().default)(activeClassName, _topBarNavModule().default.active),
    href: target
  }), /*#__PURE__*/_react().default.createElement("div", null, children));
}

//# sourceMappingURL=top-bar-nav.js.map