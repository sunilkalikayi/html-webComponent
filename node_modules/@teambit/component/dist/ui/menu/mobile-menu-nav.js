"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.array.sort.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MobileMenuNav = MobileMenuNav;
function _objectWithoutProperties2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
  _objectWithoutProperties2 = function () {
    return data;
  };
  return data;
}
function _extends2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
  _extends2 = function () {
    return data;
  };
  return data;
}
function _react() {
  const data = _interopRequireWildcard(require("react"));
  _react = function () {
    return data;
  };
  return data;
}
function _reactRouterDom() {
  const data = require("react-router-dom");
  _reactRouterDom = function () {
    return data;
  };
  return data;
}
function _classnames() {
  const data = _interopRequireDefault(require("classnames"));
  _classnames = function () {
    return data;
  };
  return data;
}
function _designElements() {
  const data = require("@teambit/design.elements.icon");
  _designElements = function () {
    return data;
  };
  return data;
}
function _designInputs() {
  const data = require("@teambit/design.inputs.dropdown");
  _designInputs = function () {
    return data;
  };
  return data;
}
function _baseReactNavigation() {
  const data = require("@teambit/base-react.navigation.link");
  _baseReactNavigation = function () {
    return data;
  };
  return data;
}
function _topBarNav() {
  const data = require("../top-bar-nav");
  _topBarNav = function () {
    return data;
  };
  return data;
}
function _menuModule() {
  const data = _interopRequireDefault(require("./menu.module.scss"));
  _menuModule = function () {
    return data;
  };
  return data;
}
function _mobileMenuNavModule() {
  const data = _interopRequireDefault(require("./mobile-menu-nav.module.scss"));
  _mobileMenuNavModule = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function MobileMenuNav({
  navigationSlot,
  widgetSlot,
  className
}) {
  const totalSlots = (0, _react().useMemo)(() => [...navigationSlot.toArray().sort(sortFn), ...widgetSlot.toArray().sort(sortFn)], [navigationSlot, widgetSlot]);
  return /*#__PURE__*/_react().default.createElement(_designInputs().Dropdown
  // @ts-ignore - mismatch between @types/react
  , {
    placeholder: /*#__PURE__*/_react().default.createElement(Placeholder, {
      slots: totalSlots
    }),
    className: (0, _classnames().default)(_menuModule().default.navigation, _menuModule().default.mobileNav, className),
    dropClass: _mobileMenuNavModule().default.mobileMenu
  }, /*#__PURE__*/_react().default.createElement("nav", null, /*#__PURE__*/_react().default.createElement(_designElements().Icon, {
    of: "x-thick",
    className: _mobileMenuNavModule().default.close
  }), totalSlots.map(([id, menuItem]) => {
    return /*#__PURE__*/_react().default.createElement(_topBarNav().TopBarNav, (0, _extends2().default)({
      key: id
    }, menuItem.props, {
      className: _mobileMenuNavModule().default.mobileMenuLink,
      activeClassName: _mobileMenuNavModule().default.active
    }), typeof menuItem.props.children === 'string' ? menuItem.props.children : menuItem.props.displayName);
  })));
}
function sortFn([, {
  order: first
}], [, {
  order: second
}]) {
  // 0  - equal
  // <0 - first < second
  // >0 - first > second

  return (first !== null && first !== void 0 ? first : 0) - (second !== null && second !== void 0 ? second : 0);
}
function Placeholder(_ref) {
  let {
      slots
    } = _ref,
    rest = (0, _objectWithoutProperties2().default)(_ref, ["slots"]);
  return /*#__PURE__*/_react().default.createElement("div", (0, _extends2().default)({}, rest, {
    className: _mobileMenuNavModule().default.placeholder
  }), slots.map(([id, menuItem]) => /*#__PURE__*/_react().default.createElement(ShowWhenMatch, {
    key: id,
    href: menuItem.props.href || '',
    end: menuItem.props.exact
  }, typeof menuItem.props.children === 'string' ? menuItem.props.children : menuItem.props.displayName)), /*#__PURE__*/_react().default.createElement(_designElements().Icon, {
    of: "fat-arrow-down"
  }));
}
function ShowWhenMatch({
  href,
  children,
  caseSensitive,
  end: exact
}) {
  const isMatch = useLinkMatch(href, {
    caseSensitive,
    exact
  });
  if (!isMatch) return null;
  return /*#__PURE__*/_react().default.createElement(_react().default.Fragment, null, children);
}
function useLinkMatch(href, {
  caseSensitive,
  exact
} = {}) {
  const location = (0, _baseReactNavigation().useLocation)();
  let pathname = (location === null || location === void 0 ? void 0 : location.pathname) || '/';
  let destination = (0, _reactRouterDom().useResolvedPath)(href).pathname;
  if (!caseSensitive) {
    pathname = pathname.toLowerCase();
    destination = destination.toLowerCase();
  }
  return destination === pathname || !exact && pathname.startsWith(destination) && pathname.charAt(destination.length) === '/';
}

//# sourceMappingURL=mobile-menu-nav.js.map