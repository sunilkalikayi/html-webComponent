"use strict";

require("core-js/modules/es.symbol.description.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ComponentModel = void 0;
function _compositions() {
  const data = require("@teambit/compositions");
  _compositions = function () {
    return data;
  };
  return data;
}
function _componentId() {
  const data = require("@teambit/component-id");
  _componentId = function () {
    return data;
  };
  return data;
}
function _tag() {
  const data = require("../../tag");
  _tag = function () {
    return data;
  };
  return data;
}
function _tagMap() {
  const data = require("../../tag-map");
  _tagMap = function () {
    return data;
  };
  return data;
}
class ComponentModel {
  constructor(
  /**
   * id of the component
   */
  id,
  /**
   * display name of the component.
   */
  displayName,
  /**
   * package name of the component.
   */
  packageName,
  /**
   * the component server.
   */
  server,
  /**
   * array of compositions
   */
  compositions,
  /**
   * tags of the component.
   */
  tags,
  /**
   * component build status
   */
  buildStatus,
  /**
   * issues of component.
   */
  issuesCount,
  /**
   * elements url
   */
  elementsUrl,
  /**
   * status of component.
   */
  status,
  /**
   * deprecation info of the component.
   */
  deprecation,
  /**
   * env descriptor.
   */
  environment,
  /**
   * description of the component.
   */

  description = '', labels = [],
  /**
   * host of the component
   */
  host,
  /**
   *
   * size preview
   */
  size,
  /**
   * latest version of component
   */
  latest, preview, logs) {
    this.id = id;
    this.displayName = displayName;
    this.packageName = packageName;
    this.server = server;
    this.compositions = compositions;
    this.tags = tags;
    this.buildStatus = buildStatus;
    this.issuesCount = issuesCount;
    this.elementsUrl = elementsUrl;
    this.status = status;
    this.deprecation = deprecation;
    this.environment = environment;
    this.description = description;
    this.labels = labels;
    this.host = host;
    this.size = size;
    this.latest = latest;
    this.preview = preview;
    this.logs = logs;
  }
  get version() {
    if (!this.id.version) return 'new';
    return this.id.version;
  }

  /**
   * create an instance of a component from a plain object.
   */
  static from({
    id,
    server,
    displayName,
    compositions = [],
    packageName,
    elementsUrl,
    tags = [],
    deprecation,
    buildStatus,
    env,
    status,
    issuesCount,
    description,
    labels,
    host,
    latest,
    preview,
    size,
    logs
  }) {
    return new ComponentModel(_componentId().ComponentID.fromObject(id), displayName, packageName, server, _compositions().Composition.fromArray(compositions), _tagMap().TagMap.fromArray(tags.map(tag => _tag().Tag.fromObject(tag))), buildStatus, issuesCount, elementsUrl, status, deprecation, env, description, labels, host, size, latest, preview, logs);
  }
  static fromArray(componentsProps) {
    return componentsProps.map(rawComponent => ComponentModel.from(rawComponent));
  }
  static empty() {
    return new ComponentModel(_componentId().ComponentID.fromObject({
      name: 'root',
      scope: 'temp'
    }), '', '', {
      env: '',
      url: ''
    }, [], _tagMap().TagMap.empty());
  }
}
exports.ComponentModel = ComponentModel;

//# sourceMappingURL=component-model.js.map