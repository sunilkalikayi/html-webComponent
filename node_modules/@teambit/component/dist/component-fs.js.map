{"version":3,"names":["ComponentFS","MemoryFS","constructor","files","hash","byRegex","extension","filter","file","path","match","byGlob","patterns","includePatterns","excludePatterns","splitPatterns","matchPatterns","relative","toObject","map","contents","fromVinyls","fs","forEach","dirPath","relativeDir","startsWith","join","mkdirpSync","writeFileSync","auto"],"sources":["component-fs.ts"],"sourcesContent":["import { MemoryFS } from '@teambit/any-fs';\nimport type { AbstractVinyl } from '@teambit/legacy/dist/consumer/component/sources';\nimport { auto } from '@teambit/legacy/dist/utils/eol';\nimport path from 'path';\nimport { matchPatterns, splitPatterns } from '@teambit/toolbox.path.match-patterns';\n\n/**\n * The virtual component filesystem\n */\nexport default class ComponentFS extends MemoryFS {\n  constructor(\n    /**\n     * array of all fs files.\n     */\n    readonly files: AbstractVinyl[]\n  ) {\n    super();\n  }\n  /**\n   * hash to represent all contents within this filesystem volume.\n   */\n  get hash() {\n    return '';\n  }\n\n  /**\n   * filter all component files by regex.\n   */\n  byRegex(extension: RegExp): AbstractVinyl[] {\n    return this.files.filter((file) => file.path.match(extension));\n  }\n\n  /**\n   * filter all files using an array of glob patterns.\n   */\n  byGlob(patterns: string[]) {\n    const { includePatterns, excludePatterns } = splitPatterns(patterns);\n\n    const files = this.files.filter((file) => {\n      return matchPatterns(file.relative, includePatterns, excludePatterns);\n    });\n\n    return files;\n  }\n\n  toObject() {\n    return this.files.map((file) => {\n      return {\n        path: file.path,\n        contents: file.contents,\n      };\n    });\n  }\n\n  static fromVinyls(files: AbstractVinyl[]) {\n    const fs = new ComponentFS(files);\n    files.forEach((file) => {\n      let dirPath = file.relativeDir;\n      if (!dirPath.startsWith('/')) dirPath = path.join('/', dirPath);\n      fs.mkdirpSync(dirPath);\n      fs.writeFileSync(`/${file.relative}`, auto(file.contents || ''));\n    });\n\n    return fs;\n  }\n}\n"],"mappings":";;;;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;AACA;AACA;AACe,MAAMA,WAAW,SAASC,iBAAQ,CAAC;EAChDC,WAAW;EACT;AACJ;AACA;EACaC,KAAsB,EAC/B;IACA,KAAK,EAAE;IAAC,KAFCA,KAAsB,GAAtBA,KAAsB;EAGjC;EACA;AACF;AACA;EACE,IAAIC,IAAI,GAAG;IACT,OAAO,EAAE;EACX;;EAEA;AACF;AACA;EACEC,OAAO,CAACC,SAAiB,EAAmB;IAC1C,OAAO,IAAI,CAACH,KAAK,CAACI,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,CAACC,KAAK,CAACJ,SAAS,CAAC,CAAC;EAChE;;EAEA;AACF;AACA;EACEK,MAAM,CAACC,QAAkB,EAAE;IACzB,MAAM;MAAEC,eAAe;MAAEC;IAAgB,CAAC,GAAG,IAAAC,4BAAa,EAACH,QAAQ,CAAC;IAEpE,MAAMT,KAAK,GAAG,IAAI,CAACA,KAAK,CAACI,MAAM,CAAEC,IAAI,IAAK;MACxC,OAAO,IAAAQ,4BAAa,EAACR,IAAI,CAACS,QAAQ,EAAEJ,eAAe,EAAEC,eAAe,CAAC;IACvE,CAAC,CAAC;IAEF,OAAOX,KAAK;EACd;EAEAe,QAAQ,GAAG;IACT,OAAO,IAAI,CAACf,KAAK,CAACgB,GAAG,CAAEX,IAAI,IAAK;MAC9B,OAAO;QACLC,IAAI,EAAED,IAAI,CAACC,IAAI;QACfW,QAAQ,EAAEZ,IAAI,CAACY;MACjB,CAAC;IACH,CAAC,CAAC;EACJ;EAEA,OAAOC,UAAU,CAAClB,KAAsB,EAAE;IACxC,MAAMmB,EAAE,GAAG,IAAItB,WAAW,CAACG,KAAK,CAAC;IACjCA,KAAK,CAACoB,OAAO,CAAEf,IAAI,IAAK;MACtB,IAAIgB,OAAO,GAAGhB,IAAI,CAACiB,WAAW;MAC9B,IAAI,CAACD,OAAO,CAACE,UAAU,CAAC,GAAG,CAAC,EAAEF,OAAO,GAAGf,eAAI,CAACkB,IAAI,CAAC,GAAG,EAAEH,OAAO,CAAC;MAC/DF,EAAE,CAACM,UAAU,CAACJ,OAAO,CAAC;MACtBF,EAAE,CAACO,aAAa,CAAE,IAAGrB,IAAI,CAACS,QAAS,EAAC,EAAE,IAAAa,WAAI,EAACtB,IAAI,CAACY,QAAQ,IAAI,EAAE,CAAC,CAAC;IAClE,CAAC,CAAC;IAEF,OAAOE,EAAE;EACX;AACF;AAAC"}