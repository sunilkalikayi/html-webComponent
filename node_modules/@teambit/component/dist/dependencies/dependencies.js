"use strict";

require("core-js/modules/es.array.iterator.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PackageDependency = exports.DependencyList = exports.DependencyId = exports.Dependency = exports.Dependencies = exports.ComponentDependency = void 0;
function _bitError() {
  const data = require("@teambit/bit-error");
  _bitError = function () {
    return data;
  };
  return data;
}
function _legacyBitId() {
  const data = require("@teambit/legacy-bit-id");
  _legacyBitId = function () {
    return data;
  };
  return data;
}
/* eslint-disable max-classes-per-file */

const DEV_ENV = 'development';
const RUNTIME_ENV = 'runtime';

// type Environment = DEV_ENV | RUNTIME_ENV;

// type WrappingMethod = 'component' | 'package';

class DependencyId extends _legacyBitId().BitId {}
exports.DependencyId = DependencyId;
class Dependency {
  constructor(id) {
    this.id = id;
  }
}
exports.Dependency = Dependency;
class PackageDependency extends Dependency {}
exports.PackageDependency = PackageDependency;
class ComponentDependency extends Dependency {}
exports.ComponentDependency = ComponentDependency;
class DependencyList extends Array {
  /**
   * Get only package dependencies
   *
   * @readonly
   * @memberof DependencyList
   */
  get packages() {
    return this.filter(dep => dep instanceof PackageDependency);
  }
  get components() {
    return this.filter(dep => dep instanceof ComponentDependency);
  }
  static fromArray(dependencies) {
    return new DependencyList(...dependencies);
  }
}
exports.DependencyList = DependencyList;
class Dependencies {
  constructor(runtime, dev, peer) {
    this.runtime = runtime;
    this.dev = dev;
    this.peer = peer;
  }
  getByEnvironment(env) {
    if (env === DEV_ENV) {
      return DependencyList.fromArray(this.runtime.concat(this.dev).concat(this.peer));
    }
    if (env === RUNTIME_ENV) {
      return DependencyList.fromArray(this.runtime.concat(this.peer));
    }
    throw new (_bitError().BitError)(`env ${env} is not supported`);
  }

  /**
   * Get dependencies needed for development environnement such as runtime, dev and peer
   *
   * @returns {DependencyList}
   * @memberof Dependencies
   */
  computeDev() {
    return this.getByEnvironment(DEV_ENV);
  }

  /**
   * Get dependencies needed for runtime environnement such as runtime and peer
   *
   * @returns {DependencyList}
   * @memberof Dependencies
   */
  computeRuntime() {
    return this.getByEnvironment(RUNTIME_ENV);
  }
}
exports.Dependencies = Dependencies;

//# sourceMappingURL=dependencies.js.map