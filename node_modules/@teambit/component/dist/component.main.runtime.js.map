{"version":3,"names":["ComponentMain","constructor","hostSlot","express","showFragmentSlot","registerHost","host","register","createAspectListFromLegacy","legacyExtensionDataList","scope","AspectList","fromLegacyExtensions","createAspectListFromEntries","entries","registerRoute","routes","routeEntries","map","route","ComponentRoute","flattenRoutes","flatten","setHostPriority","id","get","HostNotFound","_priorHost","getHost","getPriorHost","getRoute","routeName","toString","hosts","values","priorityHost","find","priority","getShowFragments","fragments","orderBy","isHost","name","registerShowFragments","showFragments","provider","graphql","cli","config","componentExtension","ShowCmd","NameFragment","MainFileFragment","IDFragment","ScopeFragment","FilesFragment","ExtensionsFragment","componentSchema","Slot","withType","MainRuntime","GraphqlAspect","ExpressAspect","CLIAspect","ComponentAspect","addRuntime"],"sources":["component.main.runtime.ts"],"sourcesContent":["import { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport { ExpressAspect, ExpressMain, Route } from '@teambit/express';\nimport { GraphqlAspect, GraphqlMain } from '@teambit/graphql';\nimport { Slot, SlotRegistry } from '@teambit/harmony';\nimport { ComponentID } from '@teambit/component-id';\nimport { flatten, orderBy } from 'lodash';\nimport { ExtensionDataList } from '@teambit/legacy/dist/consumer/config';\nimport { ComponentFactory } from './component-factory';\nimport { ComponentAspect } from './component.aspect';\nimport { componentSchema } from './component.graphql';\nimport { ComponentRoute } from './component.route';\nimport { AspectList } from './aspect-list';\nimport { HostNotFound } from './exceptions';\nimport { AspectEntry } from './aspect-entry';\nimport {\n  ShowCmd,\n  ShowFragment,\n  NameFragment,\n  MainFileFragment,\n  IDFragment,\n  ScopeFragment,\n  FilesFragment,\n  ExtensionsFragment,\n} from './show';\nimport { RegisteredComponentRoute } from '.';\n\nexport type ComponentHostSlot = SlotRegistry<ComponentFactory>;\n\nexport type ShowFragmentSlot = SlotRegistry<ShowFragment[]>;\n\nexport class ComponentMain {\n  constructor(\n    /**\n     * slot for component hosts to register.\n     */\n    private hostSlot: ComponentHostSlot,\n\n    /**\n     * Express Extension\n     */\n    private express: ExpressMain,\n\n    private showFragmentSlot: ShowFragmentSlot\n  ) {}\n\n  /**\n   * register a new component host.\n   */\n  registerHost(host: ComponentFactory) {\n    this.hostSlot.register(host);\n    return this;\n  }\n\n  /**\n   * important! avoid using this method.\n   * seems like this method was written to work around a very specific case when the ComponentID of the aspects are\n   * not available. in case of new components, to get the ComponentID, the workspace-aspect is needed to get the\n   * default-scope. when this method is called from the scope, there is no way to get the real component-id.\n   * instead, this method asks for the \"scope\", which when called by the scope-aspect is the current scope-name.\n   * it may or may not be the real scope-name of the aspect.\n   * to fix this possibly incorrect scope-name, the `workspace.resolveScopeAspectListIds()` checks whether the\n   * scope-name is the same as scope.name, and if so, resolve it to the correct scope-name.\n   */\n  createAspectListFromLegacy(legacyExtensionDataList: ExtensionDataList, scope?: string) {\n    return AspectList.fromLegacyExtensions(legacyExtensionDataList, scope);\n  }\n\n  createAspectListFromEntries(entries: AspectEntry[]) {\n    return new AspectList(entries);\n  }\n\n  registerRoute(routes: RegisteredComponentRoute[]) {\n    const routeEntries = routes.map((route: RegisteredComponentRoute) => {\n      return new ComponentRoute(route, this);\n    });\n\n    const flattenRoutes = flatten(routeEntries) as any as Route[];\n\n    this.express.register(flattenRoutes);\n    return this;\n  }\n\n  /**\n   * set the prior host.\n   */\n  setHostPriority(id: string) {\n    const host = this.hostSlot.get(id);\n    if (!host) {\n      throw new HostNotFound(id);\n    }\n\n    this._priorHost = host;\n    return this;\n  }\n\n  /**\n   * get component host by extension ID.\n   */\n  getHost(id?: string): ComponentFactory {\n    if (id) {\n      const host = this.hostSlot.get(id);\n      if (!host) throw new HostNotFound(id);\n      return host;\n    }\n\n    return this.getPriorHost();\n  }\n\n  getRoute(id: ComponentID, routeName: string) {\n    return `/api/${id.toString()}/~aspect/${routeName}`;\n  }\n\n  /**\n   * get the prior host.\n   */\n  private getPriorHost() {\n    if (this._priorHost) return this._priorHost;\n\n    const hosts = this.hostSlot.values();\n    const priorityHost = hosts.find((host) => host.priority);\n    return priorityHost || hosts[0];\n  }\n\n  getShowFragments() {\n    const fragments = orderBy(flatten(this.showFragmentSlot.values()), ['weight', ['asc']]);\n    return fragments;\n  }\n\n  isHost(name: string) {\n    return !!this.hostSlot.get(name);\n  }\n\n  /**\n   * register a show fragment to display further information in the `bit show` command.\n   */\n  registerShowFragments(showFragments: ShowFragment[]) {\n    this.showFragmentSlot.register(showFragments);\n    return this;\n  }\n\n  private _priorHost: ComponentFactory | undefined;\n\n  static slots = [Slot.withType<ComponentFactory>(), Slot.withType<Route[]>(), Slot.withType<ShowFragment[]>()];\n\n  static runtime = MainRuntime;\n  static dependencies = [GraphqlAspect, ExpressAspect, CLIAspect];\n\n  static async provider(\n    [graphql, express, cli]: [GraphqlMain, ExpressMain, CLIMain],\n    config,\n    [hostSlot, showFragmentSlot]: [ComponentHostSlot, ShowFragmentSlot]\n  ) {\n    const componentExtension = new ComponentMain(hostSlot, express, showFragmentSlot);\n    cli.register(new ShowCmd(componentExtension));\n\n    componentExtension.registerShowFragments([\n      new NameFragment(),\n      new MainFileFragment(),\n      new IDFragment(),\n      new ScopeFragment(),\n      new FilesFragment(),\n      new ExtensionsFragment(),\n    ]);\n    graphql.register(componentSchema(componentExtension));\n\n    return componentExtension;\n  }\n}\n\nComponentAspect.addRuntime(ComponentMain);\n"],"mappings":"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"}