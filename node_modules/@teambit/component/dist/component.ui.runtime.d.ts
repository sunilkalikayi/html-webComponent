/// <reference types="react" />
import type { RouteProps } from 'react-router-dom';
import type { LinkProps } from '@teambit/base-react.navigation.link';
import { CommandBarUI } from '@teambit/command-bar';
import { SlotRegistry } from '@teambit/harmony';
import { PubsubUI } from '@teambit/pubsub';
import { ReactRouterUI } from '@teambit/react-router';
import { MenuItem, MenuItemSlot } from '@teambit/ui-foundation.ui.main-dropdown';
import { NavigationSlot, RouteSlot } from '@teambit/ui-foundation.ui.react-router.slot-router';
import { ComponentModel } from './ui';
import { ComponentPageElement, ComponentPageSlot } from './ui/component';
import { ComponentResultPlugin } from './ui/component-searcher';
import { ConsumeMethodSlot, ConsumePlugin, NavPlugin, OrderedNavigationSlot } from './ui/menu';
import { GetComponentsOptions } from './get-component-opts';
export declare type ComponentSearchResultSlot = SlotRegistry<ComponentResultPlugin[]>;
export declare type ComponentUIConfig = {
    commandBar: boolean;
};
export declare type Server = {
    env: string;
    url: string;
};
export declare type ComponentMeta = {
    id: string;
};
export declare class ComponentUI {
    /**
     * Pubsub aspects
     */
    private pubsub;
    private routeSlot;
    private navSlot;
    private consumeMethodSlot;
    /**
     * slot for registering a new widget to the menu.
     */
    private widgetSlot;
    private menuItemSlot;
    private pageItemSlot;
    private componentSearchResultSlot;
    private commandBarUI;
    readonly routePath = "/*";
    private componentSearcher;
    constructor(
    /**
     * Pubsub aspects
     */
    pubsub: PubsubUI, routeSlot: RouteSlot, navSlot: OrderedNavigationSlot, consumeMethodSlot: ConsumeMethodSlot, 
    /**
     * slot for registering a new widget to the menu.
     */
    widgetSlot: OrderedNavigationSlot, menuItemSlot: MenuItemSlot, pageItemSlot: ComponentPageSlot, componentSearchResultSlot: ComponentSearchResultSlot, commandBarUI: CommandBarUI, reactRouterUi: ReactRouterUI);
    /**
     * the current visible component
     */
    private activeComponent?;
    private copyNpmId;
    /**
     * key bindings used by component aspect
     */
    private keyBindings;
    private menuItems;
    private bitMethod;
    registerPubSub(): void;
    handleComponentChange: (activeComponent?: ComponentModel | undefined) => void;
    getComponentUI(host: string, options?: GetComponentsOptions): JSX.Element;
    getMenu(host: string, options?: GetComponentsOptions): JSX.Element;
    registerRoute(routes: RouteProps[] | RouteProps): this;
    registerNavigation(nav: LinkProps, order?: number): void;
    registerConsumeMethod(...consumeMethods: ConsumePlugin[]): void;
    registerWidget(widget: LinkProps, order?: number): void;
    registerMenuItem: (menuItems: MenuItem[]) => void;
    registerPageItem: (...items: ComponentPageElement[]) => void;
    /** register widgets to the components listed in the command bar */
    registerSearchResultWidget: (...items: ComponentResultPlugin[]) => void;
    updateComponents: (components: ComponentModel[]) => void;
    static dependencies: import("@teambit/harmony").Aspect[];
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static slots: (((registerFn: () => string) => SlotRegistry<RouteProps>) | ((registerFn: () => string) => SlotRegistry<MenuItemSlot>) | ((registerFn: () => string) => SlotRegistry<NavigationSlot>) | ((registerFn: () => string) => SlotRegistry<NavPlugin>) | ((registerFn: () => string) => SlotRegistry<ConsumeMethodSlot>) | ((registerFn: () => string) => SlotRegistry<ComponentPageSlot>) | ((registerFn: () => string) => SlotRegistry<ComponentSearchResultSlot>))[];
    static defaultConfig: ComponentUIConfig;
    static provider([pubsub, commandBarUI, reactRouterUI]: [PubsubUI, CommandBarUI, ReactRouterUI], config: ComponentUIConfig, [routeSlot, navSlot, consumeMethodSlot, widgetSlot, menuItemSlot, pageSlot, componentSearchResultSlot]: [
        RouteSlot,
        OrderedNavigationSlot,
        ConsumeMethodSlot,
        OrderedNavigationSlot,
        MenuItemSlot,
        ComponentPageSlot,
        ComponentSearchResultSlot
    ]): Promise<ComponentUI>;
}
export default ComponentUI;
