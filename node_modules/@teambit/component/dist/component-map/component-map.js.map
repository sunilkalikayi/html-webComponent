{"version":3,"names":["ComponentMap","constructor","hashMap","byComponent","component","get","id","toString","components","toArray","map","getValueByComponentId","componentId","tuple","Array","from","values","predicate","tuples","value","newValue","Map","forEach","flattenValue","reduce","acc","concat","filter","asMap","keys","create","rawMap","newMap","data","as"],"sources":["component-map.ts"],"sourcesContent":["import { ComponentID } from '@teambit/component-id';\nimport { Component } from '../component';\n\n/**\n * allows to index components -> values.\n */\nexport class ComponentMap<T> {\n  constructor(readonly hashMap: Map<string, [Component, T]>) {}\n\n  /**\n   * @deprecated please use `get` instead\n   */\n  byComponent(component: Component) {\n    return this.hashMap.get(component.id.toString());\n  }\n\n  get components() {\n    return this.toArray().map(([component]) => component);\n  }\n\n  /**\n   * get a value for a component.\n   */\n  get(component: Component) {\n    return this.hashMap.get(component.id.toString());\n  }\n\n  /**\n   * get a value by the component-id\n   */\n  getValueByComponentId(componentId: ComponentID): T | null {\n    const tuple = this.hashMap.get(componentId.toString());\n    if (!tuple) return null;\n    return tuple[1];\n  }\n\n  /**\n   * returns an array.\n   */\n  toArray() {\n    return Array.from(this.hashMap.values());\n  }\n\n  /**\n   * map entries and return a new component map.\n   */\n  map<NewType>(predicate: (value: T, component: Component) => NewType): ComponentMap<NewType> {\n    const tuples: [string, [Component, NewType]][] = this.toArray().map(([component, value]) => {\n      const newValue = predicate(value, component);\n      return [component.id.toString(), [component, newValue]];\n    });\n\n    return new ComponentMap(new Map(tuples));\n  }\n\n  /**\n   * similar to Array.forEach, but here you get both, the value and the component.\n   */\n  forEach(predicate: (value: T, component: Component) => void): void {\n    this.toArray().forEach(([component, value]) => {\n      predicate(value, component);\n    });\n  }\n\n  /**\n   * flatten values of all components into a single array.\n   */\n  flattenValue(): T[] {\n    return this.toArray().reduce((acc: T[], [, value]) => {\n      acc = acc.concat(value);\n      return acc;\n    }, []);\n  }\n\n  /**\n   * filter all components with empty values and return a new map.\n   */\n  filter(predicate: (value: T) => boolean): ComponentMap<T> {\n    const tuples = this.toArray().filter(([, value]) => {\n      return predicate(value);\n    });\n\n    const asMap: [string, [Component, T]][] = tuples.map(([component, value]) => {\n      return [component.id.toString(), [component, value]];\n    });\n\n    return new ComponentMap(new Map(asMap));\n  }\n\n  /**\n   * get all component ids.\n   */\n  keys() {\n    return this.hashMap.keys();\n  }\n\n  static create<U>(rawMap: [Component, U][]) {\n    const newMap: [string, [Component, U]][] = rawMap.map(([component, data]) => {\n      return [component.id.toString(), [component, data]];\n    });\n    return new ComponentMap(new Map(newMap));\n  }\n\n  /**\n   * create a component map from components and a value predicate.\n   * @param components components to zip into the map.\n   * @param predicate predicate for returning desired value.\n   */\n  static as<U>(components: Component[], predicate: (component: Component) => U): ComponentMap<U> {\n    const tuples: [string, [Component, U]][] = components.map((component) => {\n      return [component.id.toString(), [component, predicate(component)]];\n    });\n\n    return new ComponentMap(new Map(tuples));\n  }\n}\n"],"mappings":"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"}