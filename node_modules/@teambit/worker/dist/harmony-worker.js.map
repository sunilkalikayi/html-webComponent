{"version":3,"names":["HarmonyWorker","constructor","name","workerPath","stdout","worker","stderr","stdin","getOptions","targetOptions","defaultOptions","Object","assign","initiate","options","Worker","remoteWorker","wrap","nodeEndpoint","get","terminate"],"sources":["harmony-worker.ts"],"sourcesContent":["// eslint-disable-next-line import/no-unresolved\nimport { Worker } from 'worker_threads';\nimport { wrap, Remote } from 'comlink';\nimport nodeEndpoint from './node-endpoint';\n\nexport type InitOptions = {\n  /**\n   * Determines whether stdout should be piped into the parent process.\n   * If this is set to true, then worker.stdout is NOT automatically piped through to process.stdout in the parent.\n   */\n  stdout: boolean;\n\n  /**\n   * Determines whether stderr should be piped into the parent process.\n   * If this is set to true, then worker.stderr is NOT automatically piped through to process.stderr in the parent.\n   */\n  stderr: boolean;\n\n  /**\n   * Determines whether stdin should be piped into the parent process.\n   * If this is set to true, then worker.stdin provides a writable stream whose contents appear as process.stdin inside\n   * the Worker. By default, no data is provided.\n   */\n  stdin: boolean;\n};\n\nexport class HarmonyWorker<T> {\n  constructor(readonly name: string, readonly workerPath: string) {}\n\n  private remoteWorker: undefined | Remote<T>;\n\n  private worker: Worker | undefined;\n\n  get stdout() {\n    return this.worker?.stdout;\n  }\n\n  get stderr() {\n    return this.worker?.stderr;\n  }\n\n  get stdin() {\n    return this.worker?.stdin;\n  }\n\n  private getOptions(targetOptions: Partial<InitOptions>) {\n    const defaultOptions = {\n      stdout: true,\n      stderr: true,\n      stdin: true,\n    };\n\n    return Object.assign(defaultOptions, targetOptions);\n  }\n\n  initiate(options: Partial<InitOptions>): Remote<T> {\n    const worker = new Worker(this.workerPath, this.getOptions(options));\n    this.worker = worker;\n    const remoteWorker = wrap<T>(nodeEndpoint(worker));\n    this.remoteWorker = remoteWorker;\n    return remoteWorker;\n  }\n\n  get() {\n    return this.remoteWorker;\n  }\n\n  async terminate() {\n    if (!this.worker) return;\n    await this.worker.terminate();\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAHA;;AA0BO,MAAMA,aAAa,CAAI;EAC5BC,WAAW,CAAUC,IAAY,EAAWC,UAAkB,EAAE;IAAA,KAA3CD,IAAY,GAAZA,IAAY;IAAA,KAAWC,UAAkB,GAAlBA,UAAkB;IAAA;IAAA;EAAG;EAMjE,IAAIC,MAAM,GAAG;IAAA;IACX,uBAAO,IAAI,CAACC,MAAM,iDAAX,aAAaD,MAAM;EAC5B;EAEA,IAAIE,MAAM,GAAG;IAAA;IACX,wBAAO,IAAI,CAACD,MAAM,kDAAX,cAAaC,MAAM;EAC5B;EAEA,IAAIC,KAAK,GAAG;IAAA;IACV,wBAAO,IAAI,CAACF,MAAM,kDAAX,cAAaE,KAAK;EAC3B;EAEQC,UAAU,CAACC,aAAmC,EAAE;IACtD,MAAMC,cAAc,GAAG;MACrBN,MAAM,EAAE,IAAI;MACZE,MAAM,EAAE,IAAI;MACZC,KAAK,EAAE;IACT,CAAC;IAED,OAAOI,MAAM,CAACC,MAAM,CAACF,cAAc,EAAED,aAAa,CAAC;EACrD;EAEAI,QAAQ,CAACC,OAA6B,EAAa;IACjD,MAAMT,MAAM,GAAG,KAAIU,wBAAM,EAAC,IAAI,CAACZ,UAAU,EAAE,IAAI,CAACK,UAAU,CAACM,OAAO,CAAC,CAAC;IACpE,IAAI,CAACT,MAAM,GAAGA,MAAM;IACpB,MAAMW,YAAY,GAAG,IAAAC,eAAI,EAAI,IAAAC,uBAAY,EAACb,MAAM,CAAC,CAAC;IAClD,IAAI,CAACW,YAAY,GAAGA,YAAY;IAChC,OAAOA,YAAY;EACrB;EAEAG,GAAG,GAAG;IACJ,OAAO,IAAI,CAACH,YAAY;EAC1B;EAEA,MAAMI,SAAS,GAAG;IAChB,IAAI,CAAC,IAAI,CAACf,MAAM,EAAE;IAClB,MAAM,IAAI,CAACA,MAAM,CAACe,SAAS,EAAE;EAC/B;AACF;AAAC"}