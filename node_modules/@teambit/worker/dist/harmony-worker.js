"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HarmonyWorker = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _worker_threads() {
  const data = require("worker_threads");
  _worker_threads = function () {
    return data;
  };
  return data;
}
function _comlink() {
  const data = require("comlink");
  _comlink = function () {
    return data;
  };
  return data;
}
function _nodeEndpoint() {
  const data = _interopRequireDefault(require("./node-endpoint"));
  _nodeEndpoint = function () {
    return data;
  };
  return data;
}
// eslint-disable-next-line import/no-unresolved

class HarmonyWorker {
  constructor(name, workerPath) {
    this.name = name;
    this.workerPath = workerPath;
    (0, _defineProperty2().default)(this, "remoteWorker", void 0);
    (0, _defineProperty2().default)(this, "worker", void 0);
  }
  get stdout() {
    var _this$worker;
    return (_this$worker = this.worker) === null || _this$worker === void 0 ? void 0 : _this$worker.stdout;
  }
  get stderr() {
    var _this$worker2;
    return (_this$worker2 = this.worker) === null || _this$worker2 === void 0 ? void 0 : _this$worker2.stderr;
  }
  get stdin() {
    var _this$worker3;
    return (_this$worker3 = this.worker) === null || _this$worker3 === void 0 ? void 0 : _this$worker3.stdin;
  }
  getOptions(targetOptions) {
    const defaultOptions = {
      stdout: true,
      stderr: true,
      stdin: true
    };
    return Object.assign(defaultOptions, targetOptions);
  }
  initiate(options) {
    const worker = new (_worker_threads().Worker)(this.workerPath, this.getOptions(options));
    this.worker = worker;
    const remoteWorker = (0, _comlink().wrap)((0, _nodeEndpoint().default)(worker));
    this.remoteWorker = remoteWorker;
    return remoteWorker;
  }
  get() {
    return this.remoteWorker;
  }
  async terminate() {
    if (!this.worker) return;
    await this.worker.terminate();
  }
}
exports.HarmonyWorker = HarmonyWorker;

//# sourceMappingURL=harmony-worker.js.map