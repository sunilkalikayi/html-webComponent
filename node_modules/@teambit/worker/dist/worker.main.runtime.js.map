{"version":3,"names":["WorkerMain","constructor","workerSlot","componentAspect","pkg","workerNameSlot","listWorkers","values","declareWorker","name","path","register","maybeAspectId","toArray","find","workerName","Error","scriptPath","systemWorker","HarmonyWorker","resolveWorkerScript","aspectId","host","getHost","id","resolveComponentId","component","get","packageName","getPackageName","require","resolve","join","getWorker","provider","config","MainRuntime","Slot","withType","ComponentAspect","PkgAspect","WorkerAspect","addRuntime"],"sources":["worker.main.runtime.ts"],"sourcesContent":["import { join } from 'path';\nimport { MainRuntime } from '@teambit/cli';\nimport { ComponentAspect, ComponentMain } from '@teambit/component';\nimport { PkgAspect, PkgMain } from '@teambit/pkg';\nimport { Slot, SlotRegistry } from '@teambit/harmony';\nimport { WorkerAspect } from './worker.aspect';\nimport { HarmonyWorker } from './harmony-worker';\n\nexport type WorkerSlot = SlotRegistry<HarmonyWorker<unknown>>;\n\nexport type WorkerNameSlot = SlotRegistry<string>;\n\nexport class WorkerMain {\n  constructor(\n    private workerSlot: WorkerSlot,\n    private componentAspect: ComponentMain,\n    private pkg: PkgMain,\n    private workerNameSlot: WorkerNameSlot\n  ) {}\n\n  static runtime = MainRuntime;\n\n  listWorkers(): HarmonyWorker<any>[] {\n    return this.workerSlot.values();\n  }\n\n  /**\n   * create a new worker.\n   */\n  async declareWorker<T>(name: string, path: string): Promise<HarmonyWorker<T>> {\n    this.workerNameSlot.register(name);\n\n    const maybeAspectId = this.workerNameSlot.toArray().find(([, workerName]) => {\n      return workerName === name;\n    });\n\n    if (!maybeAspectId) throw new Error(`could not create a worker ${name}`);\n    // const scriptPath = path || await this.resolveWorkerScript(name, aspectId);\n    const scriptPath = path;\n    const systemWorker = new HarmonyWorker<T>(name, scriptPath);\n    this.workerSlot.register(systemWorker);\n\n    return systemWorker;\n  }\n\n  private async resolveWorkerScript(name: string, aspectId: string): Promise<string> {\n    const host = this.componentAspect.getHost();\n    const id = await host.resolveComponentId(aspectId);\n    const component = await host.get(id);\n    if (!component) throw new Error(`[worker] could not resolve component for aspect ID: ${aspectId}`);\n    const packageName = this.pkg.getPackageName(component);\n    // const workerFile = component.state.filesystem.files.find((file) => file.relative.includes(`${name}.worker`));\n    // if (!workerFile) throw new Error(`[worker] aspect declaring a worker must contain a ${name}.worker. file`);\n    return require.resolve(join(packageName, 'dist', `${name}.worker.js`));\n  }\n\n  getWorker<T>(id: string): HarmonyWorker<T> {\n    return this.workerSlot.get(id) as HarmonyWorker<T>;\n  }\n\n  static slots = [Slot.withType<HarmonyWorker<unknown>>(), Slot.withType<string>()];\n\n  static dependencies = [ComponentAspect, PkgAspect];\n\n  static async provider(\n    [componentAspect, pkg]: [ComponentMain, PkgMain],\n    config,\n    [workerSlot, workerNameSlot]: [WorkerSlot, WorkerNameSlot]\n  ) {\n    return new WorkerMain(workerSlot, componentAspect, pkg, workerNameSlot);\n  }\n}\n\nWorkerAspect.addRuntime(WorkerMain);\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAMO,MAAMA,UAAU,CAAC;EACtBC,WAAW,CACDC,UAAsB,EACtBC,eAA8B,EAC9BC,GAAY,EACZC,cAA8B,EACtC;IAAA,KAJQH,UAAsB,GAAtBA,UAAsB;IAAA,KACtBC,eAA8B,GAA9BA,eAA8B;IAAA,KAC9BC,GAAY,GAAZA,GAAY;IAAA,KACZC,cAA8B,GAA9BA,cAA8B;EACrC;EAIHC,WAAW,GAAyB;IAClC,OAAO,IAAI,CAACJ,UAAU,CAACK,MAAM,EAAE;EACjC;;EAEA;AACF;AACA;EACE,MAAMC,aAAa,CAAIC,IAAY,EAAEC,IAAY,EAA6B;IAC5E,IAAI,CAACL,cAAc,CAACM,QAAQ,CAACF,IAAI,CAAC;IAElC,MAAMG,aAAa,GAAG,IAAI,CAACP,cAAc,CAACQ,OAAO,EAAE,CAACC,IAAI,CAAC,CAAC,GAAGC,UAAU,CAAC,KAAK;MAC3E,OAAOA,UAAU,KAAKN,IAAI;IAC5B,CAAC,CAAC;IAEF,IAAI,CAACG,aAAa,EAAE,MAAM,IAAII,KAAK,CAAE,6BAA4BP,IAAK,EAAC,CAAC;IACxE;IACA,MAAMQ,UAAU,GAAGP,IAAI;IACvB,MAAMQ,YAAY,GAAG,KAAIC,8BAAa,EAAIV,IAAI,EAAEQ,UAAU,CAAC;IAC3D,IAAI,CAACf,UAAU,CAACS,QAAQ,CAACO,YAAY,CAAC;IAEtC,OAAOA,YAAY;EACrB;EAEA,MAAcE,mBAAmB,CAACX,IAAY,EAAEY,QAAgB,EAAmB;IACjF,MAAMC,IAAI,GAAG,IAAI,CAACnB,eAAe,CAACoB,OAAO,EAAE;IAC3C,MAAMC,EAAE,GAAG,MAAMF,IAAI,CAACG,kBAAkB,CAACJ,QAAQ,CAAC;IAClD,MAAMK,SAAS,GAAG,MAAMJ,IAAI,CAACK,GAAG,CAACH,EAAE,CAAC;IACpC,IAAI,CAACE,SAAS,EAAE,MAAM,IAAIV,KAAK,CAAE,uDAAsDK,QAAS,EAAC,CAAC;IAClG,MAAMO,WAAW,GAAG,IAAI,CAACxB,GAAG,CAACyB,cAAc,CAACH,SAAS,CAAC;IACtD;IACA;IACA,OAAOI,OAAO,CAACC,OAAO,CAAC,IAAAC,YAAI,EAACJ,WAAW,EAAE,MAAM,EAAG,GAAEnB,IAAK,YAAW,CAAC,CAAC;EACxE;EAEAwB,SAAS,CAAIT,EAAU,EAAoB;IACzC,OAAO,IAAI,CAACtB,UAAU,CAACyB,GAAG,CAACH,EAAE,CAAC;EAChC;EAMA,aAAaU,QAAQ,CACnB,CAAC/B,eAAe,EAAEC,GAAG,CAA2B,EAChD+B,MAAM,EACN,CAACjC,UAAU,EAAEG,cAAc,CAA+B,EAC1D;IACA,OAAO,IAAIL,UAAU,CAACE,UAAU,EAAEC,eAAe,EAAEC,GAAG,EAAEC,cAAc,CAAC;EACzE;AACF;AAAC;AAAA,gCA3DYL,UAAU,aAQJoC,kBAAW;AAAA,gCARjBpC,UAAU,WAgDN,CAACqC,eAAI,CAACC,QAAQ,EAA0B,EAAED,eAAI,CAACC,QAAQ,EAAU,CAAC;AAAA,gCAhDtEtC,UAAU,kBAkDC,CAACuC,4BAAe,EAAEC,gBAAS,CAAC;AAWpDC,sBAAY,CAACC,UAAU,CAAC1C,UAAU,CAAC"}