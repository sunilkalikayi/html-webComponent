import { ComponentMain } from '@teambit/component';
import { PkgMain } from '@teambit/pkg';
import { SlotRegistry } from '@teambit/harmony';
import { HarmonyWorker } from './harmony-worker';
export declare type WorkerSlot = SlotRegistry<HarmonyWorker<unknown>>;
export declare type WorkerNameSlot = SlotRegistry<string>;
export declare class WorkerMain {
    private workerSlot;
    private componentAspect;
    private pkg;
    private workerNameSlot;
    constructor(workerSlot: WorkerSlot, componentAspect: ComponentMain, pkg: PkgMain, workerNameSlot: WorkerNameSlot);
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    listWorkers(): HarmonyWorker<any>[];
    /**
     * create a new worker.
     */
    declareWorker<T>(name: string, path: string): Promise<HarmonyWorker<T>>;
    private resolveWorkerScript;
    getWorker<T>(id: string): HarmonyWorker<T>;
    static slots: (((registerFn: () => string) => SlotRegistry<string>) | ((registerFn: () => string) => SlotRegistry<HarmonyWorker<unknown>>))[];
    static dependencies: import("@teambit/harmony").Aspect[];
    static provider([componentAspect, pkg]: [ComponentMain, PkgMain], config: any, [workerSlot, workerNameSlot]: [WorkerSlot, WorkerNameSlot]): Promise<WorkerMain>;
}
