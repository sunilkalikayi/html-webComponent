/// <reference types="node" />
import { Remote } from 'comlink';
export declare type InitOptions = {
    /**
     * Determines whether stdout should be piped into the parent process.
     * If this is set to true, then worker.stdout is NOT automatically piped through to process.stdout in the parent.
     */
    stdout: boolean;
    /**
     * Determines whether stderr should be piped into the parent process.
     * If this is set to true, then worker.stderr is NOT automatically piped through to process.stderr in the parent.
     */
    stderr: boolean;
    /**
     * Determines whether stdin should be piped into the parent process.
     * If this is set to true, then worker.stdin provides a writable stream whose contents appear as process.stdin inside
     * the Worker. By default, no data is provided.
     */
    stdin: boolean;
};
export declare class HarmonyWorker<T> {
    readonly name: string;
    readonly workerPath: string;
    constructor(name: string, workerPath: string);
    private remoteWorker;
    private worker;
    get stdout(): import("stream").Readable | undefined;
    get stderr(): import("stream").Readable | undefined;
    get stdin(): import("stream").Writable | null | undefined;
    private getOptions;
    initiate(options: Partial<InitOptions>): Remote<T>;
    get(): Remote<T> | undefined;
    terminate(): Promise<void>;
}
