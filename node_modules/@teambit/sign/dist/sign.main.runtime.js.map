{"version":3,"names":["SignMain","constructor","scope","logger","builder","onPostSignSlot","lanes","snapping","sign","ids","isMultiple","push","laneIdStr","lane","laneId","LaneId","parse","importLaneObject","legacyScope","setCurrentLaneId","import","componentsToSkip","componentsToSign","getComponentIdsToSign","length","console","log","map","c","toString","join","setStatusLine","components","loadMany","clearStatusLine","builderDataMap","pipeResults","tagListener","throwOnError","seedersOnly","installOptions","copyPeerToRuntimeOnComponents","installPeersFromEnvs","legacyBuildResults","builderDataMapToLegacyOnTagResults","legacyComponents","state","_consumer","_updateComponentsByTagResult","publishedPackages","_getPublishedPackages","pipeWithError","find","pipe","hasErrors","buildStatus","BuildStatus","Failed","Succeed","exportExtensionsDataIntoScopes","saveExtensionsDataIntoScope","clearScopesCaches","triggerOnPostSign","error","getErrorMessageFormatted","registerOnPostSign","fn","register","Promise","all","values","catch","err","bitIds","BitIds","fromArray","id","idsGroupedByScope","toGroupByScopeName","scopeRemotes","getScopeRemotes","Object","keys","scopeName","remote","resolve","action","PostSign","name","mapSeries","component","_enrichComp","objects","persist","objectList","ObjectList","signComponents","_getObjectsToEnrichComp","objectToMerge","fromBitObjects","addScopeName","mergeObjectList","ComponentID","fromLegacy","http","Http","connect","CENTRAL_BIT_HUB_URL","CENTRAL_BIT_HUB_NAME","pushToCentralHub","listIds","getMany","forEach","provider","cli","loggerMain","_","createLogger","SignAspect","signMain","SignCmd","MainRuntime","CLIAspect","ScopeAspect","LoggerAspect","BuilderAspect","LanesAspect","SnappingAspect","Slot","withType","addRuntime"],"sources":["sign.main.runtime.ts"],"sourcesContent":["import mapSeries from 'p-map-series';\nimport { SlotRegistry, Slot } from '@teambit/harmony';\nimport { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport { LoggerAspect, LoggerMain, Logger } from '@teambit/logger';\nimport { ScopeAspect, ScopeMain } from '@teambit/scope';\nimport { BuilderAspect, BuilderMain } from '@teambit/builder';\nimport { Component, ComponentID } from '@teambit/component';\nimport { SnappingAspect, SnappingMain } from '@teambit/snapping';\nimport ConsumerComponent from '@teambit/legacy/dist/consumer/component';\nimport { BuildStatus, CENTRAL_BIT_HUB_URL, CENTRAL_BIT_HUB_NAME } from '@teambit/legacy/dist/constants';\nimport { getScopeRemotes } from '@teambit/legacy/dist/scope/scope-remotes';\nimport { PostSign } from '@teambit/legacy/dist/scope/actions';\nimport { ObjectList } from '@teambit/legacy/dist/scope/objects/object-list';\nimport { Remotes } from '@teambit/legacy/dist/remotes';\nimport { BitIds } from '@teambit/legacy/dist/bit-id';\nimport { Http } from '@teambit/legacy/dist/scope/network/http';\nimport LanesAspect, { LanesMain } from '@teambit/lanes';\nimport { LaneId } from '@teambit/lane-id';\nimport { Lane } from '@teambit/legacy/dist/scope/models';\nimport { SignCmd } from './sign.cmd';\nimport { SignAspect } from './sign.aspect';\n\nexport type SignResult = {\n  components: Component[];\n  publishedPackages: string[];\n  error: string | null;\n};\n\ntype OnPostSign = (components: Component[]) => Promise<void>;\ntype OnPostSignSlot = SlotRegistry<OnPostSign>;\n\nexport class SignMain {\n  constructor(\n    private scope: ScopeMain,\n    private logger: Logger,\n    private builder: BuilderMain,\n    private onPostSignSlot: OnPostSignSlot,\n    private lanes: LanesMain,\n    private snapping: SnappingMain\n  ) {}\n\n  /**\n   * complete the build process of a component.\n   * `isMultiple` indicates that this is running on a new bare-scope and not on the original scope.\n   * it's recommended to always use it, even when it's a single component and not multiple.\n   * (the reason for this name is that for multiple components from multiple scopes, it must be done on a new bare-scope).\n   *\n   * important! this method mutates the legacyScope. it assigns the currentLaneId according to the `bit sign --lane` flag.\n   * if for some reason you're using this API in a long-running-process, make sure to revert it.\n   */\n  async sign(ids: ComponentID[], isMultiple?: boolean, push?: boolean, laneIdStr?: string): Promise<SignResult | null> {\n    let lane: Lane | undefined;\n    if (isMultiple) {\n      if (laneIdStr) {\n        const laneId = LaneId.parse(laneIdStr);\n        lane = await this.lanes.importLaneObject(laneId);\n        // this is critical. otherwise, later on, when loading aspects and isolating capsules, we'll try to fetch dists\n        // from the original scope instead of the lane-scope.\n        this.scope.legacyScope.setCurrentLaneId(laneId);\n      }\n      await this.scope.import(ids, { lane });\n    }\n    const { componentsToSkip, componentsToSign } = await this.getComponentIdsToSign(ids);\n    if (ids.length && componentsToSkip.length) {\n      // eslint-disable-next-line no-console\n      console.log(`the following component(s) were already signed successfully:\n${componentsToSkip.map((c) => c.toString()).join('\\n')}\\n`);\n    }\n    if (!componentsToSign.length) {\n      return null;\n    }\n\n    // using `loadMany` instead of `getMany` to make sure component aspects are loaded.\n    this.logger.setStatusLine(`loading ${componentsToSign.length} components and their aspects...`);\n    const components = await this.scope.loadMany(componentsToSign);\n    this.logger.clearStatusLine();\n    const { builderDataMap, pipeResults } = await this.builder.tagListener(\n      components,\n      { throwOnError: false },\n      { seedersOnly: true, installOptions: { copyPeerToRuntimeOnComponents: true, installPeersFromEnvs: true } }\n    );\n    const legacyBuildResults = this.scope.builderDataMapToLegacyOnTagResults(builderDataMap);\n    const legacyComponents = components.map((c) => c.state._consumer);\n    this.snapping._updateComponentsByTagResult(legacyComponents, legacyBuildResults);\n    const publishedPackages = this.snapping._getPublishedPackages(legacyComponents);\n    const pipeWithError = pipeResults.find((pipe) => pipe.hasErrors());\n    const buildStatus = pipeWithError ? BuildStatus.Failed : BuildStatus.Succeed;\n    if (push) {\n      if (isMultiple) {\n        await this.exportExtensionsDataIntoScopes(legacyComponents, buildStatus, lane);\n      } else {\n        await this.saveExtensionsDataIntoScope(legacyComponents, buildStatus);\n      }\n      await this.clearScopesCaches(legacyComponents);\n    }\n    await this.triggerOnPostSign(components);\n\n    return {\n      components,\n      publishedPackages,\n      error: pipeWithError ? pipeWithError.getErrorMessageFormatted() : null,\n    };\n  }\n\n  public registerOnPostSign(fn: OnPostSign) {\n    this.onPostSignSlot.register(fn);\n  }\n\n  async triggerOnPostSign(components: Component[]) {\n    await Promise.all(this.onPostSignSlot.values().map((fn) => fn(components))).catch((err) => {\n      this.logger.error('failed running onPostSignSlot', err);\n    });\n  }\n\n  private async clearScopesCaches(components: ConsumerComponent[]) {\n    const bitIds = BitIds.fromArray(components.map((c) => c.id));\n    const idsGroupedByScope = bitIds.toGroupByScopeName(new BitIds());\n    const scopeRemotes: Remotes = await getScopeRemotes(this.scope.legacyScope);\n    await Promise.all(\n      Object.keys(idsGroupedByScope).map(async (scopeName) => {\n        const remote = await scopeRemotes.resolve(scopeName, this.scope.legacyScope);\n        return remote.action(PostSign.name, { ids: idsGroupedByScope[scopeName].map((id) => id.toString()) });\n      })\n    );\n  }\n\n  private async saveExtensionsDataIntoScope(components: ConsumerComponent[], buildStatus: BuildStatus) {\n    await mapSeries(components, async (component) => {\n      component.buildStatus = buildStatus;\n      await this.snapping._enrichComp(component);\n    });\n    await this.scope.legacyScope.objects.persist();\n  }\n\n  private async exportExtensionsDataIntoScopes(components: ConsumerComponent[], buildStatus: BuildStatus, lane?: Lane) {\n    const objectList = new ObjectList();\n    const signComponents = await mapSeries(components, async (component) => {\n      component.buildStatus = buildStatus;\n      const objects = await this.snapping._getObjectsToEnrichComp(component);\n      const scopeName = component.scope as string;\n      const objectToMerge = await ObjectList.fromBitObjects(objects);\n      objectToMerge.addScopeName(scopeName);\n      objectList.mergeObjectList(objectToMerge);\n      return ComponentID.fromLegacy(component.id);\n    });\n    if (lane) {\n      // the components should be exported to the lane-scope, not to their original scope.\n      objectList.addScopeName(lane.scope);\n    }\n    const http = await Http.connect(CENTRAL_BIT_HUB_URL, CENTRAL_BIT_HUB_NAME);\n    await http.pushToCentralHub(objectList, {\n      persist: true,\n      sign: true,\n      signComponents: signComponents.map((id) => id.toString()),\n    });\n  }\n\n  private async getComponentIdsToSign(ids: ComponentID[]): Promise<{\n    componentsToSkip: ComponentID[];\n    componentsToSign: ComponentID[];\n  }> {\n    if (!ids.length) {\n      ids = await this.scope.listIds();\n    }\n    this.logger.setStatusLine(`loading ${ids.length} components to determine whether they need to be signed...`);\n    const components = await this.scope.getMany(ids);\n    this.logger.clearStatusLine();\n    const componentsToSign: ComponentID[] = [];\n    const componentsToSkip: ComponentID[] = [];\n    components.forEach((component) => {\n      if (component.state._consumer.buildStatus === BuildStatus.Succeed) {\n        componentsToSkip.push(component.id);\n      } else {\n        componentsToSign.push(component.id);\n      }\n    });\n    return { componentsToSkip, componentsToSign };\n  }\n\n  static runtime = MainRuntime;\n\n  static dependencies = [CLIAspect, ScopeAspect, LoggerAspect, BuilderAspect, LanesAspect, SnappingAspect];\n\n  static slots = [Slot.withType<OnPostSignSlot>()];\n\n  static async provider(\n    [cli, scope, loggerMain, builder, lanes, snapping]: [\n      CLIMain,\n      ScopeMain,\n      LoggerMain,\n      BuilderMain,\n      LanesMain,\n      SnappingMain\n    ],\n    _,\n    [onPostSignSlot]: [OnPostSignSlot]\n  ) {\n    const logger = loggerMain.createLogger(SignAspect.id);\n    const signMain = new SignMain(scope, logger, builder, onPostSignSlot, lanes, snapping);\n    cli.register(new SignCmd(signMain));\n    return signMain;\n  }\n}\n\nSignAspect.addRuntime(SignMain);\n"],"mappings":"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"}