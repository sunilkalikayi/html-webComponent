"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReactNativeMain = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _mergeDeepLeft() {
  const data = _interopRequireDefault(require("ramda/src/mergeDeepLeft"));
  _mergeDeepLeft = function () {
    return data;
  };
  return data;
}
function _generator() {
  const data = require("@teambit/generator");
  _generator = function () {
    return data;
  };
  return data;
}
function _cli() {
  const data = require("@teambit/cli");
  _cli = function () {
    return data;
  };
  return data;
}
function _aspect() {
  const data = _interopRequireDefault(require("@teambit/aspect"));
  _aspect = function () {
    return data;
  };
  return data;
}
function _envs() {
  const data = require("@teambit/envs");
  _envs = function () {
    return data;
  };
  return data;
}
function _react() {
  const data = require("@teambit/react");
  _react = function () {
    return data;
  };
  return data;
}
function _reactNative() {
  const data = require("./react-native.aspect");
  _reactNative = function () {
    return data;
  };
  return data;
}
function _reactNative2() {
  const data = require("./react-native.templates");
  _reactNative2 = function () {
    return data;
  };
  return data;
}
function _webpackTransformers() {
  const data = require("./webpack/webpack-transformers");
  _webpackTransformers = function () {
    return data;
  };
  return data;
}
function _reactNative3() {
  const data = require("./react-native.env");
  _reactNative3 = function () {
    return data;
  };
  return data;
}
const jestConfig = require.resolve('./jest/jest.config');
class ReactNativeMain {
  constructor(react, reactNativeEnv, envs) {
    this.react = react;
    this.reactNativeEnv = reactNativeEnv;
    this.envs = envs;
    (0, _defineProperty2().default)(this, "overrideTsConfig", this.react.overrideTsConfig.bind(this.react));
    (0, _defineProperty2().default)(this, "overrideJestConfig", this.react.overrideJestConfig.bind(this.react));
    (0, _defineProperty2().default)(this, "overrideBuildPipe", this.react.overrideBuildPipe.bind(this.react));
    (0, _defineProperty2().default)(this, "overrideBuildTsConfig", this.react.overrideBuildTsConfig.bind(this.react));
    (0, _defineProperty2().default)(this, "overridePackageJsonProps", this.react.overridePackageJsonProps.bind(this.react));
    (0, _defineProperty2().default)(this, "useTypescript", this.react.useTypescript.bind(this.react));
    (0, _defineProperty2().default)(this, "usePrettier", this.react.usePrettier.bind(this.react));
    (0, _defineProperty2().default)(this, "useEslint", this.react.useEslint.bind(this.react));
  }
  icon() {
    return 'https://static.bit.dev/extensions-icons/react.svg';
  }

  /**
   * @deprecated use useTypescript()
   * override the TS config of the environment.
   */

  /**
   * override the env's dev server and preview webpack configurations.
   * Replaces both overrideDevServerConfig and overridePreviewConfig
   */
  useWebpack(modifiers) {
    var _modifiers$previewCon, _modifiers$devServerC;
    const mergedModifiers = {
      previewConfig: [_webpackTransformers().previewConfigTransformer].concat((_modifiers$previewCon = modifiers === null || modifiers === void 0 ? void 0 : modifiers.previewConfig) !== null && _modifiers$previewCon !== void 0 ? _modifiers$previewCon : []),
      devServerConfig: [_webpackTransformers().devServerConfigTransformer].concat((_modifiers$devServerC = modifiers === null || modifiers === void 0 ? void 0 : modifiers.devServerConfig) !== null && _modifiers$devServerC !== void 0 ? _modifiers$devServerC : [])
    };
    return this.react.useWebpack(mergedModifiers);
  }

  /**
   * An API to mutate the prettier config
   */

  /**
   * override the dependency configuration of the component environment.
   */
  overrideDependencies(dependencyPolicy) {
    return this.envs.override({
      getDependencies: () => (0, _mergeDeepLeft().default)(dependencyPolicy, this.reactNativeEnv.getDependencies())
    });
  }

  /**
   * create a new composition of the node environment.
   */
  compose(transformers, targetEnv = {}) {
    return this.envs.compose(this.envs.merge(targetEnv, this.reactNativeEnv), transformers);
  }
  static async provider([react, envs, generator, aspect]) {
    const webpackModifiers = {
      previewConfig: [_webpackTransformers().previewConfigTransformer],
      devServerConfig: [_webpackTransformers().devServerConfigTransformer]
    };
    const reactNativeComposedEnv = envs.merge(new (_reactNative3().ReactNativeEnv)(react, aspect), react.compose([react.useWebpack(webpackModifiers), react.overrideJestConfig(jestConfig)]));
    envs.registerEnv(reactNativeComposedEnv);
    generator.registerComponentTemplate(_reactNative2().componentTemplates);
    generator.registerWorkspaceTemplate(_reactNative2().workspaceTemplates);
    return new ReactNativeMain(react, reactNativeComposedEnv, envs);
  }
}
exports.ReactNativeMain = ReactNativeMain;
(0, _defineProperty2().default)(ReactNativeMain, "dependencies", [_react().ReactAspect, _envs().EnvsAspect, _generator().GeneratorAspect, _aspect().default]);
(0, _defineProperty2().default)(ReactNativeMain, "runtime", _cli().MainRuntime);
_reactNative().ReactNativeAspect.addRuntime(ReactNativeMain);

//# sourceMappingURL=react-native.main.runtime.js.map