import { EnvPolicyConfigObject } from '@teambit/dependency-resolver';
import { GeneratorMain } from '@teambit/generator';
import { TsConfigSourceFile } from 'typescript';
import type { TsCompilerOptionsWithoutTsConfig } from '@teambit/typescript';
import { BuildTask } from '@teambit/builder';
import { Aspect } from '@teambit/harmony';
import { AspectMain } from '@teambit/aspect';
import { PackageJsonProps } from '@teambit/pkg';
import { EnvsMain, EnvTransformer, Environment } from '@teambit/envs';
import { ReactMain, UseWebpackModifiers } from '@teambit/react';
import { ReactNativeEnv } from './react-native.env';
export declare class ReactNativeMain {
    private react;
    readonly reactNativeEnv: ReactNativeEnv;
    private envs;
    constructor(react: ReactMain, reactNativeEnv: ReactNativeEnv, envs: EnvsMain);
    icon(): string;
    /**
     * @deprecated use useTypescript()
     * override the TS config of the environment.
     */
    overrideTsConfig: (tsconfig?: TsConfigSourceFile, compilerOptions?: Partial<TsCompilerOptionsWithoutTsConfig>, tsModule?: any) => EnvTransformer;
    /**
     * override the jest config of the environment.
     */
    overrideJestConfig: (jestConfigPath: string, jestModulePath?: string | undefined) => EnvTransformer;
    /**
     * override the env build pipeline.
     */
    overrideBuildPipe: (tasks: BuildTask[]) => EnvTransformer;
    /**
     * @deprecated use useTypescript()
     * override the build ts config.
     */
    overrideBuildTsConfig: (tsconfig?: TsConfigSourceFile, compilerOptions?: Partial<TsCompilerOptionsWithoutTsConfig>) => EnvTransformer;
    /**
     * override package json properties.
     */
    overridePackageJsonProps: (props: PackageJsonProps) => EnvTransformer;
    /**
     * override the env's typescript config for both dev and build time.
     * Replaces both overrideTsConfig (devConfig) and overrideBuildTsConfig (buildConfig)
     */
    useTypescript: (modifiers?: import("@teambit/react").UseTypescriptModifiers | undefined, tsModule?: any) => EnvTransformer;
    /**
     * override the env's dev server and preview webpack configurations.
     * Replaces both overrideDevServerConfig and overridePreviewConfig
     */
    useWebpack(modifiers?: UseWebpackModifiers): EnvTransformer;
    /**
     * An API to mutate the prettier config
     */
    usePrettier: (modifiers?: import("@teambit/react/react.main.runtime").UsePrettierModifiers | undefined) => EnvTransformer;
    /**
     * An API to mutate the eslint config
     */
    useEslint: (modifiers?: import("@teambit/react/react.main.runtime").UseEslintModifiers | undefined) => EnvTransformer;
    /**
     * override the dependency configuration of the component environment.
     */
    overrideDependencies(dependencyPolicy: EnvPolicyConfigObject): EnvTransformer;
    /**
     * create a new composition of the node environment.
     */
    compose(transformers: EnvTransformer[], targetEnv?: Environment): Environment;
    static dependencies: Aspect[];
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static provider([react, envs, generator, aspect]: [ReactMain, EnvsMain, GeneratorMain, AspectMain]): Promise<ReactNativeMain>;
}
