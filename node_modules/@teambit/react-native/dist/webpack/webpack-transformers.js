"use strict";

require("core-js/modules/es.regexp.constructor.js");
require("core-js/modules/es.regexp.exec.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.previewConfigTransformer = exports.devServerConfigTransformer = void 0;
function _path() {
  const data = require("path");
  _path = function () {
    return data;
  };
  return data;
}
function _lodash() {
  const data = require("lodash");
  _lodash = function () {
    return data;
  };
  return data;
}
function _reactNativeAlias() {
  const data = require("./react-native-alias");
  _reactNativeAlias = function () {
    return data;
  };
  return data;
}
const reactNativePackagesRule = {
  test: /\.(jsx?|tsx?)$/,
  include: [new RegExp(`node_modules\\${_path().sep}react-native-`)],
  loader: require.resolve('babel-loader'),
  options: {
    cacheDirectory: false,
    presets: [require.resolve('@babel/preset-env'), require.resolve('@babel/preset-react')],
    plugins: [require.resolve('@babel/plugin-proposal-class-properties')]
  }
};

/**
 * Transformation to apply for both preview and dev server
 * @param config
 * @param _context
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function commonTransformation(config, _context) {
  (0, _reactNativeAlias().reactNativeAlias)(config);
  reactNativeExternal(config);
  config.addModuleRule(reactNativePackagesRule);
  return config;
}

/**
 * expect the react-native to be on the global object with the same name of react-native-web
 * @param config
 * @returns
 */
function reactNativeExternal(config) {
  var _config$raw;
  const reactNativeExternalVal = (0, _lodash().get)(config.raw, 'externals.react-native');
  const reactNativeWebExternalVal = (0, _lodash().get)(config.raw, 'externals.react-native-web');
  if (config !== null && config !== void 0 && (_config$raw = config.raw) !== null && _config$raw !== void 0 && _config$raw.externals && reactNativeExternalVal && reactNativeWebExternalVal) {
    (0, _lodash().set)(config.raw, 'externals.react-native', reactNativeWebExternalVal);
  }
  return config;
}

/**
 * Transformation for the preview only
 * @param config
 * @param context
 * @returns
 */
const previewConfigTransformer = (config, context) => {
  const newConfig = commonTransformation(config, context);
  return newConfig;
};

/**
 * Transformation for the dev server only
 * @param config
 * @param context
 * @returns
 */
exports.previewConfigTransformer = previewConfigTransformer;
const devServerConfigTransformer = (config, context) => {
  const newConfig = commonTransformation(config, context);
  return newConfig;
};
exports.devServerConfigTransformer = devServerConfigTransformer;

//# sourceMappingURL=webpack-transformers.js.map