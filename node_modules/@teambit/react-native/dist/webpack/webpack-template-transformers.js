"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.removeExposedReactNative = removeExposedReactNative;
exports.removeReactNativePeerEntry = removeReactNativePeerEntry;
function _lodash() {
  const data = require("lodash");
  _lodash = function () {
    return data;
  };
  return data;
}
// import { filter, remove } from 'lodash';

// type ModuleOpts = Exclude<WebpackConfigMutator['raw']['module'], undefined>;
// type Rules = Exclude<ModuleOpts['rules'], undefined>;
// type ArrayElement<ArrayType extends readonly unknown[]> = ArrayType extends readonly (infer ElementType)[]
//   ? ElementType
//   : never;

// type Rule = ArrayElement<Rules>;

function removeExposedReactNative(config) {
  var _config$raw, _config$raw$module;
  if (config !== null && config !== void 0 && (_config$raw = config.raw) !== null && _config$raw !== void 0 && (_config$raw$module = _config$raw.module) !== null && _config$raw$module !== void 0 && _config$raw$module.rules) {
    config.raw.module.rules = config.raw.module.rules.filter(rule => {
      var _rule$loader, _rule$test;
      // prettier-ignore

      return !(
      // @ts-ignore
      (_rule$loader = rule.loader) !== null && _rule$loader !== void 0 && _rule$loader.includes('expose-loader') &&
      // @ts-ignore
      typeof rule.test &&
      // @ts-ignore
      typeof rule.test === 'string' && // @ts-ignore
      (_rule$test = rule.test) !== null && _rule$test !== void 0 && _rule$test.includes('/react-native/'));
    });
  }
  return config;
}
function removeReactNativePeerEntry(config) {
  const peersImports = (0, _lodash().get)(config.raw, 'entry.peers.import');
  if (peersImports) {
    (0, _lodash().set)(config.raw, 'entry.peers.import', peersImports.filter(name => name !== 'react-native'));
  }
  return config;
}

//# sourceMappingURL=webpack-template-transformers.js.map