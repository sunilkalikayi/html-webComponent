{"version":3,"names":[],"sources":["react-app-options.ts"],"sourcesContent":["import { Bundler, DevServer } from '@teambit/bundler';\nimport { WebpackConfigTransformer } from '@teambit/webpack';\n\nimport { ReactDeployContext } from './deploy-context';\n\ntype prerenderedRoute = {\n  /** The prerendered route, after following redirects */\n  route: string;\n  /** The original route passed, before redirects */\n  originalRoute: string;\n  /** The resulting HTML for the route */\n  html: string;\n  /**\n   * The path to write the rendered HTML to.\n   * This is null (automatically calculated after postProcess)\n   * unless explicitly set. */\n  outputPath?: string | null;\n};\n\n/** https://github.com/Tofandel/prerender-spa-plugin-next */\nexport type ReactAppPrerenderOptions = {\n  /**\n   * sub folder to output the prerender, inside the webpack output folder\n   * @default '/'\n   */\n  staticDir?: string;\n\n  /** The index file to fall back on for SPAs. */\n  indexPath?: string;\n\n  /**\n   * routes to prerender\n   */\n  routes: string[];\n\n  /**\n   * the proxy server you want the prerender headless browser to run on\n   */\n  server?: {\n    proxy: {\n      [key: string]: {\n        /** required by HPM.\n         * @default 'http://localhost:8000/' */\n        target: string;\n        pathRewrite: { [key: string]: string };\n      };\n    };\n  };\n\n  /**\n   * Post processing of the prerendered html. This is useful for adding meta tags to the html or changing the file name.\n   */\n  postProcess?: (prerenderRoute: prerenderedRoute) => prerenderedRoute;\n\n  /** The renderer you'd like to use to prerender the app.\n   * @default new require(\"@prerenderer/renderer-puppeteer\").\n   */\n  renderer?: any;\n\n  /** options to pass to the renderer class's constructor */\n  rendererOptions?: any;\n};\n\nexport type ReactAppOptions = {\n  /**\n   * name of the application.\n   */\n  name: string;\n\n  /**\n   * path to entry files of the application.\n   */\n  entry: string[] | ((path?: string) => Promise<string[]>);\n\n  /**\n   * path to server-rendered entrypoint of the app\n   */\n  ssr?: string | (() => Promise<string>);\n\n  /**\n   * instance of bundler to use. default is Webpack.\n   */\n  bundler?: Bundler;\n\n  /**\n   * instance of serverside bundler to use. default is Webpack.\n   */\n  ssrBundler?: Bundler;\n\n  /**\n   * instance of dev server to use. default is Webpack.\n   */\n  devServer?: DevServer;\n\n  /**\n   * set webpack transformers\n   */\n  webpackTransformers?: WebpackConfigTransformer[];\n\n  /**\n   * decide whether to prerender your app. accepts an array of routes. if none, prerender would not apply.\n   *  e.g ['/plugins', '/learn', '/docs/quick-start]\n   * You can also pass a configuration for the proxy, please refer here: https://github.com/webpack/docs/wiki/webpack-dev-server#proxy\n   *\n   */\n  prerender?: ReactAppPrerenderOptions;\n\n  /**\n   * deploy function.\n   */\n  deploy?: (context: ReactDeployContext) => Promise<void>;\n\n  /**\n   * ranges of ports to use to run the app server.\n   */\n  portRange?: [start: number, end: number];\n\n  /**\n   * favicon for the app. You can pass an abs path (using require.resolve()) or a url.\n   */\n  favicon?: string;\n};\n"],"mappings":""}