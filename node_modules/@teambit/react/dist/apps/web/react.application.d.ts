import { Application, AppContext, AppBuildContext, AppResult } from '@teambit/application';
import type { Bundler, DevServer } from '@teambit/bundler';
import type { Logger } from '@teambit/logger';
import { DependencyResolverMain } from '@teambit/dependency-resolver';
import { WebpackConfigTransformer } from '@teambit/webpack';
import { ReactEnv } from '../../react.env';
import { ReactAppBuildResult } from './react-build-result';
import { ReactAppPrerenderOptions } from './react-app-options';
import { ReactDeployContext } from '.';
export declare class ReactApp implements Application {
    readonly name: string;
    readonly entry: string[] | ((path?: string) => Promise<string[]>);
    readonly ssr: string | (() => Promise<string>) | undefined;
    readonly portRange: [number, number];
    private reactEnv;
    private logger;
    private dependencyResolver;
    readonly prerender?: ReactAppPrerenderOptions | undefined;
    readonly bundler?: Bundler | undefined;
    readonly ssrBundler?: Bundler | undefined;
    readonly devServer?: DevServer | undefined;
    readonly transformers: WebpackConfigTransformer[];
    readonly deploy?: ((context: ReactDeployContext) => Promise<void>) | undefined;
    readonly favicon?: string | undefined;
    constructor(name: string, entry: string[] | ((path?: string) => Promise<string[]>), ssr: string | (() => Promise<string>) | undefined, portRange: [number, number], reactEnv: ReactEnv, logger: Logger, dependencyResolver: DependencyResolverMain, prerender?: ReactAppPrerenderOptions | undefined, bundler?: Bundler | undefined, ssrBundler?: Bundler | undefined, devServer?: DevServer | undefined, transformers?: WebpackConfigTransformer[], deploy?: ((context: ReactDeployContext) => Promise<void>) | undefined, favicon?: string | undefined);
    readonly applicationType = "react-common-js";
    readonly dir = "public";
    readonly ssrDir = "ssr";
    run(context: AppContext): Promise<number>;
    runSsr(context: AppContext): Promise<AppResult>;
    private buildClient;
    private buildSsr;
    build(context: AppBuildContext): Promise<ReactAppBuildResult>;
    private buildSsrApp;
    private getSsrPolicy;
    private getBundler;
    private getSsrBundler;
    private getDefaultBundler;
    private getDefaultSsrBundler;
    private getBuildContext;
    private getPublicDir;
    getEntries(path?: string): Promise<string[]>;
    getSsrEntries(): Promise<string[]>;
    private getDevServerContext;
    private getPeers;
}
