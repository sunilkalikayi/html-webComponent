"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.string.replace.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReactEnvType = exports.ReactEnv = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _typescript() {
  const data = _interopRequireDefault(require("typescript"));
  _typescript = function () {
    return data;
  };
  return data;
}
function _os() {
  const data = require("os");
  _os = function () {
    return data;
  };
  return data;
}
function _componentModules() {
  const data = require("@teambit/component.modules.component-url");
  _componentModules = function () {
    return data;
  };
  return data;
}
function _builder() {
  const data = require("@teambit/builder");
  _builder = function () {
    return data;
  };
  return data;
}
function _lodash() {
  const data = require("lodash");
  _lodash = function () {
    return data;
  };
  return data;
}
function _utils() {
  const data = require("@teambit/legacy/dist/utils");
  _utils = function () {
    return data;
  };
  return data;
}
function _path() {
  const data = require("path");
  _path = function () {
    return data;
  };
  return data;
}
function _fsExtra() {
  const data = require("fs-extra");
  _fsExtra = function () {
    return data;
  };
  return data;
}
function _react() {
  const data = require("./react.aspect");
  _react = function () {
    return data;
  };
  return data;
}
function _webpackConfig() {
  const data = _interopRequireDefault(require("./webpack/webpack.config.base"));
  _webpackConfig = function () {
    return data;
  };
  return data;
}
function _webpackConfigBase() {
  const data = _interopRequireDefault(require("./webpack/webpack.config.base.prod"));
  _webpackConfigBase = function () {
    return data;
  };
  return data;
}
function _webpackConfigEnv() {
  const data = _interopRequireDefault(require("./webpack/webpack.config.env.dev"));
  _webpackConfigEnv = function () {
    return data;
  };
  return data;
}
function _webpackConfigEnv2() {
  const data = require("./webpack/webpack.config.env.template");
  _webpackConfigEnv2 = function () {
    return data;
  };
  return data;
}
function _webpackConfigComponent() {
  const data = _interopRequireDefault(require("./webpack/webpack.config.component.prod"));
  _webpackConfigComponent = function () {
    return data;
  };
  return data;
}
function _webpackConfigComponent2() {
  const data = _interopRequireDefault(require("./webpack/webpack.config.component.dev"));
  _webpackConfigComponent2 = function () {
    return data;
  };
  return data;
}
// webpack configs for both components and envs

// webpack configs for envs only
// import devPreviewConfigFactory from './webpack/webpack.config.preview.dev';

// webpack configs for components only

const ReactEnvType = 'react';
exports.ReactEnvType = ReactEnvType;
const defaultTsConfig = require('./typescript/tsconfig.json');
const buildTsConfig = require('./typescript/tsconfig.build.json');
const eslintConfig = require('./eslint/eslintrc');
const prettierConfig = require('./prettier/prettier.config.js');

// TODO: move to be taken from the key mode of compiler context

/**
 * a component environment built for [React](https://reactjs.org) .
 */
class ReactEnv {
  constructor(
  /**
   * jest extension
   */
  jestAspect,
  /**
   * typescript extension.
   */
  tsAspect,
  /**
   * compiler extension.
   */
  compiler,
  /**
   * webpack extension.
   */
  webpack,
  /**
   * workspace extension.
   */
  workspace,
  /**
   * pkg extension.
   */
  pkg,
  /**
   * tester extension
   */
  tester, config, eslint, prettier, dependencyResolver, logger, compilerAspectId) {
    this.jestAspect = jestAspect;
    this.tsAspect = tsAspect;
    this.compiler = compiler;
    this.webpack = webpack;
    this.workspace = workspace;
    this.pkg = pkg;
    this.tester = tester;
    this.config = config;
    this.eslint = eslint;
    this.prettier = prettier;
    this.dependencyResolver = dependencyResolver;
    this.logger = logger;
    this.compilerAspectId = compilerAspectId;
    (0, _defineProperty2().default)(this, "icon", 'https://static.bit.dev/extensions-icons/react.svg');
  }
  getTsConfig(targetTsConfig) {
    return targetTsConfig ? (0, _lodash().merge)({}, defaultTsConfig, targetTsConfig) : defaultTsConfig;
  }
  getBuildTsConfig(targetTsConfig) {
    return targetTsConfig ? (0, _lodash().merge)({}, buildTsConfig, targetTsConfig) : buildTsConfig;
  }

  /**
   * @deprecated use createCjsJestTester()
   */
  getCjsJestTester(jestConfigPath, jestModulePath) {
    return this.createCjsJestTester(jestConfigPath, jestModulePath);
  }

  /**
   * Get a jest tester instance with react config and cjs configs
   * @param jestConfigPath
   * @param jestModulePath
   * @returns
   */
  createCjsJestTester(jestConfigPath, jestModulePath) {
    const pathToSource = (0, _utils().pathNormalizeToLinux)(__dirname).replace('/dist', '');
    const defaultConfig = (0, _path().join)(pathToSource, './jest/jest.cjs.config.js');
    const config = jestConfigPath || defaultConfig;
    return this.jestAspect.createTester(config, jestModulePath || require.resolve('jest'));
  }

  /**
   * @deprecated use createEsmJestTester()
   */
  getEsmJestTester(jestConfigPath, jestModulePath) {
    return this.createEsmJestTester(jestConfigPath, jestModulePath);
  }

  /**
   * Get a jest tester instance with react config and esm configs
   * @param jestConfigPath
   * @param jestModulePath
   * @returns
   */
  createEsmJestTester(jestConfigPath, jestModulePath) {
    const pathToSource = (0, _utils().pathNormalizeToLinux)(__dirname).replace('/dist', '');
    const defaultConfig = (0, _path().join)(pathToSource, './jest/jest.esm.config.js');
    const config = jestConfigPath || defaultConfig;
    return this.jestAspect.createTester(config, jestModulePath || require.resolve('jest'));
  }

  /**
   * returns a component tester.
   */
  getTester(jestConfigPath, jestModulePath) {
    // return this.createEsmJestTester(jestConfigPath, jestModulePath);
    return this.createCjsJestTester(jestConfigPath, jestModulePath);
  }
  createTsCompilerOptions(mode = 'dev') {
    const tsconfig = mode === 'dev' ? (0, _lodash().cloneDeep)(defaultTsConfig) : (0, _lodash().cloneDeep)(buildTsConfig);
    const pathToSource = (0, _utils().pathNormalizeToLinux)(__dirname).replace('/dist/', '/src/');
    const compileJs = true;
    const compileJsx = true;
    return {
      tsconfig,
      // TODO: @david please remove this line and refactor to be something that makes sense.
      types: [(0, _path().resolve)(pathToSource, './typescript/style.d.ts'), (0, _path().resolve)(pathToSource, './typescript/asset.d.ts')],
      compileJs,
      compileJsx
    };
  }

  /**
   * @deprecated use createTsCjsCompiler()
   */
  getTsCjsCompiler(mode = 'dev', transformers = [], tsModule = _typescript().default) {
    return this.createTsCjsCompiler(mode, transformers, tsModule);
  }

  /**
   * Get a compiler instance with react config and set it to cjs module
   * @param mode
   * @param transformers
   * @param tsModule
   * @returns
   */
  createTsCjsCompiler(mode = 'dev', transformers = [], tsModule = _typescript().default) {
    const tsCompileOptions = this.createTsCompilerOptions(mode);
    return this.tsAspect.createCjsCompiler(tsCompileOptions, transformers, tsModule);
  }

  /**
   * @deprecated use createTsEsmCompiler()
   */
  getTsEsmCompiler(mode = 'dev', transformers = [], tsModule = _typescript().default) {
    this.createTsEsmCompiler(mode, transformers, tsModule);
  }

  /**
   * Get a compiler instance with react config and set it to esm module
   * @param mode
   * @param transformers
   * @param tsModule
   * @returns
   */
  createTsEsmCompiler(mode = 'dev', transformers = [], tsModule = _typescript().default) {
    const tsCompileOptions = this.createTsCompilerOptions(mode);
    return this.tsAspect.createEsmCompiler(tsCompileOptions, transformers, tsModule);
  }
  getCompiler(transformers = [], tsModule = _typescript().default) {
    // return this.getTsEsmCompiler('dev', transformers, tsModule);
    return this.createTsCjsCompiler('dev', transformers, tsModule);
  }

  /**
   * returns and configures the component linter.
   */
  getLinter(context, transformers = []) {
    const tsConfig = this.createTsCompilerOptions('dev').tsconfig;
    const defaultTransformer = configMutator => {
      configMutator.addExtensionTypes(['.md', '.mdx']);
      configMutator.setTsConfig(tsConfig);
      return configMutator;
    };
    const allTransformers = [defaultTransformer, ...transformers];
    return this.eslint.createLinter(context, {
      config: eslintConfig,
      // resolve all plugins from the react environment.
      pluginPath: __dirname
    }, allTransformers);
  }

  /**
   * returns and configures the component formatter.
   */
  getFormatter(context, transformers = []) {
    return this.prettier.createFormatter(context, {
      config: prettierConfig
    }, transformers);
  }
  getFileMap(components, local = false) {
    return components.reduce((index, component) => {
      component.state.filesystem.files.forEach(file => {
        index[file.path] = {
          id: component.id.toString(),
          homepage: local ? `/${component.id.fullName}` : _componentModules().ComponentUrl.toUrl(component.id)
        };
      });
      return index;
    }, {});
  }
  writeFileMap(components, local) {
    const fileMap = this.getFileMap(components, local);
    const path = (0, _path().join)((0, _os().tmpdir)(), `${Math.random().toString(36).slice(2, 11)}.json`);
    (0, _fsExtra().outputFileSync)(path, JSON.stringify(fileMap));
    return path;
  }

  /**
   * required for `bit start`
   */
  getDevEnvId(id) {
    if (typeof id !== 'string') return _react().ReactAspect.id;
    return id || _react().ReactAspect.id;
  }

  /**
   * get a schema generator instance configured with the correct tsconfig.
   */
  getSchemaExtractor(tsconfig) {
    return this.tsAspect.createSchemaExtractor(this.getTsConfig(tsconfig));
  }

  /**
   * returns and configures the React component dev server.
   * required for `bit start`
   */
  getDevServer(context, transformers = []) {
    const baseConfig = (0, _webpackConfig().default)(false);
    const envDevConfig = (0, _webpackConfigEnv().default)(context.id);
    const componentDevConfig = (0, _webpackConfigComponent2().default)(this.workspace.path, context.id);
    const defaultTransformer = configMutator => {
      const merged = configMutator.merge([baseConfig, envDevConfig, componentDevConfig]);
      return merged;
    };
    return this.webpack.createDevServer(context, [defaultTransformer, ...transformers]);
  }
  async getBundler(context, transformers = []) {
    return this.createComponentsWebpackBundler(context, transformers);
  }
  async createComponentsWebpackBundler(context, transformers = []) {
    const baseConfig = (0, _webpackConfig().default)(!context.development);
    const baseProdConfig = (0, _webpackConfigBase().default)(context.development);
    const componentProdConfig = (0, _webpackConfigComponent().default)();
    const defaultTransformer = configMutator => {
      const merged = configMutator.merge([baseConfig, baseProdConfig, componentProdConfig]);
      return merged;
    };
    const mergedTransformers = [defaultTransformer, ...transformers];
    return this.createWebpackBundler(context, mergedTransformers);
  }
  async createTemplateWebpackBundler(context, transformers = []) {
    const baseConfig = (0, _webpackConfig().default)(!context.development);
    const baseProdConfig = (0, _webpackConfigBase().default)(context.development);
    const templateConfig = (0, _webpackConfigEnv2().templateWebpackConfigFactory)();
    const defaultTransformer = configMutator => {
      const merged = configMutator.merge([baseConfig, baseProdConfig, templateConfig]);
      return merged;
    };
    const mergedTransformers = [defaultTransformer, ...transformers];
    return this.createWebpackBundler(context, mergedTransformers);
  }
  async createWebpackBundler(context, transformers = []) {
    return this.webpack.createBundler(context, transformers);
  }

  /**
   * Get the peers configured by the env on the components + the host deps configured by the env
   */
  getPeerDependenciesList() {
    return this.dependencyResolver.getPeerDependenciesListFromEnv(this);
  }
  getAdditionalHostDependencies() {
    return ['@teambit/mdx.ui.mdx-scope-context', '@mdx-js/react', 'react'];
  }

  /**
   * returns a path to a docs template.
   */
  getDocsTemplate() {
    return require.resolve('@teambit/react.ui.docs-app');
  }
  /**
   * returns the path to the compositions template
   */
  getMounter() {
    return require.resolve('@teambit/react.ui.compositions-app');
  }
  getPreviewConfig() {
    return {
      strategyName: 'component',
      splitComponentBundle: true,
      isScaling: true
    };
  }

  /**
   * define the package json properties to add to each component.
   */
  getPackageJsonProps() {
    // React compile by default to esm, so uses type module
    // return this.getEsmPackageJsonProps();
    return this.getCjsPackageJsonProps();
  }

  /**
   * @deprecated use createCjsPackageJsonProps()
   */
  getCjsPackageJsonProps() {
    return this.createCjsPackageJsonProps();
  }

  /**
   * Get the default package.json props for a cjs component
   * @returns
   */
  createCjsPackageJsonProps() {
    return this.tsAspect.getCjsPackageJsonProps();
  }

  /**
   * @deprecated use createEsmPackageJsonProps()
   */
  getEsmPackageJsonProps() {
    return this.createEsmPackageJsonProps();
  }

  /**
   * Get the default package.json props for an esm component
   * @returns
   */
  createEsmPackageJsonProps() {
    return this.tsAspect.getEsmPackageJsonProps();
  }
  getNpmIgnore() {
    // ignores only .ts files in the root directory, so d.ts files inside dists are unaffected.
    // without this change, the package has "index.ts" file in the root, causing typescript to parse it instead of the
    // d.ts files. (changing the "types" prop in the package.json file doesn't help).
    return [`${_builder().CAPSULE_ARTIFACTS_DIR}/`];
  }

  /**
   * adds dependencies to all configured components.
   */
  getDependencies() {
    return {
      dependencies: {
        react: '-',
        'react-dom': '-',
        'core-js': '^3.0.0'
      },
      // TODO: add this only if using ts
      devDependencies: {
        react: '-',
        'react-dom': '-',
        '@types/mocha': '-',
        '@types/node': '12.20.4',
        '@types/react': '^17.0.8',
        '@types/react-dom': '^17.0.5',
        '@types/jest': '^26.0.0',
        // This is added as dev dep since our jest file transformer uses babel plugins that require this to be installed
        '@babel/runtime': '7.12.18',
        '@types/testing-library__jest-dom': '5.9.5'
      },
      peerDependencies: {
        react: '^16.8.0 || ^17.0.0',
        'react-dom': '^16.8.0 || ^17.0.0'
      }
    };
  }

  /**
   * returns the component build pipeline.
   */
  getBuildPipe(modifiers = {}) {
    var _modifiers$tsModifier, _modifiers$tsModifier2;
    const transformers = (modifiers === null || modifiers === void 0 ? void 0 : (_modifiers$tsModifier = modifiers.tsModifier) === null || _modifiers$tsModifier === void 0 ? void 0 : _modifiers$tsModifier.transformers) || [];
    return [this.createCjsCompilerTask(transformers, (modifiers === null || modifiers === void 0 ? void 0 : (_modifiers$tsModifier2 = modifiers.tsModifier) === null || _modifiers$tsModifier2 === void 0 ? void 0 : _modifiers$tsModifier2.module) || _typescript().default), this.tester.task];
  }

  /**
   * @deprecated use createBuildPipeWithoutCompiler()
   */
  getBuildPipeWithoutCompiler() {
    return this.createBuildPipeWithoutCompiler();
  }

  /**
   * Get the react build pipeline without the compilation task.
   * This help in cases you want to only replace the compilation task with something else
   * @returns
   */
  createBuildPipeWithoutCompiler() {
    const pipeWithoutCompiler = this.getBuildPipe().filter(task => task.aspectId !== this.compilerAspectId);
    return pipeWithoutCompiler;
  }

  /**
   * @deprecated use createEsmCompilerTask()
   */
  getEsmCompilerTask(transformers = [], tsModule = _typescript().default) {
    return this.createEsmCompilerTask(transformers, tsModule);
  }

  /**
   * Get a compiler task with react config and set to esm module
   * @param transformers
   * @param tsModule
   * @returns
   */
  createEsmCompilerTask(transformers = [], tsModule = _typescript().default) {
    const tsCompiler = this.createTsEsmCompiler('build', transformers, tsModule);
    return this.compiler.createTask('TSCompiler', tsCompiler);
  }

  /**
   * @deprecated use createCjsCompilerTask()
   * */
  getCjsCompilerTask(transformers = [], tsModule = _typescript().default) {
    return this.createCjsCompilerTask(transformers, tsModule);
  }

  /**
   * Get a compiler task with react config and set to cjs module
   * @param transformers
   * @param tsModule
   * @returns
   */
  createCjsCompilerTask(transformers = [], tsModule = _typescript().default) {
    const tsCompiler = this.createTsCjsCompiler('build', transformers, tsModule);
    return this.compiler.createTask('TSCompiler', tsCompiler);
  }
  async __getDescriptor() {
    return {
      type: ReactEnvType
    };
  }
}
exports.ReactEnv = ReactEnv;

//# sourceMappingURL=react.env.js.map