import { CLIMain } from '@teambit/cli';
import { Logger, LoggerMain } from '@teambit/logger';
import { Workspace } from '@teambit/workspace';
import { ComponentID } from '@teambit/component-id';
export declare type ListScopeResult = {
    id: ComponentID;
    currentlyUsedVersion?: string | null | undefined;
    remoteVersion?: string;
    deprecated?: boolean;
    laneReadmeOf?: string[];
};
export declare class ListerMain {
    private logger;
    private workspace?;
    constructor(logger: Logger, workspace?: Workspace | undefined);
    remoteList(scopeName: string, namespacesUsingWildcards?: string): Promise<ListScopeResult[]>;
    localList(showAll?: boolean, showRemoteVersion?: boolean, namespacesUsingWildcards?: string): Promise<ListScopeResult[]>;
    private convertListScopeResultsFromLegacy;
    static slots: never[];
    static dependencies: import("@teambit/harmony").Aspect[];
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static provider([cli, loggerMain, workspace]: [CLIMain, LoggerMain, Workspace]): Promise<ListerMain>;
}
