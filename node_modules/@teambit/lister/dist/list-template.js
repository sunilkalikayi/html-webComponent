"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.listTemplate = listTemplate;
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
function _semver() {
  const data = _interopRequireDefault(require("semver"));
  _semver = function () {
    return data;
  };
  return data;
}
function _cliTable() {
  const data = _interopRequireDefault(require("cli-table"));
  _cliTable = function () {
    return data;
  };
  return data;
}
function listTemplate(listScopeResults, json, showRemoteVersion) {
  function tabulateComponent(listScopeResult) {
    const id = listScopeResult.id.toStringWithoutVersion();
    let version = listScopeResult.id.hasVersion() ? listScopeResult.id.version : '<new>';
    if (!json && showRemoteVersion) {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      const color = listScopeResult.remoteVersion && _semver().default.gt(listScopeResult.remoteVersion, version) ? 'red' : null;
      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
      version = color ? _chalk().default[color](version) : version;
    }
    const getFormattedId = () => {
      const {
        deprecated,
        laneReadmeOf
      } = listScopeResult;
      let formattedId = _chalk().default.white(`${id}`);
      if (deprecated) {
        formattedId = _chalk().default.white(`${formattedId} [Deprecated]`);
      }
      if (laneReadmeOf && laneReadmeOf.length > 0) {
        formattedId = `${formattedId}\n`;
        laneReadmeOf.forEach(laneName => {
          formattedId = `${formattedId}${_chalk().default.yellow(`[Lane Readme]: ${laneName}\n`)}`;
        });
      }
      return formattedId;
    };
    const data = {
      id: getFormattedId(),
      localVersion: version,
      currentVersion: listScopeResult.currentlyUsedVersion || 'N/A'
    };
    if (showRemoteVersion) {
      let remoteVersion = listScopeResult.remoteVersion || 'N/A';
      const color =
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      listScopeResult.remoteVersion && _semver().default.gt(listScopeResult.id.version, listScopeResult.remoteVersion) ? 'red' : null;
      remoteVersion = color ? _chalk().default[color](remoteVersion) : remoteVersion;
      data.remoteVersion = remoteVersion;
    }
    return data;
  }
  function toJsonComponent(listScopeResult) {
    const id = listScopeResult.id.toStringWithoutVersion();
    const localVersion = listScopeResult.id.hasVersion() ? listScopeResult.id.version : '<new>';
    const data = {
      id,
      localVersion,
      deprecated: listScopeResult.deprecated,
      currentVersion: listScopeResult.currentlyUsedVersion || 'N/A',
      remoteVersion: listScopeResult.remoteVersion || 'N/A'
    };
    return data;
  }
  if (json) {
    return listScopeResults.map(toJsonComponent);
  }
  const rows = listScopeResults.map(tabulateComponent);
  const head = ['component ID', 'latest in scope', 'used in workspace'];
  if (showRemoteVersion) {
    head.push('latest in remote scope');
  }
  const table = new (_cliTable().default)({
    head,
    style: {
      head: ['cyan']
    }
  });
  rows.map(row => table.push(Object.values(row)));
  return table.toString();
}

//# sourceMappingURL=list-template.js.map