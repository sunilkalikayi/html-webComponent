"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.array.sort.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ListerMain = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _cli() {
  const data = require("@teambit/cli");
  _cli = function () {
    return data;
  };
  return data;
}
function _logger() {
  const data = require("@teambit/logger");
  _logger = function () {
    return data;
  };
  return data;
}
function _workspace() {
  const data = _interopRequireDefault(require("@teambit/workspace"));
  _workspace = function () {
    return data;
  };
  return data;
}
function _loaderMessages() {
  const data = require("@teambit/legacy/dist/cli/loader/loader-messages");
  _loaderMessages = function () {
    return data;
  };
  return data;
}
function _componentId() {
  const data = require("@teambit/component-id");
  _componentId = function () {
    return data;
  };
  return data;
}
function _exceptions() {
  const data = require("@teambit/legacy/dist/consumer/exceptions");
  _exceptions = function () {
    return data;
  };
  return data;
}
function _getRemoteByName() {
  const data = _interopRequireDefault(require("@teambit/legacy/dist/remotes/get-remote-by-name"));
  _getRemoteByName = function () {
    return data;
  };
  return data;
}
function _componentsList() {
  const data = _interopRequireDefault(require("@teambit/legacy/dist/consumer/component/components-list"));
  _componentsList = function () {
    return data;
  };
  return data;
}
function _list() {
  const data = require("./list.cmd");
  _list = function () {
    return data;
  };
  return data;
}
function _lister() {
  const data = require("./lister.aspect");
  _lister = function () {
    return data;
  };
  return data;
}
class ListerMain {
  constructor(logger, workspace) {
    this.logger = logger;
    this.workspace = workspace;
  }
  async remoteList(scopeName, namespacesUsingWildcards) {
    var _this$workspace;
    const remote = await (0, _getRemoteByName().default)(scopeName, (_this$workspace = this.workspace) === null || _this$workspace === void 0 ? void 0 : _this$workspace.consumer);
    this.logger.setStatusLine(_loaderMessages().BEFORE_REMOTE_LIST);
    const legacyListScopeResult = await remote.list(namespacesUsingWildcards);
    return this.convertListScopeResultsFromLegacy(legacyListScopeResult);
  }
  async localList(showAll = false, showRemoteVersion = false, namespacesUsingWildcards) {
    if (!this.workspace) {
      throw new (_exceptions().ConsumerNotFound)();
    }
    this.logger.setStatusLine(_loaderMessages().BEFORE_LOCAL_LIST);
    const componentsList = new (_componentsList().default)(this.workspace.consumer);
    const legacyListScopeResult = await componentsList.listAll(showRemoteVersion, showAll, namespacesUsingWildcards);
    return this.convertListScopeResultsFromLegacy(legacyListScopeResult);
  }
  async convertListScopeResultsFromLegacy(legacyListScopeResult) {
    const results = await Promise.all(legacyListScopeResult.map(async legacyResult => {
      const bitId = legacyResult.id;
      const componentId = this.workspace && !bitId.hasScope() ? await this.workspace.resolveComponentId(bitId) : _componentId().ComponentID.fromLegacy(bitId);
      return {
        id: componentId,
        currentlyUsedVersion: legacyResult.currentlyUsedVersion,
        remoteVersion: legacyResult.remoteVersion,
        deprecated: legacyResult.deprecated,
        laneReadmeOf: legacyResult.laneReadmeOf
      };
    }));
    return results.sort((a, b) => a.id.toString().localeCompare(b.id.toString()));
  }
  static async provider([cli, loggerMain, workspace]) {
    const logger = loggerMain.createLogger(_lister().ListerAspect.id);
    const lister = new ListerMain(logger, workspace);
    cli.register(new (_list().ListCmd)(lister));
    return lister;
  }
}
exports.ListerMain = ListerMain;
(0, _defineProperty2().default)(ListerMain, "slots", []);
(0, _defineProperty2().default)(ListerMain, "dependencies", [_cli().CLIAspect, _logger().LoggerAspect, _workspace().default]);
(0, _defineProperty2().default)(ListerMain, "runtime", _cli().MainRuntime);
_lister().ListerAspect.addRuntime(ListerMain);

//# sourceMappingURL=lister.main.runtime.js.map