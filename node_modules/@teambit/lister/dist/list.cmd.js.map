{"version":3,"names":["ListCmd","constructor","lister","BASE_DOCS_DOMAIN","report","scopeName","listFlags","listScopeResults","getListResults","ids","scope","outdated","decideHeaderSentence","length","chalk","white","bold","R","isEmpty","JSON","stringify","map","result","id","toString","listTemplate","json","namespace","getNamespaceWithWildcard","undefined","hasWildcard","namespaceWithWildcard","remoteList","localList"],"sources":["list.cmd.ts"],"sourcesContent":["import { Command, CommandOptions } from '@teambit/cli';\nimport chalk from 'chalk';\nimport R from 'ramda';\nimport { BASE_DOCS_DOMAIN } from '@teambit/legacy/dist/constants';\nimport hasWildcard from '@teambit/legacy/dist/utils/string/has-wildcard';\nimport { listTemplate } from './list-template';\nimport { ListerMain, ListScopeResult } from './lister.main.runtime';\n\ntype ListFlags = {\n  ids?: boolean;\n  scope?: boolean;\n  json?: boolean;\n  outdated?: boolean;\n  namespace?: string;\n};\n\nexport class ListCmd implements Command {\n  name = 'list [remote-scope]';\n  description = 'list components on a workspace, local scope or a remote scope.';\n  group = 'discover';\n  extendedDescription = `https://${BASE_DOCS_DOMAIN}/reference/cli-reference#list`;\n  alias = 'ls';\n  options = [\n    ['i', 'ids', 'show only component ids unformatted'],\n    ['s', 'scope', 'show only components stored in the local scope, including indirect dependencies'],\n    ['o', 'outdated', 'show latest versions from remotes'],\n    ['j', 'json', 'show the output in JSON format'],\n    ['n', 'namespace <string>', 'show only specified namespace by using wildcards'],\n  ] as CommandOptions;\n  loader = true;\n  migration = true;\n  skipWorkspace = true;\n  remoteOp = true;\n\n  constructor(private lister: ListerMain) {}\n\n  async report([scopeName]: string[], listFlags: ListFlags) {\n    const listScopeResults = await this.getListResults(scopeName, listFlags);\n\n    const { ids, scope = false, outdated = false } = listFlags;\n\n    function decideHeaderSentence() {\n      if (!scope) return `found ${listScopeResults.length} components\\n`;\n      return chalk.white(`found ${listScopeResults.length} components in ${chalk.bold(scopeName)}\\n`);\n    }\n\n    if (R.isEmpty(listScopeResults)) {\n      return chalk.white(decideHeaderSentence());\n    }\n\n    if (ids) return JSON.stringify(listScopeResults.map((result) => result.id.toString()));\n    // TODO - use a cheaper list for ids flag (do not fetch versions at all) @!IMPORTANT\n    return decideHeaderSentence() + listTemplate(listScopeResults, false, outdated);\n  }\n\n  async json([scopeName]: string[], listFlags: ListFlags) {\n    const listScopeResults = await this.getListResults(scopeName, listFlags);\n\n    if (R.isEmpty(listScopeResults)) {\n      return [];\n    }\n\n    const { ids, outdated = false } = listFlags;\n    if (ids) return listScopeResults.map((result) => result.id.toString());\n    return listTemplate(listScopeResults, true, outdated) as Record<string, any>;\n  }\n\n  private async getListResults(\n    scopeName?: string,\n    { namespace, scope, outdated }: ListFlags = {}\n  ): Promise<ListScopeResult[]> {\n    const getNamespaceWithWildcard = () => {\n      if (!namespace) return undefined;\n      if (hasWildcard(namespace)) return namespace;\n      return `${namespace}/*`;\n    };\n    const namespaceWithWildcard = getNamespaceWithWildcard();\n\n    return scopeName\n      ? this.lister.remoteList(scopeName, namespaceWithWildcard)\n      : this.lister.localList(scope, outdated, namespaceWithWildcard);\n  }\n}\n"],"mappings":"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"}