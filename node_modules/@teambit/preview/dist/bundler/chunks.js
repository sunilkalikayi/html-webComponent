"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CHUNK_NAMES = void 0;
exports.generateTemplateEntries = generateTemplateEntries;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
// TODO - we can remove the need to depenedOn preview-root, if we output chunks as "jsonp".
//
// for example:
//  config.entry.someJsonpChunk = {
//    import: "./xxx",
//    library: { type: "jsonp", name: "foobar" }
//  }
// will result in this output:
//  foobar(() => { ...; return MODULE })

const CHUNK_NAMES = {
  previewRoot: 'preview-root',
  peers: 'peers'
};
exports.CHUNK_NAMES = CHUNK_NAMES;
function generateTemplateEntries(options) {
  const previewChunks = {};
  options.previewModules.forEach(({
    name,
    entry,
    include = []
  }) => {
    previewChunks[name] = {
      dependOn: [CHUNK_NAMES.peers, CHUNK_NAMES.previewRoot, ...include],
      import: entry
    };
  });
  return _objectSpread({
    [CHUNK_NAMES.peers]: options.peers,
    [CHUNK_NAMES.previewRoot]: {
      dependOn: [CHUNK_NAMES.peers],
      import: options.previewRootPath
    }
  }, previewChunks);
}

//# sourceMappingURL=chunks.js.map