"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.string.replace.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generatePeerLink = generatePeerLink;
exports.writePeerLink = writePeerLink;
function _path() {
  const data = require("path");
  _path = function () {
    return data;
  };
  return data;
}
function _fsExtra() {
  const data = require("fs-extra");
  _fsExtra = function () {
    return data;
  };
  return data;
}
function _camelcase() {
  const data = _interopRequireDefault(require("camelcase"));
  _camelcase = function () {
    return data;
  };
  return data;
}
function _objectHash() {
  const data = _interopRequireDefault(require("object-hash"));
  _objectHash = function () {
    return data;
  };
  return data;
}
async function writePeerLink(peers, workdir) {
  const content = generatePeerLink(peers);
  const fullpath = (0, _path().join)(workdir, `peers-link.${(0, _objectHash().default)(content)}.js`);
  await (0, _fsExtra().writeFile)(fullpath, content);
  return fullpath;
}

// TODO - this exposes the packages in the "window" strategy,
// should use a better strategy like umd, systemjs, or jsonp

function generatePeerLink(peers) {
  if (!peers) return '';
  const links = peers.map(p => ({
    packageName: p,
    varName: toVarName(p)
  }));
  return `// @ts-nocheck
${links.map(x => `import * as ${x.varName} from "${x.packageName}"`).join(';\n')};

const globalObj = window;

${links.map(({
    varName: localName
  }) => `guard("${localName}", ${localName})`).join(';\n')};

${links.map(x => `globalObj["${x.varName}"] = ${x.varName}`).join(';\n')};

function guard(property, expected) {
  var existing = globalObj[property];

  if (existing === expected && expected !== undefined)
    console.warn('[expose-peers] "' + property + '" already exists in global scope, but with correct value');
  else if (existing !== undefined)
    throw new Error('[expose-peers] "' + property + '" already exists in the global scope, cannot overwrite');
}
`;
}
function toVarName(packageName) {
  return (0, _camelcase().default)(packageName.replace('@', '__').replace('/', '_'), {
    pascalCase: true
  });
}

//# sourceMappingURL=create-peers-link.js.map