"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getArtifactFileMiddleware = getArtifactFileMiddleware;
function _mime() {
  const data = _interopRequireDefault(require("mime"));
  _mime = function () {
    return data;
  };
  return data;
}
function _uiFoundationUiPages() {
  const data = require("@teambit/ui-foundation.ui.pages.static-error");
  _uiFoundationUiPages = function () {
    return data;
  };
  return data;
}
function getArtifactFileMiddleware(logger, getCacheControlFunc) {
  return async (req, res) => {
    try {
      // @ts-ignore
      const artifact = req.artifact;
      // @ts-ignore
      const isLegacyPath = req.isLegacyPath;
      let file;
      if (!isLegacyPath) {
        file = getEnvTemplateFile(artifact, req.params.previewName, req.params.filePath);
      } else {
        file = getPreviewFile(artifact, req.params.previewName, req.params.filePath);
      }
      if (!file) return res.status(404).send((0, _uiFoundationUiPages().noPreview)());
      const contents = file.contents;
      const str = `${file.cwd}/${file.path}`;
      const contentType = _mime().default.getType(str);
      if (contentType) res.set('Content-Type', contentType);
      if (getCacheControlFunc) {
        const cacheControl = getCacheControlFunc(str, contents, contentType);
        if (cacheControl) {
          res.set('Cache-control', cacheControl);
        }
      }
      return res.send(contents);
    } catch (e) {
      logger.error('failed getting preview', e);
      return res.status(500).send((0, _uiFoundationUiPages().serverError)());
    }
  };
}
function getEnvTemplateFile(artifact, previewName, filePath) {
  const prevName = previewName || 'overview';
  const finalFilePath = filePath || `${prevName}.html`;
  const matchedFile = artifact === null || artifact === void 0 ? void 0 : artifact.getFileEndsWith(finalFilePath);
  return matchedFile;
}
function getPreviewFile(artifact, previewName, filePath) {
  let finalFilePath = 'index.html';
  if (previewName || filePath) {
    const parts = [previewName, filePath].filter(x => x);
    finalFilePath = parts.join('/');
  }
  const matchedFile = artifact === null || artifact === void 0 ? void 0 : artifact.getFileEndsWith(finalFilePath);
  return matchedFile;
}

//# sourceMappingURL=artifact-file-middleware.js.map