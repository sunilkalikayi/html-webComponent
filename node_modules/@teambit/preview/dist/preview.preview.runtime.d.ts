import { PubsubPreview } from '@teambit/pubsub';
import { SlotRegistry } from '@teambit/harmony';
import { ComponentID } from '@teambit/component-id';
import { PreviewType } from './preview-type';
import { ModuleFile, PreviewModule } from './types/preview-module';
import { RenderingContext } from './rendering-context';
export { linkModules } from './preview-modules';
export declare type PreviewSlot = SlotRegistry<PreviewType>;
export declare type RenderingContextOptions = {
    aspectsFilter?: string[];
};
export declare type RenderingContextProvider = (options: RenderingContextOptions) => {
    [key: string]: any;
};
export declare type RenderingContextSlot = SlotRegistry<RenderingContextProvider>;
export declare class PreviewPreview {
    /**
     * register to pubsub
     */
    private pubsub;
    /**
     * preview slot.
     */
    private previewSlot;
    private renderingContextSlot;
    constructor(
    /**
     * register to pubsub
     */
    pubsub: PubsubPreview, 
    /**
     * preview slot.
     */
    previewSlot: PreviewSlot, renderingContextSlot: RenderingContextSlot);
    private registerClickPubSub;
    private isDev;
    private isReady;
    private _setupPromise?;
    setup: () => Promise<void>;
    /**
     * render the preview.
     */
    render: (rootExt?: string | undefined) => Promise<void>;
    setViewport(): void;
    reportSize(): void;
    getPreviewModule(previewName: string, id: ComponentID): Promise<PreviewModule>;
    fetchComponentPreview(id: ComponentID, name: string): Promise<Record<string, ModuleFile[]>>;
    private addComponentFileElement;
    private fetchComponentPreviewFiles;
    private addComponentFileScriptElement;
    private addComponentFileLinkElement;
    private loadPreviewScript;
    private getComponentAspects;
    /**
     * register a new preview.
     */
    registerPreview(preview: PreviewType): this;
    /**
     * get the preview rendering context.
     */
    getRenderingContext(aspectsFilter?: string[]): RenderingContext;
    /**
     * allows aspects to add rendering contexts.
     * render context is available through all preview definitions.
     */
    registerRenderContext(renderContext: RenderingContextProvider): this;
    getDefault(): string;
    private getPreview;
    getParam(query: string, param: string): string | null;
    getQuery(): string;
    private getLocation;
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static dependencies: import("@teambit/harmony").Aspect[];
    static slots: (((registerFn: () => string) => SlotRegistry<PreviewType>) | ((registerFn: () => string) => SlotRegistry<RenderingContextProvider>))[];
    static provider([pubsub]: [PubsubPreview], config: any, [previewSlot, renderingContextSlot]: [PreviewSlot, RenderingContextSlot]): Promise<PreviewPreview>;
}
