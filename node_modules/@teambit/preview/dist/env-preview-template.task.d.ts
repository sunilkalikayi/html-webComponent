import { BuildContext, BuiltTaskResult, BuildTask, TaskLocation, ComponentResult } from '@teambit/builder';
import { AspectLoaderMain } from '@teambit/aspect-loader';
import { BundlerContext, BundlerResult } from '@teambit/bundler';
import type { EnvsMain } from '@teambit/envs';
import { Logger } from '@teambit/logger';
import { DependencyResolverMain } from '@teambit/dependency-resolver';
import type { PreviewMain } from './preview.main.runtime';
export declare type ModuleExpose = {
    name: string;
    path: string;
    include?: string[];
};
export declare const GENERATE_ENV_TEMPLATE_TASK_NAME = "GenerateEnvTemplate";
export declare class EnvPreviewTemplateTask implements BuildTask {
    private preview;
    private envs;
    private aspectLoader;
    private dependencyResolver;
    private logger;
    aspectId: string;
    name: string;
    location: TaskLocation;
    constructor(preview: PreviewMain, envs: EnvsMain, aspectLoader: AspectLoaderMain, dependencyResolver: DependencyResolverMain, logger: Logger);
    execute(context: BuildContext): Promise<BuiltTaskResult>;
    private runBundlerForGroups;
    private shouldUseDefaultBundler;
    private getEnvTargetFromComponent;
    private generateEntries;
    computeResults(context: BundlerContext, results: BundlerResult[]): Promise<{
        componentsResults: ComponentResult[];
        artifacts: {
            name: string;
            globPatterns: string[];
            rootDir: string;
        }[];
    }>;
    private getPreviewModules;
    private computeOutputPath;
}
export declare function getArtifactDirectory(): string;
export declare function getArtifactDef(): {
    name: string;
    globPatterns: string[];
    rootDir: string;
}[];
