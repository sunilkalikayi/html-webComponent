import { Component } from '@teambit/component';
import { ComponentResult } from '@teambit/builder';
import type { PkgMain } from '@teambit/pkg';
import type { DependencyResolverMain } from '@teambit/dependency-resolver';
import type { BundlerResult, BundlerContext, Target } from '@teambit/bundler';
import { BundlingStrategy, ComputeTargetsContext } from '../bundling-strategy';
import type { PreviewDefinition } from '../preview-definition';
import type { PreviewMain } from '../preview.main.runtime';
export declare const PREVIEW_CHUNK_SUFFIX = "preview";
export declare const COMPONENT_CHUNK_SUFFIX = "component";
export declare const PREVIEW_CHUNK_FILENAME_SUFFIX: string;
export declare const COMPONENT_CHUNK_FILENAME_SUFFIX: string;
export declare const COMPONENT_STRATEGY_SIZE_KEY_NAME = "size";
export declare const COMPONENT_STRATEGY_ARTIFACT_NAME = "preview-component";
declare type ComponentEntry = {
    component: Component;
    entries: Object;
};
/**
 * bundles all components in a given env into the same bundle.
 */
export declare class ComponentBundlingStrategy implements BundlingStrategy {
    private preview;
    private pkg;
    private dependencyResolver;
    name: string;
    constructor(preview: PreviewMain, pkg: PkgMain, dependencyResolver: DependencyResolverMain);
    computeTargets(context: ComputeTargetsContext, previewDefs: PreviewDefinition[]): Promise<Target[]>;
    computeComponentEntry(previewDefs: PreviewDefinition[], component: Component, context: ComputeTargetsContext): Promise<ComponentEntry>;
    private getComponentChunkId;
    private getComponentChunkFileName;
    private getAssetAbsolutePath;
    private getAssetFilename;
    copyAssetsToCapsules(context: BundlerContext, result: BundlerResult): void;
    private findAssetsForComponent;
    private getArtifactDirectory;
    private computeComponentMetadata;
    computeResults(context: BundlerContext, results: BundlerResult[]): Promise<{
        componentsResults: ComponentResult[];
        artifacts: {
            name: string;
            globPatterns: string[];
            rootDir: string;
        }[];
    }>;
    computeTargetResult(context: BundlerContext, result: BundlerResult): Promise<ComponentResult[]>;
    private getArtifactDef;
    getDirName(context: ComputeTargetsContext): string;
    private getOutputPath;
    private getPaths;
    private getComponentOutputPath;
    private computePaths;
}
export {};
