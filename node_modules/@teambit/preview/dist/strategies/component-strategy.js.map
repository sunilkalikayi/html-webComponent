{"version":3,"names":["PREVIEW_CHUNK_SUFFIX","COMPONENT_CHUNK_SUFFIX","PREVIEW_CHUNK_FILENAME_SUFFIX","COMPONENT_CHUNK_FILENAME_SUFFIX","COMPONENT_STRATEGY_SIZE_KEY_NAME","COMPONENT_STRATEGY_ARTIFACT_NAME","ComponentBundlingStrategy","constructor","preview","pkg","dependencyResolver","computeTargets","context","previewDefs","outputPath","getOutputPath","existsSync","mkdirpSync","origComponents","capsuleNetwork","originalSeedersCapsules","map","capsule","component","entriesArr","Promise","all","computeComponentEntry","chunkSize","config","maxChunkSize","chunks","chunk","peers","getPeerDependenciesListFromEnv","env","targets","currentChunk","entries","components","forEach","entry","Object","assign","push","hostDependencies","aliasHostDependencies","externalizeHostDependencies","componentPreviewPath","computePaths","componentPath","getPaths","mainFile","componentPreview","getComponentChunkId","id","splitComponentBundle","toStringWithoutVersion","undefined","filename","getComponentChunkFileName","toString","fsCompatible","ignoreVersion","import","dependOn","library","name","type","componentId","idstr","suffix","getAssetAbsolutePath","asset","path","join","getAssetFilename","split","copyAssetsToCapsules","result","graphCapsules","getCapsule","files","findAssetsForComponent","assets","entriesAssetsMap","artifactDirFullPath","getArtifactDirectory","filePath","PreviewOutputFileNotFound","destFilePath","dirname","fs","copyFileSync","componentEntryId","componentPreviewEntryId","componentFiles","componentAuxiliaryFiles","auxiliaryAssets","componentPreviewFiles","componentPreviewAuxiliaryFiles","concat","CAPSULE_ARTIFACTS_DIR","computeComponentMetadata","file","basename","size","compressedSize","filesTotalSize","assetsSize","compressedTotalFiles","compressedAssetsSize","assetsTotalSize","auxiliaryAssetsSize","compressedTotalAssets","compressedAuxiliaryAssetsSize","totalSize","compressedTotal","metadata","totalFiles","totalAssets","total","computeResults","results","componentsResults","flatten","computeTargetResult","artifacts","getArtifactDef","isEmpty","errors","err","message","warning","warnings","startTime","endTime","globPatterns","rootDir","getDirName","envName","replace","resolve","capsulesRootDir","compiler","getCompiler","getDistPathBySrcPath","relative","getComponentOutputPath","defs","BitError","moduleMapsPromise","previewDef","moduleMap","getModuleMap","getMetadata","maybeFiles","get","prefix","paths","compiledPaths","moduleMaps","contents","generateComponentLink","writeLinkContents"],"sources":["component-strategy.ts"],"sourcesContent":["import { join, resolve, basename, dirname } from 'path';\nimport { existsSync, mkdirpSync } from 'fs-extra';\nimport { Component } from '@teambit/component';\nimport { ComponentID } from '@teambit/component-id';\nimport { flatten, isEmpty, chunk } from 'lodash';\nimport { Compiler } from '@teambit/compiler';\nimport type { AbstractVinyl } from '@teambit/legacy/dist/consumer/component/sources';\nimport type { Capsule } from '@teambit/isolator';\nimport { CAPSULE_ARTIFACTS_DIR, ComponentResult } from '@teambit/builder';\nimport type { PkgMain } from '@teambit/pkg';\nimport { BitError } from '@teambit/bit-error';\nimport type { DependencyResolverMain } from '@teambit/dependency-resolver';\nimport type { BundlerResult, BundlerContext, Asset, BundlerEntryMap, EntriesAssetsMap, Target } from '@teambit/bundler';\nimport { BundlingStrategy, ComputeTargetsContext } from '../bundling-strategy';\nimport type { PreviewDefinition } from '../preview-definition';\nimport type { ComponentPreviewMetaData, PreviewMain } from '../preview.main.runtime';\nimport { generateComponentLink } from './generate-component-link';\nimport { PreviewOutputFileNotFound } from '../exceptions';\n\nexport const PREVIEW_CHUNK_SUFFIX = 'preview';\nexport const COMPONENT_CHUNK_SUFFIX = 'component';\nexport const PREVIEW_CHUNK_FILENAME_SUFFIX = `${PREVIEW_CHUNK_SUFFIX}.js`;\nexport const COMPONENT_CHUNK_FILENAME_SUFFIX = `${COMPONENT_CHUNK_SUFFIX}.js`;\n\nexport const COMPONENT_STRATEGY_SIZE_KEY_NAME = 'size';\nexport const COMPONENT_STRATEGY_ARTIFACT_NAME = 'preview-component';\n\ntype ComponentEntry = {\n  component: Component;\n  entries: Object;\n};\n/**\n * bundles all components in a given env into the same bundle.\n */\nexport class ComponentBundlingStrategy implements BundlingStrategy {\n  name = 'component';\n\n  constructor(private preview: PreviewMain, private pkg: PkgMain, private dependencyResolver: DependencyResolverMain) {}\n\n  async computeTargets(context: ComputeTargetsContext, previewDefs: PreviewDefinition[]): Promise<Target[]> {\n    const outputPath = this.getOutputPath(context);\n    if (!existsSync(outputPath)) mkdirpSync(outputPath);\n\n    // const entriesArr = flatten(\n    //   await Promise.all(\n    //     context.capsuleNetwork.seedersCapsules.map((capsule) => {\n    //       return this.computeComponentEntry(previewDefs, capsule.component, context);\n    //     }, {})\n    //   )\n    // );\n\n    const origComponents = context.capsuleNetwork.originalSeedersCapsules.map((capsule) => capsule.component);\n\n    const entriesArr = await Promise.all(\n      origComponents.map((component) => {\n        return this.computeComponentEntry(previewDefs, component, context);\n      }, {})\n    );\n\n    const chunkSize = this.preview.config.maxChunkSize;\n\n    const chunks = chunkSize ? chunk(entriesArr, chunkSize) : [entriesArr];\n\n    const peers = await this.dependencyResolver.getPeerDependenciesListFromEnv(context.env);\n\n    const targets = chunks.map((currentChunk) => {\n      const entries: BundlerEntryMap = {};\n      const components: Component[] = [];\n      currentChunk.forEach((entry) => {\n        Object.assign(entries, entry.entries);\n        components.push(entry.component);\n      });\n\n      return {\n        entries,\n        components,\n        outputPath,\n        /* It's a path to the root of the host component. */\n        // hostRootDir, handle this\n        hostDependencies: peers,\n        aliasHostDependencies: true,\n        externalizeHostDependencies: true,\n      };\n    });\n\n    return targets;\n    // const entries = entriesArr.reduce((entriesMap, entry) => {\n    //   entriesMap[entry.library.name] = entry;\n    //   return entriesMap;\n    // }, {});\n\n    // const modules = await Promise.all(entriesArr.map(async (entry) => {\n    //   const dependencies = await this.dependencyResolver.getDependencies(entry.component);\n    //   const manifest = dependencies.toDependenciesManifest();\n    //   const peer = Object.entries(manifest.peerDependencies || {}).reduce((acc, [packageName, version]) => {\n    //     acc[packageName] = {\n    //       singleton: true,\n    //       requiredVersion: version\n    //     };\n\n    //     return acc;\n    //   }, {});\n    //   // console.log(entry);\n    //   return {\n    //     name: entry.library.name,\n    //     exposes: {\n    //       '.': entry.import || ''\n    //     },\n    //     shared: {\n    //       ...manifest.dependencies,\n    //       ...peer\n    //     },\n    //   };\n    // }));\n  }\n\n  async computeComponentEntry(\n    previewDefs: PreviewDefinition[],\n    component: Component,\n    context: ComputeTargetsContext\n  ): Promise<ComponentEntry> {\n    const componentPreviewPath = await this.computePaths(previewDefs, context, component);\n    const [componentPath] = this.getPaths(context, component, [component.mainFile]);\n\n    const chunks = {\n      componentPreview: this.getComponentChunkId(component.id, 'preview'),\n      component: context.splitComponentBundle ? component.id.toStringWithoutVersion() : undefined,\n    };\n\n    const entries = {\n      [chunks.componentPreview]: {\n        filename: this.getComponentChunkFileName(\n          component.id.toString({\n            fsCompatible: true,\n            ignoreVersion: true,\n          }),\n          'preview'\n        ),\n        import: componentPreviewPath,\n        dependOn: chunks.component,\n        library: { name: chunks.componentPreview, type: 'umd' },\n      },\n    };\n\n    if (chunks.component) {\n      entries[chunks.component] = {\n        filename: this.getComponentChunkFileName(\n          component.id.toString({\n            fsCompatible: true,\n            ignoreVersion: true,\n          }),\n          'component'\n        ),\n        dependOn: undefined,\n        import: componentPath,\n        library: { name: chunks.component, type: 'umd' },\n      };\n    }\n\n    return { component, entries };\n  }\n\n  private getComponentChunkId(componentId: ComponentID, type: 'component' | 'preview') {\n    const id =\n      type === 'component'\n        ? componentId.toStringWithoutVersion()\n        : `${componentId.toStringWithoutVersion()}-${PREVIEW_CHUNK_SUFFIX}`;\n    return id;\n  }\n\n  private getComponentChunkFileName(idstr: string, type: 'component' | 'preview') {\n    const suffix = type === 'component' ? COMPONENT_CHUNK_FILENAME_SUFFIX : PREVIEW_CHUNK_FILENAME_SUFFIX;\n    return `${idstr}-${suffix}`;\n  }\n\n  private getAssetAbsolutePath(context: BundlerContext, asset: Asset): string {\n    const path = this.getOutputPath(context);\n    return join(path, 'public', this.getAssetFilename(asset));\n  }\n\n  private getAssetFilename(asset: Asset): string {\n    // handle cases where the asset name is something like my-image.svg?hash (while the filename in the fs is just my-image.svg)\n    const [name] = asset.name.split('?');\n    return name;\n  }\n\n  copyAssetsToCapsules(context: BundlerContext, result: BundlerResult) {\n    context.components.forEach((component) => {\n      const capsule = context.capsuleNetwork.graphCapsules.getCapsule(component.id);\n      if (!capsule) return;\n      const files = this.findAssetsForComponent(component, result.assets, result.entriesAssetsMap || {});\n      if (!files) return;\n      const artifactDirFullPath = join(capsule.path, this.getArtifactDirectory());\n      // We don't use the mkdirSync as it uses the capsule fs which uses memfs, which doesn't know to handle nested none existing folders\n      mkdirpSync(artifactDirFullPath);\n\n      files.forEach((asset) => {\n        const filePath = this.getAssetAbsolutePath(context, asset);\n        if (!existsSync(filePath)) {\n          throw new PreviewOutputFileNotFound(component.id, filePath);\n        }\n        const destFilePath = join(artifactDirFullPath, this.getAssetFilename(asset));\n        mkdirpSync(dirname(destFilePath));\n        capsule.fs.copyFileSync(filePath, destFilePath);\n      });\n    });\n  }\n\n  // private getCssFileName(componentId: ComponentID): string {\n  //   return `${componentId.toString({ ignoreVersion: true, fsCompatible: true })}.css`;\n  // }\n\n  private findAssetsForComponent(\n    component: Component,\n    assets: Asset[],\n    entriesAssetsMap: EntriesAssetsMap\n  ): Asset[] | undefined {\n    if (!assets) return undefined;\n\n    const componentEntryId = component.id.toStringWithoutVersion();\n    const componentPreviewEntryId = this.getComponentChunkId(component.id, 'preview');\n    const componentFiles = entriesAssetsMap[componentEntryId]?.assets || [];\n    const componentAuxiliaryFiles = entriesAssetsMap[componentEntryId]?.auxiliaryAssets || [];\n    const componentPreviewFiles = entriesAssetsMap[componentPreviewEntryId]?.assets || [];\n    const componentPreviewAuxiliaryFiles = entriesAssetsMap[componentPreviewEntryId]?.auxiliaryAssets || [];\n\n    const files = componentFiles\n      .concat(componentAuxiliaryFiles)\n      .concat(componentPreviewFiles)\n      .concat(componentPreviewAuxiliaryFiles);\n    return files;\n  }\n\n  private getArtifactDirectory() {\n    return join(CAPSULE_ARTIFACTS_DIR, 'preview');\n  }\n\n  private computeComponentMetadata(\n    context: BundlerContext,\n    result: BundlerResult,\n    component: Component\n  ): ComponentPreviewMetaData {\n    const componentEntryId = component.id.toStringWithoutVersion();\n    if (!result?.entriesAssetsMap || !result?.entriesAssetsMap[componentEntryId]) {\n      return {};\n    }\n    const files = (result.entriesAssetsMap[componentEntryId]?.assets || []).map((file) => {\n      return {\n        name: basename(file.name),\n        size: file.size,\n        compressedSize: file.compressedSize,\n      };\n    });\n    const filesTotalSize = result.entriesAssetsMap[componentEntryId]?.assetsSize || 0;\n    const compressedTotalFiles = result.entriesAssetsMap[componentEntryId]?.compressedAssetsSize || 0;\n    const assets = (result.entriesAssetsMap[componentEntryId]?.auxiliaryAssets || []).map((file) => {\n      return {\n        name: basename(file.name),\n        size: file.size,\n        compressedSize: file.compressedSize,\n      };\n    });\n    const assetsTotalSize = result.entriesAssetsMap[componentEntryId]?.auxiliaryAssetsSize || 0;\n    const compressedTotalAssets = result.entriesAssetsMap[componentEntryId]?.compressedAuxiliaryAssetsSize || 0;\n    const totalSize = filesTotalSize + assetsTotalSize;\n    const compressedTotal = compressedTotalFiles + compressedTotalAssets;\n\n    const metadata = {\n      [COMPONENT_STRATEGY_SIZE_KEY_NAME]: {\n        files,\n        assets,\n        totalFiles: filesTotalSize,\n        totalAssets: assetsTotalSize,\n        total: totalSize,\n        compressedTotalFiles,\n        compressedTotalAssets,\n        compressedTotal,\n      },\n    };\n\n    return metadata;\n  }\n\n  async computeResults(context: BundlerContext, results: BundlerResult[]) {\n    const componentsResults = flatten(\n      await Promise.all(results.map((result) => this.computeTargetResult(context, result)))\n    );\n\n    const artifacts = this.getArtifactDef();\n\n    return {\n      componentsResults,\n      artifacts,\n    };\n  }\n\n  async computeTargetResult(context: BundlerContext, result: BundlerResult) {\n    if (isEmpty(result.errors)) {\n      // In case there are errors files will not be emitted so trying to copy them will fail anyway\n      this.copyAssetsToCapsules(context, result);\n    }\n\n    const componentsResults: ComponentResult[] = result.components.map((component) => {\n      const metadata = this.computeComponentMetadata(context, result, component);\n      return {\n        component,\n        metadata,\n        errors: result.errors.map((err) => (typeof err === 'string' ? err : err.message)),\n        warning: result.warnings,\n        startTime: result.startTime,\n        endTime: result.endTime,\n      };\n    });\n\n    return componentsResults;\n  }\n\n  private getArtifactDef() {\n    // eslint-disable-next-line @typescript-eslint/prefer-as-const\n    // const env: 'env' = 'env';\n    // const rootDir = this.getDirName(context);\n\n    return [\n      {\n        name: COMPONENT_STRATEGY_ARTIFACT_NAME,\n        globPatterns: ['**'],\n        rootDir: this.getArtifactDirectory(),\n        // context: env,\n      },\n    ];\n  }\n\n  getDirName(context: ComputeTargetsContext) {\n    const envName = context.id.replace('/', '__');\n    return `${envName}-preview`;\n  }\n\n  private getOutputPath(context: ComputeTargetsContext) {\n    return resolve(`${context.capsuleNetwork.capsulesRootDir}/${this.getDirName(context)}`);\n  }\n\n  private getPaths(context: ComputeTargetsContext, component: Component, files: AbstractVinyl[]) {\n    const capsule = context.capsuleNetwork.graphCapsules.getCapsule(component.id);\n    if (!capsule) return [];\n    const compiler: Compiler = context.env.getCompiler();\n    return files.map((file) => join(capsule.path, compiler.getDistPathBySrcPath(file.relative)));\n  }\n\n  private getComponentOutputPath(capsule: Capsule) {\n    return resolve(`${capsule.path}`);\n  }\n\n  private async computePaths(\n    defs: PreviewDefinition[],\n    context: ComputeTargetsContext,\n    component: Component\n  ): Promise<string> {\n    // const previewMain = await this.preview.writePreviewRuntime(context);\n    const capsule = context.capsuleNetwork.graphCapsules.getCapsule(component.id);\n    // if (!capsule) return undefined;\n    if (!capsule)\n      throw new BitError(\n        `could not find capsule for component ${component.id.toString()} during compute paths to bundle`\n      );\n    const moduleMapsPromise = defs.map(async (previewDef) => {\n      const moduleMap = await previewDef.getModuleMap([component]);\n      const metadata = previewDef.getMetadata ? await previewDef.getMetadata(component) : undefined;\n      const maybeFiles = moduleMap.get(component);\n      if (!maybeFiles || !capsule) return { prefix: previewDef.prefix, paths: [] };\n\n      const [, files] = maybeFiles;\n      const compiledPaths = this.getPaths(context, component, files);\n\n      return {\n        prefix: previewDef.prefix,\n        paths: compiledPaths,\n        metadata,\n      };\n    });\n\n    const moduleMaps = await Promise.all(moduleMapsPromise);\n\n    const contents = generateComponentLink(moduleMaps);\n    return this.preview.writeLinkContents(contents, this.getComponentOutputPath(capsule), 'preview');\n    // return flatten(moduleMaps);\n  }\n}\n"],"mappings":"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"}