"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PreviewStartPlugin = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _react() {
  const data = _interopRequireWildcard(require("react"));
  _react = function () {
    return data;
  };
  return data;
}
function _lodash() {
  const data = require("lodash");
  _lodash = function () {
    return data;
  };
  return data;
}
function _previewCli() {
  const data = require("@teambit/preview.cli.preview-server-status");
  _previewCli = function () {
    return data;
  };
  return data;
}
function _workspace() {
  const data = require("@teambit/workspace");
  _workspace = function () {
    return data;
  };
  return data;
}
function _previewCli2() {
  const data = require("@teambit/preview.cli.webpack-events-listener");
  _previewCli2 = function () {
    return data;
  };
  return data;
}
function _compiler() {
  const data = require("@teambit/compiler");
  _compiler = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
class PreviewStartPlugin {
  constructor(workspace, bundler, ui, pubsub, logger) {
    this.workspace = workspace;
    this.bundler = bundler;
    this.ui = ui;
    this.pubsub = pubsub;
    this.logger = logger;
    (0, _defineProperty2().default)(this, "previewServers", []);
    (0, _defineProperty2().default)(this, "setReady", void 0);
    (0, _defineProperty2().default)(this, "readyPromise", new Promise(resolve => this.setReady = resolve));
    (0, _defineProperty2().default)(this, "initialState", {});
    (0, _defineProperty2().default)(this, "updateServers", servers => {
      this.initialState = typeof servers === 'function' ? servers(this.initialState) : servers;
      return servers;
    });
    (0, _defineProperty2().default)(this, "render", () => {
      const [servers, setServers] = (0, _react().useState)(this.initialState);
      this.updateServers = setServers;
      this.initialState = {};
      (0, _react().useEffect)(() => {
        const noneAreCompiling = Object.values(servers).every(x => !x.compiling);
        if (noneAreCompiling) this.setReady();
      }, [servers]);
      return /*#__PURE__*/_react().default.createElement(_previewCli().PreviewServerStatus, {
        previewServers: this.previewServers,
        serverStats: servers
      });
    });
  }
  async initiate(options) {
    this.listenToDevServers();
    const components = await this.workspace.byPattern(options.pattern || '');
    // TODO: logic for creating preview servers must be refactored to this aspect from the DevServer aspect.
    const previewServers = await this.bundler.devServer(components);
    // eslint-disable-next-line @typescript-eslint/no-misused-promises
    previewServers.forEach(server => server.listen());
    // DON'T add wait! this promise never resolve so it's stop all the start process!
    this.workspace.watcher.watchAll({
      spawnTSServer: true,
      checkTypes: _workspace().CheckTypes.None,
      preCompile: false,
      initiator: _compiler().CompilationInitiator.Start
    }).catch(err => {
      const msg = `watcher found an error`;
      this.logger.error(msg, err);
      this.logger.console(`${msg}, ${err.message}`);
    });
    this.previewServers = this.previewServers.concat(previewServers);
  }
  getProxy() {
    const proxyConfigs = this.previewServers.map(server => {
      return [{
        context: [`/preview/${server.context.envRuntime.id}`],
        target: `http://localhost:${server.port}`
      }, {
        context: [`/_hmr/${server.context.envRuntime.id}`],
        target: `http://localhost:${server.port}`,
        ws: true
      }];
    });
    return (0, _lodash().flatten)(proxyConfigs);
  }

  // TODO: this should be a part of the devServer
  listenToDevServers() {
    // keep state changes immutable!
    (0, _previewCli2().SubscribeToWebpackEvents)(this.pubsub, {
      onStart: id => {
        this.updateServers(state => _objectSpread(_objectSpread({}, state), {}, {
          [id]: {
            compiling: true
          }
        }));
      },
      onDone: (id, results) => {
        this.updateServers(state => _objectSpread(_objectSpread({}, state), {}, {
          [id]: results
        }));
      }
    });
  }
  get whenReady() {
    return this.readyPromise;
  }
}
exports.PreviewStartPlugin = PreviewStartPlugin;

//# sourceMappingURL=preview.start-plugin.js.map