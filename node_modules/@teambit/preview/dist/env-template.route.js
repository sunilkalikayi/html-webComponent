"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EnvTemplateRoute = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _uiFoundationUiPages() {
  const data = require("@teambit/ui-foundation.ui.pages.static-error");
  _uiFoundationUiPages = function () {
    return data;
  };
  return data;
}
function _artifactFileMiddleware() {
  const data = require("./artifact-file-middleware");
  _artifactFileMiddleware = function () {
    return data;
  };
  return data;
}
// Week for now
const CACHE_MAX_AGE = 60 * 60 * 24 * 7;
const getCacheControl = (_filePath, _contents, mimeType) => {
  // Do not cache the html files
  if (mimeType && mimeType === 'text/html') {
    return undefined;
  }
  return `private, max-age=${CACHE_MAX_AGE}`;
};
class EnvTemplateRoute {
  constructor(
  /**
   * preview extension.
   */
  preview, logger) {
    this.preview = preview;
    this.logger = logger;
    (0, _defineProperty2().default)(this, "route", `/env-template/:previewName/:filePath(*)`);
    (0, _defineProperty2().default)(this, "method", 'get');
    (0, _defineProperty2().default)(this, "resolveComponent", false);
    (0, _defineProperty2().default)(this, "middlewares", [async (req, res, next) => {
      try {
        // @ts-ignore TODO: @guy please fix.
        // const component = req.component as Component | undefined;
        // if (!component) return res.status(404).send(noPreview());

        let artifact;
        // TODO - prevent error `getVinylsAndImportIfMissing is not a function` #4680
        try {
          const {
            componentId: envId
          } = req.params;
          artifact = await this.preview.getEnvTemplateByEnvId(envId);
        } catch (e) {
          this.logger.error(`getEnvTemplateByEnvId has failed`, e);
          return res.status(404).send((0, _uiFoundationUiPages().noPreview)());
        }

        // @ts-ignore
        req.artifact = artifact;
        // @ts-ignore
        req.isLegacyPath = false;
        return next();
      } catch (e) {
        this.logger.error('failed getting preview', e);
        return res.status(500).send((0, _uiFoundationUiPages().serverError)());
      }
    }, (0, _artifactFileMiddleware().getArtifactFileMiddleware)(this.logger, getCacheControl)]);
  }
}
exports.EnvTemplateRoute = EnvTemplateRoute;

//# sourceMappingURL=env-template.route.js.map