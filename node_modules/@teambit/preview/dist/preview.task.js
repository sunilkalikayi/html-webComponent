"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PreviewTask = exports.PREVIEW_TASK_NAME = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _path() {
  const data = require("path");
  _path = function () {
    return data;
  };
  return data;
}
function _builder() {
  const data = require("@teambit/builder");
  _builder = function () {
    return data;
  };
  return data;
}
const PREVIEW_TASK_NAME = 'GeneratePreview';
exports.PREVIEW_TASK_NAME = PREVIEW_TASK_NAME;
class PreviewTask {
  constructor(
  /**
   * bundler extension.
   */
  bundler,
  /**
   * preview extension.
   */
  preview, dependencyResolver, logger) {
    this.bundler = bundler;
    this.preview = preview;
    this.dependencyResolver = dependencyResolver;
    this.logger = logger;
    (0, _defineProperty2().default)(this, "aspectId", 'teambit.preview/preview');
    (0, _defineProperty2().default)(this, "name", PREVIEW_TASK_NAME);
    (0, _defineProperty2().default)(this, "location", 'end');
  }
  // readonly dependencies = [CompilerAspect.id];

  async execute(context) {
    var _envPreviewConfig$spl;
    const defs = this.preview.getDefs();
    const url = `/preview/${context.envRuntime.id}`;
    const bundlingStrategy = this.preview.getBundlingStrategy(context.env);
    const envPreviewConfig = this.preview.getEnvPreviewConfig(context.env);
    const splitComponentBundle = (_envPreviewConfig$spl = envPreviewConfig.splitComponentBundle) !== null && _envPreviewConfig$spl !== void 0 ? _envPreviewConfig$spl : false;
    const computeTargetsContext = Object.assign(context, {
      splitComponentBundle
    });
    const targets = await bundlingStrategy.computeTargets(computeTargetsContext, defs, this);
    const bundlerContext = Object.assign(context, {
      targets,
      compress: bundlingStrategy.name !== 'env' && splitComponentBundle,
      entry: [],
      publicPath: this.getPreviewDirectory(context),
      rootPath: url,
      development: context.dev,
      metaData: {
        initiator: `${PREVIEW_TASK_NAME} task`,
        envId: context.id
      }
    });
    const bundler = await context.env.getBundler(bundlerContext);
    const bundlerResults = await bundler.run();
    const results = bundlingStrategy.computeResults(bundlerContext, bundlerResults, this);
    return results;
  }
  getLinkFileDirectory() {
    return (0, _path().join)(_builder().CAPSULE_ARTIFACTS_DIR, 'preview-links');
  }
  getPreviewDirectory(context) {
    const outputPath = (0, _path().resolve)(`${context.id}/public`);
    return outputPath;
  }
  getPathsFromMap(capsule, moduleMap, context) {
    const compiler = context.env.getCompiler(context);
    return moduleMap.map(files => {
      return files.map(file => (0, _path().join)(capsule.path, compiler.getDistPathBySrcPath(file.relative)));
    });
  }
}
exports.PreviewTask = PreviewTask;

//# sourceMappingURL=preview.task.js.map