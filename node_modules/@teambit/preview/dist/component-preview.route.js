"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ComponentPreviewRoute = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _uiFoundationUiPages() {
  const data = require("@teambit/ui-foundation.ui.pages.static-error");
  _uiFoundationUiPages = function () {
    return data;
  };
  return data;
}
function _artifactFileMiddleware() {
  const data = require("./artifact-file-middleware");
  _artifactFileMiddleware = function () {
    return data;
  };
  return data;
}
class ComponentPreviewRoute {
  constructor(
  /**
   * preview extension.
   */
  preview, logger) {
    this.preview = preview;
    this.logger = logger;
    (0, _defineProperty2().default)(this, "route", `/component-preview/:filePath(*)`);
    (0, _defineProperty2().default)(this, "method", 'get');
    (0, _defineProperty2().default)(this, "middlewares", [async (req, res, next) => {
      try {
        let isLegacyPath = false;
        // @ts-ignore TODO: @guy please fix.
        const component = req.component;
        if (!component) return res.status(404).send((0, _uiFoundationUiPages().noPreview)());
        let artifact;
        // TODO - prevent error `getVinylsAndImportIfMissing is not a function` #4680
        try {
          isLegacyPath = true;
          artifact = await this.preview.getPreview(component);
        } catch (e) {
          this.logger.error(`preview.getPreview has failed`, e);
          return res.status(404).send((0, _uiFoundationUiPages().noPreview)());
        }
        // @ts-ignore
        req.artifact = artifact;
        // @ts-ignore
        req.isLegacyPath = isLegacyPath;
        return next();
      } catch (e) {
        this.logger.error('failed getting preview', e);
        return res.status(500).send((0, _uiFoundationUiPages().serverError)());
      }
    }, (0, _artifactFileMiddleware().getArtifactFileMiddleware)(this.logger)]);
  }
}
exports.ComponentPreviewRoute = ComponentPreviewRoute;

//# sourceMappingURL=component-preview.route.js.map