{"version":3,"names":["StatusMain","constructor","workspace","issues","insights","remove","status","ConsumerNotFound","loader","start","BEFORE_STATUS","consumer","laneObj","getCurrentLaneObject","componentsList","ComponentsList","loadOpts","loadDocs","loadCompositions","newComponents","listNewComponents","modifiedComponents","listModifiedComponents","stagedComponents","listExportPendingComponents","addRemovedStagedIfNeeded","stagedComponentsWithVersions","pMapSeries","stagedComp","versions","getLocalTagsOrHashes","scope","objects","id","toBitId","autoTagPendingComponents","listAutoTagPendingComponents","autoTagPendingComponentsIds","map","component","allInvalidComponents","listInvalidComponents","locallySoftRemoved","listLocallySoftRemoved","remotelySoftRemoved","listRemotelySoftRemoved","importPendingComponents","filter","c","error","ComponentsPendingImport","i","invalidComponents","outdatedComponents","listOutdatedComponents","mergePendingComponents","listMergePendingComponents","newAndModifiedLegacy","concat","issuesToIgnore","getIssuesToIgnoreGlobally","length","newAndModified","getManyByLegacy","triggerAddComponentIssues","removeIgnoredIssuesFromComponents","componentsWithIssues","isEmpty","componentsDuringMergeState","listDuringMergeStateComponents","softTaggedComponents","listSoftTaggedComponents","snappedComponents","listSnappedComponentsOnMain","pendingUpdatesFromMain","listUpdatesFromMainPending","updatesFromForked","listUpdatesFromForked","currentLaneId","getCurrentLaneId","currentLane","forkedLaneId","forkedFrom","Analytics","setExtraData","convertBitIdToComponentIdsAndSort","ids","ComponentID","sortIds","resolveMultipleComponentIds","convertObjToComponentIdsAndSort","objectsWithId","results","Promise","all","obj","resolveComponentId","sort","a","b","toString","localeCompare","onDestroy","latestVersion","divergeData","diverge","removedStagedIds","getRemovedStaged","removedStagedBitIds","_legacy","nonExistsInStaged","find","isEqualWithoutVersion","modelComps","legacyScope","getModelComponent","push","provider","cli","statusMain","register","StatusCmd","CLIAspect","WorkspaceAspect","InsightsAspect","IssuesAspect","RemoveAspect","MainRuntime","StatusAspect","addRuntime"],"sources":["status.main.runtime.ts"],"sourcesContent":["import { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport pMapSeries from 'p-map-series';\nimport { LaneId } from '@teambit/lane-id';\nimport { IssuesList } from '@teambit/component-issues';\nimport WorkspaceAspect, { Workspace } from '@teambit/workspace';\nimport { ComponentID } from '@teambit/component-id';\nimport { Analytics } from '@teambit/legacy/dist/analytics/analytics';\nimport loader from '@teambit/legacy/dist/cli/loader';\nimport { BEFORE_STATUS } from '@teambit/legacy/dist/cli/loader/loader-messages';\nimport { RemoveAspect, RemoveMain } from '@teambit/remove';\nimport ConsumerComponent from '@teambit/legacy/dist/consumer/component';\nimport ComponentsPendingImport from '@teambit/legacy/dist/consumer/component-ops/exceptions/components-pending-import';\nimport { BitId } from '@teambit/legacy-bit-id';\nimport ComponentsList from '@teambit/legacy/dist/consumer/component/components-list';\nimport { ModelComponent } from '@teambit/legacy/dist/scope/models';\nimport { ConsumerNotFound } from '@teambit/legacy/dist/consumer/exceptions';\nimport { InsightsAspect, InsightsMain } from '@teambit/insights';\nimport { DivergeData } from '@teambit/legacy/dist/scope/component-ops/diverge-data';\nimport IssuesAspect, { IssuesMain } from '@teambit/issues';\nimport { StatusCmd } from './status-cmd';\nimport { StatusAspect } from './status.aspect';\n\ntype DivergeDataPerId = { id: ComponentID; divergeData: DivergeData };\n\nexport type StatusResult = {\n  newComponents: ComponentID[];\n  modifiedComponents: ComponentID[];\n  stagedComponents: { id: ComponentID; versions: string[] }[];\n  componentsWithIssues: { id: ComponentID; issues: IssuesList }[];\n  importPendingComponents: ComponentID[];\n  autoTagPendingComponents: ComponentID[];\n  invalidComponents: { id: ComponentID; error: Error }[];\n  locallySoftRemoved: ComponentID[];\n  remotelySoftRemoved: ComponentID[];\n  outdatedComponents: { id: ComponentID; latestVersion: string }[];\n  mergePendingComponents: DivergeDataPerId[];\n  componentsDuringMergeState: ComponentID[];\n  softTaggedComponents: ComponentID[];\n  snappedComponents: ComponentID[];\n  pendingUpdatesFromMain: DivergeDataPerId[];\n  updatesFromForked: DivergeDataPerId[];\n  currentLaneId: LaneId;\n  forkedLaneId?: LaneId;\n};\n\nexport class StatusMain {\n  constructor(\n    private workspace: Workspace,\n    private issues: IssuesMain,\n    private insights: InsightsMain,\n    private remove: RemoveMain\n  ) {}\n\n  async status(): Promise<StatusResult> {\n    if (!this.workspace) throw new ConsumerNotFound();\n    loader.start(BEFORE_STATUS);\n    const consumer = this.workspace.consumer;\n    const laneObj = await consumer.getCurrentLaneObject();\n    const componentsList = new ComponentsList(consumer);\n    const loadOpts = {\n      loadDocs: false,\n      loadCompositions: false,\n    };\n    const newComponents: ConsumerComponent[] = (await componentsList.listNewComponents(\n      true,\n      loadOpts\n    )) as ConsumerComponent[];\n    const modifiedComponents = (await componentsList.listModifiedComponents(true, loadOpts)) as ConsumerComponent[];\n    const stagedComponents: ModelComponent[] = await componentsList.listExportPendingComponents(laneObj);\n    await this.addRemovedStagedIfNeeded(stagedComponents);\n    const stagedComponentsWithVersions = await pMapSeries(stagedComponents, async (stagedComp) => {\n      const versions = await stagedComp.getLocalTagsOrHashes(consumer.scope.objects);\n      return {\n        id: stagedComp.toBitId(),\n        versions,\n      };\n    });\n\n    const autoTagPendingComponents = await componentsList.listAutoTagPendingComponents();\n    const autoTagPendingComponentsIds = autoTagPendingComponents.map((component) => component.id);\n    const allInvalidComponents = await componentsList.listInvalidComponents();\n    const locallySoftRemoved = await componentsList.listLocallySoftRemoved();\n    const remotelySoftRemoved = await componentsList.listRemotelySoftRemoved();\n    const importPendingComponents = allInvalidComponents\n      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!\n      .filter((c) => c.error instanceof ComponentsPendingImport)\n      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!\n      .map((i) => i.id);\n    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!\n    const invalidComponents = allInvalidComponents.filter((c) => !(c.error instanceof ComponentsPendingImport));\n    const outdatedComponents = await componentsList.listOutdatedComponents();\n    const mergePendingComponents = await componentsList.listMergePendingComponents();\n    const newAndModifiedLegacy: ConsumerComponent[] = newComponents.concat(modifiedComponents);\n    const issuesToIgnore = this.issues.getIssuesToIgnoreGlobally();\n    if (newAndModifiedLegacy.length) {\n      const newAndModified = await this.workspace.getManyByLegacy(newAndModifiedLegacy, loadOpts);\n      await this.issues.triggerAddComponentIssues(newAndModified, issuesToIgnore);\n      this.issues.removeIgnoredIssuesFromComponents(newAndModified);\n    }\n    const componentsWithIssues = newAndModifiedLegacy.filter((component: ConsumerComponent) => {\n      return component.issues && !component.issues.isEmpty();\n    });\n    const componentsDuringMergeState = componentsList.listDuringMergeStateComponents();\n    const softTaggedComponents = componentsList.listSoftTaggedComponents();\n    const snappedComponents = (await componentsList.listSnappedComponentsOnMain()).map((c) => c.toBitId());\n    const pendingUpdatesFromMain = await componentsList.listUpdatesFromMainPending();\n    const updatesFromForked = await componentsList.listUpdatesFromForked();\n    const currentLaneId = consumer.getCurrentLaneId();\n    const currentLane = await consumer.getCurrentLaneObject();\n    const forkedLaneId = currentLane?.forkedFrom;\n    Analytics.setExtraData('new_components', newComponents.length);\n    Analytics.setExtraData('staged_components', stagedComponents.length);\n    Analytics.setExtraData('num_components_with_missing_dependencies', componentsWithIssues.length);\n    Analytics.setExtraData('autoTagPendingComponents', autoTagPendingComponents.length);\n    Analytics.setExtraData('deleted', invalidComponents.length);\n\n    const convertBitIdToComponentIdsAndSort = async (ids: BitId[]) =>\n      ComponentID.sortIds(await this.workspace.resolveMultipleComponentIds(ids));\n\n    const convertObjToComponentIdsAndSort = async <T>(\n      objectsWithId: Array<T & { id: BitId }>\n    ): Promise<Array<T & { id: ComponentID }>> => {\n      const results = await Promise.all(\n        objectsWithId.map(async (obj) => {\n          return {\n            ...obj,\n            id: await this.workspace.resolveComponentId(obj.id),\n          };\n        })\n      );\n      return results.sort((a, b) => a.id.toString().localeCompare(b.id.toString()));\n    };\n\n    await consumer.onDestroy();\n    return {\n      newComponents: await convertBitIdToComponentIdsAndSort(newComponents.map((c) => c.id)),\n      modifiedComponents: await convertBitIdToComponentIdsAndSort(modifiedComponents.map((c) => c.id)),\n      stagedComponents: await convertObjToComponentIdsAndSort(stagedComponentsWithVersions),\n      // @ts-ignore - not clear why, it fails the \"bit build\" without it\n      componentsWithIssues: await convertObjToComponentIdsAndSort(\n        componentsWithIssues.map((c) => ({ id: c.id, issues: c.issues }))\n      ), // no need to sort, we don't print it as is\n      importPendingComponents: await convertBitIdToComponentIdsAndSort(importPendingComponents), // no need to sort, we use only its length\n      autoTagPendingComponents: await convertBitIdToComponentIdsAndSort(autoTagPendingComponentsIds),\n      invalidComponents: await convertObjToComponentIdsAndSort(\n        invalidComponents.map((c) => ({ id: c.id, error: c.error }))\n      ),\n      locallySoftRemoved: await convertBitIdToComponentIdsAndSort(locallySoftRemoved),\n      remotelySoftRemoved: await convertBitIdToComponentIdsAndSort(remotelySoftRemoved.map((c) => c.id)),\n      outdatedComponents: await convertObjToComponentIdsAndSort(\n        outdatedComponents.map((c) => ({\n          id: c.id, // @ts-ignore\n          latestVersion: c.latestVersion,\n        }))\n      ),\n      mergePendingComponents: await convertObjToComponentIdsAndSort(\n        mergePendingComponents.map((c) => ({ id: c.id, divergeData: c.diverge }))\n      ),\n      componentsDuringMergeState: await convertBitIdToComponentIdsAndSort(componentsDuringMergeState),\n      softTaggedComponents: await convertBitIdToComponentIdsAndSort(softTaggedComponents),\n      snappedComponents: await convertBitIdToComponentIdsAndSort(snappedComponents),\n      pendingUpdatesFromMain: await convertObjToComponentIdsAndSort(pendingUpdatesFromMain),\n      updatesFromForked: await convertObjToComponentIdsAndSort(updatesFromForked),\n      currentLaneId,\n      forkedLaneId,\n    };\n  }\n\n  private async addRemovedStagedIfNeeded(stagedComponents: ModelComponent[]) {\n    const removedStagedIds = await this.remove.getRemovedStaged();\n    if (!removedStagedIds.length) return;\n    const removedStagedBitIds = removedStagedIds.map((id) => id._legacy);\n    const nonExistsInStaged = removedStagedBitIds.filter(\n      (id) => !stagedComponents.find((c) => c.toBitId().isEqualWithoutVersion(id))\n    );\n    if (!nonExistsInStaged.length) return;\n    const modelComps = await Promise.all(\n      nonExistsInStaged.map((id) => this.workspace.scope.legacyScope.getModelComponent(id))\n    );\n    stagedComponents.push(...modelComps);\n  }\n\n  static slots = [];\n  static dependencies = [CLIAspect, WorkspaceAspect, InsightsAspect, IssuesAspect, RemoveAspect];\n  static runtime = MainRuntime;\n  static async provider([cli, workspace, insights, issues, remove]: [\n    CLIMain,\n    Workspace,\n    InsightsMain,\n    IssuesMain,\n    RemoveMain\n  ]) {\n    const statusMain = new StatusMain(workspace, issues, insights, remove);\n    cli.register(new StatusCmd(statusMain));\n    return statusMain;\n  }\n}\n\nStatusAspect.addRuntime(StatusMain);\n"],"mappings":"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"}