import { Command, CommandOptions } from '@teambit/cli';
import { ComponentID } from '@teambit/component-id';
import { DivergeData } from '@teambit/legacy/dist/scope/component-ops/diverge-data';
import { IssuesList } from '@teambit/component-issues';
import { StatusMain } from './status.main.runtime';
export declare class StatusCmd implements Command {
    private status;
    name: string;
    description: string;
    group: string;
    extendedDescription: string;
    alias: string;
    options: CommandOptions;
    loader: boolean;
    migration: boolean;
    constructor(status: StatusMain);
    json(): Promise<{
        newComponents: string[];
        modifiedComponents: string[];
        stagedComponents: {
            id: string;
            versions: string[];
        }[];
        componentsWithIssues: {
            id: string;
            issues: {
                type: string;
                description: string;
                data: any;
            }[];
        }[];
        importPendingComponents: string[];
        autoTagPendingComponents: string[];
        invalidComponents: {
            id: ComponentID;
            error: Error;
        }[];
        locallySoftRemoved: string[];
        remotelySoftRemoved: string[];
        outdatedComponents: string[];
        mergePendingComponents: string[];
        componentsDuringMergeState: string[];
        softTaggedComponents: string[];
        snappedComponents: string[];
        pendingUpdatesFromMain: {
            id: string;
            divergeData: DivergeData;
        }[];
        updatesFromForked: {
            id: string;
            divergeData: DivergeData;
        }[];
        currentLaneId: import("@teambit/lane-id").LaneId;
        forkedLaneId: import("@teambit/lane-id").LaneId | undefined;
    }>;
    report(_args: any, { strict, verbose }: {
        strict?: boolean;
        verbose?: boolean;
    }): Promise<{
        data: string;
        code: number;
    }>;
}
export declare function formatIssues(issues: IssuesList): string;
