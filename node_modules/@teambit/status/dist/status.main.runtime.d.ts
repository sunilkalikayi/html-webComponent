import { CLIMain } from '@teambit/cli';
import { LaneId } from '@teambit/lane-id';
import { IssuesList } from '@teambit/component-issues';
import { Workspace } from '@teambit/workspace';
import { ComponentID } from '@teambit/component-id';
import { RemoveMain } from '@teambit/remove';
import { InsightsMain } from '@teambit/insights';
import { DivergeData } from '@teambit/legacy/dist/scope/component-ops/diverge-data';
import { IssuesMain } from '@teambit/issues';
declare type DivergeDataPerId = {
    id: ComponentID;
    divergeData: DivergeData;
};
export declare type StatusResult = {
    newComponents: ComponentID[];
    modifiedComponents: ComponentID[];
    stagedComponents: {
        id: ComponentID;
        versions: string[];
    }[];
    componentsWithIssues: {
        id: ComponentID;
        issues: IssuesList;
    }[];
    importPendingComponents: ComponentID[];
    autoTagPendingComponents: ComponentID[];
    invalidComponents: {
        id: ComponentID;
        error: Error;
    }[];
    locallySoftRemoved: ComponentID[];
    remotelySoftRemoved: ComponentID[];
    outdatedComponents: {
        id: ComponentID;
        latestVersion: string;
    }[];
    mergePendingComponents: DivergeDataPerId[];
    componentsDuringMergeState: ComponentID[];
    softTaggedComponents: ComponentID[];
    snappedComponents: ComponentID[];
    pendingUpdatesFromMain: DivergeDataPerId[];
    updatesFromForked: DivergeDataPerId[];
    currentLaneId: LaneId;
    forkedLaneId?: LaneId;
};
export declare class StatusMain {
    private workspace;
    private issues;
    private insights;
    private remove;
    constructor(workspace: Workspace, issues: IssuesMain, insights: InsightsMain, remove: RemoveMain);
    status(): Promise<StatusResult>;
    private addRemovedStagedIfNeeded;
    static slots: never[];
    static dependencies: import("@teambit/harmony").Aspect[];
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static provider([cli, workspace, insights, issues, remove]: [
        CLIMain,
        Workspace,
        InsightsMain,
        IssuesMain,
        RemoveMain
    ]): Promise<StatusMain>;
}
export {};
