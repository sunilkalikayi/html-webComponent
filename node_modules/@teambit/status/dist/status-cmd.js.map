{"version":3,"names":["TROUBLESHOOTING_MESSAGE","chalk","yellow","BASE_DOCS_DOMAIN","StatusCmd","constructor","status","json","newComponents","modifiedComponents","stagedComponents","componentsWithIssues","importPendingComponents","autoTagPendingComponents","invalidComponents","locallySoftRemoved","remotelySoftRemoved","outdatedComponents","mergePendingComponents","componentsDuringMergeState","softTaggedComponents","snappedComponents","pendingUpdatesFromMain","updatesFromForked","currentLaneId","forkedLaneId","map","c","toStringWithoutVersion","toString","id","versions","issues","toObject","s","p","divergeData","report","_args","strict","verbose","showTroubleshootingLink","format","showIssues","message","localVersions","idWithIssues","find","isEqual","softTagged","softTaggedId","messageStatusText","messageStatusTextWithSoftTag","color","messageStatus","formatBitString","bitFormatted","join","snaps","tags","partition","version","isHash","tagsStr","length","snapsStr","red","statusFailureMsg","formatIssues","importPendingWarning","IMPORT_PENDING_MSG","splitByMissing","R","groupBy","component","includes","missing","nonMissing","outdatedTitle","underline","white","outdatedDesc","outdatedComps","cyan","latestVersion","outdatedStr","pendingMergeTitle","pendingMergeDesc","pendingMergeComps","snapsOnLocalOnly","snapsOnRemoteOnly","pendingMergeStr","compDuringMergeTitle","compDuringMergeDesc","compDuringMergeComps","compDuringMergeStr","newComponentDescription","newComponentsTitle","newComponentsOutput","modifiedDesc","modifiedComponentOutput","immutableUnshift","autoTagPendingOutput","invalidDesc","invalidComponentOutput","getInvalidComponentLabel","error","sort","statusInvalidComponentsMsg","locallySoftRemovedDesc","locallySoftRemovedOutput","remotelySoftRemovedDesc","remotelySoftRemovedOutput","stagedDesc","stagedComponentsOutput","undefined","snappedDesc","snappedComponentsOutput","getUpdateFromMsg","from","err","msg","commonSnapBeforeDiverge","toShortString","updatesFromMainOutput","updatesFromMainDesc","pendingUpdatesFromMainIds","updatesFromForkedOutput","updatesFromForkedDesc","name","pendingUpdatesFromForkedIds","laneStr","isDefault","bold","troubleshootingStr","statusMsg","compact","results","statusWorkspaceIsCleanMsg","exitCode","data","code","outputForCLI"],"sources":["status-cmd.ts"],"sourcesContent":["import chalk from 'chalk';\nimport R from 'ramda';\nimport { Command, CommandOptions } from '@teambit/cli';\nimport { ComponentID } from '@teambit/component-id';\nimport { DivergeData } from '@teambit/legacy/dist/scope/component-ops/diverge-data';\nimport { immutableUnshift } from '@teambit/legacy/dist/utils';\nimport { IssuesList } from '@teambit/component-issues';\nimport { formatBitString } from '@teambit/legacy/dist/cli/chalk-box';\nimport { getInvalidComponentLabel } from '@teambit/legacy/dist/cli/templates/component-issues-template';\nimport {\n  BASE_DOCS_DOMAIN,\n  IMPORT_PENDING_MSG,\n  statusFailureMsg,\n  statusInvalidComponentsMsg,\n  statusWorkspaceIsCleanMsg,\n} from '@teambit/legacy/dist/constants';\nimport { compact, partition } from 'lodash';\nimport { isHash } from '@teambit/component-version';\nimport { StatusMain, StatusResult } from './status.main.runtime';\n\nconst TROUBLESHOOTING_MESSAGE = `${chalk.yellow(\n  `learn more at https://${BASE_DOCS_DOMAIN}/components/adding-components`\n)}`;\n\nexport class StatusCmd implements Command {\n  name = 'status';\n  description = 'present the current status of components in the workspace, and notifies when issues are detected';\n  group = 'development';\n  extendedDescription: string;\n  alias = 's';\n  options = [\n    ['j', 'json', 'return a json version of the component'],\n    [\n      '',\n      'verbose',\n      'show extra data: full snap hashes for staged, divergence point for lanes and updates-from-main for forked lanes',\n    ],\n    ['', 'strict', 'in case issues found, exit with code 1'],\n  ] as CommandOptions;\n  loader = true;\n  migration = true;\n\n  constructor(private status: StatusMain) {}\n\n  async json() {\n    const {\n      newComponents,\n      modifiedComponents,\n      stagedComponents,\n      componentsWithIssues,\n      importPendingComponents,\n      autoTagPendingComponents,\n      invalidComponents,\n      locallySoftRemoved,\n      remotelySoftRemoved,\n      outdatedComponents,\n      mergePendingComponents,\n      componentsDuringMergeState,\n      softTaggedComponents,\n      snappedComponents,\n      pendingUpdatesFromMain,\n      updatesFromForked,\n      currentLaneId,\n      forkedLaneId,\n    }: StatusResult = await this.status.status();\n    return {\n      newComponents: newComponents.map((c) => c.toStringWithoutVersion()),\n      modifiedComponents: modifiedComponents.map((c) => c.toString()),\n      stagedComponents: stagedComponents.map((c) => ({ id: c.id.toStringWithoutVersion(), versions: c.versions })),\n      componentsWithIssues: componentsWithIssues.map((c) => ({\n        id: c.id.toString(),\n        issues: c.issues?.toObject(),\n      })),\n      importPendingComponents: importPendingComponents.map((id) => id.toString()),\n      autoTagPendingComponents: autoTagPendingComponents.map((s) => s.toString()),\n      invalidComponents,\n      locallySoftRemoved: locallySoftRemoved.map((id) => id.toString()),\n      remotelySoftRemoved: remotelySoftRemoved.map((id) => id.toString()),\n      outdatedComponents: outdatedComponents.map((c) => c.id.toString()),\n      mergePendingComponents: mergePendingComponents.map((c) => c.id.toString()),\n      componentsDuringMergeState: componentsDuringMergeState.map((id) => id.toString()),\n      softTaggedComponents: softTaggedComponents.map((s) => s.toString()),\n      snappedComponents: snappedComponents.map((s) => s.toString()),\n      pendingUpdatesFromMain: pendingUpdatesFromMain.map((p) => ({ id: p.id.toString(), divergeData: p.divergeData })),\n      updatesFromForked: updatesFromForked.map((p) => ({\n        id: p.id.toString(),\n        divergeData: p.divergeData,\n      })),\n      currentLaneId,\n      forkedLaneId,\n    };\n  }\n\n  async report(_args, { strict, verbose }: { strict?: boolean; verbose?: boolean }) {\n    const {\n      newComponents,\n      modifiedComponents,\n      stagedComponents,\n      componentsWithIssues,\n      importPendingComponents,\n      autoTagPendingComponents,\n      invalidComponents,\n      locallySoftRemoved,\n      remotelySoftRemoved,\n      outdatedComponents,\n      mergePendingComponents,\n      componentsDuringMergeState,\n      softTaggedComponents,\n      snappedComponents,\n      pendingUpdatesFromMain,\n      updatesFromForked,\n      currentLaneId,\n      forkedLaneId,\n    }: StatusResult = await this.status.status();\n    // If there is problem with at least one component we want to show a link to the\n    // troubleshooting doc\n    let showTroubleshootingLink = false;\n\n    function format(id: ComponentID, showIssues = false, message?: string, localVersions?: string[]): string {\n      const idWithIssues = componentsWithIssues.find((c) => c.id.isEqual(id));\n      const softTagged = softTaggedComponents.find((softTaggedId) => softTaggedId.isEqual(id));\n\n      const messageStatusText = message || 'ok';\n      const messageStatusTextWithSoftTag = softTagged ? `${messageStatusText} (soft-tagged)` : messageStatusText;\n      const color = message ? 'yellow' : 'green';\n      const messageStatus = chalk[color](messageStatusTextWithSoftTag);\n\n      if (!showIssues) {\n        return `${formatBitString(id.toStringWithoutVersion())} ... ${messageStatus}`;\n      }\n      let bitFormatted = `${formatBitString(id.toStringWithoutVersion())}`;\n      if (localVersions) {\n        if (verbose) {\n          bitFormatted += `. versions: ${localVersions.join(', ')}`;\n        } else {\n          const [snaps, tags] = partition(localVersions, (version) => isHash(version));\n          const tagsStr = tags.length ? `versions: ${tags.join(', ')}` : '';\n          const snapsStr = snaps.length ? `${snaps.length} snap(s)` : '';\n          bitFormatted += `. `;\n          bitFormatted += tagsStr && snapsStr ? `${tagsStr}. and ${snapsStr}` : tagsStr || snapsStr;\n        }\n      }\n      bitFormatted += ' ... ';\n      if (!idWithIssues) return `${bitFormatted}${messageStatus}`;\n      showTroubleshootingLink = true;\n      return `${bitFormatted} ${chalk.red(statusFailureMsg)}${formatIssues(idWithIssues.issues)}`;\n    }\n\n    const importPendingWarning = importPendingComponents.length ? chalk.yellow(`${IMPORT_PENDING_MSG}.\\n`) : '';\n\n    const splitByMissing = R.groupBy((component) => {\n      return component.includes(statusFailureMsg) ? 'missing' : 'nonMissing';\n    });\n    const { missing, nonMissing } = splitByMissing(newComponents.map((c) => format(c, true)));\n\n    const outdatedTitle = chalk.underline.white('pending updates');\n    const outdatedDesc =\n      '(use \"bit checkout head\" to merge changes)\\n(use \"bit diff [component_id] [new_version]\" to compare changes)\\n(use \"bit log [component_id]\" to list all available versions)\\n';\n    const outdatedComps = outdatedComponents\n      .map((component) => {\n        return `    > ${chalk.cyan(component.id.toStringWithoutVersion())} current: ${component.id.version} latest: ${\n          // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!\n          component.latestVersion\n        }\\n`;\n      })\n      .join('');\n\n    const outdatedStr = outdatedComponents.length ? [outdatedTitle, outdatedDesc, outdatedComps].join('\\n') : '';\n\n    const pendingMergeTitle = chalk.underline.white('pending merge');\n    const pendingMergeDesc = `(use \"bit reset\" to add local changes on top of the remote and discard local tags.\nalternatively, to keep local tags/snaps history, use \"bit merge <remote-name>/<lane-name> [component-id]\")\\n`;\n    const pendingMergeComps = mergePendingComponents\n      .map((component) => {\n        return `    > ${chalk.cyan(component.id.toString())} local and remote have diverged and have ${\n          component.divergeData.snapsOnLocalOnly.length\n        } and ${component.divergeData.snapsOnRemoteOnly.length} different snaps each, respectively\\n`;\n      })\n      .join('');\n\n    const pendingMergeStr = pendingMergeComps.length\n      ? [pendingMergeTitle, pendingMergeDesc, pendingMergeComps].join('\\n')\n      : '';\n\n    const compDuringMergeTitle = chalk.underline.white('components during merge state');\n    const compDuringMergeDesc = `(use \"bit snap/tag [--unmerged]\" to complete the merge process\nor use \"bit merge [component-id] --abort\" to cancel the merge operation)\\n`;\n    const compDuringMergeComps = componentsDuringMergeState\n      .map((id) => {\n        return `    > ${chalk.cyan(id.toString())}`;\n      })\n      .join('\\n');\n\n    const compDuringMergeStr = compDuringMergeComps.length\n      ? [compDuringMergeTitle, compDuringMergeDesc, compDuringMergeComps].join('\\n')\n      : '';\n\n    const newComponentDescription = '\\n(use \"bit tag [version]\" to lock a version with all your changes)\\n';\n    const newComponentsTitle = newComponents.length\n      ? chalk.underline.white('new components') + newComponentDescription\n      : '';\n\n    const newComponentsOutput = [newComponentsTitle, ...(nonMissing || []), ...(missing || [])].join('\\n');\n\n    const modifiedDesc = '(use \"bit diff\" to compare changes)\\n';\n    const modifiedComponentOutput = immutableUnshift(\n      modifiedComponents.map((c) => format(c, true)),\n      modifiedComponents.length\n        ? chalk.underline.white('modified components') + newComponentDescription + modifiedDesc\n        : ''\n    ).join('\\n');\n\n    const autoTagPendingOutput = immutableUnshift(\n      autoTagPendingComponents.map((c) => format(c)),\n      autoTagPendingComponents.length\n        ? chalk.underline.white('components pending to be tagged automatically (when their dependencies are tagged)')\n        : ''\n    ).join('\\n');\n\n    const invalidDesc = '\\nthese components were failed to load.\\n';\n    const invalidComponentOutput = immutableUnshift(\n      invalidComponents.map((c) => format(c.id, false, getInvalidComponentLabel(c.error))).sort(),\n      invalidComponents.length ? chalk.underline.white(statusInvalidComponentsMsg) + invalidDesc : ''\n    ).join('\\n');\n\n    const locallySoftRemovedDesc = '\\n(tag/snap and export them to update the remote)\\n';\n    const locallySoftRemovedOutput = immutableUnshift(\n      locallySoftRemoved.map((c) => format(c)).sort(),\n      locallySoftRemoved.length ? chalk.underline.white('soft-removed components locally') + locallySoftRemovedDesc : ''\n    ).join('\\n');\n\n    const remotelySoftRemovedDesc = '\\n(use \"bit remove\" to remove them from the workspace)\\n';\n    const remotelySoftRemovedOutput = immutableUnshift(\n      remotelySoftRemoved.map((c) => format(c)).sort(),\n      remotelySoftRemoved.length\n        ? chalk.underline.white('soft-removed components on the remote') + remotelySoftRemovedDesc\n        : ''\n    ).join('\\n');\n\n    const stagedDesc = '\\n(use \"bit export\" to push these components to a remote scope)\\n';\n    const stagedComponentsOutput = immutableUnshift(\n      stagedComponents.map((c) => format(c.id, true, undefined, c.versions)),\n      stagedComponents.length ? chalk.underline.white('staged components') + stagedDesc : ''\n    ).join('\\n');\n\n    const snappedDesc = '\\n(use \"bit tag [version]\" or \"bit tag --snapped [version]\" to lock a version)\\n';\n    const snappedComponentsOutput = immutableUnshift(\n      snappedComponents.map((c) => format(c)),\n      snappedComponents.length ? chalk.underline.white('snapped components') + snappedDesc : ''\n    ).join('\\n');\n\n    const getUpdateFromMsg = (divergeData: DivergeData, from = 'main'): string => {\n      if (divergeData.err) return divergeData.err.message;\n      let msg = `${from} is ahead by ${divergeData.snapsOnRemoteOnly.length || 0} snaps`;\n      if (divergeData.snapsOnLocalOnly && verbose) {\n        msg += ` (diverged since ${divergeData.commonSnapBeforeDiverge?.toShortString()})`;\n      }\n      return msg;\n    };\n\n    let updatesFromMainOutput = '';\n    if (!forkedLaneId || verbose) {\n      const updatesFromMainDesc = '\\n(use \"bit lane merge main\" to merge the changes)\\n';\n      const pendingUpdatesFromMainIds = pendingUpdatesFromMain.map((c) =>\n        format(c.id, false, getUpdateFromMsg(c.divergeData))\n      );\n      updatesFromMainOutput = [\n        pendingUpdatesFromMain.length ? chalk.underline.white('pending updates from main') + updatesFromMainDesc : '',\n        ...pendingUpdatesFromMainIds,\n      ].join('\\n');\n    }\n\n    let updatesFromForkedOutput = '';\n    if (forkedLaneId) {\n      const updatesFromForkedDesc = `\\n(use \"bit lane merge ${forkedLaneId.toString()}\" to merge the changes\nuse \"bit fetch ${forkedLaneId.toString()} --lanes\" to update ${forkedLaneId.name} locally)\\n`;\n      const pendingUpdatesFromForkedIds = updatesFromForked.map((c) =>\n        format(c.id, false, getUpdateFromMsg(c.divergeData, forkedLaneId.name))\n      );\n      updatesFromForkedOutput = [\n        updatesFromForked.length\n          ? chalk.underline.white(`updates from ${forkedLaneId.name}`) + updatesFromForkedDesc\n          : '',\n        ...pendingUpdatesFromForkedIds,\n      ].join('\\n');\n    }\n\n    const laneStr = currentLaneId.isDefault() ? '' : `\\non ${chalk.bold(currentLaneId.toString())} lane`;\n\n    const troubleshootingStr = showTroubleshootingLink ? `\\n${TROUBLESHOOTING_MESSAGE}` : '';\n\n    const statusMsg =\n      importPendingWarning +\n      compact([\n        outdatedStr,\n        pendingMergeStr,\n        updatesFromMainOutput,\n        updatesFromForkedOutput,\n        compDuringMergeStr,\n        newComponentsOutput,\n        modifiedComponentOutput,\n        snappedComponentsOutput,\n        stagedComponentsOutput,\n        autoTagPendingOutput,\n        invalidComponentOutput,\n        locallySoftRemovedOutput,\n        remotelySoftRemovedOutput,\n      ]).join(chalk.underline('\\n                         \\n') + chalk.white('\\n')) +\n      troubleshootingStr;\n\n    const results = (statusMsg || chalk.yellow(statusWorkspaceIsCleanMsg)) + laneStr;\n\n    const exitCode = componentsWithIssues.length && strict ? 1 : 0;\n\n    return {\n      data: results,\n      code: exitCode,\n    };\n  }\n}\n\nexport function formatIssues(issues: IssuesList) {\n  return `       ${issues?.outputForCLI()}\\n`;\n}\n"],"mappings":"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"}