"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.string.replace.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PreparePackagesTask = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _packageJsonFile() {
  const data = _interopRequireDefault(require("@teambit/legacy/dist/consumer/component/package-json-file"));
  _packageJsonFile = function () {
    return data;
  };
  return data;
}
function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));
  _fsExtra = function () {
    return data;
  };
  return data;
}
function _path() {
  const data = _interopRequireDefault(require("path"));
  _path = function () {
    return data;
  };
  return data;
}
function _writeNpmIgnore() {
  const data = require("./write-npm-ignore");
  _writeNpmIgnore = function () {
    return data;
  };
  return data;
}
/**
 * prepare packages for publishing.
 */
class PreparePackagesTask {
  constructor(aspectId, logger, envs) {
    this.aspectId = aspectId;
    this.logger = logger;
    this.envs = envs;
    (0, _defineProperty2().default)(this, "name", 'PreparePackages');
    (0, _defineProperty2().default)(this, "location", 'end');
  }

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  async execute(context) {
    await this.writeNpmIgnoreFile(context);
    const result = {
      componentsResults: []
    };
    return result;
  }
  async writeNpmIgnoreFile(context) {
    await Promise.all(context.capsuleNetwork.seedersCapsules.map(async capsule => {
      await (0, _writeNpmIgnore().writeNpmIgnore)(capsule, this.envs);
    }));
  }

  /**
   * remove the source files and copy the dists files
   * into the root of the capsule.
   * this is needed when components import from other components internal paths. without this task,
   * the internal paths are the source, so node will throw an error when trying to use them. this
   * task makes sure that the internal paths point to the consumable code (dists).
   */
  async executeDistAsRootTask(context) {
    if (!context.env.getCompiler) return;
    const compilerInstance = context.env.getCompiler();
    const distDir = compilerInstance.distDir;
    await Promise.all(context.capsuleNetwork.graphCapsules.map(async capsule => {
      await this.removeSourceFiles(capsule, distDir);
      await this.moveDistToRoot(capsule, distDir);
      await this.updatePackageJson(capsule, compilerInstance, distDir);
    }));
  }
  async removeSourceFiles(capsule, distDir) {
    const excludeDirs = [distDir, 'node_modules', 'public', 'bin'].map(dir => `${dir}/**`);
    const excludeFiles = ['package.json'];
    const allFiles = capsule.getAllFilesPaths('.', {
      ignore: [...excludeDirs, ...excludeFiles]
    });
    this.logger.debug(`delete the following files:\n${allFiles.join('\n')}`);
    await Promise.all(allFiles.map(file => _fsExtra().default.remove(_path().default.join(capsule.path, file))));
  }
  async moveDistToRoot(capsule, distDir) {
    const from = _path().default.join(capsule.path, distDir);
    const to = capsule.path;
    this.logger.debug(`move from ${from} to: ${to}`);
    // for some reason `fs.move` throws an error "dest already exists.".
    _fsExtra().default.moveSync(from, to);
  }

  /**
   * by default, the "main" prop points to the dist file (e.g. "dist/index./js").
   * here, we have to change it because there is no dist dir anymore.
   */
  async updatePackageJson(capsule, compiler, distDir) {
    const distMainFile = compiler.getDistPathBySrcPath(capsule.component.state._consumer.mainFile);
    const distMainFileWithoutDistDir = distMainFile.replace(`${distDir}${_path().default.sep}`, '');
    const packageJson = _packageJsonFile().default.loadFromCapsuleSync(capsule.path);
    packageJson.addOrUpdateProperty('main', distMainFileWithoutDistDir);
    await packageJson.write();
  }
}
exports.PreparePackagesTask = PreparePackagesTask;

//# sourceMappingURL=prepare-packages.task.js.map