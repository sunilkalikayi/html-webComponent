import { ComponentResult } from '@teambit/builder';
import { Capsule, IsolatorMain } from '@teambit/isolator';
import { Logger } from '@teambit/logger';
import { Workspace } from '@teambit/workspace';
import { ExtensionDataList } from '@teambit/legacy/dist/consumer/config/extension-data';
import { Scope } from '@teambit/legacy/dist/scope';
export declare type PublisherOptions = {
    dryRun?: boolean;
    allowStaged?: boolean;
};
export declare class Publisher {
    private isolator;
    private logger;
    private scope;
    private workspace;
    options: PublisherOptions;
    packageManager: string;
    constructor(isolator: IsolatorMain, logger: Logger, scope: Scope, workspace: Workspace, options?: PublisherOptions);
    publish(componentPattern: string, options: PublisherOptions): Promise<ComponentResult[]>;
    publishMultipleCapsules(capsules: Capsule[]): Promise<ComponentResult[]>;
    private publishOneCapsule;
    private getTagFlagForPreRelease;
    private getComponentCapsules;
    /**
     * only components that use pkg extension and configure "publishConfig" with their own registry
     * or custom "name", should be published. ignore the rest.
     */
    private getIdsToPublish;
    shouldPublish(extensions: ExtensionDataList): boolean;
    private getExtraArgsFromConfig;
    private throwForNonStagedOrTaggedComponents;
}
