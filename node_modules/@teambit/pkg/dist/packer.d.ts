import { ComponentFactory } from '@teambit/component';
import { ComponentResult, ArtifactDefinition } from '@teambit/builder';
import { Capsule, IsolatorMain } from '@teambit/isolator';
import { ScopeMain } from '@teambit/scope';
import { Packer as LegacyPacker, PackWriteOptions, PackOptions } from '@teambit/legacy/dist/pack';
import { Logger } from '@teambit/logger';
export { PackOptions };
export declare type PackResult = Omit<ComponentResult, 'component'>;
export declare type PackResultWithId = PackResult & {
    id: string;
};
export declare const TAR_FILE_ARTIFACT_NAME = "package tar file";
export declare class Packer {
    private isolator;
    private logger;
    private host;
    private scope?;
    legacyPacker: LegacyPacker;
    constructor(isolator: IsolatorMain, logger: Logger, host: ComponentFactory, scope?: ScopeMain | undefined);
    packComponent(componentId: string, scopePath: string | undefined, options: PackOptions): Promise<PackResultWithId>;
    packMultipleCapsules(capsules: Capsule[], writeOptions?: PackWriteOptions, dryRun?: boolean, omitFullTarPath?: boolean): Promise<ComponentResult[]>;
    packCapsule(capsule: Capsule, writeOptions?: PackWriteOptions, dryRun?: boolean, omitFullTarPath?: boolean): Promise<ComponentResult>;
    getArtifactDefInCapsule(outDir?: string): ArtifactDefinition;
    private getCapsule;
}
