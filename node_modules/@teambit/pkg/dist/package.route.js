"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.routePath = exports.PackageRoute = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _mime() {
  const data = _interopRequireDefault(require("mime"));
  _mime = function () {
    return data;
  };
  return data;
}
const routePath = `package`;
exports.routePath = routePath;
class PackageRoute {
  constructor(
  /**
   * pkg extension.
   */
  pkg) {
    this.pkg = pkg;
    (0, _defineProperty2().default)(this, "route", `/${routePath}`);
    (0, _defineProperty2().default)(this, "method", 'get');
    (0, _defineProperty2().default)(this, "middlewares", [async (req, res) => {
      // @ts-ignore TODO: @guy please fix.
      const component = req.component;
      const file = await this.pkg.getPackageTarFile(component);
      // TODO: 404 again how to handle.
      if (!file) return res.status(404).jsonp({
        error: 'not found'
      });
      const contents = file.contents;
      const contentType = _mime().default.getType('.tgz');
      res.set('Content-disposition', `attachment; filename=${file.basename}`);
      if (contentType) res.set('Content-Type', contentType);
      return res.send(contents);
    }]);
  }
}
exports.PackageRoute = PackageRoute;

//# sourceMappingURL=package.route.js.map