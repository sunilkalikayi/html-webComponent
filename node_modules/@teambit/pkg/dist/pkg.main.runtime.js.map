{"version":3,"names":["PkgMain","provider","cli","scope","envs","isolator","logger","workspace","builder","dependencyResolver","componentAspect","graphql","config","packageJsonPropsRegistry","logPublisher","createLogger","PkgAspect","id","host","getHost","packer","Packer","publisher","Publisher","legacyScope","publishTask","PublishTask","packTask","PackTask","pkg","registerShowFragments","PackageFragment","registerDependencyFactories","PackageDependencyFactory","register","pkgSchema","registerService","PkgService","registerRoute","PackageRoute","preparePackagesTask","PreparePackagesTask","registerBuildTasks","registerTagTasks","registerSnapTasks","onComponentLoad","component","addMissingLinksFromNodeModulesIssue","data","mergePackageJsonProps","packageJsonModification","PackageJsonTransformer","registerPackageJsonTransformer","transformPackageJson","bind","PackCmd","PublishCmd","getPackageName","getRuntimeModulePath","options","relativePath","absPath","join","path","Error","getModulePath","isModulePathExists","packageDir","fs","existsSync","exist","state","issues","getOrCreate","IssuesClasses","MissingLinksFromNodeModulesToSrc","undefined","constructor","manifestCache","createInMemoryCache","maxSize","getMaxSizeForComponents","registerPackageJsonNewProps","props","packComponent","componentId","scopePath","newProps","mergeToNewProps","otherProps","files","merged","length","env","calculateEnv","getPackageJsonProps","propsFromEnv","configuredIds","aspects","ids","forEach","extId","get","currentExtension","currentConfig","packageJson","specialKeys","omit","getPackageJsonModifications","currentData","getPkgArtifact","artifacts","getArtifactsVinylByAspect","PkgArtifactNotFound","PkgArtifact","getManifest","name","latestVersion","latest","BitError","preReleaseLatestTags","tags","getPreReleaseLatestTags","snapToSemver","distTags","versionsFromCache","getVersions","headHash","head","hash","delete","manifest","versions","getAllSnapsManifests","versionsWithoutEmpty","compact","set","externalRegistry","isPublishedToExternalRegistry","iterable","snapsIterable","result","snap","getSnapManifest","push","pkgExt","publishConfig","getComponentBuildData","getDataByAspect","idWithCorrectVersion","changeVersion","version","getVersionInstance","_legacy","builderData","extensions","findCoreExtension","BuilderAspect","aspectsData","find","a","aspectId","pkgJson","checksum","error","toString","dist","shasum","tarball","getRoute","routePath","getPackageTarFile","getArtifactsVinylByAspectAndName","TAR_FILE_ARTIFACT_NAME","PackageTarFiletNotFound","legacyComponent","packageJsonObject","resolveComponentId","newComponent","Object","assign","MainRuntime","CLIAspect","ScopeAspect","EnvsAspect","IsolatorAspect","LoggerAspect","WorkspaceAspect","DependencyResolverAspect","ComponentAspect","GraphqlAspect","Slot","withType","addRuntime"],"sources":["pkg.main.runtime.ts"],"sourcesContent":["import { compact, omit } from 'lodash';\nimport { join } from 'path';\nimport fs from 'fs-extra';\nimport { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport ComponentAspect, { Component, ComponentMain, IComponent, Snap } from '@teambit/component';\nimport { EnvsAspect, EnvsMain } from '@teambit/envs';\nimport { Slot, SlotRegistry } from '@teambit/harmony';\nimport { IsolatorAspect, IsolatorMain } from '@teambit/isolator';\nimport { LoggerAspect, LoggerMain, Logger } from '@teambit/logger';\nimport { ScopeAspect, ScopeMain } from '@teambit/scope';\nimport { Workspace, WorkspaceAspect } from '@teambit/workspace';\nimport { PackageJsonTransformer } from '@teambit/legacy/dist/consumer/component/package-json-transformer';\nimport LegacyComponent from '@teambit/legacy/dist/consumer/component';\nimport { BuilderMain, BuilderAspect } from '@teambit/builder';\nimport { CloneConfig } from '@teambit/new-component-helper';\nimport { BitError } from '@teambit/bit-error';\nimport { snapToSemver } from '@teambit/component-package-version';\nimport { IssuesClasses } from '@teambit/component-issues';\nimport { AbstractVinyl } from '@teambit/legacy/dist/consumer/component/sources';\nimport { GraphqlMain, GraphqlAspect } from '@teambit/graphql';\nimport { DependencyResolverAspect, DependencyResolverMain } from '@teambit/dependency-resolver';\nimport { getMaxSizeForComponents, InMemoryCache } from '@teambit/legacy/dist/cache/in-memory-cache';\nimport { createInMemoryCache } from '@teambit/legacy/dist/cache/cache-factory';\nimport { Packer, PackOptions, PackResult, TAR_FILE_ARTIFACT_NAME } from './packer';\n// import { BitCli as CLI, BitCliExt as CLIExtension } from '@teambit/cli';\nimport { PackCmd } from './pack.cmd';\nimport { PkgAspect } from './pkg.aspect';\nimport { PreparePackagesTask } from './prepare-packages.task';\nimport { PublishCmd } from './publish.cmd';\nimport { Publisher } from './publisher';\nimport { PublishTask } from './publish.task';\nimport { PackageTarFiletNotFound, PkgArtifactNotFound } from './exceptions';\nimport { PkgArtifact } from './pkg-artifact';\nimport { PackageRoute, routePath } from './package.route';\nimport { PackageDependencyFactory } from './package-dependency';\nimport { pkgSchema } from './pkg.graphql';\nimport { PackageFragment } from './package.fragment';\nimport { PackTask } from './pack.task';\nimport { PkgService } from './pkg.service';\n\nexport interface PackageJsonProps {\n  [key: string]: any;\n}\n\nexport type PackageJsonPropsRegistry = SlotRegistry<PackageJsonProps>;\n\nexport type PkgExtensionConfig = {};\n\ntype GetModulePathOptions = { absPath?: boolean };\n\n/**\n * Config for variants\n */\nexport type ComponentPkgExtensionConfig = {\n  /**\n   * properties to add to the package.json of the component.\n   */\n  packageJson: Record<string, any>;\n};\n\n/**\n * Data stored in the component\n */\nexport type ComponentPkgExtensionData = {\n  /**\n   * properties to add to the package.json of the component.\n   */\n  packageJsonModification: Record<string, any>;\n\n  /**\n   * Final package.json after creating tar file\n   */\n  pkgJson?: Record<string, any>;\n\n  /**\n   * Checksum of the tar file\n   */\n  checksum?: string;\n};\n\nexport type ComponentPackageManifest = {\n  name: string;\n  distTags: Record<string, string>;\n  externalRegistry: boolean;\n  versions: VersionPackageManifest[];\n};\n\nexport type VersionPackageManifest = {\n  [key: string]: any;\n  dist: {\n    tarball: string;\n    shasum: string;\n  };\n};\n\nexport class PkgMain implements CloneConfig {\n  static runtime = MainRuntime;\n  static dependencies = [\n    CLIAspect,\n    ScopeAspect,\n    EnvsAspect,\n    IsolatorAspect,\n    LoggerAspect,\n    WorkspaceAspect,\n    BuilderAspect,\n    DependencyResolverAspect,\n    ComponentAspect,\n    GraphqlAspect,\n  ];\n  static slots = [Slot.withType<PackageJsonProps>()];\n  static defaultConfig = {};\n\n  static async provider(\n    [cli, scope, envs, isolator, logger, workspace, builder, dependencyResolver, componentAspect, graphql]: [\n      CLIMain,\n      ScopeMain,\n      EnvsMain,\n      IsolatorMain,\n      LoggerMain,\n      Workspace,\n      BuilderMain,\n      DependencyResolverMain,\n      ComponentMain,\n      GraphqlMain\n    ],\n    config: PkgExtensionConfig,\n    [packageJsonPropsRegistry]: [PackageJsonPropsRegistry]\n  ) {\n    const logPublisher = logger.createLogger(PkgAspect.id);\n    const host = componentAspect.getHost();\n    const packer = new Packer(isolator, logPublisher, host, scope);\n    const publisher = new Publisher(isolator, logPublisher, scope?.legacyScope, workspace);\n    const publishTask = new PublishTask(PkgAspect.id, publisher, logPublisher);\n    const packTask = new PackTask(PkgAspect.id, packer, logPublisher);\n    const pkg = new PkgMain(\n      logPublisher,\n      config,\n      packageJsonPropsRegistry,\n      workspace,\n      scope,\n      builder,\n      packer,\n      envs,\n      componentAspect,\n      publishTask,\n      dependencyResolver\n    );\n\n    componentAspect.registerShowFragments([new PackageFragment(pkg)]);\n    dependencyResolver.registerDependencyFactories([new PackageDependencyFactory()]);\n\n    graphql.register(pkgSchema(pkg));\n    envs.registerService(new PkgService());\n\n    componentAspect.registerRoute([new PackageRoute(pkg)]);\n\n    // we ended up not using the publish-dry-run task. It used to run \"npm publish --dry-run\"\n    // and also \"npm pack --dry-run\", but it's not that useful and it takes long to complete.\n    // we might revise our decision later.\n    // const dryRunTask = new PublishDryRunTask(PkgAspect.id, publisher, packer, logPublisher);\n    const preparePackagesTask = new PreparePackagesTask(PkgAspect.id, logPublisher, envs);\n    // dryRunTask.dependencies = [BuildTaskHelper.serializeId(preparePackagesTask)];\n    builder.registerBuildTasks([preparePackagesTask]);\n    builder.registerTagTasks([packTask, publishTask]);\n    builder.registerSnapTasks([packTask]);\n    if (workspace) {\n      // workspace.onComponentLoad(pkg.mergePackageJsonProps.bind(pkg));\n      workspace.onComponentLoad(async (component) => {\n        await pkg.addMissingLinksFromNodeModulesIssue(component);\n        const data = await pkg.mergePackageJsonProps(component);\n        return {\n          packageJsonModification: data,\n        };\n      });\n    }\n\n    PackageJsonTransformer.registerPackageJsonTransformer(pkg.transformPackageJson.bind(pkg));\n    // TODO: consider passing the pkg instead of packer\n    cli.register(new PackCmd(packer), new PublishCmd(publisher));\n    return pkg;\n  }\n\n  readonly shouldPreserveConfigForClonedComponent = false;\n\n  /**\n   * get the package name of a component.\n   */\n  getPackageName(component: Component) {\n    return this.dependencyResolver.getPackageName(component);\n  }\n\n  /*\n   * Returns the location where the component is installed with its peer dependencies\n   * This is used in cases you want to actually run the components and make sure all the dependencies (especially peers) are resolved correctly\n   */\n  getRuntimeModulePath(component: Component, options: GetModulePathOptions = {}) {\n    const relativePath = this.dependencyResolver.getRuntimeModulePath(component);\n    if (options?.absPath) {\n      if (this.workspace) {\n        return join(this.workspace.path, relativePath);\n      }\n      throw new Error('getModulePath with abs path option is not implemented for scope');\n    }\n    return relativePath;\n  }\n\n  /**\n   * returns the package path in the /node_modules/ folder\n   * In case you call this in order to run the code from the path, please refer to the `getRuntimeModulePath` API\n   */\n  getModulePath(component: Component, options: GetModulePathOptions = {}) {\n    const relativePath = this.dependencyResolver.getModulePath(component);\n    if (options?.absPath) {\n      if (this.workspace) {\n        return join(this.workspace.path, relativePath);\n      }\n      throw new Error('getModulePath with abs path option is not implemented for scope');\n    }\n    return relativePath;\n  }\n\n  isModulePathExists(component: Component): boolean {\n    const packageDir = this.getModulePath(component, { absPath: true });\n    return fs.existsSync(packageDir);\n  }\n\n  async addMissingLinksFromNodeModulesIssue(component: Component) {\n    const exist = this.isModulePathExists(component);\n    if (!exist) {\n      component.state.issues.getOrCreate(IssuesClasses.MissingLinksFromNodeModulesToSrc).data = true;\n    }\n    // we don't want to add any data to the compiler aspect, only to add issues on the component\n    return undefined;\n  }\n\n  private manifestCache: InMemoryCache<{ head: string; manifest: VersionPackageManifest[] }>; // cache components manifests\n  constructor(\n    /**\n     * logger extension\n     */\n    readonly logger: Logger,\n    /**\n     * pkg extension configuration.\n     */\n    readonly config: PkgExtensionConfig,\n\n    /**\n     * Registry for changes by other extensions.\n     */\n    private packageJsonPropsRegistry: PackageJsonPropsRegistry,\n\n    private workspace: Workspace,\n    private scope: ScopeMain,\n\n    private builder: BuilderMain,\n    /**\n     * A utils class to packing components into tarball\n     */\n    private packer: Packer,\n\n    /**\n     * envs extension.\n     */\n    private envs: EnvsMain,\n\n    private componentAspect: ComponentMain,\n\n    /**\n     * keep it as public. external env might want to register it to the snap pipeline\n     */\n    public publishTask: PublishTask,\n\n    private dependencyResolver: DependencyResolverMain\n  ) {\n    this.manifestCache = createInMemoryCache({ maxSize: getMaxSizeForComponents() });\n  }\n\n  /**\n   * register changes in the package.json\n   */\n  registerPackageJsonNewProps(props: PackageJsonProps): void {\n    return this.packageJsonPropsRegistry.register(props);\n  }\n\n  /**\n   * Pack a component and generate a tarball suitable for npm registry\n   *\n   * @param {string} componentId\n   * @param {(string | undefined)} scopePath\n   * @param {string} outDir\n   * @param {boolean} [prefix=false]\n   * @param {boolean} [override=false]\n   * @param {boolean} [keep=false]\n   * @returns {Promise<PackResult>}\n   * @memberof PkgExtension\n   */\n  async packComponent(componentId: string, scopePath: string | undefined, options: PackOptions): Promise<PackResult> {\n    return this.packer.packComponent(componentId, scopePath, options);\n  }\n\n  /**\n   * Merge the configs provided by:\n   * 1. envs configured in the component - via getPackageJsonProps method\n   * 2. extensions that registered to the registerPackageJsonNewProps slot (and configured for the component)\n   * 3. props defined by the user (they are the strongest one)\n   */\n  async mergePackageJsonProps(component: Component): Promise<PackageJsonProps> {\n    let newProps: PackageJsonProps = {};\n    const mergeToNewProps = (otherProps: PackageJsonProps) => {\n      const files = [...(newProps.files || []), ...(otherProps.files || [])];\n      const merged = { ...newProps, ...otherProps };\n      if (files.length) merged.files = files;\n      return merged;\n    };\n    const env = this.envs.calculateEnv(component)?.env;\n    if (env?.getPackageJsonProps && typeof env.getPackageJsonProps === 'function') {\n      const propsFromEnv = env.getPackageJsonProps();\n      newProps = mergeToNewProps(propsFromEnv);\n    }\n\n    const configuredIds = component.state.aspects.ids;\n    configuredIds.forEach((extId) => {\n      // Only get props from configured extensions on this specific component\n      const props = this.packageJsonPropsRegistry.get(extId);\n      if (props) {\n        newProps = mergeToNewProps(props);\n      }\n    });\n\n    const currentExtension = component.state.aspects.get(PkgAspect.id);\n    const currentConfig = currentExtension?.config as unknown as ComponentPkgExtensionConfig;\n    if (currentConfig && currentConfig.packageJson) {\n      newProps = mergeToNewProps(currentConfig.packageJson);\n    }\n    // Keys not allowed to override\n    const specialKeys = ['extensions', 'dependencies', 'devDependencies', 'peerDependencies'];\n    return omit(newProps, specialKeys);\n  }\n\n  getPackageJsonModifications(component: Component): Record<string, any> {\n    const currentExtension = component.state.aspects.get(PkgAspect.id);\n    const currentData = currentExtension?.data as unknown as ComponentPkgExtensionData;\n    return currentData?.packageJsonModification ?? {};\n  }\n\n  async getPkgArtifact(component: Component): Promise<PkgArtifact> {\n    const artifacts = await this.builder.getArtifactsVinylByAspect(component, PkgAspect.id);\n    if (!artifacts.length) throw new PkgArtifactNotFound(component.id);\n\n    return new PkgArtifact(artifacts);\n  }\n\n  async getManifest(component: Component): Promise<ComponentPackageManifest> {\n    const name = this.getPackageName(component);\n    const latestVersion = component.latest;\n    if (!latestVersion) {\n      throw new BitError('can not get manifest for component without versions');\n    }\n    const preReleaseLatestTags = component.tags.getPreReleaseLatestTags();\n    const latest = snapToSemver(latestVersion);\n    const distTags = {\n      latest,\n      ...preReleaseLatestTags,\n    };\n    const versionsFromCache = this.manifestCache.get(name);\n    const getVersions = async (): Promise<VersionPackageManifest[]> => {\n      const headHash = component.head?.hash;\n      if (!headHash) throw new BitError(`unable to get manifest for \"${name}\", the head is empty`);\n      if (versionsFromCache) {\n        if (versionsFromCache.head !== headHash) this.manifestCache.delete(name);\n        else {\n          return versionsFromCache.manifest;\n        }\n      }\n      const versions = await this.getAllSnapsManifests(component);\n      const versionsWithoutEmpty = compact(versions);\n      this.manifestCache.set(name, { head: headHash, manifest: versionsWithoutEmpty });\n      return versionsWithoutEmpty;\n    };\n\n    const versions = await getVersions();\n    const externalRegistry = this.isPublishedToExternalRegistry(component);\n    return {\n      name,\n      distTags,\n      externalRegistry,\n      versions,\n    };\n  }\n\n  private async getAllSnapsManifests(component: Component): Promise<VersionPackageManifest[]> {\n    const iterable = component.snapsIterable();\n    const result: VersionPackageManifest[] = [];\n    for await (const snap of iterable) {\n      const manifest = await this.getSnapManifest(component, snap);\n      if (manifest) {\n        result.push(manifest);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Check if the component should be fetched from bit registry or from another registry\n   * This will usually determined by the latest version of the component\n   * @param component\n   */\n  isPublishedToExternalRegistry(component: IComponent): boolean {\n    const pkgExt = component.get(PkgAspect.id);\n    // By default publish to bit registry\n    if (!pkgExt) return false;\n    return !!(pkgExt.config?.packageJson?.name || pkgExt.config?.packageJson?.publishConfig);\n  }\n\n  private getComponentBuildData(component: Component): ComponentPkgExtensionData | undefined {\n    const data = this.builder.getDataByAspect(component, PkgAspect.id);\n    if (data) return data as ComponentPkgExtensionData;\n    // backward compatibility. the data used to be saved on the pkg aspect rather than on the\n    // builder aspect\n    const currentExtension = component.state.aspects.get(PkgAspect.id);\n    return currentExtension?.data as ComponentPkgExtensionData | undefined;\n  }\n\n  async getSnapManifest(component: Component, snap: Snap): Promise<VersionPackageManifest | undefined> {\n    const idWithCorrectVersion = component.id.changeVersion(snap.hash);\n\n    // @todo: this is a hack. see below the right way to do it.\n    const version = await this.scope.legacyScope.getVersionInstance(idWithCorrectVersion._legacy);\n    const builderData = version.extensions.findCoreExtension(BuilderAspect.id)?.data?.aspectsData;\n    const currentData = builderData?.find((a) => a.aspectId === PkgAspect.id)?.data;\n\n    // @todo: this is the proper way to communicate with the builder aspect. however, getting\n    // the entire Component for each one of the snaps is terrible in terms of the performance.\n\n    // const updatedComponent = await this.componentAspect.getHost().get(idWithCorrectVersion, true);\n    // if (!updatedComponent) {\n    //   throw new BitError(`snap ${snap.hash} for component ${component.id.toString()} is missing`);\n    // }\n    // const currentData = this.getComponentBuildData(updatedComponent);\n\n    // If for some reason the version has no package.json manifest, return undefined\n    if (!currentData?.pkgJson) {\n      return undefined;\n    }\n    const pkgJson = currentData?.pkgJson ?? {};\n    const checksum = currentData?.checksum;\n    if (!checksum) {\n      this.logger.error(`checksum for ${component.id.toString()} is missing`);\n      return undefined;\n    }\n    const dist = {\n      shasum: checksum,\n      tarball: this.componentAspect.getRoute(idWithCorrectVersion, routePath),\n    };\n\n    const manifest = {\n      ...pkgJson,\n      dist,\n    };\n    return manifest;\n  }\n\n  async getPackageTarFile(component: Component): Promise<AbstractVinyl> {\n    const artifacts = await this.builder.getArtifactsVinylByAspectAndName(\n      component,\n      PkgAspect.id,\n      TAR_FILE_ARTIFACT_NAME\n    );\n    if (!artifacts.length) throw new PackageTarFiletNotFound(component.id);\n\n    return artifacts[0];\n  }\n\n  async transformPackageJson(\n    legacyComponent: LegacyComponent,\n    packageJsonObject: Record<string, any>\n  ): Promise<Record<string, any>> {\n    // const newId = await this.workspace.resolveComponentId(component.id);\n    // const newComponent = await this.workspace.get(newId);\n    const host = this.componentAspect.getHost();\n    const id = await host.resolveComponentId(legacyComponent.id);\n    const newComponent = await host.get(id);\n    if (!newComponent) throw new Error(`cannot transform package.json of component: ${legacyComponent.id.toString()}`);\n    const newProps = this.getPackageJsonModifications(newComponent);\n    return Object.assign(packageJsonObject, newProps);\n  }\n}\n\nPkgAspect.addRuntime(PkgMain);\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAEA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EA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"}