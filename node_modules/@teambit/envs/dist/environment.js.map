{"version":3,"names":["hasCompiler","obj","getCompiler"],"sources":["environment.ts"],"sourcesContent":["// TODO: @gilad refactor to an abstract env.\nimport type { Linter, LinterContext } from '@teambit/linter';\nimport type { Formatter, FormatterContext } from '@teambit/formatter';\nimport type { Tester } from '@teambit/tester';\nimport type { Compiler } from '@teambit/compiler';\nimport type { Bundler, BundlerContext, DevServer, DevServerContext } from '@teambit/bundler';\nimport type { BuildTask } from '@teambit/builder';\nimport type { SchemaExtractor } from '@teambit/schema';\nimport type { WebpackConfigTransformer } from '@teambit/webpack';\nimport type { PackageJsonProps } from '@teambit/pkg';\nimport type { EnvPolicyConfigObject } from '@teambit/dependency-resolver';\nimport { ElementsWrapperContext } from '@teambit/elements';\nimport type { Capsule } from '@teambit/isolator';\nimport type { Component } from '@teambit/component';\nimport { EnvPreviewConfig } from '@teambit/preview';\n\nexport type EnvDescriptor = {\n  type: string;\n};\n\n/**\n * add a custom type and include all properties from within the environment.\n */\nexport interface Environment {\n  /**\n   * name of the environment.\n   */\n  name?: string;\n\n  /**\n   * description of the environment.\n   */\n  description?: string;\n\n  /**\n   * icon of the environment.\n   */\n  icon?: string;\n\n  [key: string]: any; // :TODO need to define an abstract type for service handlers (now using any)\n\n  /**\n   * Returns the Environment descriptor\n   * Required for any task\n   */\n  __getDescriptor?: () => Promise<EnvDescriptor>;\n\n  /**\n   * Returns a schema generator instance\n   */\n  getSchemaExtractor?: (config?: any) => SchemaExtractor;\n\n  /**\n   * Returns the dev patterns to match doc files\n   */\n  getDocsDevPatterns?: (component: Component) => string[];\n\n  /**\n   * Returns the dev patterns to match composition files\n   */\n  getCompositionsDevPatterns?: (component: Component) => string[];\n\n  /**\n   * Returns additional dev patterns for the component.\n   * Patterns that were provided by getDocsDevPatterns, getTestsDevPatterns will be considered as dev files as well, without need to add them here.\n   */\n  getDevPatterns?: (component: Component) => string[];\n}\n\nexport interface DependenciesEnv extends Environment {\n  /**\n   * Returns the list of dependencies\n   * Required for any task\n   */\n  getDependencies?: () => EnvPolicyConfigObject | Promise<EnvPolicyConfigObject>;\n\n  /**\n   * Returns a list of additional test host dependencies\n   * this will be added to the tester context\n   * This can be used in cases when you want specific dependencies to be resolved from the env during testing\n   * but you don't want these dependencies as peer dependencies of the component (as they are not used during runtime)\n   * An example for this is @angular/compiler, which during running tests you want to resolve from the env, but you don't\n   * need it during component runtime.\n   */\n  getAdditionalTestHostDependencies?: () => string[] | Promise<string[]>;\n\n  /**\n   * Returns a list of additional host dependencies\n   * this list will be provided as globals on the window after bit preview bundle\n   * by default bit will merge this list with the peers from the getDependencies function\n   */\n  getAdditionalHostDependencies?: () => string[] | Promise<string[]>;\n}\n\nexport type GetNpmIgnoreContext = {\n  capsule: Capsule;\n  component: Component;\n};\nexport interface PackageEnv extends Environment {\n  /**\n   * define the package json properties to add to each component.\n   * Used by `bit link` to augment package.json with new properties\n   */\n  getPackageJsonProps?: () => PackageJsonProps;\n\n  /**\n   * return `.npmignore` entries to be written before packing the component\n   */\n  getNpmIgnore?: (npmIgnoreContext?: GetNpmIgnoreContext) => string[];\n}\n\nexport interface LinterEnv extends Environment {\n  /**\n   * Returns & configures the linter to use (ESLint, ...)\n   * Required for `bit lint`\n   */\n  getLinter?: (context: LinterContext, transformers: any[]) => Linter;\n}\n\nexport interface FormatterEnv extends Environment {\n  /**\n   * Returns & configures the formatter to use (prettier, ...)\n   * Required for `bit format`\n   */\n  getFormatter?: (context: FormatterContext, transformers: any[]) => Formatter;\n}\n\nexport interface PreviewEnv extends Environment {\n  /**\n   * Returns a paths to a function which mounts a given component to DOM\n   * Required for `bit start` & `bit build`\n   */\n  getMounter?: () => string;\n\n  /**\n   * Returns a path to a docs template.\n   * Required for `bit start` & `bit build`\n   */\n  getDocsTemplate?: () => string;\n\n  /**\n   * Returns a bundler for the preview.\n   * Required for `bit build` & `bit start`\n   */\n  getBundler?: (context: BundlerContext, transformers: any[]) => Promise<Bundler>;\n\n  /**\n   * Returns preview config like the strategy name to use when bundling the components for the preview\n   */\n  getPreviewConfig?: () => EnvPreviewConfig;\n\n  /**\n   * Returns a bundler for the env template.\n   * this bundler will be used to bundle the docs/compositions (or other preview) apps\n   * Required for `bit build` & `bit tag`\n   */\n  getTemplateBundler?: (context: BundlerContext, transformers?: any[]) => Promise<Bundler>;\n}\n\nexport interface ElementsEnv extends Environment {\n  /**\n   * Returns a function that gets the context and wrap the component with a web component\n   * Required for `bit build`\n   */\n  getElementsWrapper: (context: ElementsWrapperContext) => string;\n\n  /**\n   * Returns a bundler for elements.\n   * Required for `bit build``\n   */\n  getElementsBundler: (context: BundlerContext, transformers: any[]) => Promise<Bundler>;\n}\n\nexport type PipeServiceModifiersMap = Record<string, PipeServiceModifier>;\n\nexport interface PipeServiceModifier {\n  transformers?: Function[];\n  module?: any;\n}\n\nexport interface BuilderEnv extends PreviewEnv {\n  /**\n   * @deprecated Fatal: a breaking API was introduced. Use getBuildPipe() instead.\n   */\n  getPipe?: () => BuildTask[];\n\n  /**\n   * Returns the component build pipeline\n   * Either `getBuildPipe`, `getTagPipe`, or `getSnapPipe` is required for `bit build`\n   */\n  getBuildPipe?: (modifiersMap?: PipeServiceModifiersMap) => BuildTask[];\n\n  /**\n   * Returns the component tag pipeline\n   * Either `getBuildPipe`, `getTagPipe`, or `getSnapPipe` is required for `bit build`\n   */\n  getTagPipe?: (modifiersMap?: PipeServiceModifiersMap) => BuildTask[];\n\n  /**\n   * Returns the component snap pipeline\n   * Either `getBuildPipe`, `getTagPipe`, or `getSnapPipe` is required for `bit build`\n   */\n  getSnapPipe?: (modifiersMap?: PipeServiceModifiersMap) => BuildTask[];\n}\n\nexport interface TesterEnv extends Environment {\n  /**\n   * Returns a tester\n   * Required for `bit start` & `bit test`\n   */\n  getTester?: (path: string, tester: any) => Tester;\n\n  /**\n   * Returns the dev patterns to match test files\n   */\n  getTestsDevPatterns?: (component: Component) => string[];\n}\n\nexport interface CompilerEnv {\n  /**\n   * Returns a compiler\n   * Required for making and reading dists, especially for `bit compile`\n   */\n  getCompiler: () => Compiler;\n}\n\nexport function hasCompiler(obj: Environment): obj is CompilerEnv {\n  return typeof obj.getCompiler === 'function';\n}\n\nexport interface DevEnv extends PreviewEnv {\n  /**\n   * Required for `bit start`\n   */\n  getDevEnvId?: (context?: any) => string;\n\n  /**\n   * Returns and configures the dev server\n   * Required for `bit start`\n   */\n  getDevServer?: (\n    context: DevServerContext,\n    transformers: WebpackConfigTransformer[]\n  ) => DevServer | Promise<DevServer>;\n}\n"],"mappings":";;;;;;AAAA;;AAoBA;AACA;AACA;;AA4MO,SAASA,WAAW,CAACC,GAAgB,EAAsB;EAChE,OAAO,OAAOA,GAAG,CAACC,WAAW,KAAK,UAAU;AAC9C"}