{"version":3,"names":[],"sources":["service.ts"],"sourcesContent":["import { Component } from '@teambit/component';\nimport { Environment } from '../environment';\n\nexport type EnvContext = {\n  components: Component[];\n};\n\nexport interface ServiceExecutionResult {\n  errors?: Error[];\n}\n\n/**\n * services allows to reuse and standardize services for development environments.\n * examples for services can be: `linting`, `compilation`, `build`, and others which offer\n * standard services to environments such as `react`, `angular` and `vue` and different compositions of each for\n * more concrete needs.\n *\n * `TData` - type of data returned by the service handler.\n * `TOpts` is the type of options passed to the environment through execution.\n * `TExecResponse` is the execution result of the service.\n */\nexport interface Service<TExecResponse extends ServiceExecutionResult, TData = {}, TOpts = {}> {\n  /**\n   * name of the service. (e.g. `compile`, `test`, etc.)\n   */\n  name?: string;\n\n  /**\n   * description of the env.\n   */\n  description?: string;\n\n  /**\n   * create a string to describe to service in the env cli.\n   */\n  render?(env: Environment, context: EnvContext[]): JSX.Element | Promise<JSX.Element>;\n\n  /**\n   * get service data from an environment.\n   */\n  getDescriptor?(environment: Environment, context?: EnvContext[]): TData | undefined | Promise<TData | undefined>;\n\n  /**\n   * executes a service on a subset of components.\n   */\n  run?(context: EnvContext, options?: TOpts): Promise<TExecResponse>;\n\n  /**\n   * run the service only once.\n   */\n  runOnce?(context: EnvContext[], options?: TOpts): Promise<any>;\n}\n"],"mappings":""}