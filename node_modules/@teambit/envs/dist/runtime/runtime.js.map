{"version":3,"names":["Runtime","constructor","runtimeEnvs","logger","runEnv","envRuntimeId","service","options","envRuntime","find","runtime","id","ComponentID","fromString","withoutVersion","_legacy","toStringWithoutVersion","EnvNotFoundInRuntime","run","runOnce","Error","envsExecutionContext","getEnvExecutionContext","serviceResult","map","env","ExecutionContext","runtimes","errors","contexts","mapSeries","data","err","error","message","consoleFailure","name","push","EnvsExecutionResult"],"sources":["runtime.ts"],"sourcesContent":["import { Logger } from '@teambit/logger';\nimport { ComponentID } from '@teambit/component';\nimport mapSeries from 'p-map-series';\nimport { EnvNotFoundInRuntime } from '../exceptions';\nimport { ExecutionContext } from '../context';\nimport { EnvService, ServiceExecutionResult } from '../services';\nimport { EnvRuntime } from './env-runtime';\nimport { EnvsExecutionResult } from './envs-execution-result';\n\nexport interface EnvResult<T extends ServiceExecutionResult> {\n  env: EnvRuntime;\n  data?: T;\n  error?: Error;\n}\n\nexport class Runtime {\n  constructor(\n    /**\n     * runtime instances of the environments.\n     */\n    readonly runtimeEnvs: EnvRuntime[],\n\n    private logger: Logger\n  ) {}\n\n  /**\n   * execute a service on a specific env.\n   */\n  runEnv<T>(\n    envRuntimeId: string,\n    service: EnvService<T>,\n    options?: { [key: string]: any }\n  ): Promise<EnvsExecutionResult<T>> {\n    const envRuntime = this.runtimeEnvs.find((runtime) => {\n      const id = ComponentID.fromString(runtime.id);\n      const withoutVersion = id._legacy.toStringWithoutVersion();\n      return withoutVersion === envRuntimeId;\n    });\n    if (!envRuntime) throw new EnvNotFoundInRuntime(envRuntimeId);\n    return this.run(service, options, [envRuntime]);\n  }\n\n  /**\n   * execute a service once for all environments.\n   */\n  async runOnce<T>(service: EnvService<T>, options?: { [key: string]: any }): Promise<any> {\n    if (!service.runOnce) throw new Error('a service must implement `runOnce()` in order to be executed');\n    const envsExecutionContext = this.getEnvExecutionContext();\n    const serviceResult = await service.runOnce(envsExecutionContext, options);\n    return serviceResult;\n  }\n\n  getEnvExecutionContext(): ExecutionContext[] {\n    const envsExecutionContext = this.runtimeEnvs.map((env) => new ExecutionContext(this, env));\n    return envsExecutionContext;\n  }\n\n  /**\n   * execute a service on each one of the environments.\n   */\n  async run<T>(\n    /**\n     * environment service to execute.\n     */\n    service: EnvService<T>,\n\n    /**\n     * options to proxy to the service upon execution.\n     */\n    options?: { [key: string]: any },\n    runtimes?: EnvRuntime[]\n  ): Promise<EnvsExecutionResult<T>> {\n    if (!service.run) throw new Error('a service must implement `run()` in order to be executed');\n    const errors: Error[] = [];\n    const contexts: EnvResult<T>[] = await mapSeries(runtimes || this.runtimeEnvs, async (env) => {\n      try {\n        // @ts-ignore\n        const serviceResult = await service.run(new ExecutionContext(this, env), options);\n\n        return {\n          env,\n          data: serviceResult,\n        };\n      } catch (err: any) {\n        this.logger.error(err.message, err);\n        this.logger.consoleFailure(`service \"${service.name}\" of env \"${env.id}\" has failed. error: ${err.message}`);\n        errors.push(err);\n        return {\n          env,\n          error: err,\n        };\n      }\n    });\n\n    return new EnvsExecutionResult(contexts);\n  }\n}\n"],"mappings":"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"}