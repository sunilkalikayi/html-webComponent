import { Logger } from '@teambit/logger';
import { ExecutionContext } from '../context';
import { EnvService, ServiceExecutionResult } from '../services';
import { EnvRuntime } from './env-runtime';
import { EnvsExecutionResult } from './envs-execution-result';
export interface EnvResult<T extends ServiceExecutionResult> {
    env: EnvRuntime;
    data?: T;
    error?: Error;
}
export declare class Runtime {
    /**
     * runtime instances of the environments.
     */
    readonly runtimeEnvs: EnvRuntime[];
    private logger;
    constructor(
    /**
     * runtime instances of the environments.
     */
    runtimeEnvs: EnvRuntime[], logger: Logger);
    /**
     * execute a service on a specific env.
     */
    runEnv<T>(envRuntimeId: string, service: EnvService<T>, options?: {
        [key: string]: any;
    }): Promise<EnvsExecutionResult<T>>;
    /**
     * execute a service once for all environments.
     */
    runOnce<T>(service: EnvService<T>, options?: {
        [key: string]: any;
    }): Promise<any>;
    getEnvExecutionContext(): ExecutionContext[];
    /**
     * execute a service on each one of the environments.
     */
    run<T>(
    /**
     * environment service to execute.
     */
    service: EnvService<T>, 
    /**
     * options to proxy to the service upon execution.
     */
    options?: {
        [key: string]: any;
    }, runtimes?: EnvRuntime[]): Promise<EnvsExecutionResult<T>>;
}
