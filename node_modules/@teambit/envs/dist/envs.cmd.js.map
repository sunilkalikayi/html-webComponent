{"version":3,"names":["ListEnvsCmd","constructor","envs","componentAspect","report","allEnvs","getAllRegisteredEnvs","join","title","chalk","green","GetEnvCmd","name","description","showEnv","id","host","component","get","resolveComponentId","Error","env","getEnv","envRuntime","createEnvironment","envExecutionContext","getEnvExecutionContext","services","getServices","allP","map","serviceId","service","render","all","Promise","item","getHost","EnvsCmd","components","list","getTable","tableData","envId","getEnvId","toString","header","value","table","CLITable","fromObject","sort"],"sources":["envs.cmd.tsx"],"sourcesContent":["// eslint-disable-next-line max-classes-per-file\nimport React from 'react';\nimport { Text, Newline } from 'ink';\nimport chalk from 'chalk';\nimport { CLITable } from '@teambit/cli-table';\nimport { Command } from '@teambit/cli';\nimport { ComponentMain, ComponentFactory, Component } from '@teambit/component';\nimport { EnvsMain } from './environments.main.runtime';\nimport { EnvOverview } from './components/env-overview';\n\nexport class ListEnvsCmd implements Command {\n  name = 'list';\n  description = 'list all envs available in the workspace';\n  options = [];\n  group = 'development';\n\n  constructor(private envs: EnvsMain, private componentAspect: ComponentMain) {}\n\n  async report() {\n    const allEnvs = this.envs.getAllRegisteredEnvs().join('\\n');\n    const title = chalk.green('the following envs are available in the workspace:');\n    return `${title}\\n${allEnvs}`;\n  }\n}\n\nexport class GetEnvCmd implements Command {\n  name = 'get <component-name>';\n  description = \"show information about a component's env\";\n  arguments = [\n    {\n      name: 'component-name',\n      description: \"the 'component name' or 'component id' of the component its env you'd like to inspect\",\n    },\n  ];\n  examples: [{ cmd: 'get ui/button'; description: 'show information about the env configured for ui/button' }];\n  options = [];\n  group = 'development';\n\n  constructor(private envs: EnvsMain, private componentAspect: ComponentMain) {}\n\n  async showEnv(id: string, host: ComponentFactory) {\n    const component = await host.get(await host.resolveComponentId(id));\n    if (!component) throw new Error(`component for env ${id} was not found`);\n    const env = this.envs.getEnv(component);\n    const envRuntime = await this.envs.createEnvironment([component]);\n    const envExecutionContext = envRuntime.getEnvExecutionContext();\n    const services = this.envs.getServices(env);\n    const allP = services.services.map(async ([serviceId, service]) => {\n      if (service.render)\n        return (\n          <Text>\n            <Text bold underline color=\"cyan\">\n              {serviceId}\n            </Text>\n            <Newline />\n            <Newline />\n            {await service.render(env, envExecutionContext)}\n          </Text>\n        );\n      return (\n        <Text key={serviceId}>\n          <Text bold underline>\n            {serviceId}\n          </Text>\n        </Text>\n      );\n    });\n\n    const all = await Promise.all(allP);\n\n    return (\n      <Text>\n        <EnvOverview envDef={env} />\n        {all.map((item) => item)}\n      </Text>\n    );\n  }\n\n  async render([name]: [string]): Promise<JSX.Element> {\n    const host = this.componentAspect.getHost();\n    // TODO: think what to do re this line with gilad.\n    if (!host) throw new Error('error: workspace not found');\n    return this.showEnv(name, host);\n  }\n}\n\nexport class EnvsCmd implements Command {\n  name = 'envs';\n  alias = 'env';\n  description = 'list all components maintained by the workspace and their corresponding envs';\n  options = [];\n  group = 'development';\n  commands: Command[] = [];\n\n  constructor(private envs: EnvsMain, private componentAspect: ComponentMain) {}\n\n  async render(): Promise<JSX.Element> {\n    const host = this.componentAspect.getHost();\n    // TODO: think what to do re this line with gilad.\n    if (!host) throw new Error('error: workspace not found');\n    const components = await host.list();\n    // TODO: refactor to a react table\n    return <Text>{this.getTable(components)}</Text>;\n  }\n\n  private getTable(components: Component[]) {\n    const tableData = components.map((component) => {\n      const envId = this.envs.getEnvId(component);\n      return {\n        component: component.id.toString(),\n        env: envId,\n      };\n    });\n\n    const header = [\n      {\n        value: 'component',\n      },\n      {\n        value: 'env',\n      },\n    ];\n    const table = CLITable.fromObject(header, tableData);\n    table.sort();\n    return table.render();\n  }\n}\n"],"mappings":"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"}