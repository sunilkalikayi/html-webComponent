{"version":3,"names":["DEFAULT_ENV","EnvsMain","icon","constructor","config","context","envSlot","logger","serviceSlot","componentMain","createEnvironment","components","createRuntime","getDefaultEnv","defaultEnv","get","Error","EnvDefinition","getCoreEnvsIds","compose","targetEnv","envTransformers","a","reduce","acc","transformer","override","propsToOverride","env","merge","sourceEnv","allNames","Set","keys","o","Object","prototype","getPrototypeOf","name","getOwnPropertyNames","add","forEach","key","fn","includes","bind","getEnvData","component","envsData","state","aspects","EnvsAspect","id","toString","data","getEnvIdFromEnvsData","ignoreVersion","undefined","rawEnvId","envIdWithoutVersion","ComponentID","fromString","toStringWithoutVersion","getEnvId","envIdFromEnvData","withVersion","resolveEnv","withVersionMatch","toArray","find","envId","withVersionMatchId","exactMatch","exactMatchId","EnvNotConfiguredForComponent","isUsingCoreEnv","isCoreEnv","getEnv","envDef","getEnvDefinitionByStringId","EnvNotFound","getEnvComponent","getEnvComponentByEnvId","requesting","host","getHost","newId","resolveComponentId","envComponent","BitError","getOrCalculateEnv","err","calculateEnv","getDescriptor","services","matchedEntry","entries","aspectEntry","envIdFromEnvsConfig","getEnvIdFromEnvsConfig","envIdFromEnvsConfigWithoutVersion","getEnvDefinitionById","printWarningIfFirstTime","errMsg","message","envDefFromList","getAllEnvsConfiguredOnComponent","getEnvFromEnvsConfig","getEnvsNotFromEnvsConfig","hasEnvConfigured","Boolean","length","getAllRegisteredEnvs","map","envData","push","calculateEnvFromExtensions","extensions","envsAspect","findCoreExtension","getEnvDefinitionByLegacyExtension","extension","newExtensionId","stringId","getEnvDefinitionByLegacyId","getEnvFromComponent","getEnvsEnvDefinition","alreadyShownWarning","consoleWarning","isEnvRegistered","isUsingAspectEnv","type","isUsingEnvEnv","isEnv","registerService","envServices","register","getServices","allServices","currentServices","service","implements","EnvServiceList","registerEnv","Runtime","aggregateByDefs","throwForDuplicateComponents","envsMap","Promise","all","envAspectDef","getEnvAspectDef","EnvRuntime","def","resolveAspects","MainRuntime","requestedOnly","idsStr","c","duplications","findDuplications","join","provider","graphql","loggerAspect","cli","createLogger","envs","registerShowFragments","EnvFragment","envsCmd","EnvsCmd","commands","ListEnvsCmd","GetEnvCmd","environmentsSchema","Slot","withType","GraphqlAspect","LoggerAspect","ComponentAspect","CLIAspect","addRuntime"],"sources":["environments.main.runtime.ts"],"sourcesContent":["import { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport { Component, ComponentAspect, ComponentMain, ComponentID, AspectData } from '@teambit/component';\nimport { GraphqlAspect, GraphqlMain } from '@teambit/graphql';\nimport { Harmony, Slot, SlotRegistry } from '@teambit/harmony';\nimport { Logger, LoggerAspect, LoggerMain } from '@teambit/logger';\nimport type { AspectDefinition } from '@teambit/aspect-loader';\nimport { ExtensionDataList, ExtensionDataEntry } from '@teambit/legacy/dist/consumer/config/extension-data';\nimport { BitError } from '@teambit/bit-error';\nimport findDuplications from '@teambit/legacy/dist/utils/array/find-duplications';\nimport { BitId } from '@teambit/legacy-bit-id';\nimport { EnvService } from './services';\nimport { Environment } from './environment';\nimport { EnvsAspect } from './environments.aspect';\nimport { environmentsSchema } from './environments.graphql';\nimport { EnvRuntime, Runtime } from './runtime';\nimport { EnvDefinition } from './env-definition';\nimport { EnvServiceList } from './env-service-list';\nimport { EnvsCmd, GetEnvCmd, ListEnvsCmd } from './envs.cmd';\nimport { EnvFragment } from './env.fragment';\nimport { EnvNotFound, EnvNotConfiguredForComponent } from './exceptions';\n\nexport type EnvsRegistry = SlotRegistry<Environment>;\n\nexport type EnvsConfig = {\n  env: string;\n  options: EnvOptions;\n};\n\nexport type EnvOptions = {};\n\nexport type EnvTransformer = (env: Environment) => Environment;\n\nexport type ServiceSlot = SlotRegistry<Array<EnvService<any>>>;\n\nexport type Descriptor = {\n  id: string;\n  icon: string;\n  services?: [];\n};\n\nexport const DEFAULT_ENV = 'teambit.harmony/node';\n\nexport class EnvsMain {\n  static runtime = MainRuntime;\n\n  private alreadyShownWarning = {};\n\n  /**\n   * icon of the extension.\n   */\n  icon() {\n    return `<svg width=\"50\" height=\"50\" xmlns=\"http://www.w3.org/2000/svg\">\n      <circle cx=\"25\" cy=\"25\" r=\"20\"/>\n    </svg>`;\n  }\n\n  constructor(\n    /**\n     * environments extension configuration.\n     */\n    readonly config: EnvsConfig,\n\n    /**\n     * harmony context.\n     */\n    private context: Harmony,\n\n    /**\n     * slot for allowing extensions to register new environment.\n     */\n    private envSlot: EnvsRegistry,\n\n    private logger: Logger,\n\n    private serviceSlot: ServiceSlot,\n\n    private componentMain: ComponentMain\n  ) {}\n\n  /**\n   * creates a new runtime environments for a set of components.\n   */\n  async createEnvironment(components: Component[]): Promise<Runtime> {\n    return this.createRuntime(components);\n  }\n\n  /**\n   * get the configured default env.\n   */\n  getDefaultEnv(): EnvDefinition {\n    const defaultEnv = this.envSlot.get(DEFAULT_ENV);\n    if (!defaultEnv) throw new Error('default env must be set.');\n\n    return new EnvDefinition(DEFAULT_ENV, defaultEnv);\n  }\n\n  getCoreEnvsIds(): string[] {\n    return [\n      'teambit.harmony/aspect',\n      'teambit.react/react',\n      'teambit.harmony/node',\n      'teambit.react/react-native',\n      'teambit.html/html',\n      'teambit.mdx/mdx',\n      'teambit.envs/env',\n      'teambit.mdx/readme',\n    ];\n  }\n\n  /**\n   * compose a new environment from a list of environment transformers.\n   */\n  compose(targetEnv: Environment, envTransformers: EnvTransformer[]) {\n    const a = envTransformers.reduce((acc, transformer) => {\n      acc = transformer(acc);\n      return acc;\n    }, targetEnv);\n\n    return a;\n  }\n\n  /**\n   * create an env transformer which overrides specific env properties.\n   */\n  override(propsToOverride: Environment): EnvTransformer {\n    return (env: Environment) => {\n      return this.merge(propsToOverride, env);\n    };\n  }\n\n  /**\n   * compose two environments into one.\n   */\n  merge<T extends Environment, S extends Environment>(targetEnv: Environment, sourceEnv: Environment): T & S {\n    const allNames = new Set<string>();\n    const keys = ['icon', 'name', 'description'];\n    for (let o = sourceEnv; o !== Object.prototype; o = Object.getPrototypeOf(o)) {\n      for (const name of Object.getOwnPropertyNames(o)) {\n        allNames.add(name);\n      }\n    }\n\n    allNames.forEach((key: string) => {\n      const fn = sourceEnv[key];\n      if (targetEnv[key]) return;\n      if (keys.includes(key)) targetEnv[key] = fn;\n      if (!fn || !fn.bind) {\n        return;\n      }\n      targetEnv[key] = fn.bind(sourceEnv);\n    });\n\n    return targetEnv as T & S;\n  }\n\n  getEnvData(component: Component): AspectData {\n    let envsData = component.state.aspects.get(EnvsAspect.id);\n    if (!envsData) {\n      // TODO: remove this once we re-export old components used to store the data here\n      envsData = component.state.aspects.get('teambit.workspace/workspace');\n    }\n    if (!envsData) throw new Error(`env was not configured on component ${component.id.toString()}`);\n    return envsData.data;\n  }\n\n  /**\n   * Return the id of the env as configured in the envs data (without version by default)\n   * The reason it's not contain version by default is that we want to take the version from the aspect defined on the component itself\n   * As this version is stay up to date during tagging the env along with the component\n   * @param component\n   * @param ignoreVersion\n   */\n  private getEnvIdFromEnvsData(component: Component, ignoreVersion = true): string | undefined {\n    const envsData = this.getEnvData(component);\n    if (!envsData) return undefined;\n    const rawEnvId = envsData.id;\n    if (!rawEnvId) return undefined;\n    if (!ignoreVersion) return rawEnvId;\n    const envIdWithoutVersion = ComponentID.fromString(rawEnvId).toStringWithoutVersion();\n    return envIdWithoutVersion;\n  }\n\n  /**\n   * get the env id of the given component.\n   */\n  getEnvId(component: Component): string {\n    const envIdFromEnvData = this.getEnvIdFromEnvsData(component);\n    if (!envIdFromEnvData) {\n      // This should never happen\n      throw new Error(`no env found for ${component.id.toString()}`);\n    }\n    const withVersion = this.resolveEnv(component, envIdFromEnvData);\n    const withVersionMatch = this.envSlot.toArray().find(([envId]) => {\n      return withVersion?.toString() === envId;\n    });\n    const withVersionMatchId = withVersionMatch?.[0];\n    if (withVersionMatchId) return withVersionMatchId;\n\n    // Handle core envs\n    const exactMatch = this.envSlot.toArray().find(([envId]) => {\n      return envIdFromEnvData === envId;\n    });\n\n    const exactMatchId = exactMatch?.[0];\n    if (exactMatchId) return exactMatchId;\n\n    if (!withVersion) throw new EnvNotConfiguredForComponent(envIdFromEnvData, component.id.toString());\n    return withVersion.toString();\n  }\n\n  isUsingCoreEnv(component: Component): boolean {\n    const envId = this.getEnvId(component);\n    return this.isCoreEnv(envId);\n  }\n\n  isCoreEnv(envId: string): boolean {\n    return this.getCoreEnvsIds().includes(envId);\n  }\n\n  /**\n   * get the env of the given component.\n   * In case you are asking for the env during on load you should use calculateEnv instead\n   */\n  getEnv(component: Component): EnvDefinition {\n    const id = this.getEnvId(component);\n    const envDef = this.getEnvDefinitionByStringId(id);\n    if (envDef) {\n      return envDef;\n    }\n    // Do not allow a non existing env\n    throw new EnvNotFound(id, component.id.toString());\n  }\n\n  /**\n   * get the env component of the given component.\n   */\n  async getEnvComponent(component: Component): Promise<Component> {\n    const envId = this.getEnvId(component);\n    return this.getEnvComponentByEnvId(envId, component.id.toString());\n  }\n\n  /**\n   * get the env component by the env id.\n   */\n  async getEnvComponentByEnvId(envId: string, requesting: string): Promise<Component> {\n    const host = this.componentMain.getHost();\n    const newId = await host.resolveComponentId(envId);\n    const envComponent = await host.get(newId);\n    if (!envComponent) {\n      throw new BitError(`can't load env. env id is ${envId} used by component ${requesting}`);\n    }\n    return envComponent;\n  }\n\n  /**\n   * get the env of the given component.\n   * This will try to use the regular getEnv but fallback to the calculate env (in case you are using it during on load)\n   * This is safe to be used on onLoad as well\n   */\n  getOrCalculateEnv(component: Component): EnvDefinition {\n    try {\n      return this.getEnv(component);\n    } catch (err) {\n      return this.calculateEnv(component);\n    }\n  }\n\n  /**\n   * get an environment Descriptor.\n   */\n  getDescriptor(component: Component): Descriptor | null {\n    const envsData = this.getEnvData(component);\n    return {\n      id: envsData.id,\n      icon: envsData.icon,\n      services: envsData.services,\n    };\n  }\n\n  resolveEnv(component: Component, id: string) {\n    const matchedEntry = component.state.aspects.entries.find((aspectEntry) => {\n      return id === aspectEntry.id.toString() || id === aspectEntry.id.toString({ ignoreVersion: true });\n    });\n\n    return matchedEntry?.id;\n  }\n\n  /**\n   * This used to calculate the actual env during the component load.\n   * Do not use it to get the env (use getEnv instead)\n   * This should be used only during on load\n   */\n  calculateEnv(component: Component): EnvDefinition {\n    // Search first for env configured via envs aspect itself\n    const envIdFromEnvsConfig = this.getEnvIdFromEnvsConfig(component);\n    let envIdFromEnvsConfigWithoutVersion;\n    if (envIdFromEnvsConfig) {\n      envIdFromEnvsConfigWithoutVersion = ComponentID.fromString(envIdFromEnvsConfig).toStringWithoutVersion();\n      const envDef = this.getEnvDefinitionByStringId(envIdFromEnvsConfigWithoutVersion);\n      if (envDef) {\n        return envDef;\n      }\n    }\n\n    // in some cases we have the id configured in the teambit.envs/envs but without the version\n    // in such cases we won't find it in the slot\n    // we search in the component aspect list a matching aspect which is match the id from the teambit.envs/envs\n    if (envIdFromEnvsConfigWithoutVersion) {\n      const matchedEntry = component.state.aspects.entries.find((aspectEntry) => {\n        return (\n          envIdFromEnvsConfigWithoutVersion === aspectEntry.id.toString() ||\n          envIdFromEnvsConfigWithoutVersion === aspectEntry.id.toString({ ignoreVersion: true })\n        );\n      });\n      if (matchedEntry) {\n        // during the tag process, the version in the aspect-entry-id is changed and is not the\n        // same as it was when it registered to the slot.\n        const envDef = this.getEnvDefinitionById(matchedEntry.id);\n        if (envDef) {\n          return envDef;\n        }\n        // Do not allow a non existing env\n        this.printWarningIfFirstTime(\n          matchedEntry.id.toString(),\n          `environment with ID: ${matchedEntry.id.toString()} configured on component ${component.id.toString()} was not found`\n        );\n      }\n      // Do not allow configure teambit.envs/envs on the component without configure the env aspect itself\n      const errMsg = new EnvNotConfiguredForComponent(envIdFromEnvsConfig as string, component.id.toString()).message;\n      this.printWarningIfFirstTime(envIdFromEnvsConfig as string, errMsg);\n    }\n\n    // in case there is no config in teambit.envs/envs search the aspects for the first env that registered as env\n    let envDefFromList;\n    component.state.aspects.entries.find((aspectEntry) => {\n      const envDef = this.getEnvDefinitionById(aspectEntry.id);\n      if (envDef) {\n        envDefFromList = envDef;\n      }\n      return !!envDef;\n    });\n\n    if (envDefFromList) {\n      return envDefFromList;\n    }\n    return this.getDefaultEnv();\n  }\n\n  /**\n   * an env can be configured on a component in two ways:\n   * 1) explicitly inside \"teambit.envs/envs\". `{ \"teambit.envs/envs\": { \"env\": \"my-env\" } }`\n   * 2) the env aspect is set on the variant as any other aspect, e.g. `{ \"my-env\": {} }`\n   *\n   * this method returns #1 if exists, otherwise, #2.\n   */\n  getAllEnvsConfiguredOnComponent(component: Component): EnvDefinition[] {\n    // if a component has \"envs\" config, use it and ignore other components that are set up\n    // in this components which happen to be envs.\n    const envDef = this.getEnvFromEnvsConfig(component);\n    if (envDef) {\n      return [envDef];\n    }\n\n    return this.getEnvsNotFromEnvsConfig(component);\n  }\n\n  /**\n   * whether a component has an env configured (either by variant or .bitmap).\n   */\n  hasEnvConfigured(component: Component): boolean {\n    return Boolean(this.getAllEnvsConfiguredOnComponent(component).length);\n  }\n\n  getAllRegisteredEnvs(): string[] {\n    return this.envSlot.toArray().map((envData) => envData[0]);\n  }\n\n  /**\n   * an env can be configured on a component in two ways:\n   * 1) explicitly inside \"teambit.envs/envs\". `{ \"teambit.envs/envs\": { \"env\": \"my-env\" } }`\n   * 2) the env aspect is set on the variant as any other aspect, e.g. `{ \"my-env\": {} }`\n   *\n   * this method returns only #1\n   */\n  getEnvFromEnvsConfig(component: Component): EnvDefinition | undefined {\n    const envIdFromEnvsConfig = this.getEnvIdFromEnvsConfig(component);\n    if (!envIdFromEnvsConfig) {\n      return undefined;\n    }\n    const envIdFromEnvsConfigWithoutVersion = ComponentID.fromString(envIdFromEnvsConfig).toStringWithoutVersion();\n    const envDef = this.getEnvDefinitionByStringId(envIdFromEnvsConfigWithoutVersion);\n    return envDef;\n  }\n\n  /**\n   * an env can be configured on a component in two ways:\n   * 1) explicitly inside \"teambit.envs/envs\". `{ \"teambit.envs/envs\": { \"env\": \"my-env\" } }`\n   * 2) the env aspect is set on the variant as any other aspect, e.g. `{ \"my-env\": {} }`\n   *\n   * this method returns only #2\n   */\n  getEnvsNotFromEnvsConfig(component: Component): EnvDefinition[] {\n    return component.state.aspects.entries.reduce((acc: EnvDefinition[], aspectEntry) => {\n      const envDef = this.getEnvDefinitionById(aspectEntry.id);\n      if (envDef) acc.push(envDef);\n      return acc;\n    }, []);\n  }\n\n  /**\n   * @deprecated DO NOT USE THIS METHOD ANYMORE!!! (PLEASE USE .calculateEnv() instead!)\n   */\n  calculateEnvFromExtensions(extensions: ExtensionDataList): EnvDefinition {\n    // Search first for env configured via envs aspect itself\n    const envsAspect = extensions.findCoreExtension(EnvsAspect.id);\n    const envIdFromEnvsConfig = envsAspect?.config.env;\n    let envIdFromEnvsConfigWithoutVersion;\n\n    if (envIdFromEnvsConfig) {\n      envIdFromEnvsConfigWithoutVersion = ComponentID.fromString(envIdFromEnvsConfig).toStringWithoutVersion();\n      const envDef = this.getEnvDefinitionByStringId(envIdFromEnvsConfigWithoutVersion);\n      if (envDef) {\n        return envDef;\n      }\n    }\n\n    const getEnvDefinitionByLegacyExtension = (extension: ExtensionDataEntry): EnvDefinition | undefined => {\n      const envDef = extension.newExtensionId\n        ? this.getEnvDefinitionById(extension.newExtensionId)\n        : this.getEnvDefinitionByStringId(extension.stringId);\n      return envDef;\n    };\n\n    // in some cases we have the id configured in the teambit.envs/envs but without the version\n    // in such cases we won't find it in the slot\n    // we search in the component aspect list a matching aspect which is match the id from the teambit.envs/envs\n    if (envIdFromEnvsConfigWithoutVersion) {\n      const matchedEntry = extensions.find((extension) => {\n        if (extension.newExtensionId) {\n          return (\n            envIdFromEnvsConfigWithoutVersion === extension.newExtensionId.toString() ||\n            envIdFromEnvsConfigWithoutVersion === extension.newExtensionId.toString({ ignoreVersion: true })\n          );\n        }\n        return envIdFromEnvsConfigWithoutVersion === extension.stringId;\n      });\n      if (matchedEntry) {\n        // during the tag process, the version in the aspect-entry-id is changed and is not the\n        // same as it was when it registered to the slot.\n        const envDef = getEnvDefinitionByLegacyExtension(matchedEntry);\n        if (envDef) {\n          return envDef;\n        }\n        // Do not allow a non existing env\n        this.printWarningIfFirstTime(\n          matchedEntry.id.toString(),\n          `environment with ID: ${matchedEntry.id.toString()} was not found`\n        );\n      }\n      // Do not allow configure teambit.envs/envs on the component without configure the env aspect itself\n      const errMsg = new EnvNotConfiguredForComponent(envIdFromEnvsConfig).message;\n      this.printWarningIfFirstTime(envIdFromEnvsConfig, errMsg);\n    }\n\n    // in case there is no config in teambit.envs/envs search the aspects for the first env that registered as env\n    let envDefFromList;\n    extensions.find((extension: ExtensionDataEntry) => {\n      const envDef = getEnvDefinitionByLegacyExtension(extension);\n      if (envDef) {\n        envDefFromList = envDef;\n      }\n      return !!envDef;\n    });\n\n    if (envDefFromList) {\n      return envDefFromList;\n    }\n    return this.getDefaultEnv();\n  }\n\n  private getEnvIdFromEnvsConfig(component: Component): string | undefined {\n    const envsAspect = component.state.aspects.get(EnvsAspect.id);\n    return envsAspect?.config.env;\n  }\n\n  getEnvDefinitionById(id: ComponentID): EnvDefinition | undefined {\n    const envDef =\n      this.getEnvDefinitionByStringId(id.toString()) ||\n      this.getEnvDefinitionByStringId(id.toString({ ignoreVersion: true }));\n    return envDef;\n  }\n\n  async getEnvDefinitionByLegacyId(id: BitId): Promise<EnvDefinition | undefined> {\n    const host = this.componentMain.getHost();\n    const newId = await host.resolveComponentId(id);\n    return this.getEnvDefinitionById(newId);\n  }\n\n  private getEnvDefinitionByStringId(envId: string): EnvDefinition | undefined {\n    const env = this.envSlot.get(envId);\n    if (env) {\n      return new EnvDefinition(envId, env as Environment);\n    }\n    return undefined;\n  }\n\n  getEnvFromComponent(envComponent: Component): EnvDefinition | undefined {\n    const env = this.getEnvDefinitionById(envComponent.id);\n    return env;\n  }\n\n  /**\n   * Return the env definition of teambit.envs/env\n   */\n  getEnvsEnvDefinition(): EnvDefinition {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this.getEnvDefinitionByStringId('teambit.envs/env')!;\n  }\n\n  private printWarningIfFirstTime(envId: string, message: string) {\n    if (!this.alreadyShownWarning[envId]) {\n      this.alreadyShownWarning[envId] = true;\n      this.logger.consoleWarning(message);\n    }\n  }\n\n  /**\n   * determines whether an env is registered.\n   */\n  isEnvRegistered(id: string) {\n    return Boolean(this.envSlot.get(id));\n  }\n\n  isUsingAspectEnv(component: Component): boolean {\n    const data = this.getEnvData(component);\n    if (!data) return false;\n    return data.type === 'aspect';\n  }\n\n  isUsingEnvEnv(component: Component): boolean {\n    const data = this.getEnvData(component);\n    if (!data) return false;\n    return data.type === 'env';\n  }\n\n  /**\n   * Check if the given component is an env component.\n   * @param component\n   * @returns\n   */\n  isEnv(component: Component): boolean {\n    return this.isUsingEnvEnv(component) || this.isEnvRegistered(component.id.toString());\n  }\n\n  /**\n   * register a new environment service.\n   */\n  registerService(...envServices: EnvService<any>[]) {\n    this.serviceSlot.register(envServices);\n    return this;\n  }\n\n  /**\n   * get list of services enabled on an env.\n   */\n  getServices(env: EnvDefinition): EnvServiceList {\n    const allServices = this.serviceSlot.toArray();\n    const services: [string, EnvService<any>][] = [];\n    allServices.forEach(([id, currentServices]) => {\n      currentServices.forEach((service) => {\n        if (this.implements(env, service)) {\n          services.push([id, service]);\n        }\n      });\n    });\n    return new EnvServiceList(env, services);\n  }\n\n  implements(env: EnvDefinition, service: EnvService<any>) {\n    // TODO: remove this after refactoring everything and remove getDescriptor from being optional.\n    if (!service.getDescriptor) return false;\n    return !!service.getDescriptor(env);\n  }\n\n  /**\n   * register an environment.\n   */\n  registerEnv(env: Environment) {\n    return this.envSlot.register(env);\n  }\n\n  // refactor here\n  private async createRuntime(components: Component[]): Promise<Runtime> {\n    return new Runtime(await this.aggregateByDefs(components), this.logger);\n  }\n\n  // :TODO can be refactored to few utilities who will make repeating this very easy.\n  private async aggregateByDefs(components: Component[]): Promise<EnvRuntime[]> {\n    this.throwForDuplicateComponents(components);\n    const envsMap = {};\n    components.forEach((component: Component) => {\n      const envDef = this.getEnv(component);\n      const envId = envDef.id;\n      const env = envDef.env;\n      // handle config as well when aggregating envs.\n      if (envsMap[envId]) envsMap[envId].components.push(component);\n      else\n        envsMap[envId] = {\n          components: [component],\n          env,\n        };\n    });\n\n    return Promise.all(\n      Object.keys(envsMap).map(async (key) => {\n        const envAspectDef = await this.getEnvAspectDef(key);\n        return new EnvRuntime(key, envsMap[key].env, envsMap[key].components, envAspectDef);\n      })\n    );\n  }\n\n  private async getEnvAspectDef(envId: string): Promise<AspectDefinition> {\n    const host = this.componentMain.getHost();\n    const id = await host.resolveComponentId(envId);\n    const def = (await host.resolveAspects(MainRuntime.name, [id], { requestedOnly: true }))[0];\n    return def;\n  }\n\n  private throwForDuplicateComponents(components: Component[]) {\n    const idsStr = components.map((c) => c.id.toString());\n    const duplications = findDuplications(idsStr);\n    if (duplications.length) {\n      throw new Error(`found duplicated components: ${duplications.join(', ')}`);\n    }\n  }\n\n  static slots = [Slot.withType<Environment>(), Slot.withType<EnvService<any>>()];\n\n  static dependencies = [GraphqlAspect, LoggerAspect, ComponentAspect, CLIAspect];\n\n  static async provider(\n    [graphql, loggerAspect, component, cli]: [GraphqlMain, LoggerMain, ComponentMain, CLIMain],\n    config: EnvsConfig,\n    [envSlot, serviceSlot]: [EnvsRegistry, ServiceSlot],\n    context: Harmony\n  ) {\n    const logger = loggerAspect.createLogger(EnvsAspect.id);\n    const envs = new EnvsMain(config, context, envSlot, logger, serviceSlot, component);\n    component.registerShowFragments([new EnvFragment(envs)]);\n    const envsCmd = new EnvsCmd(envs, component);\n    envsCmd.commands = [new ListEnvsCmd(envs, component), new GetEnvCmd(envs, component)];\n    cli.register(envsCmd);\n    graphql.register(environmentsSchema(envs));\n    return envs;\n  }\n}\n\nEnvsAspect.addRuntime(EnvsMain);\n"],"mappings":"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"}