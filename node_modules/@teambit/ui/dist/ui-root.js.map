{"version":3,"names":[],"sources":["ui-root.tsx"],"sourcesContent":["import { AspectDefinition } from '@teambit/aspect-loader';\nimport { ComponentDir } from '@teambit/bundler';\nimport { Component, ComponentID, ResolveAspectsOptions } from '@teambit/component';\nimport { ProxyConfigArrayItem } from 'webpack-dev-server';\n\n// TODO: remove this extends \"ComponentDir\", this should be part of the workspace alone since scope\n// would never have componentDir and as it has nothing to do with `UIRoot`.\nexport interface UIRoot extends ComponentDir {\n  /**\n   * unique name of the ui.\n   */\n  name: string;\n\n  /**\n   * path of the ui root.\n   */\n  path: string;\n\n  /**\n   * name of the UI root config file.\n   */\n  configFile: string;\n\n  buildOptions?: {\n    ssr?: boolean;\n    launchBrowserOnStart?: boolean;\n  };\n\n  /**\n   * resolve aspects in the UI root. (resolve all if componentIds not provided)\n   */\n  resolveAspects(\n    runtimeName: string,\n    componentIds?: ComponentID[],\n    opts?: ResolveAspectsOptions\n  ): Promise<AspectDefinition[]>;\n\n  /**\n   * resolve components from a given pattern.\n   */\n  resolvePattern?(pattern: string): Promise<Component[]>;\n\n  /**\n   * listener for when the dev server starts. can be used for running the watcher.\n   */\n  postStart?(options: PostStartOptions): Promise<void>;\n\n  /**\n   * determine whether UI should get a priority.\n   */\n  priority?: boolean;\n}\n\nexport type ProxyEntry = ProxyConfigArrayItem & {\n  context: string[]; // limit type to simplify our code. (not required)\n};\n\nexport type PostStartOptions = {\n  /**\n   * pattern for selecting components in the container.\n   */\n  pattern?: string;\n};\n"],"mappings":""}