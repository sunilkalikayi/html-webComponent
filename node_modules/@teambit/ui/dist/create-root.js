"use strict";

require("core-js/modules/es.promise.js");
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.string.replace.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRoot = createRoot;
function _toolboxPath() {
  const data = require("@teambit/toolbox.path.to-windows-compatible-path");
  _toolboxPath = function () {
    return data;
  };
  return data;
}
function _lodash() {
  const data = require("lodash");
  _lodash = function () {
    return data;
  };
  return data;
}
function _path() {
  const data = require("path");
  _path = function () {
    return data;
  };
  return data;
}
function _ui() {
  const data = require("./ui.aspect");
  _ui = function () {
    return data;
  };
  return data;
}
async function createRoot(aspectDefs, rootExtensionName, rootAspect = _ui().UIAspect.id, runtime = 'ui', config = {}) {
  const rootId = rootExtensionName ? `'${rootExtensionName}'` : '';
  const identifiers = getIdentifiers(aspectDefs, 'Aspect');
  const idSetters = getIdSetters(aspectDefs, 'Aspect');
  config['teambit.harmony/bit'] = rootExtensionName;
  // Escaping "'" in case for example in the config you have something like:
  // description: "team's scope"
  const stringifiedConfig = (0, _toolboxPath().toWindowsCompatiblePath)(JSON.stringify(config)).replace(/'/g, "\\'");
  return `
${createImports(aspectDefs)}

const isBrowser = typeof window !== "undefined";
const config = JSON.parse('${stringifiedConfig}');
${idSetters.join('\n')}
export default function render(...props){
  return Harmony.load([${identifiers.join(', ')}], '${runtime}', config)
    .then((harmony) => {
      return harmony
      .run()
      .then(() => harmony.get('${rootAspect}'))
      .then((rootExtension) => {
        const ssrSetup = !isBrowser && rootExtension.setupSsr;
        const setup = rootExtension.setup;
        const setupFunc = (ssrSetup || setup || function noop(){}).bind(rootExtension);

        return (
          Promise.resolve(setupFunc())
            .then(() => rootExtension)
        );
      })
      .then((rootExtension) => {
        if (isBrowser) {
          return rootExtension.render(${rootId}, ...props);
        } else {
          return rootExtension.renderSsr(${rootId}, ...props);
        }
      })
      .catch((err) => {
        throw err;
      });
    });
}

if (isBrowser) render();
`;
}
function createImports(aspectDefs) {
  const defs = aspectDefs.filter(def => def.runtimePath);
  return `import { Harmony } from '@teambit/harmony';
${getImportStatements(aspectDefs, 'aspectPath', 'Aspect')}
${getImportStatements(defs, 'runtimePath', 'Runtime')}`;
}
function getImportStatements(aspectDefs, pathProp, suffix) {
  return aspectDefs.map(aspectDef => `import ${getIdentifier(aspectDef, suffix)} from '${(0, _toolboxPath().toWindowsCompatiblePath)(aspectDef[pathProp])}';`).join('\n');
}
function getIdentifiers(aspectDefs, suffix) {
  return aspectDefs.map(aspectDef => `${getIdentifier(aspectDef, suffix)}`);
}
function getIdSetters(defs, suffix) {
  return defs.map(def => {
    if (!def.getId) return undefined;
    return `${getIdentifier(def, suffix)}.id = '${def.getId}';`;
  }).filter(val => !!val);
}
function getIdentifier(aspectDef, suffix) {
  if (!aspectDef.component && !aspectDef.local) {
    return getCoreIdentifier(aspectDef.aspectPath, suffix);
  }
  return getRegularAspectIdentifier(aspectDef, suffix);
}
function getRegularAspectIdentifier(aspectDef, suffix) {
  return (0, _lodash().camelCase)(`${(0, _path().parse)(aspectDef.aspectPath).base.replace(/\./, '__').replace('@', '__')}${suffix}`);
}
function getCoreIdentifier(path, suffix) {
  return (0, _lodash().camelCase)(`${(0, _path().parse)(path).name.split('.')[0]}${suffix}`);
}

//# sourceMappingURL=create-root.js.map