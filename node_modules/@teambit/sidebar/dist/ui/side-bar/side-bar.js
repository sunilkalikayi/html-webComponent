"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.array.sort.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SideBar = SideBar;
function _extends2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
  _extends2 = function () {
    return data;
  };
  return data;
}
function _objectWithoutProperties2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
  _objectWithoutProperties2 = function () {
    return data;
  };
  return data;
}
function _react() {
  const data = _interopRequireWildcard(require("react"));
  _react = function () {
    return data;
  };
  return data;
}
function _lodash() {
  const data = require("lodash");
  _lodash = function () {
    return data;
  };
  return data;
}
function _classnames() {
  const data = _interopRequireDefault(require("classnames"));
  _classnames = function () {
    return data;
  };
  return data;
}
function _designUiSurfacesMenu() {
  const data = require("@teambit/design.ui.surfaces.menu.section");
  _designUiSurfacesMenu = function () {
    return data;
  };
  return data;
}
function _uiFoundationUiTree() {
  const data = require("@teambit/ui-foundation.ui.tree.drawer");
  _uiFoundationUiTree = function () {
    return data;
  };
  return data;
}
function _sideBarModule() {
  const data = _interopRequireDefault(require("./side-bar.module.scss"));
  _sideBarModule = function () {
    return data;
  };
  return data;
}
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * side bar component.
 */
function SideBar(_ref) {
  let {
      drawerSlot,
      items = []
    } = _ref,
    rest = (0, _objectWithoutProperties2().default)(_ref, ["drawerSlot", "items"]);
  const drawers = (0, _lodash().flatten)(drawerSlot.values()).filter(drawer => {
    var _drawer$isHidden;
    return !(drawer !== null && drawer !== void 0 && (_drawer$isHidden = drawer.isHidden) !== null && _drawer$isHidden !== void 0 && _drawer$isHidden.call(drawer));
  }).sort(sortFn);
  const [openDrawerList, onToggleDrawer] = (0, _react().useState)(drawers.map(drawer => drawer.id));
  const handleDrawerToggle = id => {
    const isDrawerOpen = openDrawerList.includes(id);
    if (isDrawerOpen) {
      onToggleDrawer(list => list.filter(drawer => drawer !== id));
      return;
    }
    onToggleDrawer(list => list.concat(id));
  };
  return /*#__PURE__*/_react().default.createElement("div", (0, _extends2().default)({}, rest, {
    className: _sideBarModule().default.sidebar
  }), /*#__PURE__*/_react().default.createElement(_designUiSurfacesMenu().MenuSection, {
    items: items
  }), drawers.map(drawer => {
    if (!drawer || !drawer.name) return null;
    // consider passing collapse all as a prop so each drawer collapses itself
    const isOpen = openDrawerList.includes(drawer.id);
    return /*#__PURE__*/_react().default.createElement(_uiFoundationUiTree().DrawerUI, {
      className: (0, _classnames().default)(_sideBarModule().default.sidebarDrawer, isOpen && _sideBarModule().default.open),
      isOpen: isOpen,
      onToggle: () => handleDrawerToggle(drawer.id),
      key: drawer.id,
      name: drawer.name,
      Widgets: drawer.widgets,
      Context: drawer.Context
    }, /*#__PURE__*/_react().default.createElement(drawer.render, null));
  }));
}
function sortFn(first, second) {
  var _first$order, _second$order;
  // 0  - equal
  // <0 - first < second
  // >0 - first > second

  return ((_first$order = first.order) !== null && _first$order !== void 0 ? _first$order : 0) - ((_second$order = second.order) !== null && _second$order !== void 0 ? _second$order : 0);
}

//# sourceMappingURL=side-bar.js.map