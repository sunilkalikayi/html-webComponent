"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ElementsMain = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _camelcase() {
  const data = _interopRequireDefault(require("camelcase"));
  _camelcase = function () {
    return data;
  };
  return data;
}
function _builder() {
  const data = require("@teambit/builder");
  _builder = function () {
    return data;
  };
  return data;
}
function _cli() {
  const data = require("@teambit/cli");
  _cli = function () {
    return data;
  };
  return data;
}
function _component() {
  const data = _interopRequireDefault(require("@teambit/component"));
  _component = function () {
    return data;
  };
  return data;
}
function _logger() {
  const data = require("@teambit/logger");
  _logger = function () {
    return data;
  };
  return data;
}
function _graphql() {
  const data = _interopRequireDefault(require("@teambit/graphql"));
  _graphql = function () {
    return data;
  };
  return data;
}
function _elementsArtifact() {
  const data = require("./elements-artifact");
  _elementsArtifact = function () {
    return data;
  };
  return data;
}
function _elements() {
  const data = require("./elements.aspect");
  _elements = function () {
    return data;
  };
  return data;
}
function _elements2() {
  const data = require("./elements.route");
  _elements2 = function () {
    return data;
  };
  return data;
}
function _elements3() {
  const data = require("./elements.task");
  _elements3 = function () {
    return data;
  };
  return data;
}
function _elemets() {
  const data = require("./elemets.graphql");
  _elemets = function () {
    return data;
  };
  return data;
}
class ElementsMain {
  constructor(builder, componentExtension) {
    this.builder = builder;
    this.componentExtension = componentExtension;
    (0, _defineProperty2().default)(this, "baseRoute", `elements/`);
  }
  getElementsDirName() {
    return '__bit__elements';
  }
  createTask(storageResolver) {
    return new (_elements3().ElementTask)(this, storageResolver);
  }
  getWebpackTransformers() {
    const defaultTransformer = (configMutator, context) => {
      const defaultBundlePrefix = _elementsArtifact().ElementsArtifact.defaultMainFilePrefix;
      const namePascalCase = (0, _camelcase().default)(context.target.components[0].id.name, {
        pascalCase: true
      });
      configMutator.raw.output = configMutator.raw.output || {};
      configMutator.raw.output.filename = `static/js/${defaultBundlePrefix}.[contenthash:8].js`;
      configMutator.raw.output.library = {
        name: namePascalCase,
        type: 'umd'
      };
      return configMutator;
    };
    return [defaultTransformer];
  }
  async getElements(component) {
    const artifacts = await this.builder.getArtifactsVinylByAspect(component, _elements().ElementsAspect.id);
    if (!artifacts.length) return undefined;
    return new (_elementsArtifact().ElementsArtifact)(artifacts);
  }
  isElementsExist(component) {
    const artifacts = this.builder.getArtifactsByAspect(component, _elements().ElementsAspect.id);
    return !artifacts.isEmpty();
  }
  async getElementUrl(component) {
    const artifacts = await this.getElements(component);
    // In case there are no elements return as undefined
    if (!artifacts) return undefined;
    if (artifacts !== null && artifacts !== void 0 && artifacts.isEmpty()) return undefined;
    const url = artifacts === null || artifacts === void 0 ? void 0 : artifacts.getMainElementsFileUrl();
    // In case of public url (like cdn) return the public url
    if (url) {
      return url;
    }
    // return the url in the scope
    return this.componentExtension.getRoute(component.id, this.baseRoute);
  }
  static async provider([componentExtension, builder, loggerMain, graphql]) {
    const elements = new ElementsMain(builder, componentExtension);
    const logger = loggerMain.createLogger(_elements().ElementsAspect.id);
    const elementsRoute = new (_elements2().ElementsRoute)(elements, logger);
    graphql.register((0, _elemets().elementsSchema)(elements));
    componentExtension.registerRoute([elementsRoute]);
    return elements;
  }
}
exports.ElementsMain = ElementsMain;
(0, _defineProperty2().default)(ElementsMain, "slots", []);
(0, _defineProperty2().default)(ElementsMain, "dependencies", [_component().default, _builder().BuilderAspect, _logger().LoggerAspect, _graphql().default]);
(0, _defineProperty2().default)(ElementsMain, "runtime", _cli().MainRuntime);
_elements().ElementsAspect.addRuntime(ElementsMain);

//# sourceMappingURL=elements.main.runtime.js.map