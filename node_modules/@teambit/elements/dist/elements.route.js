"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ElementsRoute = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _mime() {
  const data = _interopRequireDefault(require("mime"));
  _mime = function () {
    return data;
  };
  return data;
}
function _path() {
  const data = require("path");
  _path = function () {
    return data;
  };
  return data;
}
function _uiFoundationUiPages() {
  const data = require("@teambit/ui-foundation.ui.pages.static-error");
  _uiFoundationUiPages = function () {
    return data;
  };
  return data;
}
class ElementsRoute {
  constructor(
  /**
   * elements extension.
   */
  elements, logger) {
    this.elements = elements;
    this.logger = logger;
    (0, _defineProperty2().default)(this, "route", `/${this.elements.baseRoute}:elementsPath(*)`);
    (0, _defineProperty2().default)(this, "method", 'get');
    (0, _defineProperty2().default)(this, "middlewares", [async (req, res) => {
      try {
        // @ts-ignore TODO: @guy please fix.
        const component = req.component;
        if (!component) return res.status(404).send();
        let artifact;
        // TODO - prevent error `getVinylsAndImportIfMissing is not a function` #4680
        try {
          artifact = await this.elements.getElements(component);
        } catch (e) {
          return res.status(404).send();
        }
        // TODO: please fix file path concatenation here.
        let file;
        if (req.params.elementsPath) {
          var _artifact;
          const relativePath = req.params.elementsPath;
          const calculatedPath = (0, _path().join)(this.elements.getElementsDirName(), 'public', relativePath);
          file = (_artifact = artifact) === null || _artifact === void 0 ? void 0 : _artifact.getFile(calculatedPath);
        } else {
          var _artifact2;
          file = (_artifact2 = artifact) === null || _artifact2 === void 0 ? void 0 : _artifact2.getMainElementsBundleFile();
        }
        if (!file) return res.status(404).send();
        const contents = file.contents;
        const str = `${file.cwd}/${file.path}`;
        // @ts-ignore - temporarily, remove it later
        const contentType = _mime().default.getType(str);
        if (contentType) res.set('Content-Type', contentType);
        return res.send(contents);
      } catch (e) {
        this.logger.error('failed getting elements', e);
        return res.status(500).send((0, _uiFoundationUiPages().serverError)());
      }
    }]);
  }
}
exports.ElementsRoute = ElementsRoute;

//# sourceMappingURL=elements.route.js.map