"use strict";

require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.computeTargets = computeTargets;
function _fsExtra() {
  const data = require("fs-extra");
  _fsExtra = function () {
    return data;
  };
  return data;
}
function _path() {
  const data = require("path");
  _path = function () {
    return data;
  };
  return data;
}
async function computeTargets(context, createEntryFn, outDirName) {
  return Promise.all(context.components.map(comp => getComponentTarget(context, comp, createEntryFn, outDirName)));
}
async function getComponentTarget(context, component, elementsWrapperFn, outDirName) {
  const outputPath = getOutputPath(context, component.id, outDirName);
  if (!(0, _fsExtra().existsSync)(outputPath)) (0, _fsExtra().mkdirpSync)(outputPath);
  return {
    entries: [await getEntryFile(outputPath, component, elementsWrapperFn, context)],
    components: [component],
    outputPath
  };
}
function getOutputPath(context, componentId, outDirName) {
  // return resolve(`${context.capsuleNetwork.capsulesRootDir}/${getDirName(context, componentId)}`);
  const capsule = context.capsuleNetwork.graphCapsules.getCapsule(componentId);
  if (!capsule) throw new Error(`can't find capsule for ${componentId.toString()} while bundling for element`);
  return (0, _path().resolve)(`${capsule === null || capsule === void 0 ? void 0 : capsule.path}/${outDirName}`);
}
async function getEntryFile(outputPath, component, elementsWrapperFn, context) {
  const mainFilePath = getMainFilePath(context, component);
  const entryContent = elementsWrapperFn({
    mainFilePath,
    componentName: component.id.name
  });
  const targetPath = (0, _path().join)(outputPath, `__elements.js`);
  (0, _fsExtra().writeFileSync)(targetPath, entryContent);
  return targetPath;
}
function getMainFilePath(context, component) {
  const capsule = context.capsuleNetwork.graphCapsules.getCapsule(component.id);
  if (!capsule) throw new Error(`can't find capsule for ${component.id.toString()} while bundling for element`);
  const mainFile = component.state._consumer.mainFile;
  const compiler = context.env.getCompiler();
  return (0, _path().join)(capsule.path, compiler.getDistPathBySrcPath(mainFile));
}

//# sourceMappingURL=compute-targets.js.map