import { DependenciesEnv, PackageEnv, PipeServiceModifier, PipeServiceModifiersMap } from '@teambit/envs';
import { VariantPolicyConfigObject } from '@teambit/dependency-resolver';
import { TsConfigTransformer, TypescriptMain } from '@teambit/typescript';
import { ReactMain } from '@teambit/react';
import { Tester } from '@teambit/tester';
import { BuildTask } from '@teambit/builder';
export declare const NodeEnvType = "node";
declare type GetBuildPipeModifiers = PipeServiceModifiersMap & {
    tsModifier?: PipeServiceModifier;
};
export declare class NodeEnv implements DependenciesEnv, PackageEnv {
    protected tsAspect: TypescriptMain;
    protected reactAspect: ReactMain;
    constructor(tsAspect: TypescriptMain, reactAspect: ReactMain);
    icon: string;
    getDependencies(): VariantPolicyConfigObject;
    getCompiler(transformers: TsConfigTransformer[] | undefined, tsModule: any): import("@teambit/compiler").Compiler;
    /**
     * returns the component build pipeline.
     */
    getBuildPipe(modifiers?: GetBuildPipeModifiers): BuildTask[];
    /**
     * returns a component tester.
     */
    getTester(jestConfigPath: string, jestModulePath?: string): Tester;
    getPreviewConfig(): {
        strategyName: string;
        splitComponentBundle: boolean;
    };
    getPackageJsonProps(): import("@teambit/pkg").PackageJsonProps;
    __getDescriptor(): Promise<{
        type: string;
    }>;
}
export {};
