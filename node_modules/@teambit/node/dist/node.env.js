"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NodeEnvType = exports.NodeEnv = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
const NodeEnvType = 'node';
exports.NodeEnvType = NodeEnvType;
class NodeEnv {
  constructor(tsAspect, reactAspect) {
    this.tsAspect = tsAspect;
    this.reactAspect = reactAspect;
    (0, _defineProperty2().default)(this, "icon", 'https://static.bit.dev/extensions-icons/nodejs.svg');
  }
  getDependencies() {
    return {
      devDependencies: {
        '@types/jest': '26.0.20',
        '@types/node': '12.20.4',
        // This is added as dev dep since our jest file transformer uses babel plugins that require this to be installed
        '@babel/runtime': '7.12.18'
      }
    };
  }
  getCompiler(transformers = [], tsModule) {
    return this.reactAspect.reactEnv.getTsCjsCompiler('dev', transformers, tsModule);
  }

  /**
   * returns the component build pipeline.
   */
  getBuildPipe(modifiers = {}) {
    var _modifiers$tsModifier, _modifiers$tsModifier2;
    const tsTransformers = (modifiers === null || modifiers === void 0 ? void 0 : (_modifiers$tsModifier = modifiers.tsModifier) === null || _modifiers$tsModifier === void 0 ? void 0 : _modifiers$tsModifier.transformers) || [];
    const compilerTask = this.reactAspect.reactEnv.getCjsCompilerTask(tsTransformers, modifiers === null || modifiers === void 0 ? void 0 : (_modifiers$tsModifier2 = modifiers.tsModifier) === null || _modifiers$tsModifier2 === void 0 ? void 0 : _modifiers$tsModifier2.module);
    const pipeWithoutCompiler = this.reactAspect.reactEnv.getBuildPipeWithoutCompiler();
    return [compilerTask, ...pipeWithoutCompiler];
  }

  /**
   * returns a component tester.
   */
  getTester(jestConfigPath, jestModulePath) {
    const config = jestConfigPath || require.resolve('./jest/jest.config');
    return this.reactAspect.reactEnv.getCjsJestTester(config, jestModulePath);
  }
  getPreviewConfig() {
    return {
      strategyName: 'component',
      splitComponentBundle: false
    };
  }
  getPackageJsonProps() {
    return this.tsAspect.getCjsPackageJsonProps();
  }
  async __getDescriptor() {
    return {
      type: NodeEnvType
    };
  }
}
exports.NodeEnv = NodeEnv;

//# sourceMappingURL=node.env.js.map