{"version":3,"names":["mainRuntimeFile","namePascalCase","Name","name"],"sources":["main.runtime.ts"],"sourcesContent":["import { ComponentContext } from '@teambit/generator';\n\nexport function mainRuntimeFile({ namePascalCase: Name, name }: ComponentContext) {\n  return `import { MainRuntime } from '@teambit/cli';\nimport { NodeAspect, NodeMain } from '@teambit/node'\nimport { EnvsAspect, EnvsMain } from '@teambit/envs';\nimport type { UseTypescriptModifiers, UseWebpackModifiers } from '@teambit/react';\nimport { ${Name}Aspect } from './${name}.aspect';\n//import {\n//  previewConfigTransformer,\n//  devServerConfigTransformer\n//} from './webpack/webpack-transformers';\n//import {\n//  devConfigTransformer,\n//  buildConfigTransformer,\n//} from \"./typescript/ts-transformer\";\n\nexport class ${Name}Main {\n  static slots = [];\n\n  static dependencies = [NodeAspect, EnvsAspect];\n\n  static runtime = MainRuntime;\n\n  static async provider([node, envs]: [NodeMain, EnvsMain]) {\n\n    //const webpackModifiers: UseWebpackModifiers = {\n      //  previewConfig: [previewConfigTransformer],\n      //  devServerConfig: [devServerConfigTransformer],\n    //};\n\n    //const tsModifiers: UseTypescriptModifiers = {\n      //  devConfig: [devConfigTransformer],\n      //  buildConfig: [buildConfigTransformer],\n    //};\n\n    const ${Name}Env = node.compose([\n      /**\n       * Uncomment to override the config files for TypeScript, Webpack or Jest\n       * Your config gets merged with the defaults\n       */\n\n      // node.useTypescript(tsModifiers),  // note: this cannot be used in conjunction with node.overrideCompiler\n      // node.useWebpack(webpackModifiers),\n      // node.overrideJestConfig(require.resolve('./jest/jest.config')),\n\n      /**\n       * override the ESLint default config here then check your files for lint errors\n       * @example\n       * bit lint\n       * bit lint --fix\n       */\n      node.useEslint({\n        transformers: [\n          (config) => {\n            config.setRule('no-console', ['error']);\n            return config;\n          }\n        ]\n      }),\n\n      /**\n       * override the Prettier default config here the check your formatting\n       * @example\n       * bit format --check\n       * bit format\n       */\n      node.usePrettier({\n        transformers: [\n          (config) => {\n            config.setKey('tabWidth', 2);\n            return config;\n          }\n        ]\n      }),\n\n      /**\n       * override dependencies here\n       * @example\n       * Uncomment types to include version 17.0.3 of the types package\n       */\n      node.overrideDependencies({\n        devDependencies: {\n          // '@types/node': '16.11.7'\n        }\n      })\n    ]);\n    envs.registerEnv(${Name}Env);\n    return new ${Name}Main();\n  }\n}\n\n${Name}Aspect.addRuntime(${Name}Main);\n`;\n}\n"],"mappings":";;;;;;AAEO,SAASA,eAAe,CAAC;EAAEC,cAAc,EAAEC,IAAI;EAAEC;AAAuB,CAAC,EAAE;EAChF,OAAQ;AACV;AACA;AACA;AACA,WAAWD,IAAK,oBAAmBC,IAAK;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeD,IAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAYA,IAAK;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuBA,IAAK;AAC5B,iBAAiBA,IAAK;AACtB;AACA;AACA;AACA,EAAEA,IAAK,qBAAoBA,IAAK;AAChC,CAAC;AACD"}