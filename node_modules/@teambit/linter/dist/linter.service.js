"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LinterService = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _react() {
  const data = _interopRequireDefault(require("react"));
  _react = function () {
    return data;
  };
  return data;
}
function _lodash() {
  const data = require("lodash");
  _lodash = function () {
    return data;
  };
  return data;
}
function _ink() {
  const data = require("ink");
  _ink = function () {
    return data;
  };
  return data;
}
function _cliHighlight() {
  const data = _interopRequireDefault(require("cli-highlight"));
  _cliHighlight = function () {
    return data;
  };
  return data;
}
class LinterService {
  constructor(linterConfig, rootDir) {
    this.linterConfig = linterConfig;
    this.rootDir = rootDir;
    (0, _defineProperty2().default)(this, "name", 'linter');
  }
  async run(context, options) {
    const mergedOpts = this.optionsWithDefaults(options);
    const linterContext = this.mergeContext(mergedOpts, context);
    const linter = context.env.getLinter(linterContext);
    const results = await linter.lint(linterContext);
    return results;
  }
  optionsWithDefaults(options) {
    return (0, _lodash().defaults)(options, this.linterConfig);
  }
  mergeContext(options, context) {
    const linterContext = Object.assign({}, {
      rootDir: this.rootDir,
      quiet: false,
      extensionFormats: options.extensionFormats,
      fixTypes: options.fixTypes,
      fix: options.fix
    }, context);
    return linterContext;
  }
  render(env) {
    const descriptor = this.getDescriptor(env);
    return /*#__PURE__*/_react().default.createElement(_ink().Text, {
      key: descriptor === null || descriptor === void 0 ? void 0 : descriptor.id
    }, /*#__PURE__*/_react().default.createElement(_ink().Text, {
      color: "cyan"
    }, "configured linter: "), /*#__PURE__*/_react().default.createElement(_ink().Text, null, descriptor === null || descriptor === void 0 ? void 0 : descriptor.id, " (", descriptor === null || descriptor === void 0 ? void 0 : descriptor.displayName, " @ ", descriptor === null || descriptor === void 0 ? void 0 : descriptor.version, ")"), /*#__PURE__*/_react().default.createElement(_ink().Newline, null), /*#__PURE__*/_react().default.createElement(_ink().Text, {
      color: "cyan"
    }, "linter config:"), /*#__PURE__*/_react().default.createElement(_ink().Newline, null), /*#__PURE__*/_react().default.createElement(_ink().Text, null, (descriptor === null || descriptor === void 0 ? void 0 : descriptor.config) && (0, _cliHighlight().default)(descriptor === null || descriptor === void 0 ? void 0 : descriptor.config, {
      language: 'javascript',
      ignoreIllegals: true
    })), /*#__PURE__*/_react().default.createElement(_ink().Newline, null));
  }
  getDescriptor(env) {
    if (!env.env.getLinter) return undefined;
    const mergedOpts = this.optionsWithDefaults({});
    const linterContext = this.mergeContext(mergedOpts);
    const linter = env.env.getLinter(linterContext);
    return {
      id: linter.id,
      icon: linter.icon,
      config: linter.displayConfig ? linter.displayConfig() : undefined,
      version: linter.version ? linter.version() : '?',
      displayName: linter.displayName ? linter.displayName : '?'
    };
  }
}
exports.LinterService = LinterService;

//# sourceMappingURL=linter.service.js.map