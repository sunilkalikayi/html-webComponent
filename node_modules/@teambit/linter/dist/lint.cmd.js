"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
require("core-js/modules/es.regexp.exec.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LintCmd = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _timer() {
  const data = require("@teambit/legacy/dist/toolbox/timer");
  _timer = function () {
    return data;
  };
  return data;
}
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
function _lodash() {
  const data = require("lodash");
  _lodash = function () {
    return data;
  };
  return data;
}
class LintCmd {
  constructor(linter, componentHost, workspace) {
    this.linter = linter;
    this.componentHost = componentHost;
    this.workspace = workspace;
    (0, _defineProperty2().default)(this, "name", 'lint [component...]');
    (0, _defineProperty2().default)(this, "description", 'lint components in the development workspace');
    (0, _defineProperty2().default)(this, "group", 'development');
    (0, _defineProperty2().default)(this, "options", [['c', 'changed', 'lint only new and modified components'], ['f', 'fix', 'automatically fix problems'], ['', 'fix-type <fixType>', 'specify the types of fixes to apply (problem, suggestion, layout)'], ['j', 'json', 'return the lint results in json format']]);
  }
  async report([components = []], linterOptions) {
    const {
      code,
      data
    } = await this.json([components], linterOptions);
    const {
      lintResults,
      componentsIdsToLint
    } = data;
    const title = _chalk().default.bold(`linting total of ${_chalk().default.cyan(componentsIdsToLint.length.toString())} component(s) in workspace '${_chalk().default.cyan(this.componentHost.name)}'`);
    const componentsOutputs = lintResults.results.map(lintRes => {
      const compTitle = _chalk().default.bold.cyan(lintRes.componentId.toString({
        ignoreVersion: true
      }));
      const compOutput = lintRes.output;
      return `${compTitle}\n${compOutput}`;
    }).join('\n');
    const summary = this.getSummarySection(data);
    return {
      code,
      data: `${title}\n\n${componentsOutputs}\n\n${summary}`
    };
  }
  getSummarySection(data) {
    const {
      duration,
      lintResults,
      componentsIdsToLint
    } = data;
    const {
      seconds
    } = duration;
    const summaryTitle = `linted ${_chalk().default.cyan(componentsIdsToLint.length.toString())} components in ${_chalk().default.cyan(seconds.toString())} seconds`;
    const totalFieldsMap = [{
      itemsDataField: 'totalErrorCount',
      componentsDataField: 'totalComponentsWithErrorCount',
      label: 'Errors'
    }, {
      itemsDataField: 'totalFatalErrorCount',
      componentsDataField: 'totalComponentsWithFatalErrorCount',
      label: 'FatalErrors'
    }, {
      itemsDataField: 'totalFixableErrorCount',
      componentsDataField: 'totalComponentsWithFixableErrorCount',
      label: 'FixableErrors'
    }, {
      itemsDataField: 'totalFixableWarningCount',
      componentsDataField: 'totalComponentsWithFixableWarningCount',
      label: 'FixableWarnings'
    }, {
      itemsDataField: 'totalWarningCount',
      componentsDataField: 'totalComponentsWithWarningCount',
      label: 'Warnings'
    }];
    const summaryTotals = totalFieldsMap.map(item => this.renderTotalLine(lintResults[item.componentsDataField], lintResults[item.itemsDataField], item.label)).filter(Boolean).join('\n');
    const summary = `${summaryTitle}\n${summaryTotals}`;
    return summary;
  }
  renderTotalLine(componentsCount, itemsCount, fieldLabel) {
    if (itemsCount === 0) return undefined;
    return `total of ${_chalk().default.green(itemsCount.toString())} ${_chalk().default.cyan(fieldLabel)} (from ${_chalk().default.green(componentsCount.toString())} components)`;
  }
  async json([components = []], linterOptions) {
    const timer = _timer().Timer.create();
    timer.start();
    const componentsIds = await this.getIdsToLint(components, linterOptions.changed);
    const componentsToLint = await this.workspace.getMany(componentsIds);
    const opts = {
      fix: linterOptions.fix,
      fixTypes: linterOptions.fixType ? linterOptions.fixType.split(',') : undefined
    };
    const linterResults = await this.linter.lint(componentsToLint, opts);
    const jsonLinterResults = toJsonLintResults(linterResults);
    const timerResponse = timer.stop();
    let code = 0;
    if (jsonLinterResults.totalErrorCount || jsonLinterResults.totalFatalErrorCount) {
      code = 1;
    }
    return {
      code,
      data: {
        duration: timerResponse,
        lintResults: jsonLinterResults,
        componentsIdsToLint: componentsToLint.map(comp => comp.id.toString())
      }
    };
  }
  async getIdsToLint(components, changed = false) {
    if (components.length) {
      return this.workspace.resolveMultipleComponentIds(components);
    }
    if (changed) {
      return this.workspace.getNewAndModifiedIds();
    }
    return this.componentHost.listIds();
  }
}
exports.LintCmd = LintCmd;
function toJsonLintResults(results) {
  let totalErrorCount = 0;
  let totalFatalErrorCount = 0;
  let totalFixableErrorCount = 0;
  let totalFixableWarningCount = 0;
  let totalWarningCount = 0;
  let totalComponentsWithErrorCount = 0;
  let totalComponentsWithFatalErrorCount = 0;
  let totalComponentsWithFixableErrorCount = 0;
  let totalComponentsWithFixableWarningCount = 0;
  let totalComponentsWithWarningCount = 0;
  const newResults = results.results.map(res => {
    var _res$data;
    const resultsWithoutComponent = (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.results.map(result => {
      return Object.assign({}, {
        componentId: result.component.id
      }, (0, _lodash().omit)(result, ['component']));
    });
    if (res.data) {
      if (res.data.totalErrorCount) {
        var _res$data$totalCompon;
        totalErrorCount += res.data.totalErrorCount;
        totalComponentsWithErrorCount += (_res$data$totalCompon = res.data.totalComponentsWithErrorCount) !== null && _res$data$totalCompon !== void 0 ? _res$data$totalCompon : 0;
      }
      if (res.data.totalFatalErrorCount) {
        var _res$data$totalCompon2;
        totalFatalErrorCount += res.data.totalFatalErrorCount;
        totalComponentsWithFatalErrorCount += (_res$data$totalCompon2 = res.data.totalComponentsWithFatalErrorCount) !== null && _res$data$totalCompon2 !== void 0 ? _res$data$totalCompon2 : 0;
      }
      if (res.data.totalFixableErrorCount) {
        var _res$data$totalCompon3;
        totalFixableErrorCount += res.data.totalFixableErrorCount;
        totalComponentsWithFixableErrorCount += (_res$data$totalCompon3 = res.data.totalComponentsWithFixableErrorCount) !== null && _res$data$totalCompon3 !== void 0 ? _res$data$totalCompon3 : 0;
      }
      if (res.data.totalFixableWarningCount) {
        var _res$data$totalCompon4;
        totalFixableWarningCount += res.data.totalFixableWarningCount;
        totalComponentsWithFixableWarningCount += (_res$data$totalCompon4 = res.data.totalComponentsWithFixableWarningCount) !== null && _res$data$totalCompon4 !== void 0 ? _res$data$totalCompon4 : 0;
      }
      if (res.data.totalWarningCount) {
        var _res$data$totalCompon5;
        totalWarningCount += res.data.totalWarningCount;
        totalComponentsWithWarningCount += (_res$data$totalCompon5 = res.data.totalComponentsWithWarningCount) !== null && _res$data$totalCompon5 !== void 0 ? _res$data$totalCompon5 : 0;
      }
    }
    return (0, _lodash().compact)(resultsWithoutComponent);
  });
  return {
    results: (0, _lodash().compact)((0, _lodash().flatten)(newResults)),
    totalErrorCount,
    totalFatalErrorCount,
    totalFixableErrorCount,
    totalFixableWarningCount,
    totalWarningCount,
    totalComponentsWithErrorCount,
    totalComponentsWithFatalErrorCount,
    totalComponentsWithFixableErrorCount,
    totalComponentsWithFixableWarningCount,
    totalComponentsWithWarningCount,
    errors: results === null || results === void 0 ? void 0 : results.errors
  };
}

//# sourceMappingURL=lint.cmd.js.map