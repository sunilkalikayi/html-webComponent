import { TimerResponse } from '@teambit/legacy/dist/toolbox/timer';
import { Command, CommandOptions } from '@teambit/cli';
import { ComponentFactory, ComponentID } from '@teambit/component';
import { Workspace } from '@teambit/workspace';
import { LinterMain } from './linter.main.runtime';
import { ComponentLintResult, LintResults } from './linter';
export declare type LintCmdOptions = {
    changed?: boolean;
    fix?: boolean;
    fixType?: string;
    json?: boolean;
};
/**
 * A type for result with componentId instead of the entire component, as when output to console, we don't want to print all the component
 */
export declare type JsonComponentLintResult = Omit<ComponentLintResult, 'component'> & {
    componentId: ComponentID;
};
export declare type JsonLintDataResults = Omit<LintResults, 'results'> & {
    results: JsonComponentLintResult[];
};
/**
 * A type for result with componentId instead of the entire component, as when output to console, we don't want to print all the component
 */
export declare type JsonLintResultsData = {
    duration: TimerResponse;
    lintResults: JsonLintDataResults;
    componentsIdsToLint: string[];
};
export declare type JsonLintResults = {
    code: number;
    data: JsonLintResultsData;
};
export declare class LintCmd implements Command {
    private linter;
    private componentHost;
    private workspace;
    name: string;
    description: string;
    group: string;
    options: CommandOptions;
    constructor(linter: LinterMain, componentHost: ComponentFactory, workspace: Workspace);
    report([components]: [string[]], linterOptions: LintCmdOptions): Promise<{
        code: number;
        data: string;
    }>;
    private getSummarySection;
    private renderTotalLine;
    json([components]: [string[]], linterOptions: LintCmdOptions): Promise<JsonLintResults>;
    private getIdsToLint;
}
