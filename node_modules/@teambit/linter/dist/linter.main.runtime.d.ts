import { CLIMain } from '@teambit/cli';
import { Component, ComponentMain } from '@teambit/component';
import { EnvsMain } from '@teambit/envs';
import { LoggerMain } from '@teambit/logger';
import { Workspace } from '@teambit/workspace';
import { LinterService } from './linter.service';
import { LintTask } from './lint.task';
import { FixTypes, LinterOptions } from './linter-context';
export declare type LinterConfig = {
    /**
     * extension formats to lint.
     */
    extensionFormats: string[];
    fixTypes?: FixTypes;
};
export declare class LinterMain {
    private envs;
    private linterService;
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    constructor(envs: EnvsMain, linterService: LinterService);
    /**
     * lint an array of components.
     */
    lint(components: Component[], opts: LinterOptions): Promise<import("@teambit/envs").EnvsExecutionResult<import("./linter").LintResults>>;
    /**
     * create a lint task for build pipelines.
     * @param name name of the task.
     */
    createTask(name?: string): LintTask;
    static dependencies: import("@teambit/harmony").Aspect[];
    static defaultConfig: LinterConfig;
    static provider([envs, cli, component, loggerAspect, workspace]: [EnvsMain, CLIMain, ComponentMain, LoggerMain, Workspace], config: LinterConfig): Promise<LinterMain>;
}
