"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LinterMain = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _cli() {
  const data = require("@teambit/cli");
  _cli = function () {
    return data;
  };
  return data;
}
function _component() {
  const data = require("@teambit/component");
  _component = function () {
    return data;
  };
  return data;
}
function _envs() {
  const data = require("@teambit/envs");
  _envs = function () {
    return data;
  };
  return data;
}
function _logger() {
  const data = require("@teambit/logger");
  _logger = function () {
    return data;
  };
  return data;
}
function _workspace() {
  const data = require("@teambit/workspace");
  _workspace = function () {
    return data;
  };
  return data;
}
function _linter() {
  const data = require("./linter.aspect");
  _linter = function () {
    return data;
  };
  return data;
}
function _linter2() {
  const data = require("./linter.service");
  _linter2 = function () {
    return data;
  };
  return data;
}
function _lint() {
  const data = require("./lint.task");
  _lint = function () {
    return data;
  };
  return data;
}
function _lint2() {
  const data = require("./lint.cmd");
  _lint2 = function () {
    return data;
  };
  return data;
}
class LinterMain {
  constructor(envs, linterService) {
    this.envs = envs;
    this.linterService = linterService;
  }

  /**
   * lint an array of components.
   */
  async lint(components, opts) {
    const envsRuntime = await this.envs.createEnvironment(components);
    const lintResults = envsRuntime.run(this.linterService, opts);
    return lintResults;
  }

  /**
   * create a lint task for build pipelines.
   * @param name name of the task.
   */
  createTask(name) {
    return new (_lint().LintTask)(_linter().LinterAspect.id, name);
  }
  static async provider([envs, cli, component, loggerAspect, workspace], config) {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const logger = loggerAspect.createLogger(_linter().LinterAspect.id);
    const linterService = new (_linter2().LinterService)(config, workspace === null || workspace === void 0 ? void 0 : workspace.path);
    const linterAspect = new LinterMain(envs, linterService);
    envs.registerService(linterService);
    cli.register(new (_lint2().LintCmd)(linterAspect, component.getHost(), workspace));
    return linterAspect;
  }
}
exports.LinterMain = LinterMain;
(0, _defineProperty2().default)(LinterMain, "runtime", _cli().MainRuntime);
(0, _defineProperty2().default)(LinterMain, "dependencies", [_envs().EnvsAspect, _cli().CLIAspect, _component().ComponentAspect, _logger().LoggerAspect, _workspace().WorkspaceAspect]);
(0, _defineProperty2().default)(LinterMain, "defaultConfig", {
  extensionFormats: ['.ts', '.tsx', '.js', '.jsx', '.mjs'],
  fixTypes: ['layout', 'problem', 'suggestion']
});
_linter().LinterAspect.addRuntime(LinterMain);

//# sourceMappingURL=linter.main.runtime.js.map