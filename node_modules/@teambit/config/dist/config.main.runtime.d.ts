import { ExtensionDataEntry, ExtensionDataList } from '@teambit/legacy/dist/consumer/config';
import { PathOsBased, PathOsBasedAbsolute } from '@teambit/legacy/dist/utils/path';
import { GlobalConfig } from '@teambit/harmony';
import { WorkspaceConfig, WorkspaceConfigFileProps } from './workspace-config';
import { ConfigType, HostConfig } from './types';
export declare type SetExtensionOptions = {
    overrideExisting?: boolean;
    ignoreVersion: boolean;
    mergeIntoExisting?: boolean;
};
export declare type ConfigDeps = [];
export declare type ConfigConfig = {};
export declare class ConfigMain {
    workspaceConfig?: WorkspaceConfig | undefined;
    scopeConfig?: WorkspaceConfig | undefined;
    constructor(workspaceConfig?: WorkspaceConfig | undefined, scopeConfig?: WorkspaceConfig | undefined);
    get type(): ConfigType;
    get path(): PathOsBased | undefined;
    get config(): HostConfig | undefined;
    /**
     * Ensure the given directory has a workspace config
     * Load if existing and create new if not
     *
     * @static
     * @param {PathOsBasedAbsolute} dirPath
     * @param {WorkspaceConfigFileProps} [workspaceConfigProps={} as any]
     * @returns {Promise<WorkspaceConfig>}
     * @memberof WorkspaceConfig
     */
    static ensureWorkspace(dirPath: PathOsBasedAbsolute, workspaceConfigProps?: WorkspaceConfigFileProps): Promise<ConfigMain>;
    get extensions(): ExtensionDataList | undefined;
    extension(extensionId: string, ignoreVersion: boolean): ExtensionDataEntry | undefined;
    setExtension(extensionId: string, config: Record<string, any>, options: SetExtensionOptions): void;
    getHarmonyConfigObject(): GlobalConfig;
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static slots: never[];
    static dependencies: import("@teambit/harmony").Aspect[];
    static config: {};
    static provider(): Promise<any>;
}
