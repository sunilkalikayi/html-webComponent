{"version":3,"names":["ConfigMain","constructor","workspaceConfig","scopeConfig","type","path","config","ensureWorkspace","dirPath","workspaceConfigProps","WorkspaceConfig","ensure","extensions","extension","extensionId","ignoreVersion","setExtension","options","getHarmonyConfigObject","forEach","stringId","provider","LegacyWorkspaceConfig","registerOnWorkspaceConfigIsExist","onLegacyWorkspaceConfigIsExist","registerOnWorkspaceConfigEnsuring","onLegacyWorkspaceEnsure","consumerInfo","getConsumerInfo","process","cwd","configMain","configDirPath","loadIfExist","undefined","registerOnWorkspaceConfigLoading","onLegacyWorkspaceLoad","registerOnWorkspaceConfigReset","resetHard","reset","MainRuntime","CLIAspect","ConfigAspect","addRuntime","isExist","normalize","dirname","toLegacy","newConfig","func","standAlone","legacyWorkspaceConfigProps","transformLegacyPropsToExtensions"],"sources":["config.main.runtime.ts"],"sourcesContent":["import { getConsumerInfo } from '@teambit/legacy/dist/consumer';\nimport {\n  ExtensionDataEntry,\n  ExtensionDataList,\n  ILegacyWorkspaceConfig,\n  LegacyWorkspaceConfigProps,\n} from '@teambit/legacy/dist/consumer/config';\nimport LegacyWorkspaceConfig, {\n  WorkspaceConfigEnsureFunction,\n  WorkspaceConfigIsExistFunction,\n  WorkspaceConfigLoadFunction,\n} from '@teambit/legacy/dist/consumer/config/workspace-config';\nimport { PathOsBased, PathOsBasedAbsolute } from '@teambit/legacy/dist/utils/path';\nimport { CLIAspect, MainRuntime } from '@teambit/cli';\nimport { GlobalConfig } from '@teambit/harmony';\nimport path from 'path';\nimport { transformLegacyPropsToExtensions, WorkspaceConfig, WorkspaceConfigFileProps } from './workspace-config';\nimport { ConfigType, HostConfig } from './types';\nimport { ConfigAspect } from './config.aspect';\n\nexport type SetExtensionOptions = {\n  overrideExisting?: boolean;\n  ignoreVersion: boolean;\n  mergeIntoExisting?: boolean;\n};\n\nexport type ConfigDeps = [];\n\nexport type ConfigConfig = {};\n\nexport class ConfigMain {\n  constructor(public workspaceConfig?: WorkspaceConfig, public scopeConfig?: WorkspaceConfig) {}\n\n  get type(): ConfigType {\n    if (this.workspaceConfig) {\n      return 'workspace';\n    }\n    return 'scope';\n  }\n\n  get path(): PathOsBased | undefined {\n    return this.config?.path;\n  }\n\n  get config(): HostConfig | undefined {\n    if (this.workspaceConfig) {\n      return this.workspaceConfig;\n    }\n    return this.scopeConfig;\n  }\n\n  /**\n   * Ensure the given directory has a workspace config\n   * Load if existing and create new if not\n   *\n   * @static\n   * @param {PathOsBasedAbsolute} dirPath\n   * @param {WorkspaceConfigFileProps} [workspaceConfigProps={} as any]\n   * @returns {Promise<WorkspaceConfig>}\n   * @memberof WorkspaceConfig\n   */\n  static async ensureWorkspace(\n    dirPath: PathOsBasedAbsolute,\n    workspaceConfigProps: WorkspaceConfigFileProps = {} as any\n  ): Promise<ConfigMain> {\n    const workspaceConfig = await WorkspaceConfig.ensure(dirPath, workspaceConfigProps);\n    return new ConfigMain(workspaceConfig);\n  }\n\n  get extensions(): ExtensionDataList | undefined {\n    return this.config?.extensions;\n  }\n\n  extension(extensionId: string, ignoreVersion: boolean): ExtensionDataEntry | undefined {\n    return this.config?.extension(extensionId, ignoreVersion);\n  }\n\n  setExtension(extensionId: string, config: Record<string, any>, options: SetExtensionOptions) {\n    this.config?.setExtension(extensionId, config, options);\n  }\n\n  getHarmonyConfigObject(): GlobalConfig {\n    const config = {};\n    if (!this.extensions) return config;\n    this.extensions.forEach((extension) => {\n      config[extension.stringId] = extension.config;\n    });\n    return config;\n  }\n\n  static runtime = MainRuntime;\n  static slots = [];\n  static dependencies = [CLIAspect];\n  static config = {};\n  static async provider() {\n    LegacyWorkspaceConfig.registerOnWorkspaceConfigIsExist(onLegacyWorkspaceConfigIsExist());\n    LegacyWorkspaceConfig.registerOnWorkspaceConfigEnsuring(onLegacyWorkspaceEnsure());\n    const consumerInfo = await getConsumerInfo(process.cwd());\n\n    let configMain: ConfigMain | any;\n    const configDirPath = consumerInfo?.path || process.cwd();\n    const workspaceConfig = await WorkspaceConfig.loadIfExist(configDirPath);\n    if (workspaceConfig) {\n      configMain = new ConfigMain(workspaceConfig, undefined);\n    } else {\n      // TODO: try load scope config here\n      configMain = {};\n    }\n    LegacyWorkspaceConfig.registerOnWorkspaceConfigLoading(onLegacyWorkspaceLoad(configMain));\n    LegacyWorkspaceConfig.registerOnWorkspaceConfigReset((dirPath, resetHard) =>\n      WorkspaceConfig.reset(dirPath, resetHard)\n    );\n    return configMain;\n  }\n}\n\nConfigAspect.addRuntime(ConfigMain);\n\nfunction onLegacyWorkspaceConfigIsExist(): WorkspaceConfigIsExistFunction {\n  return async (dirPath: PathOsBased): Promise<boolean | undefined> => {\n    return WorkspaceConfig.isExist(dirPath);\n  };\n}\n\nfunction onLegacyWorkspaceLoad(config?: ConfigMain): WorkspaceConfigLoadFunction {\n  return async (dirPath: PathOsBased): Promise<ILegacyWorkspaceConfig | undefined> => {\n    if (config?.workspaceConfig && config.path && path.normalize(dirPath) === path.dirname(config.path)) {\n      return (config.config as WorkspaceConfig).toLegacy();\n    }\n    const newConfig = await WorkspaceConfig.loadIfExist(dirPath);\n    if (newConfig) {\n      return newConfig.toLegacy();\n    }\n    return undefined;\n  };\n}\n\nfunction onLegacyWorkspaceEnsure(): WorkspaceConfigEnsureFunction {\n  const func: WorkspaceConfigEnsureFunction = async (\n    dirPath: string,\n    standAlone,\n    legacyWorkspaceConfigProps?: LegacyWorkspaceConfigProps\n  ) => {\n    let workspaceConfigProps;\n    if (legacyWorkspaceConfigProps) {\n      workspaceConfigProps = transformLegacyPropsToExtensions(legacyWorkspaceConfigProps);\n    }\n    const config = await ConfigMain.ensureWorkspace(dirPath, workspaceConfigProps);\n    const workspaceConfig = config.config;\n    return (workspaceConfig as WorkspaceConfig).toLegacy();\n  };\n  return func;\n}\n"],"mappings":"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"}