{"version":3,"names":["INTERNAL_CONFIG_PROPS","WorkspaceConfig","constructor","data","legacyConfig","isLegacy","Boolean","isHarmony","logger","debug","Analytics","setExtraData","raw","loadExtensions","path","_path","configPath","extensions","_extensions","withoutInternalConfig","omit","ExtensionDataList","fromConfigObject","extension","extensionId","ignoreVersion","existing","findExtension","config","setExtension","options","mergeIntoExisting","overrideExisting","ExtensionAlreadyConfigured","renameExtensionInRaw","oldExtId","newExtId","fromLegacyConfig","undefined","fromObject","create","props","dirPath","template","getWorkspaceConfigTemplateParsed","merged","assign","instance","composeWorkspaceJsoncPath","ensure","workspaceConfigProps","workspaceConfig","loadIfExist","err","InvalidBitJson","InvalidConfigFile","onLegacyEnsure","standAlone","legacyWorkspaceConfigProps","newProps","transformLegacyPropsToExtensions","$schemaVersion","reset","resetHard","workspaceJsoncPath","info","fs","remove","join","WORKSPACE_JSONC","pathHasWorkspaceJsonc","isExist","pathExists","jsoncExist","LegacyWorkspaceConfig","_isExist","jsoncPath","_loadFromWorkspaceJsonc","_loadIfExist","contentBuffer","readFile","parsed","parse","toString","e","write","dir","getCalculatedDir","dirname","ConfigDirNotDefined","calculatedDir","files","toVinyl","dataToPersist","DataToPersist","addManyFiles","persistAllToFS","workspaceDir","jsonStr","stringify","base","fullPath","jsonFile","AbstractVinyl","contents","Buffer","from","_legacyPlainObject","toPlainObject","toLegacy","componentsDefaultDirectory","defaultDirectory","includes","lang","DEFAULT_LANGUAGE","defaultScope","_useWorkspaces","useWorkspaces","dependencyResolver","packageManager","_bindingPrefix","defaultOwner","_saveDependenciesAsComponents","_legacyProps","saveDependenciesAsComponents","_dependenciesDirectory","dependenciesDirectory","_resolveModules","resolveModules","_manageWorkspaces","manageWorkspaces","toConfigObject","call","bind","componentsConfig","overrides","getComponentConfig","getOverrideComponentData","removeUndefined","obj","Object","entries","forEach","workspace","bindingPrefix","extraArgs","packageManagerArgs","packageManagerProcessOptions","variants","isEmpty","fileContent","__dirname","code","stringifyWorkspaceConfig"],"sources":["workspace-config.ts"],"sourcesContent":["import { Analytics } from '@teambit/legacy/dist/analytics/analytics';\nimport { DEFAULT_LANGUAGE, WORKSPACE_JSONC } from '@teambit/legacy/dist/constants';\nimport { ResolveModulesConfig } from '@teambit/legacy/dist/consumer/component/dependencies/files-dependency-builder/types/dependency-tree-type';\nimport { AbstractVinyl } from '@teambit/legacy/dist/consumer/component/sources';\nimport DataToPersist from '@teambit/legacy/dist/consumer/component/sources/data-to-persist';\nimport { ExtensionDataList, ILegacyWorkspaceConfig } from '@teambit/legacy/dist/consumer/config';\nimport { InvalidBitJson } from '@teambit/legacy/dist/consumer/config/exceptions';\nimport LegacyWorkspaceConfig, {\n  WorkspaceConfigProps as LegacyWorkspaceConfigProps,\n} from '@teambit/legacy/dist/consumer/config/workspace-config';\nimport logger from '@teambit/legacy/dist/logger/logger';\nimport { PathOsBased, PathOsBasedAbsolute } from '@teambit/legacy/dist/utils/path';\nimport { assign, parse, stringify, CommentJSONValue } from 'comment-json';\nimport * as fs from 'fs-extra';\nimport * as path from 'path';\nimport { isEmpty, omit } from 'lodash';\n\nimport { SetExtensionOptions } from './config.main.runtime';\nimport { ExtensionAlreadyConfigured } from './exceptions';\nimport { ConfigDirNotDefined } from './exceptions/config-dir-not-defined';\nimport InvalidConfigFile from './exceptions/invalid-config-file';\nimport { HostConfig } from './types';\n\nconst INTERNAL_CONFIG_PROPS = ['$schema', '$schemaVersion'];\n\nexport type LegacyInitProps = {\n  standAlone?: boolean;\n};\n\nexport type WorkspaceConfigFileProps = {\n  // TODO: make it no optional\n  $schema?: string;\n  $schemaVersion?: string;\n} & ExtensionsDefs;\n\nexport type ComponentScopeDirMapEntry = {\n  defaultScope?: string;\n  directory: string;\n};\n\nexport type ComponentScopeDirMap = Array<ComponentScopeDirMapEntry>;\n\nexport type WorkspaceExtensionProps = {\n  defaultOwner?: string;\n  defaultScope?: string;\n  defaultDirectory?: string;\n  components?: ComponentScopeDirMap;\n};\n\nexport type PackageManagerClients = 'npm' | 'yarn' | undefined;\n\nexport interface DependencyResolverExtensionProps {\n  packageManager: PackageManagerClients;\n  strictPeerDependencies?: boolean;\n  extraArgs?: string[];\n  packageManagerProcessOptions?: any;\n  useWorkspaces?: boolean;\n  manageWorkspaces?: boolean;\n}\n\nexport type WorkspaceSettingsNewProps = {\n  'teambit.workspace/workspace': WorkspaceExtensionProps;\n  'teambit.dependencies/dependency-resolver': DependencyResolverExtensionProps;\n};\n\nexport type WorkspaceLegacyProps = {\n  dependenciesDirectory?: string;\n  bindingPrefix?: string;\n  resolveModules?: ResolveModulesConfig;\n  saveDependenciesAsComponents?: boolean;\n};\n\nexport type ExtensionsDefs = WorkspaceSettingsNewProps;\n\nexport class WorkspaceConfig implements HostConfig {\n  raw?: any;\n  _path?: string;\n  _extensions: ExtensionDataList;\n  _legacyProps?: WorkspaceLegacyProps;\n  isLegacy: boolean;\n\n  constructor(private data?: WorkspaceConfigFileProps, private legacyConfig?: LegacyWorkspaceConfig) {\n    this.isLegacy = Boolean(legacyConfig);\n    const isHarmony = !this.isLegacy;\n    logger.debug(`workspace-config, isLegacy: ${this.isLegacy}`);\n    Analytics.setExtraData('is_harmony', isHarmony);\n    this.raw = data;\n    this.loadExtensions();\n  }\n\n  get path(): PathOsBased {\n    return this._path || this.legacyConfig?.path || '';\n  }\n\n  set path(configPath: PathOsBased) {\n    this._path = configPath;\n  }\n\n  get extensions(): ExtensionDataList {\n    return this._extensions;\n  }\n\n  private loadExtensions() {\n    const withoutInternalConfig = omit(this.raw, INTERNAL_CONFIG_PROPS);\n    this._extensions = ExtensionDataList.fromConfigObject(withoutInternalConfig);\n  }\n\n  extension(extensionId: string, ignoreVersion: boolean): any {\n    const existing = this.extensions.findExtension(extensionId, ignoreVersion);\n    return existing?.config;\n  }\n\n  setExtension(extensionId: string, config: Record<string, any>, options: SetExtensionOptions): any {\n    const existing = this.extension(extensionId, options.ignoreVersion);\n    if (existing) {\n      if (options.mergeIntoExisting) {\n        config = { ...existing, ...config };\n      } else if (!options.overrideExisting) {\n        throw new ExtensionAlreadyConfigured(extensionId);\n      }\n    }\n\n    this.raw[extensionId] = config;\n    this.loadExtensions();\n  }\n\n  renameExtensionInRaw(oldExtId: string, newExtId: string): boolean {\n    if (this.raw[oldExtId]) {\n      this.raw[newExtId] = this.raw[oldExtId];\n      delete this.raw[oldExtId];\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Create an instance of the WorkspaceConfig by an instance of the legacy config\n   *\n   * @static\n   * @param {*} legacyConfig\n   * @returns\n   * @memberof WorkspaceConfig\n   */\n  static fromLegacyConfig(legacyConfig) {\n    return new WorkspaceConfig(undefined, legacyConfig);\n  }\n\n  /**\n   * Create an instance of the WorkspaceConfig by data\n   *\n   * @static\n   * @param {WorkspaceConfigFileProps} data\n   * @returns\n   * @memberof WorkspaceConfig\n   */\n  static fromObject(data: WorkspaceConfigFileProps) {\n    return new WorkspaceConfig(data, undefined);\n  }\n\n  /**\n   * Create an instance of the WorkspaceConfig by the workspace config template and override values\n   *\n   * @static\n   * @param {WorkspaceConfigFileProps} data values to override in the default template\n   * @returns\n   * @memberof WorkspaceConfig\n   */\n  static async create(props: WorkspaceConfigFileProps, dirPath?: PathOsBasedAbsolute) {\n    const template = await getWorkspaceConfigTemplateParsed();\n    // TODO: replace this assign with some kind of deepAssign that keeps the comments\n    // right now the comments above the internal props are overrides after the assign\n    const merged = assign(template, props);\n    const instance = new WorkspaceConfig(merged, undefined);\n    if (dirPath) {\n      instance.path = WorkspaceConfig.composeWorkspaceJsoncPath(dirPath);\n    }\n    return instance;\n  }\n\n  /**\n   * Ensure the given directory has a workspace config\n   * Load if existing and create new if not\n   *\n   * @static\n   * @param {PathOsBasedAbsolute} dirPath\n   * @param {WorkspaceConfigFileProps} [workspaceConfigProps={} as any]\n   * @returns {Promise<WorkspaceConfig>}\n   * @memberof WorkspaceConfig\n   */\n  static async ensure(\n    dirPath: PathOsBasedAbsolute,\n    workspaceConfigProps: WorkspaceConfigFileProps = {} as any\n  ): Promise<WorkspaceConfig> {\n    try {\n      let workspaceConfig = await this.loadIfExist(dirPath);\n      if (workspaceConfig) {\n        return workspaceConfig;\n      }\n      workspaceConfig = await this.create(workspaceConfigProps, dirPath);\n      return workspaceConfig;\n    } catch (err: any) {\n      if (err instanceof InvalidBitJson || err instanceof InvalidConfigFile) {\n        const workspaceConfig = this.create(workspaceConfigProps, dirPath);\n        return workspaceConfig;\n      }\n      throw err;\n    }\n  }\n\n  /**\n   * A function that register to the legacy ensure function in order to transform old props structure\n   * to the new one\n   * @param dirPath\n   * @param standAlone\n   * @param legacyWorkspaceConfigProps\n   */\n  static async onLegacyEnsure(\n    dirPath: PathOsBasedAbsolute,\n    standAlone: boolean,\n    legacyWorkspaceConfigProps: LegacyWorkspaceConfigProps = {} as any\n  ): Promise<WorkspaceConfig> {\n    const newProps: WorkspaceConfigFileProps = transformLegacyPropsToExtensions(legacyWorkspaceConfigProps);\n    // TODO: gilad move to constants file\n    newProps.$schemaVersion = '1.0.0';\n    return WorkspaceConfig.ensure(dirPath, newProps);\n  }\n\n  static async reset(dirPath: PathOsBasedAbsolute, resetHard: boolean): Promise<void> {\n    const workspaceJsoncPath = WorkspaceConfig.composeWorkspaceJsoncPath(dirPath);\n    if (resetHard && workspaceJsoncPath) {\n      logger.info(`deleting the consumer workspace.jsonc file at ${workspaceJsoncPath}`);\n      await fs.remove(workspaceJsoncPath);\n    }\n  }\n\n  /**\n   * Get the path of the bit.jsonc file by a containing folder\n   *\n   * @static\n   * @param {PathOsBased} dirPath containing dir of the bit.jsonc file\n   * @returns {PathOsBased}\n   * @memberof WorkspaceConfig\n   */\n  static composeWorkspaceJsoncPath(dirPath: PathOsBased): PathOsBased {\n    return path.join(dirPath, WORKSPACE_JSONC);\n  }\n\n  static async pathHasWorkspaceJsonc(dirPath: PathOsBased): Promise<boolean> {\n    const isExist = await fs.pathExists(WorkspaceConfig.composeWorkspaceJsoncPath(dirPath));\n    return isExist;\n  }\n\n  /**\n   * Check if the given dir has workspace config (new or legacy)\n   * @param dirPath\n   */\n  static async isExist(dirPath: PathOsBased): Promise<boolean | undefined> {\n    const jsoncExist = await WorkspaceConfig.pathHasWorkspaceJsonc(dirPath);\n    if (jsoncExist) {\n      return true;\n    }\n    return LegacyWorkspaceConfig._isExist(dirPath);\n  }\n\n  /**\n   * Load the workspace configuration if it's exist\n   *\n   * @static\n   * @param {PathOsBased} dirPath\n   * @returns {(Promise<WorkspaceConfig | undefined>)}\n   * @memberof WorkspaceConfig\n   */\n  static async loadIfExist(dirPath: PathOsBased): Promise<WorkspaceConfig | undefined> {\n    const jsoncExist = await WorkspaceConfig.pathHasWorkspaceJsonc(dirPath);\n    if (jsoncExist) {\n      const jsoncPath = WorkspaceConfig.composeWorkspaceJsoncPath(dirPath);\n      const instance = await WorkspaceConfig._loadFromWorkspaceJsonc(jsoncPath);\n      instance.path = jsoncPath;\n      return instance;\n    }\n    const legacyConfig = await LegacyWorkspaceConfig._loadIfExist(dirPath);\n    if (legacyConfig) {\n      return WorkspaceConfig.fromLegacyConfig(legacyConfig);\n    }\n    return undefined;\n  }\n\n  static async _loadFromWorkspaceJsonc(workspaceJsoncPath: PathOsBased): Promise<WorkspaceConfig> {\n    const contentBuffer = await fs.readFile(workspaceJsoncPath);\n    let parsed;\n    try {\n      parsed = parse(contentBuffer.toString());\n    } catch (e: any) {\n      throw new InvalidConfigFile(workspaceJsoncPath);\n    }\n    return WorkspaceConfig.fromObject(parsed);\n  }\n\n  async write({ dir }: { dir?: PathOsBasedAbsolute } = {}): Promise<void> {\n    const getCalculatedDir = () => {\n      if (dir) return dir;\n      if (this._path) return path.dirname(this._path);\n      throw new ConfigDirNotDefined();\n    };\n    const calculatedDir = getCalculatedDir();\n    if (this.data) {\n      const files = await this.toVinyl(calculatedDir);\n      const dataToPersist = new DataToPersist();\n      if (files) {\n        dataToPersist.addManyFiles(files);\n        return dataToPersist.persistAllToFS();\n      }\n    }\n    await this.legacyConfig?.write({ workspaceDir: calculatedDir });\n    return undefined;\n  }\n\n  async toVinyl(workspaceDir: PathOsBasedAbsolute): Promise<AbstractVinyl[] | undefined> {\n    if (this.data) {\n      const jsonStr = stringify(this.data, undefined, 2);\n      const base = workspaceDir;\n      const fullPath = workspaceDir ? WorkspaceConfig.composeWorkspaceJsoncPath(workspaceDir) : this.path;\n      const jsonFile = new AbstractVinyl({ base, path: fullPath, contents: Buffer.from(jsonStr) });\n      return [jsonFile];\n    }\n    return this.legacyConfig?.toVinyl({ workspaceDir });\n  }\n\n  _legacyPlainObject(): { [prop: string]: any } | undefined {\n    if (this.legacyConfig) {\n      return this.legacyConfig.toPlainObject();\n    }\n    return undefined;\n  }\n\n  toLegacy(): ILegacyWorkspaceConfig {\n    let componentsDefaultDirectory = this.extension('teambit.workspace/workspace', true)?.defaultDirectory;\n    if (componentsDefaultDirectory && !componentsDefaultDirectory.includes('{name}')) {\n      componentsDefaultDirectory = `${componentsDefaultDirectory}/{name}`;\n    }\n\n    return {\n      lang: this.legacyConfig?.lang || DEFAULT_LANGUAGE,\n      defaultScope: this.extension('teambit.workspace/workspace', true)?.defaultScope,\n      _useWorkspaces: this.extension('teambit.dependencies/dependency-resolver', true)?.useWorkspaces,\n      dependencyResolver: this.extension('teambit.dependencies/dependency-resolver', true),\n      packageManager: this.extension('teambit.dependencies/dependency-resolver', true)?.packageManager,\n      _bindingPrefix: this.extension('teambit.workspace/workspace', true)?.defaultOwner,\n      _saveDependenciesAsComponents: this._legacyProps?.saveDependenciesAsComponents,\n      _dependenciesDirectory: this._legacyProps?.dependenciesDirectory,\n      componentsDefaultDirectory,\n      _resolveModules: this._legacyProps?.resolveModules,\n      _manageWorkspaces: this.extension('teambit.dependencies/dependency-resolver', true)?.manageWorkspaces,\n      defaultOwner: this.extension('teambit.workspace/workspace', true)?.defaultOwner,\n      extensions: this.extensions.toConfigObject(),\n      // @ts-ignore\n      path: this.path,\n      isLegacy: this.isLegacy,\n      write: ({ workspaceDir }) => this.write.call(this, { dir: workspaceDir }),\n      toVinyl: this.toVinyl.bind(this),\n      componentsConfig: this.legacyConfig ? this.legacyConfig?.overrides : undefined,\n      getComponentConfig: this.legacyConfig\n        ? this.legacyConfig?.overrides.getOverrideComponentData.bind(this.legacyConfig?.overrides)\n        : () => undefined,\n      _legacyPlainObject: this.legacyConfig\n        ? this.legacyConfig?.toPlainObject.bind(this.legacyConfig)\n        : () => undefined,\n    };\n  }\n}\n\nexport function transformLegacyPropsToExtensions(\n  legacyConfig: LegacyWorkspaceConfig | LegacyWorkspaceConfigProps\n): ExtensionsDefs {\n  // TODO: move to utils\n  const removeUndefined = (obj) => {\n    // const res = omit(mapObjIndexed((val) => val === undefined))(obj);\n    // return res;\n    Object.entries(obj).forEach((e) => {\n      if (e[1] === undefined) delete obj[e[0]];\n    });\n    return obj;\n  };\n\n  const workspace = removeUndefined({\n    defaultScope: legacyConfig.defaultScope,\n    defaultDirectory: legacyConfig.componentsDefaultDirectory,\n    defaultOwner: legacyConfig.bindingPrefix,\n  });\n  const dependencyResolver = removeUndefined({\n    packageManager: legacyConfig.packageManager,\n    // strictPeerDependencies: false,\n    extraArgs: legacyConfig.packageManagerArgs,\n    packageManagerProcessOptions: legacyConfig.packageManagerProcessOptions,\n    manageWorkspaces: legacyConfig.manageWorkspaces,\n    useWorkspaces: legacyConfig.useWorkspaces,\n  });\n  const variants = legacyConfig.overrides?.overrides;\n  const data = {};\n  if (workspace && !isEmpty(workspace)) {\n    data['teambit.workspace/workspace'] = workspace;\n  }\n  if (dependencyResolver && !isEmpty(dependencyResolver)) {\n    data['teambit.dependencies/dependency-resolver'] = dependencyResolver;\n  }\n  // TODO: add variants here once we have a way to pass the deps overrides and general key vals for package.json to\n  // TODO: new extensions (via dependency-resolver extension and pkg extensions)\n  // TODO: transform legacy props to new one once dependency-resolver extension and pkg extensions are ready\n  if (variants && !isEmpty(variants)) {\n    data['teambit.workspace/variants'] = variants;\n  }\n  // @ts-ignore\n  return data;\n}\n\nexport async function getWorkspaceConfigTemplateParsed(): Promise<CommentJSONValue> {\n  let fileContent: Buffer;\n  try {\n    fileContent = await fs.readFile(path.join(__dirname, 'workspace-template.jsonc'));\n  } catch (err: any) {\n    if (err.code !== 'ENOENT') throw err;\n    // when the extension is compiled by tsc, it doesn't copy .jsonc files into the dists, grab it from src\n    fileContent = await fs.readFile(path.join(__dirname, '..', 'workspace-template.jsonc'));\n  }\n  return parse(fileContent.toString());\n}\n\nexport function stringifyWorkspaceConfig(workspaceConfig: CommentJSONValue): string {\n  return stringify(workspaceConfig, undefined, 2);\n}\n"],"mappings":"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"}