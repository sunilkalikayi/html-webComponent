import { CLIMain } from '@teambit/cli';
import { Logger, LoggerMain } from '@teambit/logger';
import { Workspace } from '@teambit/workspace';
import { ComponentID } from '@teambit/component-id';
import { Component, ComponentMain } from '@teambit/component';
export declare type RemoveInfo = {
    removed: boolean;
};
export declare class RemoveMain {
    private workspace;
    private logger;
    constructor(workspace: Workspace, logger: Logger);
    remove({ componentsPattern, force, remote, track, deleteFiles, fromLane, }: {
        componentsPattern: string;
        force: boolean;
        remote: boolean;
        track: boolean;
        deleteFiles: boolean;
        fromLane: boolean;
    }): Promise<any>;
    softRemove(componentsPattern: string): Promise<ComponentID[]>;
    getRemoveInfo(component: Component): RemoveInfo;
    isRemoved(component: Component): boolean;
    /**
     * get components that were soft-removed and tagged/snapped but not exported yet.
     */
    getRemovedStaged(): Promise<ComponentID[]>;
    private getLocalBitIdsToRemove;
    private getRemoteBitIdsToRemove;
    static slots: never[];
    static dependencies: import("@teambit/harmony").Aspect[];
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static provider([workspace, cli, loggerMain, componentAspect]: [
        Workspace,
        CLIMain,
        LoggerMain,
        ComponentMain
    ]): Promise<RemoveMain>;
}
export default RemoveMain;
