"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RemoveCmd = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
function _yn() {
  const data = _interopRequireDefault(require("yn"));
  _yn = function () {
    return data;
  };
  return data;
}
function _bitError() {
  const data = require("@teambit/bit-error");
  _bitError = function () {
    return data;
  };
  return data;
}
function _prompts() {
  const data = require("@teambit/legacy/dist/prompts");
  _prompts = function () {
    return data;
  };
  return data;
}
function _loader() {
  const data = _interopRequireDefault(require("@teambit/legacy/dist/cli/loader"));
  _loader = function () {
    return data;
  };
  return data;
}
function _removeTemplate() {
  const data = _interopRequireDefault(require("@teambit/legacy/dist/cli/templates/remove-template"));
  _removeTemplate = function () {
    return data;
  };
  return data;
}
function _constants() {
  const data = require("@teambit/legacy/dist/constants");
  _constants = function () {
    return data;
  };
  return data;
}
class RemoveCmd {
  constructor(remove) {
    this.remove = remove;
    (0, _defineProperty2().default)(this, "name", 'remove <component-pattern>');
    (0, _defineProperty2().default)(this, "description", 'remove component(s) from the workspace, or a remote scope');
    (0, _defineProperty2().default)(this, "arguments", [{
      name: 'component-pattern',
      description: _constants().COMPONENT_PATTERN_HELP
    }]);
    (0, _defineProperty2().default)(this, "group", 'collaborate');
    (0, _defineProperty2().default)(this, "helpUrl", 'components/removing-components');
    (0, _defineProperty2().default)(this, "skipWorkspace", true);
    (0, _defineProperty2().default)(this, "alias", 'rm');
    (0, _defineProperty2().default)(this, "options", [['', 'soft', 'EXPERIMENTAL. mark the component as deleted. after tag/snap and export the remote will be updated'], ['r', 'remote', 'remove a component completely from a remote scope (Careful! this is a permanent change. prefer --soft and tag+export)'], ['', 'from-lane', 'revert to main if exists on currently checked out lane, otherwise, remove it'], ['t', 'track', 'keep tracking component in .bitmap (default = false), helps transform a tagged-component to new'], ['d', 'delete-files', 'DEPRECATED (this is now the default). delete local component files'], ['', 'keep-files', 'keep component files (just untrack the component)'], ['f', 'force', 'removes the component from the scope, even if used as a dependency. WARNING: components that depend on this component will corrupt'], ['s', 'silent', 'skip confirmation']]);
    (0, _defineProperty2().default)(this, "loader", true);
    (0, _defineProperty2().default)(this, "migration", true);
    (0, _defineProperty2().default)(this, "remoteOp", true);
  }
  async report([componentsPattern], {
    soft = false,
    force = false,
    remote = false,
    fromLane = false,
    track = false,
    deleteFiles = false,
    silent = false,
    keepFiles = false
  }) {
    if (soft) {
      if (remote) throw new (_bitError().BitError)(`error: --remote and --soft cannot be used together. soft delete can only be done locally, after tag/snap and export it updates the remote`);
      if (track) throw new (_bitError().BitError)(`error: please use either --soft or --track, not both`);
      if (keepFiles) throw new (_bitError().BitError)(`error: please use either --soft or --keep-files, not both`);
      if (fromLane) throw new (_bitError().BitError)(`error: please use either --soft or --from-lane, not both`);
      const removedCompIds = await this.remove.softRemove(componentsPattern);
      return `${_chalk().default.green('successfully soft-removed the following components:')}
${removedCompIds.join('\n')}

${_chalk().default.bold('to update the remote, please tag/snap and then export')}`;
    }
    if (deleteFiles) {
      _loader().default.stop();
      // eslint-disable-next-line no-console
      console.warn(_chalk().default.yellow('--delete-files flag is deprecated. by default the files are deleted, unless --keep-files was provided'));
    }
    if (!silent) {
      const willDeleteFiles = !remote && !keepFiles;
      const removePromptResult = await (0, _prompts().removePrompt)(willDeleteFiles, remote)();
      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
      if (!(0, _yn().default)(removePromptResult.shouldRemove)) {
        throw new (_bitError().BitError)('the operation has been canceled');
      }
    }
    const {
      localResult,
      remoteResult = []
    } = await this.remove.remove({
      componentsPattern,
      remote,
      force,
      track,
      deleteFiles: !keepFiles,
      fromLane
    });
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    return (0, _removeTemplate().default)(localResult, false) + this.paintArray(remoteResult);
  }
  paintArray(removedObjectsArray) {
    return removedObjectsArray.map(item => (0, _removeTemplate().default)(item, true));
  }
}
exports.RemoveCmd = RemoveCmd;

//# sourceMappingURL=remove-cmd.js.map