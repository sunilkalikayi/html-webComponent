"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ComponentCompareMain = void 0;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _cli() {
  const data = require("@teambit/cli");
  _cli = function () {
    return data;
  };
  return data;
}
function _scope() {
  const data = require("@teambit/scope");
  _scope = function () {
    return data;
  };
  return data;
}
function _graphql() {
  const data = require("@teambit/graphql");
  _graphql = function () {
    return data;
  };
  return data;
}
function _generalError() {
  const data = _interopRequireDefault(require("@teambit/legacy/dist/error/general-error"));
  _generalError = function () {
    return data;
  };
  return data;
}
function _componentsDiff() {
  const data = require("@teambit/legacy/dist/consumer/component-ops/components-diff");
  _componentsDiff = function () {
    return data;
  };
  return data;
}
function _component() {
  const data = _interopRequireDefault(require("@teambit/component"));
  _component = function () {
    return data;
  };
  return data;
}
function _componentCompare() {
  const data = require("./component-compare.graphql");
  _componentCompare = function () {
    return data;
  };
  return data;
}
function _componentCompare2() {
  const data = require("./component-compare.aspect");
  _componentCompare2 = function () {
    return data;
  };
  return data;
}
class ComponentCompareMain {
  constructor(componentAspect, scope) {
    this.componentAspect = componentAspect;
    this.scope = scope;
  }
  async compare(baseIdStr, compareIdStr) {
    const host = this.componentAspect.getHost();
    const [baseCompId, compareCompId] = await host.resolveMultipleComponentIds([baseIdStr, compareIdStr]);
    const modelComponent = await this.scope.legacyScope.getModelComponentIfExist(compareCompId._legacy);
    if (!modelComponent) {
      throw new (_generalError().default)(`component ${compareCompId.toString()} doesn't have any version yet`);
    }
    const baseVersion = baseCompId.version;
    const compareVersion = compareCompId.version;
    const repository = this.scope.legacyScope.objects;
    const baseVersionObject = await modelComponent.loadVersion(baseVersion, repository);
    const compareVersionObject = await modelComponent.loadVersion(compareVersion, repository);
    const diff = await (0, _componentsDiff().diffBetweenVersionsObjects)(modelComponent, baseVersionObject, compareVersionObject, baseVersion, compareVersion, this.scope.legacyScope, {});
    const compareResult = {
      id: `${baseCompId}-${compareCompId}`,
      code: diff.filesDiff || []
    };
    return compareResult;
  }
  static async provider([graphql, component, scope]) {
    const componentCompareMain = new ComponentCompareMain(component, scope);
    graphql.register((0, _componentCompare().componentCompareSchema)(componentCompareMain));
    return componentCompareMain;
  }
}
exports.ComponentCompareMain = ComponentCompareMain;
(0, _defineProperty2().default)(ComponentCompareMain, "slots", []);
(0, _defineProperty2().default)(ComponentCompareMain, "dependencies", [_graphql().GraphqlAspect, _component().default, _scope().ScopeAspect]);
(0, _defineProperty2().default)(ComponentCompareMain, "runtime", _cli().MainRuntime);
_componentCompare2().ComponentCompareAspect.addRuntime(ComponentCompareMain);
var _default = ComponentCompareMain;
exports.default = _default;

//# sourceMappingURL=component-compare.main.runtime.js.map