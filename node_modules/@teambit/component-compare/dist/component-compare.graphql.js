"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
require("core-js/modules/es.promise.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.componentCompareSchema = componentCompareSchema;
function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
  _defineProperty2 = function () {
    return data;
  };
  return data;
}
function _graphqlTag() {
  const data = _interopRequireDefault(require("graphql-tag"));
  _graphqlTag = function () {
    return data;
  };
  return data;
}
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function componentCompareSchema(componentCompareMain) {
  return {
    typeDefs: (0, _graphqlTag().default)`
      type FileCompareResult {
        fileName: String!
        baseContent: String!
        compareContent: String!
        status: String
        diffOutput: String
      }

      type ComponentCompareResult {
        # unique id for graphql - baseId + compareId
        id: String!
        code(fileName: String): [FileCompareResult!]!
      }

      extend type ComponentHost {
        compareComponent(baseId: String!, compareId: String!): ComponentCompareResult
      }
    `,
    resolvers: {
      ComponentHost: {
        compareComponent: async (_, {
          baseId,
          compareId
        }) => {
          return componentCompareMain.compare(baseId, compareId);
        }
      },
      ComponentCompareResult: {
        id: result => result.id,
        code: (result, {
          fileName
        }) => {
          if (fileName) {
            return result.code.filter(codeFile => codeFile.filePath === fileName).map(c => _objectSpread(_objectSpread({}, c), {}, {
              fileName: c.filePath,
              baseContent: c.fromContent,
              compareContent: c.toContent
            }));
          }
          return result.code.map(c => _objectSpread(_objectSpread({}, c), {}, {
            fileName: c.filePath,
            baseContent: c.fromContent,
            compareContent: c.toContent
          }));
        }
      }
    }
  };
}

//# sourceMappingURL=component-compare.graphql.js.map